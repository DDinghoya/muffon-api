---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/music/wild+nothing/+images?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.0p0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 301
      message: MOVED PERMANENTLY
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Location:
      - https://www.last.fm/music/Wild+Nothing/+images?page=2
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/music/wild+nothing/+images?page=2
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - lfmanon=1; Path=/
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjAwNTVkOTdjLTI4ZjYtNGFmYi1iODk4LWY5OWQ1MDJjZDJhYiJ9:1l3agd:yp8w82MwGw8fqv_RI6L0iyc7abw;
        Domain=.last.fm; expires=Mon, 24-Jan-2022 08:23:55 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Sun, 24 Jan 2021 08:23:55 GMT
      X-Served-By:
      - prod-lfm-web-55f66b8564-9h4gk, cache-hhn4043-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1611476636.640356,VS0,VE280
      Vary:
      - Cookie
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sun, 24 Jan 2021 08:23:55 GMT
- request:
    method: get
    uri: https://www.last.fm/music/Wild+Nothing/+images?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.0p0
      Cookie:
      - lfmanon=1; not_first_visit=1; sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjAwNTVkOTdjLTI4ZjYtNGFmYi1iODk4LWY5OWQ1MDJjZDJhYiJ9:1l3agd:yp8w82MwGw8fqv_RI6L0iyc7abw
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/music/Wild+Nothing/+images?page=2
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - csrftoken=ZgndhboY9ABCbaKvQ2zVdRvFOefXMmy1; expires=Sun, 23-Jan-2022 08:23:56
        GMT; Max-Age=31449600; Path=/; Secure
      - lfmanon=1; Path=/
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjAwNTVkOTdjLTI4ZjYtNGFmYi1iODk4LWY5OWQ1MDJjZDJhYiJ9:1l3age:UXRiB5JeQitevTpjX6-RWxHVdk0;
        Domain=.last.fm; expires=Mon, 24-Jan-2022 08:23:56 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Sun, 24 Jan 2021 08:23:56 GMT
      X-Served-By:
      - prod-lfm-web-55f66b8564-8qwln, cache-hhn4031-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1611476636.189491,VS0,VE198
      Vary:
      - Accept-Encoding, Cookie
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 24 Jan 2021 08:23:55 GMT
recorded_with: VCR 6.0.0
