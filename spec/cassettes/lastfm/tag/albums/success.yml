---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/tag/dream+pop/albums?page
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux-gnu x86_64) ruby/2.7.1p83
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/tag/dream+pop/albums?page=
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - csrftoken=nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU; expires=Wed, 06-Oct-2021 14:49:41
        GMT; Max-Age=31449600; Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjhjNTY4NjNhLTRjNGQtNGM0Ny05ZGM3LTI4ZTQxNWY4MWYxYyJ9:1kQAlB:yLnfD-GFM1fqIk7qf0Tj7nqyjhY;
        Domain=.last.fm; expires=Thu, 07-Oct-2021 14:49:41 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
      Accept-Ranges:
      - bytes
      - bytes
      Date:
      - Wed, 07 Oct 2020 14:49:41 GMT
      Via:
      - 1.1 varnish
      Age:
      - '0'
      X-Served-By:
      - ws341, cache-hhn4059-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1602082181.730814,VS0,VE352
      Vary:
      - Accept-Encoding, Cookie
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        





<!doctype html>
<html
    lang="en"
    class="
        no-js
        playbar-masthead-release-shim
        youtube-provider-not-ready
    "
>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge"><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"UwYPV15QGwYFXFlXDgU=",licenseKey:"0ed0ce50b0",applicationID:"5588594"};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var i=e[n]={exports:{}};t[n][0].call(i.exports,function(e){var i=t[n][1][e];return r(i||e)},i,i.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var i=0;i<n.length;i++)r(n[i]);return r}({1:[function(t,e,n){function r(t){try{c.console&&console.log(t)}catch(e){}}var i,o=t("ee"),a=t(23),c={};try{i=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(c.console=!0,i.indexOf("dev")!==-1&&(c.dev=!0),i.indexOf("nr_dev")!==-1&&(c.nrDev=!0))}catch(s){}c.nrDev&&o.on("internal-error",function(t){r(t.stack)}),c.dev&&o.on("fn-err",function(t,e,n){r(n.stack)}),c.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(c,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,c){try{p?p-=1:i(c||new UncaughtException(t,e,n),!0)}catch(f){try{o("ierr",[f,s.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function i(t,e){var n=e?null:s.now();o("err",[t,n])}var o=t("handle"),a=t(24),c=t("ee"),s=t("loader"),f=t("gos"),u=window.onerror,d=!1,l="nr@seenError",p=0;s.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(h){"stack"in h&&(t(9),t(8),"addEventListener"in window&&t(5),s.xhrWrappable&&t(10),d=!0)}c.on("fn-start",function(t,e,n){d&&(p+=1)}),c.on("fn-err",function(t,e,n){d&&!n[l]&&(f(n,l,function(){return!0}),this.thrown=!0,i(n))}),c.on("fn-end",function(){d&&!this.thrown&&p>0&&(p-=1)}),c.on("internal-error",function(t){o("ierr",[t,s.now(),!0])})},{}],3:[function(t,e,n){t("loader").features.ins=!0},{}],4:[function(t,e,n){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var i=t("ee"),o=t("handle"),a=t(9),c=t(8),s="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",l="resource",p="-start",h="-end",m="fn"+p,w="fn"+h,v="bstTimer",g="pushState",y=t("loader");y.features.stn=!0,t(7),"addEventListener"in window&&t(5);var x=NREUM.o.EV;i.on(m,function(t,e){var n=t[0];n instanceof x&&(this.bstStart=y.now())}),i.on(w,function(t,e){var n=t[0];n instanceof x&&o("bst",[n,e,this.bstStart,y.now()])}),a.on(m,function(t,e,n){this.bstStart=y.now(),this.bstType=n}),a.on(w,function(t,e){o(v,[e,this.bstStart,y.now(),this.bstType])}),c.on(m,function(){this.bstStart=y.now()}),c.on(w,function(t,e){o(v,[e,this.bstStart,y.now(),"requestAnimationFrame"])}),i.on(g+p,function(t){this.time=y.now(),this.startPath=location.pathname+location.hash}),i.on(g+h,function(t){o("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+s]?window.performance[f](u,function(t){o(d,[window.performance.getEntriesByType(l)]),window.performance["c"+s]()},!1):window.performance[f]("webkit"+u,function(t){o(d,[window.performance.getEntriesByType(l)]),window.performance["webkitC"+s]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],5:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&i(e)}function i(t){c.inPlace(t,[u,d],"-",o)}function o(t,e){return t[1]}var a=t("ee").get("events"),c=t("wrap-function")(a,!0),s=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(i(window),i(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=s(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?c(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],6:[function(t,e,n){function r(t,e,n){var r=t[e];"function"==typeof r&&(t[e]=function(){var t=o(arguments),e={};i.emit(n+"before-start",[t],e);var a;e[m]&&e[m].dt&&(a=e[m].dt);var c=r.apply(this,t);return i.emit(n+"start",[t,a],c),c.then(function(t){return i.emit(n+"end",[null,t],c),t},function(t){throw i.emit(n+"end",[t],c),t})})}var i=t("ee").get("fetch"),o=t(24),a=t(23);e.exports=i;var c=window,s="fetch-",f=s+"body-",u=["arrayBuffer","blob","json","text","formData"],d=c.Request,l=c.Response,p=c.fetch,h="prototype",m="nr@context";d&&l&&p&&(a(u,function(t,e){r(d[h],e,f),r(l[h],e,f)}),r(c,"fetch",s),i.on(s+"end",function(t,e){var n=this;if(e){var r=e.headers.get("content-length");null!==r&&(n.rxSize=r),i.emit(s+"done",[null,e],n)}else i.emit(s+"done",[t],n)}))},{}],7:[function(t,e,n){var r=t("ee").get("history"),i=t("wrap-function")(r);e.exports=r;var o=window.history&&window.history.constructor&&window.history.constructor.prototype,a=window.history;o&&o.pushState&&o.replaceState&&(a=o),i.inPlace(a,["pushState","replaceState"],"-")},{}],8:[function(t,e,n){var r=t("ee").get("raf"),i=t("wrap-function")(r),o="equestAnimationFrame";e.exports=r,i.inPlace(window,["r"+o,"mozR"+o,"webkitR"+o,"msR"+o],"raf-"),r.on("raf-start",function(t){t[0]=i(t[0],"fn-")})},{}],9:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function i(t,e,n){this.method=n,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,n)}var o=t("ee").get("timer"),a=t("wrap-function")(o),c="setTimeout",s="setInterval",f="clearTimeout",u="-start",d="-";e.exports=o,a.inPlace(window,[c,"setImmediate"],c+d),a.inPlace(window,[s],s+d),a.inPlace(window,[f,"clearImmediate"],f+d),o.on(s+u,r),o.on(c+u,i)},{}],10:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",c)}function i(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,g,"fn-",c)}function o(t){y.push(t),h&&(b?b.then(a):w?w(a):(E=-E,R.data=E))}function a(){for(var t=0;t<y.length;t++)r([],y[t]);y.length&&(y=[])}function c(t,e){return e}function s(t,e){for(var n in t)e[n]=t[n];return e}t(5);var f=t("ee"),u=f.get("xhr"),d=t("wrap-function")(u),l=NREUM.o,p=l.XHR,h=l.MO,m=l.PR,w=l.SI,v="readystatechange",g=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],y=[];e.exports=u;var x=window.XMLHttpRequest=function(t){var e=new p(t);try{u.emit("new-xhr",[e],e),e.addEventListener(v,i,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(s(p,x),x.prototype=p.prototype,d.inPlace(x.prototype,["open","send"],"-xhr-",c),u.on("send-xhr-start",function(t,e){r(t,e),o(e)}),u.on("open-xhr-start",r),h){var b=m&&m.resolve();if(!w&&!m){var E=1,R=document.createTextNode(E);new h(a).observe(R,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===v||a()})},{}],11:[function(t,e,n){function r(t){if(!c(t))return null;var e=window.NREUM;if(!e.loader_config)return null;var n=(e.loader_config.accountID||"").toString()||null,r=(e.loader_config.agentID||"").toString()||null,f=(e.loader_config.trustKey||"").toString()||null;if(!n||!r)return null;var h=p.generateSpanId(),m=p.generateTraceId(),w=Date.now(),v={spanId:h,traceId:m,timestamp:w};return(t.sameOrigin||s(t)&&l())&&(v.traceContextParentHeader=i(h,m),v.traceContextStateHeader=o(h,w,n,r,f)),(t.sameOrigin&&!u()||!t.sameOrigin&&s(t)&&d())&&(v.newrelicHeader=a(h,m,w,n,r,f)),v}function i(t,e){return"00-"+e+"-"+t+"-01"}function o(t,e,n,r,i){var o=0,a="",c=1,s="",f="";return i+"@nr="+o+"-"+c+"-"+n+"-"+r+"-"+t+"-"+a+"-"+s+"-"+f+"-"+e}function a(t,e,n,r,i,o){var a="btoa"in window&&"function"==typeof window.btoa;if(!a)return null;var c={v:[0,1],d:{ty:"Browser",ac:r,ap:i,id:t,tr:e,ti:n}};return o&&r!==o&&(c.d.tk=o),btoa(JSON.stringify(c))}function c(t){return f()&&s(t)}function s(t){var e=!1,n={};if("init"in NREUM&&"distributed_tracing"in NREUM.init&&(n=NREUM.init.distributed_tracing),t.sameOrigin)e=!0;else if(n.allowed_origins instanceof Array)for(var r=0;r<n.allowed_origins.length;r++){var i=h(n.allowed_origins[r]);if(t.hostname===i.hostname&&t.protocol===i.protocol&&t.port===i.port){e=!0;break}}return e}function f(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.enabled}function u(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.exclude_newrelic_header}function d(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&NREUM.init.distributed_tracing.cors_use_newrelic_header!==!1}function l(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.cors_use_tracecontext_headers}var p=t(20),h=t(13);e.exports={generateTracePayload:r,shouldGenerateTrace:c}},{}],12:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<l;r++)t.removeEventListener(d[r],this.listener,!1);e.aborted||(n.duration=a.now()-this.startTime,this.loadCaptureCalled||4!==t.readyState?null==e.status&&(e.status=0):o(this,t),n.cbTime=this.cbTime,u.emit("xhr-done",[t],t),c("xhr",[e,n,this.startTime]))}}function i(t,e){var n=s(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.parsedOrigin=s(e),t.sameOrigin=t.parsedOrigin.sameOrigin}function o(t,e){t.params.status=e.status;var n=w(e,t.lastSize);if(n&&(t.metrics.rxSize=n),t.sameOrigin){var r=e.getResponseHeader("X-NewRelic-App-Data");r&&(t.params.cat=r.split(", ").pop())}t.loadCaptureCalled=!0}var a=t("loader");if(a.xhrWrappable){var c=t("handle"),s=t(13),f=t(11).generateTracePayload,u=t("ee"),d=["load","error","abort","timeout"],l=d.length,p=t("id"),h=t(17),m=t(16),w=t(14),v=window.XMLHttpRequest;a.features.xhr=!0,t(10),t(6),u.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,e.loadCaptureCalled=!1,t.addEventListener("load",function(n){o(e,t)},!1),h&&(h>34||h<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),u.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),u.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid);var n=f(this.parsedOrigin);if(n){var r=!1;n.newrelicHeader&&(e.setRequestHeader("newrelic",n.newrelicHeader),r=!0),n.traceContextParentHeader&&(e.setRequestHeader("traceparent",n.traceContextParentHeader),n.traceContextStateHeader&&e.setRequestHeader("tracestate",n.traceContextStateHeader),r=!0),r&&(this.dt=n)}}),u.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],i=this;if(n&&r){var o=m(r);o&&(n.txSize=o)}this.startTime=a.now(),this.listener=function(t){try{"abort"!==t.type||i.loadCaptureCalled||(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}};for(var c=0;c<l;c++)e.addEventListener(d[c],this.listener,!1)}),u.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),u.on("xhr-load-added",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),u.on("xhr-load-removed",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),u.on("addEventListener-end",function(t,e){e instanceof v&&"load"===t[0]&&u.emit("xhr-load-added",[t[1],t[2]],e)}),u.on("removeEventListener-end",function(t,e){e instanceof v&&"load"===t[0]&&u.emit("xhr-load-removed",[t[1],t[2]],e)}),u.on("fn-start",function(t,e,n){e instanceof v&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),u.on("fn-end",function(t,e){this.xhrCbStart&&u.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,e],e)}),u.on("fetch-before-start",function(t){function e(t,e){var n=!1;return e.newrelicHeader&&(t.set("newrelic",e.newrelicHeader),n=!0),e.traceContextParentHeader&&(t.set("traceparent",e.traceContextParentHeader),e.traceContextStateHeader&&t.set("tracestate",e.traceContextStateHeader),n=!0),n}var n,r=t[1]||{};"string"==typeof t[0]?n=t[0]:t[0]&&t[0].url&&(n=t[0].url),n&&(this.parsedOrigin=s(n),this.sameOrigin=this.parsedOrigin.sameOrigin);var i=f(this.parsedOrigin);if(i&&(i.newrelicHeader||i.traceContextParentHeader))if("string"==typeof t[0]){var o={};for(var a in r)o[a]=r[a];o.headers=new Headers(r.headers||{}),e(o.headers,i)&&(this.dt=i),t.length>1?t[1]=o:t.push(o)}else t[0]&&t[0].headers&&e(t[0].headers,i)&&(this.dt=i)})}},{}],13:[function(t,e,n){var r={};e.exports=function(t){if(t in r)return r[t];var e=document.createElement("a"),n=window.location,i={};e.href=t,i.port=e.port;var o=e.href.split("://");!i.port&&o[1]&&(i.port=o[1].split("/")[0].split("@").pop().split(":")[1]),i.port&&"0"!==i.port||(i.port="https"===o[0]?"443":"80"),i.hostname=e.hostname||n.hostname,i.pathname=e.pathname,i.protocol=o[0],"/"!==i.pathname.charAt(0)&&(i.pathname="/"+i.pathname);var a=!e.protocol||":"===e.protocol||e.protocol===n.protocol,c=e.hostname===document.domain&&e.port===n.port;return i.sameOrigin=a&&(!e.hostname||c),"/"===i.pathname&&(r[t]=i),i}},{}],14:[function(t,e,n){function r(t,e){var n=t.responseType;return"json"===n&&null!==e?e:"arraybuffer"===n||"blob"===n||"json"===n?i(t.response):"text"===n||""===n||void 0===n?i(t.responseText):void 0}var i=t(16);e.exports=r},{}],15:[function(t,e,n){function r(){}function i(t,e,n){return function(){return o(t,[f.now()].concat(c(arguments)),e?null:this,n),e?void 0:this}}var o=t("handle"),a=t(23),c=t(24),s=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],l="api-",p=l+"ixn-";a(d,function(t,e){u[e]=i(l+e,!0,"api")}),u.addPageAction=i(l+"addPageAction",!0),u.setCurrentRouteName=i(l+"routeName",!0),e.exports=newrelic,u.interaction=function(){return(new r).get()};var h=r.prototype={createTracer:function(t,e){var n={},r=this,i="function"==typeof e;return o(p+"tracer",[f.now(),t,n],r),function(){if(s.emit((i?"":"no-")+"fn-start",[f.now(),r,i],n),i)try{return e.apply(this,arguments)}catch(t){throw s.emit("fn-err",[arguments,this,t],n),t}finally{s.emit("fn-end",[f.now()],n)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){h[e]=i(p+e)}),newrelic.noticeError=function(t,e){"string"==typeof t&&(t=new Error(t)),o("err",[t,f.now(),!1,e])}},{}],16:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],17:[function(t,e,n){var r=0,i=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);i&&(r=+i[1]),e.exports=r},{}],18:[function(t,e,n){function r(){return c.exists&&performance.now?Math.round(performance.now()):(o=Math.max((new Date).getTime(),o))-a}function i(){return o}var o=(new Date).getTime(),a=o,c=t(25);e.exports=r,e.exports.offset=a,e.exports.getLastTimestamp=i},{}],19:[function(t,e,n){function r(t,e){var n=t.getEntries();n.forEach(function(t){"first-paint"===t.name?d("timing",["fp",Math.floor(t.startTime)]):"first-contentful-paint"===t.name&&d("timing",["fcp",Math.floor(t.startTime)])})}function i(t,e){var n=t.getEntries();n.length>0&&d("lcp",[n[n.length-1]])}function o(t){t.getEntries().forEach(function(t){t.hadRecentInput||d("cls",[t])})}function a(t){if(t instanceof h&&!w){var e=Math.round(t.timeStamp),n={type:t.type};e<=l.now()?n.fid=l.now()-e:e>l.offset&&e<=Date.now()?(e-=l.offset,n.fid=l.now()-e):e=l.now(),w=!0,d("timing",["fi",e,n])}}function c(t){d("pageHide",[l.now(),t])}if(!("init"in NREUM&&"page_view_timing"in NREUM.init&&"enabled"in NREUM.init.page_view_timing&&NREUM.init.page_view_timing.enabled===!1)){var s,f,u,d=t("handle"),l=t("loader"),p=t(22),h=NREUM.o.EV;if("PerformanceObserver"in window&&"function"==typeof window.PerformanceObserver){s=new PerformanceObserver(r);try{s.observe({entryTypes:["paint"]})}catch(m){}f=new PerformanceObserver(i);try{f.observe({entryTypes:["largest-contentful-paint"]})}catch(m){}u=new PerformanceObserver(o);try{u.observe({type:"layout-shift",buffered:!0})}catch(m){}}if("addEventListener"in document){var w=!1,v=["click","keydown","mousedown","pointerdown","touchstart"];v.forEach(function(t){document.addEventListener(t,a,!1)})}p(c)}},{}],20:[function(t,e,n){function r(){function t(){return e?15&e[n++]:16*Math.random()|0}var e=null,n=0,r=window.crypto||window.msCrypto;r&&r.getRandomValues&&(e=r.getRandomValues(new Uint8Array(31)));for(var i,o="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",a="",c=0;c<o.length;c++)i=o[c],"x"===i?a+=t().toString(16):"y"===i?(i=3&t()|8,a+=i.toString(16)):a+=i;return a}function i(){return a(16)}function o(){return a(32)}function a(t){function e(){return n?15&n[r++]:16*Math.random()|0}var n=null,r=0,i=window.crypto||window.msCrypto;i&&i.getRandomValues&&Uint8Array&&(n=i.getRandomValues(new Uint8Array(31)));for(var o=[],a=0;a<t;a++)o.push(e().toString(16));return o.join("")}e.exports={generateUuid:r,generateSpanId:i,generateTraceId:o}},{}],21:[function(t,e,n){function r(t,e){if(!i)return!1;if(t!==i)return!1;if(!e)return!0;if(!o)return!1;for(var n=o.split("."),r=e.split("."),a=0;a<r.length;a++)if(r[a]!==n[a])return!1;return!0}var i=null,o=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var c=navigator.userAgent,s=c.match(a);s&&c.indexOf("Chrome")===-1&&c.indexOf("Chromium")===-1&&(i="Safari",o=s[1])}e.exports={agent:i,version:o,match:r}},{}],22:[function(t,e,n){function r(t){function e(){t(a&&document[a]?document[a]:document[i]?"hidden":"visible")}"addEventListener"in document&&o&&document.addEventListener(o,e,!1)}e.exports=r;var i,o,a;"undefined"!=typeof document.hidden?(i="hidden",o="visibilitychange",a="visibilityState"):"undefined"!=typeof document.msHidden?(i="msHidden",o="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(i="webkitHidden",o="webkitvisibilitychange",a="webkitVisibilityState")},{}],23:[function(t,e,n){function r(t,e){var n=[],r="",o=0;for(r in t)i.call(t,r)&&(n[o]=e(r,t[r]),o+=1);return n}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],24:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,i=n-e||0,o=Array(i<0?0:i);++r<i;)o[r]=t[e+r];return o}e.exports=r},{}],25:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(t,e,n){function r(){}function i(t){function e(t){return t&&t instanceof r?t:t?s(t,c,o):o()}function n(n,r,i,o){if(!l.aborted||o){t&&t(n,r,i);for(var a=e(i),c=m(n),s=c.length,f=0;f<s;f++)c[f].apply(a,r);var d=u[y[n]];return d&&d.push([x,n,r,a]),a}}function p(t,e){g[t]=m(t).concat(e)}function h(t,e){var n=g[t];if(n)for(var r=0;r<n.length;r++)n[r]===e&&n.splice(r,1)}function m(t){return g[t]||[]}function w(t){return d[t]=d[t]||i(n)}function v(t,e){f(t,function(t,n){e=e||"feature",y[n]=e,e in u||(u[e]=[])})}var g={},y={},x={on:p,addEventListener:p,removeEventListener:h,emit:n,get:w,listeners:m,context:e,buffer:v,abort:a,aborted:!1};return x}function o(){return new r}function a(){(u.api||u.feature)&&(l.aborted=!0,u=l.backlog={})}var c="nr@context",s=t("gos"),f=t(23),u={},d={},l=e.exports=i();l.backlog=u},{}],gos:[function(t,e,n){function r(t,e,n){if(i.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(o){}return t[e]=r,r}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){i.buffer([t],r),i.emit(t,e,n)}var i=t("ee").get("handle");e.exports=r,r.ee=i},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,o,function(){return i++})}var i=1,o="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!b++){var t=x.info=NREUM.info,e=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return f.abort();s(g,function(e,n){t[e]||(t[e]=n)});var n=a();c("mark",["onload",n+x.offset],null,"api"),c("timing",["load",n]);var r=l.createElement("script");r.src="https://"+t.agent,e.parentNode.insertBefore(r,e)}}function i(){"complete"===l.readyState&&o()}function o(){c("mark",["domContent",a()+x.offset],null,"api")}var a=t(18),c=t("handle"),s=t(23),f=t("ee"),u=t(21),d=window,l=d.document,p="addEventListener",h="attachEvent",m=d.XMLHttpRequest,w=m&&m.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var v=""+location,g={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1184.min.js"},y=m&&w&&w[p]&&!/CriOS/.test(navigator.userAgent),x=e.exports={offset:a.getLastTimestamp(),now:a,origin:v,features:{},xhrWrappable:y,userAgent:u};t(15),t(19),l[p]?(l[p]("DOMContentLoaded",o,!1),d[p]("load",r,!1)):(l[h]("onreadystatechange",i),d[h]("onload",r)),c("mark",["firstbyte",a.getLastTimestamp()],null,"api");var b=0},{}],"wrap-function":[function(t,e,n){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var i=t("ee"),o=t(24),a="nr@original",c=Object.prototype.hasOwnProperty,s=!1;e.exports=function(t,e){function n(t,e,n,i){function nrWrapper(){var r,a,c,s;try{a=this,r=o(arguments),c="function"==typeof n?n(r,a):n||{}}catch(f){l([f,"",[r,a,i],c])}u(e+"start",[r,a,i],c);try{return s=t.apply(a,r)}catch(d){throw u(e+"err",[r,a,d],c),d}finally{u(e+"end",[r,a,s],c)}}return r(t)?t:(e||(e=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,e,i,o){i||(i="");var a,c,s,f="-"===i.charAt(0);for(s=0;s<e.length;s++)c=e[s],a=t[c],r(a)||(t[c]=n(a,f?c+i:i,o,c))}function u(n,r,i){if(!s||e){var o=s;s=!0;try{t.emit(n,r,i,e)}catch(a){l([a,n,r,i])}s=o}}function d(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){l([r])}for(var i in t)c.call(t,i)&&(e[i]=t[i]);return e}function l(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=i),n.inPlace=f,n.flag=a,n}},{}]},{},["loader",2,12,4,3]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"0ed0ce50b0","applicationID":"5588594","transactionName":"Y1BRbUUFWkMEWxYMV1oadUxZB0BZClZNCV5ZG0RcVUpDRxIWAxVIRxtHWFBKQlkATxFfeVhXRlREN0FSFVkFABZTUEc=","queueTime":0,"applicationTime":199,"agent":""}</script>
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title aria-live="assertive">Top dream pop albums | Last.fm</title>

        
    <link rel="canonical" href="https://www.last.fm/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="en" href="https://www.last.fm/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="de" href="https://www.last.fm/de/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="es" href="https://www.last.fm/es/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="fr" href="https://www.last.fm/fr/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="it" href="https://www.last.fm/it/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ja" href="https://www.last.fm/ja/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pl" href="https://www.last.fm/pl/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pt" href="https://www.last.fm/pt/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ru" href="https://www.last.fm/ru/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="sv" href="https://www.last.fm/sv/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="tr" href="https://www.last.fm/tr/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="zh" href="https://www.last.fm/zh/tag/dream+pop/albums" data-replaceable-head-tag />
    
    <link rel="alternate" hreflang="x-default" href="https://www.last.fm/tag/dream+pop/albums" data-replaceable-head-tag />


        
            
                
                
                
    <meta name="description" content="Browse the top dream pop albums to find new music and discover artists. Scrobble songs to get recommendations on tracks you might like." data-replaceable-head-tag>

    <meta property="og:title"           content="Top dream pop albums | Last.fm" data-replaceable-head-tag>
    <meta property="og:description"     content="Browse the top dream pop albums to find new music and discover artists. Scrobble songs to get recommendations on tracks you might like." data-replaceable-head-tag>
    <meta property="og:type"            content="website" data-replaceable-head-tag>
    <meta property="og:site_name"       content="Last.fm" data-replaceable-head-tag>
    <meta property="og:url"             content="https://www.last.fm/tag/dream+pop/albums?page=" data-replaceable-head-tag />
    <meta property="og:image"           content="https://www.last.fm/static/images/lastfm_logo_facebook.15d8133be114.png" data-replaceable-head-tag>
    <meta property="og:image:width"     content="1200" data-replaceable-head-tag>
    <meta property="og:image:height"    content="630" data-replaceable-head-tag>

    <meta name="twitter:title"          content="Top dream pop albums | Last.fm" data-replaceable-head-tag>
    <meta name="twitter:description"    content="Browse the top dream pop albums to find new music and discover artists. Scrobble songs to get recommendations on tracks you might like." data-replaceable-head-tag>
    <meta name="twitter:image"          content="https://www.last.fm/static/images/lastfm_avatar_twitter.52a5d69a85ac.png" data-replaceable-head-tag>
    <meta name="twitter:card"           content="summary" data-replaceable-head-tag>
    <meta name="twitter:site"           content="@lastfm" data-replaceable-head-tag>

    <link rel="apple-music-app-icon" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />
    <link rel="apple-touch-icon-precomposed" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />
    <link rel="apple-touch-icon" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />

    

            
        

        

        <script>(function(e) { e.className = e.className.replace(/\bno-js\b/,'js'); })(document.documentElement)</script>

        

        
            
<script
    id="initial-tealium-data"
    data-tealium-data="{&#34;siteSection&#34;: &#34;tag&#34;, &#34;pageType&#34;: &#34;tag_albums&#34;, &#34;pageName&#34;: &#34;tag/albums&#34;, &#34;nativeEventTracking&#34;: true, &#34;userState&#34;: &#34;not authenticated&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;ipGeo&#34;: &#34;BY&#34;, &#34;pageViewGuid&#34;: &#34;004f48f2-8eb7-4bd9-af74-8e5c34f616c4&#34;}"
    data-tealium-environment="prod"
></script>
<script>
    var initialTealiumElement = document.getElementById('initial-tealium-data');
    window.utag_data = JSON.parse(initialTealiumElement.getAttribute('data-tealium-data'));
</script>
        

        <link rel="icon" href="/static/images/favicon.702b239b6194.ico">

        <link rel="stylesheet" href="/static/styles/build/2ab98905c6.2ab98905c68b.css" data-stylesheet-name="defaults" charset="utf-8">

        
            <link rel="stylesheet" href="/static/styles/build/06c10e950e.06c10e950e30.css" data-stylesheet-name="app" charset="utf-8">
        

        
    
        <link rel="stylesheet" href="/static/styles/build/3956e7df02.3956e7df0257.css" data-stylesheet-name="page-specific" charset="utf-8">
    


        <script
            src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js"
            
                data-domain-script="d9f750da-0271-4142-9b0e-43d9a3b334d1"
            
        ></script>

        
            
    
    
        <script async data-main="/static/js-build/init.97e65ba528a5" src="/static/js-build/lib/require/require.53bc64c729e9.js"></script>
    

        

        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
    </head>
    <body
        class="
            
    two-column-layout

            anhv1
            namespace--tag_albums
            
        "
        data-require="ads/page-ads,ads/searchlinks,player/playlink-handler,dev/grid-overlay,dev/toggle-version,dev/debug-log,dev/debug-image-analysis,dev/js-log,dev/ads-toggle,components/link-block,components/ajax-form,core/media-size-events-v2"
        data-player-supported="true"
        data-country-code="BY"
        data-initial-view-guid="004f48f2-8eb7-4bd9-af74-8e5c34f616c4"data-cbsi-player-config="/static/config/video-player.015786d691c2.xml"data-sensitive-path-regex="^/(../)?(googlec3ea1b252774e1ab\.html|account_deleted|inbox|join|login|lostpassword(/confirm)?|staff|subscribe|support(?!/images|/shouts|/shout)|settings/(account|website|subscription|password|lostpassword)|user/.+?/support)(/.*)?/?$"
        data-facebook-placement-id="195612451022080_220502155199776"
        data-google-maps-api-key="AIzaSyBX6-IE3lz4PpJUSBVIo_dPb0BAyMgi-VE"
        
            data-onetrust-prod
        
    >
        <div
            data-require="components/loading-indicator"
            data-loading-indicator-copy="Loading…"
        ></div>
        <div
            data-require="components/open-modal,components/submit-to-modal,components/show-alert"
            data-show-alert-ok-copy="Okay"
        ></div>
        

    
        <div class="top-bar">
            
                
                    
    <section
        data-require="player/controls,player/status,player/tracking"
        data-player-status-ad-playing="Ad playing"
        data-player-status-inactive="&nbsp;"
        data-player-status-loading-spotify="Connecting Spotify…"
        data-player-status-spotify-auth-error="Could not authenticate with Spotify."

        data-player-error-cannot-play-item="Cannot play that item."
        data-player-error-track-unavailable="Track unavailable."
        data-player-modal-title="Play video"

        

        class="
            player-bar
            inactive
        "
        aria-label="audio player"
        aria-disabled="true"
    >
        <div class="player-bar-inner-wrap">
            <a class="player-bar-artwork js-artwork">
                <img class="" src="/static/images/defaults/player_default_album.430223706b14.png" alt="" />
            </a>

            <span class="
                player-bar-source
                player-bar-source--spotify
            ">Playing via Spotify</span>

            <span class="
                player-bar-source
                player-bar-source--youtube
            ">Playing via YouTube</span>

            <div class="source-info">
                <button
                    class="player-bar-playback-options-button"
                    data-disclose-hover
                    aria-controls="player-bar-playback-options"
                >
                    Playback options
                </button>
                <div
                    id="player-bar-playback-options"
                    class="
                        player-bar-playback-options-wrap
                        disclose-hide
                    "
                >
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-spotify
                    ">
                        <li class="dropdown-menu-non-interactive-item-dark">
                            <span class="player-bar-listening-on-heading">Listening on…</span>
                            <span class="
                                player-bar-listening-on
                                js-player-bar-listening-on
                            "></span>
                        </li>
                        <li><button class="
                            dropdown-menu-item-dark
                            js-switch-device
                            player-bar-playback-options-switch-device
                        ">Switch Spotify device</button></li>
                        <li><a
                            class="
                                js-source
                                dropdown-menu-item-dark
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open in Spotify Web Player</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="https://secure.last.fm/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-youtube
                    ">
                        <li><a
                            class="
                                dropdown-menu-item-dark
                                js-source
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open on YouTube website</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="https://secure.last.fm/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                </div>
            </div>

            

            <div class="player-bar-controls">

                <ul aria-label="controls" class="media-controls">
                    <li>
                        <button
                            disabled
                            class="
                                js-previous
                                player-bar-btn
                                player-bar-btn--previous
                            "
                            data-analytics-action="PlaybarBackTrack"
                        >
                            Previous
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-play-pause
                                player-bar-btn
                                player-bar-btn--play
                            "
                            data-string-pause="Pause"
                            data-analytics-action="PlaybarResumeTrack"
                            data-analytics-action-pause="PlaybarPauseTrack"
                        >
                            Play
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-next
                                player-bar-btn
                                player-bar-btn--next
                            "
                            data-analytics-action="PlaybarSkipTrack"
                        >
                            Next
                        </button>
                    </li>
                    
                </ul>

                <a class="
                        player-bar-skiplink
                        player-bar-skiplink--youtube
                    "
                    href="#youtube-video"
                >Skip to YouTube video</a>

            </div>

            <div class="player-bar-now-playing">
                <div class="player-bar-now-playing-inner-wrap">
                    <p
                        class="player-bar-track js-player-status"
                        aria-label="now playing"
                        aria-live="polite"
                        aria-atomic="true"
                    >
                        Loading player…
                    </p>

                    <p class="player-bar-error js-player-error player-bar-status--hide">
                        <span class="player-bar-error-message js-player-error-message"></span>
                    </p>
                </div>
            </div>
        </div>

        
        <div class="player-bar-progress-wrap">
            <div
                class="player-bar-progress"
                aria-label="progress"
                role="timer"
            >
                <div
                    class="
                        js-progress-slug
                        player-bar-progress-slug
                    "
                >
                    <span
                        class="
                            js-progress-remaining
                            player-bar-progress-remaining
                        "
                        aria-label="remaining"
                    ></span>
                </div>
            </div>
        </div>

        <div data-require="player/scrobble-client"></div>
    </section>

                    
    <div
        class="
            masthead-popup
            masthead-popup--spotify-scrobbling
            masthead-popup--hidden
        "
        data-require="components/spotify-scrobbling-prompt,components/alert-dismissable,components/spotify-scrobbling-banner"
        data-spotify-scobbling-success-modal="/socialmodal/spotify-scrobbling-success"
        data-spotify-scobbling-fail-modal="/socialmodal/spotify-scrobbling-fail"
    >
        <div class="masthead-popup-inner">
            <h3>Scrobble from Spotify?</h3>
            <p>Connect your Spotify account to your Last.fm account and scrobble everything you listen to, from any Spotify app on any device or platform.</p>
            <p>
                <a
                    class="btn-primary js-setup-spotify-scrobbling"
                    href="/settings/applications"
                >
                    Connect to Spotify
                </a>
            </p>
            <a
                href="/nagbar/dismiss/spotify-scrobbling-prompt?period=permanent"
                class="masthead-popup-close js-alert-dismissable-close"
                data-close-ajax
            >
                Dismiss
            </a>
        </div>
    </div>

                
            
        </div>
    

    <div id="content" class="main-content" role="main" aria-live="polite">
        
    

    <div id="tlmdata" hidden class="hidden"
         data-tealium-data='{&#34;siteSection&#34;: &#34;tag&#34;, &#34;pageType&#34;: &#34;tag_albums&#34;, &#34;pageName&#34;: &#34;tag/albums&#34;, &#34;nativeEventTracking&#34;: true, &#34;userState&#34;: &#34;not authenticated&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;ipGeo&#34;: &#34;BY&#34;}'>
     </div>

        <div
            
                
            
            
            >
            
    <div
        data-require="components/disclose-base,components/disclose-autoclose-v2,components/disclose-dropdown-v2,components/disclose-dropdown-location-picker-v2,components/disclose-collapsing-nav-v2,components/disclose-artwork,components/disclose-remove,components/disclose-search,components/disclose-hover-v3,components/disclose-select,components/disclose-lazy-buylinks,components/focus-controls,components/prevent-resubmit-v2,components/edit-scrobble,components/toggle-buttons,components/click-proxy,components/bookmark-notification"
    ></div>

    
        

    <nav class="masthead"><div class="masthead-inner-wrap"><div class="masthead-logo"><span class="masthead-logo-loading"></span><a href="/"> Last.fm</a></div><a
        class="masthead-search-toggle" href="/search" data-disclose-search aria-controls="masthead-search">Search</a><form
        class=" masthead-search-form disclose-hide disclose-hide--js-only " id="masthead-search" action="/search" method="get"><div class="masthead-search-inner-wrap"><label for="masthead-search-field" class="sr-only">Search</label><input
                id="masthead-search-field" class="masthead-search-field" type="text" name="q" placeholder="Search for music…" /><button class="masthead-search-submit" type="submit">Search</button></div></form><div class="visible-xs"><button
                        class=" masthead-hamburger-toggle " data-disclose-autoclose aria-controls="masthead-nav">Toggle navigation</button><ul
                        class=" masthead-nav disclose-hide disclose-hide--js-only " aria-label="Primary navigation" id="masthead-nav"><li class="masthead-nav-item masthead-nav-pro"><a
                class="masthead-nav-control masthead-pro-text" href="/pro" data-analytics-label="subscribe" data-analytics-action="UserMenuClick">Upgrade to Pro</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/charts" data-analytics-action="NavigationLink" data-analytics-label="charts">Charts</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li>
    
        
            <li class="masthead-nav-item">
                <a
                    class="masthead-nav-control"
                    href="/pro"
                    data-analytics-label="subscribe"
                    data-analytics-action="UserMenuClick"
                >Subscribe</a>
            </li>
        
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="/join"
                data-analytics-action="SignUpClick"
            >Join</a>
        </li>
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="https://secure.last.fm/login"
            >Login</a>
        </li>
    
</ul></div><div
                    class=" navlist navlist--more masthead-nav hidden-xs " data-require="components/primary-nav" data-more-string="More…"><ul
                        class="js-navlist-items navlist-items" aria-label="Primary navigation"><li class="masthead-nav-item masthead-nav-pro"><a
                class="masthead-nav-control masthead-pro-text" href="/pro" data-analytics-label="subscribe" data-analytics-action="UserMenuClick">Upgrade to Pro</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/charts" data-analytics-action="NavigationLink" data-analytics-label="charts">Charts</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li></ul></div><ul
            class=" site-auth site-auth--anon hidden-xs ">
    <li class="site-auth-item"><a
                class="site-auth-control" href="/join" data-analytics-action="SignUpClick">Join</a></li><li class="site-auth-item"><a
                class="site-auth-control" href="https://secure.last.fm/login">Login</a></li>
</ul></div></nav>

    

    

    

    

    

    
    


    
    


    
    


    

    

    
    <div
        class="nag-bar nag-bar--plybar-masthead-release-warning "
        
        role="status"
    >
        <div class="container">
            
            <p class="nag-bar-message ">
                
        A new version of Last.fm is available, to keep everything running smoothly, please <a href="javascript:window.location.reload()">reload</a> the site.
    
            </p>
        </div>
    </div>


    

    

    
    

    
        
    


    
    




    
    

    <header class="
        header
        
        
            header--sub-page
        
        
            header--tag
        
        
    ">
        
            <div
                class="
                    header-background
                    header-background--has-image
                "
                style="background-image: url(https://lastfm.freetls.fastly.net/i/u/ar0/7a743d1c236649e4c9c3ee5d79f5af68.jpg);"
            ></div>
        

        
    
    <div
        class="
            recommended-next-page-container
            recommended-next-page-container--desktop-expanded
            recommended-next-page-container--mobile-hidden
        "
        data-require="components/recommended-next-page">
        
    
    <div class="js-link-block recommended-next-page recommended-next-page--tag">
        <img src="https://lastfm.freetls.fastly.net/i/u/avatar70s/dc3c775e076d40cac0124c80b258365c.jpg" class="recommended-next-page-image" alt="" />
        <div class="recommended-next-page-details">
            <h4 class="recommended-next-page-title">
                Recommended next
            </h4>
            
                <a href="/tag/shoegaze" class="link-block-target recommended-next-page-name-unified">shoegaze</a>
                <a href="/tag/shoegaze" class="link-block-target recommended-next-page-name">shoegaze</a>
            
        </div>
        <span class="recommended-next-button"></span>
        <a
            class="js-link-block-cover-link recommended-next-page-cover-link"
            href="/tag/shoegaze"
            tabindex="-1"
            aria-hidden="true"
            data-analytics-action="RecommendedNextClick"
            ></a>
    </div>
    

    </div>
    


        <div class="container">
            <div class="header-inner-wrap">
                
                <div class="header-info">
                    
    <div class="header-info-primary header-info-primary--with-columns">
        
    
        
    
    <section class="share-mobile">
        <button
            aria-controls="share-5f0a6899-094a-4b71-b804-cd6d2eca9967"
            aria-expanded="false"
            data-disclose-dropdown
            data-dropdown-layout-at="center bottom+5"
            class="
                disclose-trigger
                share-button
            "
            data-analytics-action="ShareShowOptions"
        >
            Share…
        </button>

        <div
            id="share-5f0a6899-094a-4b71-b804-cd6d2eca9967"
            class="
                disclose-hide
                disclose-hide--js-only
                share-block
            "
        >
            
            
    <h2 class="share-heading">
        
            Share this tag:
        
    </h2>

            
    <ul class="share-options">
        <li class="share-option">
            <a
                href="https://www.facebook.com/sharer/sharer.php?ref=facebooklink&amp;u=https://www.last.fm/tag/dream%2Bpop/albums?page="
                data-analytics-social="2"
                target="_blank"
                class="share-facebook"
            >
                Facebook
            </a>
        </li>
        <li class="share-option">
            <a
                href="https://twitter.com/intent/tweet?url=https://www.last.fm/tag/dream%2Bpop/albums?page=&amp;via=lastfm&amp;lang=en&amp;text=Check+out+dream+pop"
                data-analytics-social="8"
                target="_blank"
                class="share-twitter"
            >
                Twitter
            </a>
        </li>
    </ul>

        
        </div>
    </section>

    


        <div class="header-info-primary-col1">
            <div class="header-title-column-ellipsis-wrap">
                <h1 class="header-title"><a href="/tag/dream+pop">Dream pop music</a></h1>
            </div>

            
    
        
    <nav
        class="
            
                navlist
            
            secondary-nav
            
                navlist--more
            
            
        "
        aria-label="Secondary navigation"
        
            data-require="components/collapsing-nav-v2"
            data-more-string="More…"
        
    >
        <ul class="navlist-items js-navlist-items">
            <li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--overview
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop"
                            
                        >
                            Overview
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--artists
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/artists"
                            
                        >
                            Artists
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--albums
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                                    secondary-nav-item-link--active
                                
                            "
                            href="/tag/dream+pop/albums"
                            
                        >
                            Albums
                            
                                <span class="sr-only">(current section)</span>
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--tracks
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/tracks"
                            
                        >
                            Tracks
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--wiki
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/wiki"
                            
                        >
                            Wiki
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--shoutbox
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/shoutbox"
                            
                        >
                            Shouts
                            
                        </a></li>
        </ul>
    </nav>

    

        </div>
    </div>

                </div>
            </div>
        </div>
    </header>



    
    <div id="mantle_skin" class="adaptive-skin-container">
        <div class="adaptive-skin-wrapper">
            <div id="adSkinLeft" class="adaptive-skin-left"></div>
            <div id="adSkinRight" class="adaptive-skin-right"></div>
        </div>
        
    
        
        
        
    


        

        
    <div class="content-top">
        <div class="content-top-inner-wrap">
            
                
    
        
        
            <div id="leader_plus_top" data-ad="leader_plus_top" class="leader_plus_top lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;leader_plus_top&#34;, &#34;sizes&#34;: [[728, 90], [970, 66], [970, 250], [728, 91]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
    

                
                    
    
        
        
            <div id="mobile_pos_1" data-ad="mobile_pos_1" class="mobile_pos_1 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_1&#34;, &#34;sizes&#34;: [[300, 250], [320, 50]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;1&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mobile_pos_1">
                Don't want to see ads? <a href="/pro" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Upgrade Now</a>
            </p>
        
    

                
            

            <div class="container content-top-lower">
                
                    


                

                

                
                    
                        <h1 class="content-top-header">
                            
    Dream Pop Albums

                        </h1>
                    
                

                

                
            </div>
        </div>
    </div>


        
    <div class="container page-content">
        
    <div class="row">
        <div class="col-main">
            
                <section id="artist-albums-section">
                    
    

    
    
    
    <ol
        class="
            
            resource-list--release-list
            resource-list--release-list--with-20
        "
        
    >
        
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Lana+Del+Rey/Honeymoon"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Honeymoon</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Lana+Del+Rey"
            
            
                itemprop="url"
            
        >Lana Del Rey</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            346,017 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                17 Sep 2015 ·
                14 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/0256f9c7068d0edb75a477c596cc9787.jpg"
            alt="Honeymoon"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Lana+Del+Rey/Honeymoon"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-fae66c03-98eb-40a4-9b10-2a00fa41bad5"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Lana+Del+Rey/Honeymoon/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-fae66c03-98eb-40a4-9b10-2a00fa41bad5"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Lana+Del+Rey/Honeymoon"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Lana+Del+Rey/Paradise"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Paradise</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Lana+Del+Rey"
            
            
                itemprop="url"
            
        >Lana Del Rey</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            212,789 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                1 Jan 2012 ·
                8 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/76106f63a6085261f65c81a5d41a3292.jpg"
            alt="Paradise"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Lana+Del+Rey/Paradise"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-e56b6d73-3870-49d5-921c-3400bcd90cce"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Lana+Del+Rey/Paradise/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-e56b6d73-3870-49d5-921c-3400bcd90cce"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Lana+Del+Rey/Paradise"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Navigatoria"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Navigatoria</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
            
            
                itemprop="url"
            
        >志方あきこ</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            4,571 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                20 Jul 2005 ·
                11 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/6df0a419239ec0247be760f6d0f7e522.jpg"
            alt="Navigatoria"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Navigatoria"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-78a827f5-5ba2-4dde-a8ec-1630b32c491a"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Navigatoria/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-78a827f5-5ba2-4dde-a8ec-1630b32c491a"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Navigatoria"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Slowdive/Souvlaki"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Souvlaki</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Slowdive"
            
            
                itemprop="url"
            
        >Slowdive</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            476,707 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                17 May 1993 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/1863c131c717666e030c94880e1cce53.jpg"
            alt="Souvlaki"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Slowdive/Souvlaki"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-1fe32c85-53d5-47cd-b70f-f69190f8c5c5"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/Souvlaki/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-1fe32c85-53d5-47cd-b70f-f69190f8c5c5"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Slowdive/Souvlaki"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/My+Bloody+Valentine/Loveless"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Loveless</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                itemprop="url"
            
        >My Bloody Valentine</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            722,355 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                25 Oct 1991 ·
                11 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/64d919cd14624a56a4441e045246fab4.jpg"
            alt="Loveless"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/My+Bloody+Valentine/Loveless"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-fbfc0bae-6e01-45cb-8f38-600db7b073f5"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/Loveless/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-fbfc0bae-6e01-45cb-8f38-600db7b073f5"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/My+Bloody+Valentine/Loveless"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Cocteau+Twins/Treasure"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Treasure</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Cocteau+Twins"
            
            
                itemprop="url"
            
        >Cocteau Twins</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            249,680 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                1 Oct 1984 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/a9e76f2e8c9b4528a24d50af9e8f26fb.jpg"
            alt="Treasure"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Cocteau+Twins/Treasure"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-411b85a4-3094-4e8e-8658-cf3192fa8020"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/Treasure/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-411b85a4-3094-4e8e-8658-cf3192fa8020"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Cocteau+Twins/Treasure"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Raka"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Raka</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
            
            
                itemprop="url"
            
        >志方あきこ</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            5,338 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                25 Oct 2006 ·
                12 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/415f18b3061fc9d355684d303067a809.jpg"
            alt="Raka"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Raka"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-b165747f-827e-46c1-876d-b919614e84a2"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Raka/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-b165747f-827e-46c1-876d-b919614e84a2"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Raka"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Cocteau+Twins/Heaven+or+Las+Vegas"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Heaven or Las Vegas</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Cocteau+Twins"
            
            
                itemprop="url"
            
        >Cocteau Twins</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            125,264 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                21 Aug 1990 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/cb986ce168b3283409c2f68f7af577ec.jpg"
            alt="Heaven or Las Vegas"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Cocteau+Twins/Heaven+or+Las+Vegas"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-bb14742e-ed96-49c1-98af-8e8ce9cca7b2"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/Heaven+or+Las+Vegas/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-bb14742e-ed96-49c1-98af-8e8ce9cca7b2"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Cocteau+Twins/Heaven+or+Las+Vegas"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Beach+House/Teen+Dream"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Teen Dream</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Beach+House"
            
            
                itemprop="url"
            
        >Beach House</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            777,183 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                22 Jan 2010 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/4b01019d722348568283d18bdcb990af.jpg"
            alt="Teen Dream"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Beach+House/Teen+Dream"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-c4825ffd-bcac-4f10-99af-88fefe5e2a34"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/Teen+Dream/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-c4825ffd-bcac-4f10-99af-88fefe5e2a34"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Beach+House/Teen+Dream"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Slowdive/Pygmalion"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Pygmalion</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Slowdive"
            
            
                itemprop="url"
            
        >Slowdive</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            174,548 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                6 Feb 1995 ·
                9 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/17ebb43f28ab48318e2937bd8915f96c.jpg"
            alt="Pygmalion"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Slowdive/Pygmalion"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-4fa66722-0978-4481-977a-024650c05d29"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/Pygmalion/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-4fa66722-0978-4481-977a-024650c05d29"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Slowdive/Pygmalion"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Slowdive/Just+for+a+Day"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Just for a Day</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Slowdive"
            
            
                itemprop="url"
            
        >Slowdive</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            183,437 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                2 Sep 1991 ·
                9 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/6d2bde846a5933b29985d754166cee18.jpg"
            alt="Just for a Day"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Slowdive/Just+for+a+Day"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-84dcb56a-b845-4f9e-80b9-5e41657d5aea"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/Just+for+a+Day/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-84dcb56a-b845-4f9e-80b9-5e41657d5aea"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Slowdive/Just+for+a+Day"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Mazzy+Star/So+Tonight+That+I+Might+See"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >So Tonight That I Might See</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Mazzy+Star"
            
            
                itemprop="url"
            
        >Mazzy Star</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            640,728 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                26 Sep 1993 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/60615ead3d8383e70e84a526817de4bf.jpg"
            alt="So Tonight That I Might See"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Mazzy+Star/So+Tonight+That+I+Might+See"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-eb67bc5a-90cc-4cc6-ba9b-4308da75300f"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Mazzy+Star/So+Tonight+That+I+Might+See/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-eb67bc5a-90cc-4cc6-ba9b-4308da75300f"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Mazzy+Star/So+Tonight+That+I+Might+See"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Beach+House/Bloom"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Bloom</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Beach+House"
            
            
                itemprop="url"
            
        >Beach House</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            523,253 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                11 May 2012 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/90ff02d4495f4c50a1b7b2a64798d892.jpg"
            alt="Bloom"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Beach+House/Bloom"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-f21f200b-4625-4705-ad8e-5bc36512fc4b"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/Bloom/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-f21f200b-4625-4705-ad8e-5bc36512fc4b"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Beach+House/Bloom"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/caTra"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >caTra</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
            
            
                itemprop="url"
            
        >志方あきこ</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            228 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                10 Apr 2016 ·
                5 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/0128d00bf9225afbbc99433245efe19b.jpg"
            alt="caTra"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/caTra"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-81565b7e-d2b8-46e9-84d3-01493339e365"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/caTra/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-81565b7e-d2b8-46e9-84d3-01493339e365"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/caTra"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Cocteau+Twins/Victorialand"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Victorialand</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Cocteau+Twins"
            
            
                itemprop="url"
            
        >Cocteau Twins</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            96,303 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                Feb 1986 ·
                9 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/2a6683965f169985bdde9698dfc9cd05.jpg"
            alt="Victorialand"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Cocteau+Twins/Victorialand"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-04b65ce0-750f-40f4-8a24-02d08cb2da8f"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/Victorialand/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-04b65ce0-750f-40f4-8a24-02d08cb2da8f"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Cocteau+Twins/Victorialand"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Grimes/Visions"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Visions</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Grimes"
            
            
                itemprop="url"
            
        >Grimes</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            699,349 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                20 Feb 2012 ·
                13 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/94cfdb5f36a7f935b6837f5fe8840ed6.jpg"
            alt="Visions"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Grimes/Visions"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-de99cdd8-f567-48b3-8405-b207cd815118"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Grimes/Visions/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-de99cdd8-f567-48b3-8405-b207cd815118"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Grimes/Visions"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/My+Bloody+Valentine/Isn%27t+Anything"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Isn&#39;t Anything</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                itemprop="url"
            
        >My Bloody Valentine</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            284,751 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                21 Nov 1988 ·
                12 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/ae3d658e6a77d40a24dba212f1d65916.jpg"
            alt="Isn&#39;t Anything"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/My+Bloody+Valentine/Isn%27t+Anything"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-ad4ff5b9-6e75-43e4-813d-c49279254d33"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/Isn%27t+Anything/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-ad4ff5b9-6e75-43e4-813d-c49279254d33"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/My+Bloody+Valentine/Isn%27t+Anything"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Lana+Del+Rey/Born+to+Die+-+The+Paradise+Edition"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Born to Die - The Paradise Edition</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Lana+Del+Rey"
            
            
                itemprop="url"
            
        >Lana Del Rey</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            763,298 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                1 Jan 2012 ·
                23 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/0c1ab2edc3e4ed8295bf7764d42ac38a.jpg"
            alt="Born to Die - The Paradise Edition"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Lana+Del+Rey/Born+to+Die+-+The+Paradise+Edition"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-348c289d-ed1d-47b8-a1ca-cda366b1d5e4"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Lana+Del+Rey/Born+to+Die+-+The+Paradise+Edition/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-348c289d-ed1d-47b8-a1ca-cda366b1d5e4"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Lana+Del+Rey/Born+to+Die+-+The+Paradise+Edition"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Sandy+Leah/Sim"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Sim</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Sandy+Leah"
            
            
                itemprop="url"
            
        >Sandy Leah</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            11,584 listeners
        </p>
    

        

        

        

        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/fe5cc8b991c96362703d9577e6963a03.jpg"
            alt="Sim"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-258ad533-aa06-4365-a724-b07bf97b6758"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Sandy+Leah/Sim/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-258ad533-aa06-4365-a724-b07bf97b6758"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Sandy+Leah/Sim"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Mercury+Rev/Deserter%27s+Songs"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Deserter&#39;s Songs</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Mercury+Rev"
            
            
                itemprop="url"
            
        >Mercury Rev</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            214,108 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                16 May 2011 ·
                11 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/e52b4f05b43f4b17cba3e22d1d54897d.jpg"
            alt="Deserter&#39;s Songs"
            itemprop="image"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Mercury+Rev/Deserter%27s+Songs"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-36e4d754-a56a-47fd-a508-938e46bf274e"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Mercury+Rev/Deserter%27s+Songs/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-36e4d754-a56a-47fd-a508-938e46bf274e"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Mercury+Rev/Deserter%27s+Songs"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
    </ol>




                </section>
            
            
    
        

        

        <nav class="pagination">
            <h2 class="sr-only">Pagination</h2>

            <ul class="pagination-list">
                
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                            aria-current="page"
                        
                    >
                        
                            
                               <span>1</span>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=2">2</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=3">3</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=4">4</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                                pagination-page--hide-mobile
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=5">5</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                                pagination-page--hide-mobile
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=6">6</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                                pagination-page--ellipsis
                            
                        "
                        
                    >
                        
                            <span>…</span>
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=50">50</a>
                            
                        
                    </li>
                
                
                    <li class="pagination-next" data-pagination-next-link>
                        <a href="?page=2">Next</a>
                    </li>
                
            </ul>
        </nav>
    

        </div>
        <div class="col-sidebar">
            
    

    

    
    


    
    
        
        
            <div id="mpu_plus_top" data-ad="mpu_plus_top" class="mpu_plus_top lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;mpu_plus_top&#34;, &#34;sizes&#34;: [[300, 250], [300, 600]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mpu">
                Don't want to see ads? <a href="/pro" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Upgrade Now</a>
            </p>
        
    


    

    
        
    
        <div
            class="
                tonefuze
                
                    tonefuze--desktop
                    hidden-xs
                
                
            "
            data-require="ads/tonefuze"

            
                id="tonefuze-desktop-0a537f9d-9177-42b0-995d-bfc1f994d191"
                data-tonefuze-id="100000054"
            

            
                
                data-tonefuze-artist="Coldplay"
            
        ></div>
    

    

    
        
    
        <div
            class="
                tonefuze
                
                    tonefuze--mobile
                    visible-xs
                
                
            "
            data-require="ads/tonefuze"

            
                id="tonefuze-mobile-04490d1c-b872-496f-afa6-4347caf33c83"
                data-tonefuze-id="100000055"
            

            
                
                data-tonefuze-artist="The Beatles"
            
        ></div>
    

    

    
    
        <section class="share-desktop">
            
    <h2 class="share-heading">
        
            Share this tag:
        
    </h2>

            
    <ul class="share-options">
        <li class="share-option">
            <a
                href="https://www.facebook.com/sharer/sharer.php?ref=facebooklink&amp;u=https://www.last.fm/tag/dream%2Bpop/albums?page="
                data-analytics-social="2"
                target="_blank"
                class="share-facebook"
            >
                Facebook
            </a>
        </li>
        <li class="share-option">
            <a
                href="https://twitter.com/intent/tweet?url=https://www.last.fm/tag/dream%2Bpop/albums?page=&amp;via=lastfm&amp;lang=en&amp;text=Check+out+dream+pop"
                data-analytics-social="8"
                target="_blank"
                class="share-twitter"
            >
                Twitter
            </a>
        </li>
    </ul>

        </section>
    


    

        
    

        
    
        
        
            <div id="mobile_pos_4" data-ad="mobile_pos_4" class="mobile_pos_4 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_4&#34;, &#34;sizes&#34;: [[300, 250], [320, 50]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;4&#34;}}'></div>
        
        
    

        
    
        
            
        
        <div class="related-content" id="taboola-right-rail-thumbnails" data-require="ads/taboola" data-taboola-layout="None"></div>
    

        
    <div class="related-ads">
            <div
                
                    data-searchlinks-desktop
                
            ></div>
        </div>


    

    
    
    
        
        
            <div id="mpu_bottom" data-ad="mpu_bottom" class="mpu_bottom lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;mpu_bottom&#34;, &#34;sizes&#34;: [[300, 250]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}}'></div>
        
        
    


        </div>
    </div>

    </div>


        


        
    <div class="container">
        
    
        
        
            <div id="leader_bottom" data-ad="leader_bottom" class="leader_bottom lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;leader_bottom&#34;, &#34;sizes&#34;: [[728, 90], [970, 66], [728, 92]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}}'></div>
        
        
    

    </div>


        
            <div class="container page-content visible-xs">
                
    <div class="related-ads">
            <div
                
                    data-searchlinks-mobile
                
            ></div>
        </div>

            </div>
        
    </div>

    <div id="qa-page-load"></div>

    
    
        
            
    
    
    
    <div
        class="lazy-features-footer"
        data-require="components/lazy-load-v3"
        data-lazy-load-content="/features/partial/footer"
        data-lazy-load-when-on-screen
        data-lazy-load-inverted-bg
    ></div>

        
    


    
    <footer class="footer" itemscope itemtype="http://schema.org/Organization">
        <link itemprop="url" href="https://www.last.fm">

        <div class="footer-top">
            <div class="container">
                <div class="footer-top-row">
                    <div class="footer-top-col">
                        <h2 class="footer-heading">Company</h2>
                        <ul class="footer-links">
                            <li><a href="/about">About Last.fm</a></li>
                            <li><a href="/about/contact">Contact Us</a></li>
                            <li><a href="/about/jobs">Jobs</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Help</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Track My Music</a></li>
                            
                                <li><a href="https://support.last.fm/" target="_BLANK">Community Support</a></li>
                            
                            <li><a href="/help/guidelines">Community Guidelines</a></li>
                            
                                <li><a href="http://cbsi.force.com/CBSi/lastfm" target="_BLANK">Help</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Goodies</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Download Scrobbler</a></li>
                            <li><a href="/api">Developer API</a></li>
                            <li><a href="/music/+free-music-downloads">Free Music Downloads</a></li>
                            <li><a href="https://store.last.fm">Merchandise</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Account</h2>
                        <ul class="footer-links">
                            
                                <li><a href="/join">Join</a></li>
                                <li><a href="https://secure.last.fm/login">Login</a></li>
                                <li><a href="/pro">Subscribe</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Follow Us</h2>
                        <ul class="footer-links">
                            <li><a itemprop="sameAs" target="_blank" href="https://www.facebook.com/lastfm">Facebook</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://twitter.com/lastfm">Twitter</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.instagram.com/last_fm">Instagram</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.youtube.com/user/lastfm">YouTube</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-xs-12 col-sm-9">
                        <ul id="language-selector">
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                            footer-language--active
                                        
                                    "
                                >
                                    
                                        <strong>English</strong><span class="sr-only">current language</span>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="de" />
                                            <button class="mimic-link" name="de" type="submit">Deutsch</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="es" />
                                            <button class="mimic-link" name="es" type="submit">Español</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="fr" />
                                            <button class="mimic-link" name="fr" type="submit">Français</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="it" />
                                            <button class="mimic-link" name="it" type="submit">Italiano</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="ja" />
                                            <button class="mimic-link" name="ja" type="submit">日本語</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="pl" />
                                            <button class="mimic-link" name="pl" type="submit">Polski</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="pt" />
                                            <button class="mimic-link" name="pt" type="submit">Português</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="ru" />
                                            <button class="mimic-link" name="ru" type="submit">Русский</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="sv" />
                                            <button class="mimic-link" name="sv" type="submit">Svenska</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="tr" />
                                            <button class="mimic-link" name="tr" type="submit">Türkçe</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='nMqkTAD9oXsB6idjN5hKVAy9Ar4hpZmU' />
                                            <input type="hidden" name="language" value="zh" />
                                            <button class="mimic-link" name="zh" type="submit">简体中文</button>
                                        </form>
                                    
                                </li>
                            
                        </ul>
                        
                        <p class="footer-timezone">
                            
                                Time zone: <strong>Europe/Minsk</strong>
                            
                        </p>

                        <div class="footer-legal">
                            <ul>
                                <li class="footer-legal-item"><a rel="nofollow" href="http://www.cbsinteractive.com/">CBS Interactive</a> © 2020 <span itemprop="name">Last.fm</span> Ltd. All rights reserved</li>
                                <li class="footer-legal-item"><a href="/legal/terms">Terms of Use</a></li>
                                <li class="footer-legal-item"><a href="/legal/privacy">Privacy Policy</a></li>
                                <li class="footer-legal-item"><a href="/legal">Legal Policies</a></li>
                                
                                    <li class="footer-legal-item"><a href="https://ca.privacy.cbs">California Privacy/Info We Collect</a></li>
                                    <li class="footer-legal-item"><a href="https://ca.privacy.cbs/donotsell">California Do Not Sell My Info</a></li>
                                
                                <li class="footer-legal-item"><a target="_blank" href="http://www.cbsinteractive.com/careers">Jobs at CBSi</a></li>
                                <li class="footer-legal-item"><a rel="nofollow" href="http://www.last.fm">Last.fm Music</a></li>
                            </ul>
                            
                        </div>
                    </div>


                    <div class="logo col-xs-12 col-sm-3">
                        <p>Audioscrobbler</p>
                        <img src="/static/images/footer_logo@2x.49ca51948b0a.png" width="37" height="20" alt="Last.fm 'as' logo">
                    </div>
                </div>
            </div>
        </div>

        <div class="feedback-message">
    <div class="feedback-message-inner">
        <p>
            <span class="hidden-xs">
                Let us know what you think of the Last.fm website.
            </span>
            <a href="http://cbsi.force.com/CBSi/template_lfmfbk?p_userid=" target="_blank">Leave feedback</a>
        </p>
    </div>
</div>
    </footer>


    <section class="debug-log">
    <h2 class="debug-log-heading">API Calls</h2>
    
</section>


        </div>
        
    
        <div id="data-ads"
            data-ads-beacon
            data-ads-targeting='{&#34;geo&#34;: &#34;BY&#34;, &#34;lang&#34;: &#34;en&#34;, &#34;beta&#34;: &#34;yes&#34;, &#34;ptype&#34;: &#34;tag_albums&#34;, &#34;tag&#34;: &#34;dreampop,shoegaze,indie,indiepop,electronic,ethereal,femalevocalists&#34;}'
            data-ads-unitname='/8264/row-lastfm/tag/albums'
            data-ads-unitname-mobile='/8264/maw-lastfm/tag/albums'
            data-ads-zone='/tag/albums'
            data-ads-env='prod'
        ></div>
    

    </div>

    
        <div
            data-require="player/providers/spotify/spotify-provider"
            data-spotify-auth-modal="/player/modal/spotify"
            data-spotify-premium-modal="/player/modal/spotify-premium"
            data-spotify-inactive-modal="/player/modal/spotify-inactive"
            data-spotify-initial-device-modal="/player/modal/spotify-initial-device-detection"
        ></div>

        <div
            data-require="player/providers/youtube/youtube-provider"
            class="video-player"
            aria-hidden="true"
            id="youtube-video"
        >
            <div class="video-player-inner-wrap">
                <div class="video-player-embed js-player"></div>
                <button class="
                    video-player-close
                    js-close-player
                ">Close</button>
            </div>
        </div>
    


        
            
        
        
            
    
        
        
            <div id="intromercial" data-ad="intromercial" class="intromercial lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;intromercial&#34;, &#34;out_of_page&#34;: true}'></div>
        
        
    

            
    
        
        
            <div id="mobile_intromercial" data-ad="mobile_intromercial" class="mobile_intromercial lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_intromercial&#34;, &#34;is_mobile&#34;: true, &#34;out_of_page&#34;: true}'></div>
        
        
    

        

        <script class="js-modal-template" type="text/template">
            <div class="modal-dialog" role="dialog" aria-labelledby="modal-label">
                <div class="modal-content">
                    <button class="modal-dismiss js-close">Close</button>
                    <h2
                        id="modal-label"
                        class="modal-title js-modal-title"
                    ></h2>
                    <div class="modal-body js-modal-body"></div>
                </div>
            </div>
        </script>

        <script>
            var immediateUseBidBarrelFunctions = ['auction', 'initialize', 'setTargeting', 'destroySlots', 'setConfig'];
            (function(a){
                var w=window,b='BidBarrel',q='queue';w[b]=w[b]?w[b]:{};w[b][q]=w[b][q]?w[b][q]:[];
                a.forEach(function(z){w[b][z]=w[b][z]||function(){var c=arguments;w[b][q].push(function(r){w[b][z].apply(w[b],c);r()})}});
            })(immediateUseBidBarrelFunctions);
        </script><script id="bb-lib" async src="https://at.cbsi.com/lib/dist/prod/bidbarrel-lastfm.min.js"></script>
        
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--adfree
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Browse ad-free</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageAdfree"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageAdfree"
            ></a>
        </section>
    </div></div>

            </script>
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--support
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Show your support</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageSupport"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageSupport"
            ></a>
        </section>
    </div></div>

            </script>
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--benefits
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Get exclusive benefits</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageBenefits"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageBenefits"
            ></a>
        </section>
    </div></div>

            </script>
        

        <script>
            window.lfmDomReadyCallback && window.lfmDomReadyCallback();
            window.lfmDomReady = true;
        </script>
        
            <link
                href="/static/styles/build/36571be345.36571be345d3.css"
                rel="preload"
                as="style"
                charset="utf-8"
                data-require="shim/rel-preload"
                media="(min-width: 768px)" 
            >
        
    </body>
</html>
  recorded_at: Wed, 07 Oct 2020 14:49:40 GMT
recorded_with: VCR 6.0.0
