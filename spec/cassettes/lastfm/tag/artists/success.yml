---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/tag/dream+pop/artists?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.0p0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/tag/dream+pop/artists?page=2
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - csrftoken=RPATiPS2CBmIq90EwOH7YqAVetSrcJYp; expires=Sun, 23-Jan-2022 10:12:36
        GMT; Max-Age=31449600; Path=/; Secure
      - lfmanon=1; Path=/
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6ImNmNjkzZmY1LTBlYjUtNGQ2OC05NWNhLTJmZDljZWQ1Njk0YSJ9:1l3cNo:nVJdQtwV7B4DBpZQLSw-W11x4dc;
        Domain=.last.fm; expires=Mon, 24-Jan-2022 10:12:36 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Sun, 24 Jan 2021 10:12:36 GMT
      X-Served-By:
      - prod-lfm-web-55f66b8564-vfgxp, cache-hhn4064-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1611483156.445858,VS0,VE256
      Vary:
      - Accept-Encoding, Cookie
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 24 Jan 2021 10:12:35 GMT
recorded_with: VCR 6.0.0
