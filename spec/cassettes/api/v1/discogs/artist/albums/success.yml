---
http_interactions:
- request:
    method: get
    uri: https://www.discogs.com/artist/85929?page=1&subtype=Albums&type=Releases
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.1p64
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.discogs.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 25 May 2021 09:23:43 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Set-Cookie:
      - __cf_bm=dd3432cd6853fe361db3509b233962e025772159-1621934623-1800-AUAg0RORNkp90ALJI0yTMB7ZQu9ts6u0eQfYUoq7Fruh0NE12b7izCI+g0HUj4m9P0FvvJLf1wdSuBIlwgw3ZFI=;
        path=/; expires=Tue, 25-May-21 09:53:43 GMT; domain=.discogs.com; HttpOnly;
        Secure; SameSite=None
      - language2=en; Domain=www.discogs.com; Path=/
      - sid=42501b5a619eacadb3f7d76b2811b938; Domain=www.discogs.com; Expires=Fri,
        23-May-2031 09:23:43 GMT; Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=15724800
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a446f61630000f29c06116000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 654db4e22905f29c-WAW
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html
    class="is_not_mobile needs_reduced_ui "
    lang="en"
    xmlns:og="http://opengraphprotocol.org/schema/"
    xmlns:fb="http://www.facebook.com/2008/fbml"
>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta http-equiv="content-language" content="en">
        <meta http-equiv="pragma" content="no-cache" />
        <meta http-equiv="expires" content="-1" />

        <!-- OT will rewrite convert these to javascript and update our consent module accordingly -->
        <script type="text/plain" class="optanon-category-C0002">
            window.consent.resolveGroup(window.consent.PERFORMANCE_GROUP)
        </script>
        <script type="text/plain" class="optanon-category-C0003">
            window.consent.resolveGroup(window.consent.FUNCTIONALITY_GROUP)
        </script>
        <script type="text/plain" class="optanon-category-C0004">
            window.consent.resolveGroup(window.consent.TARGETING_GROUP)
        </script>

                <meta id="viewport" name="viewport" content="initial-scale=1.0,width=device-width" />

        <script>
            if (window.innerWidth <= 600) document.getElementById('viewport').setAttribute('content', 'initial-scale=1.0, minimum-scale 1.0, width="device-width"');
                                            </script>
        
        <script type="text/javascript">
            window.__start = new Date().getTime();
        </script>

        <script type="text/javascript">
            // dataLayer additions consumed by Google Tag Manager for later submission
            // to Google Analytics - this object is added to _every_ page.
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
                'event': 'dataLayer-initialized',
                'userId': undefined,
                'loggedIn': false,
                'siteVersion': undefined,
                'pageCategory': "artist.view"
            });
        </script>

                    <meta name="description" content="Explore releases from Kate Bush at Discogs. Shop for Vinyl, CDs and more from Kate Bush at the Discogs Marketplace.">
                <meta property="fb:app_id" content="117175028305858"><meta property="og:image" content="https://img.discogs.com/Tfn0QDHqibkP0T-MqPaDXeGohq8=/600x466/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382742029-2169.jpeg.jpg"><meta property="og:site_name" content="Discogs"><meta property="og:title" content="Kate Bush"><meta property="og:type" content="musician"><meta property="og:url" content="https://www.discogs.com/artist/85929-Kate-Bush"><meta property="twitter:card" content="summary"><meta property="twitter:description" content="Kate Bush Discography at Discogs"><meta property="twitter:image" content="https://img.discogs.com/Tfn0QDHqibkP0T-MqPaDXeGohq8=/600x466/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382742029-2169.jpeg.jpg"><meta property="twitter:site" content="@discogs"><meta property="twitter:title" content="Kate Bush"><meta property="twitter:url" content="https://api.discogs.com/artists/85929">                    
                            <script type="text/javascript" src="https://lngtd.com/discogs_a.js"></script>
            
            <meta property="og:description" content="Explore releases from Kate Bush at Discogs. Shop for Vinyl, CDs and more from Kate Bush at the Discogs Marketplace.">

                        <script type="application/ld+json" id="artist_schema">
        {
 "@context": "http://schema.org",
 "@type": "MusicGroup",
 "@id": "https://www.discogs.com/artist/85929-Kate-Bush",
 "name": "Kate Bush",
 "image": "https://img.discogs.com/Tfn0QDHqibkP0T-MqPaDXeGohq8=/600x466/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382742029-2169.jpeg.jpg",
 "description": "Highly distinctive singer/songwriter, born July 30th, 1958. Bush was signed to EMI at age 16 after David Gilmour heard her work and helped her produce a demo tape.  In 1978 (at age 19), her debut single \"Wuthering Heights\" reached #1 in four countries. She has maintained a large cult following ever since. Bush's most prolific creative period was between 1978 to 1993, with a release of new material and new albums every few years. After the 1993 release of \"The Red Shoes,\" she began an extended break from public view,  and devoted time to her family.  \"Aerial,\" Bush's first album in 12 years, was released in November 2005, preceded by single \"King Of The Mountain\". In 2011, two Kate Bush albums were released: \"Director's Cut,\" a reworking of several songs from \"The Sensual World\" and \"The Red Shoes,\" and \"50 Words for Snow,\" an album of new music.  In 2014, Bush performed in a series of live concerts in London, her first concerts in decades. All performances of the show, called \"Before The Dawn,\" sold out in minutes.  She was appointed Commander of the Most Excellent Order of the British Empire (CBE) in the 2013 New Year Honours for services to music.",
 "sameAs": [
  "http://www.katebush.com/",
  "http://www.katebushnews.com/",
  "https://www.AllMusic.com/artist/kate-bush-mn0000855423",
  "https://www.facebook.com/katebush",
  "https://www.imdb.com/name/nm0124165/",
  "http://www.ProgArchives.com/artist.asp?id=2107#discography ",
  "https://open.Spotify.com/artist/1aSxMhuvixZ8h9dK9jIDwL/discography ",
  "https://RateYourMusic.com/artist/kate-bush",
  "https://TheWorldOfKateBush.blogspot.com/",
  "https://twitter.com/katebushmusic",
  "https://www.whosampled.com/Kate-Bush/",
  "https://en.wikipedia.org/wiki/Kate_Bush",
  "https://www.youtube.com/user/KateBushMusic"
 ],
 "member": [
  {
   "@type": "Person",
   "@id": "https://www.discogs.com/artist/85929-Kate-Bush",
   "name": "Kate Bush"
  }
 ],
 "album": [
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-Lionheart/master/28522",
   "name": "Lionheart",
   "datePublished": 1978
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-The-Kick-Inside/master/28531",
   "name": "The Kick Inside",
   "datePublished": 1978
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-Never-For-Ever/master/28582",
   "name": "Never For Ever",
   "datePublished": 1980
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-The-Dreaming/master/28613",
   "name": "The Dreaming",
   "datePublished": 1982
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-Hounds-Of-Love-/master/28680",
   "name": "Hounds Of Love",
   "datePublished": 1985
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-The-Sensual-World/master/5804",
   "name": "The Sensual World",
   "datePublished": 1989
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-The-Red-Shoes/master/28785",
   "name": "The Red Shoes",
   "datePublished": 1993
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-Aerial/master/28811",
   "name": "Aerial",
   "datePublished": 2005
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-50-Words-For-Snow/master/386159",
   "name": "50 Words For Snow",
   "datePublished": 2011
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-Directors-Cut/master/336495",
   "name": "Director's Cut",
   "datePublished": 2011
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Kate-Bush-Before-The-Dawn/master/1095570",
   "name": "Before The Dawn",
   "datePublished": 2016
  }
 ]
}
    </script>
            
                
        <title>Kate Bush | Discography | Discogs</title>
                                                                <link rel="alternate" hreflang="en" href="https://www.discogs.com/artist/85929?type=Releases&subtype=Albums&page=1" />
                                                                                    <link rel="alternate" hreflang="de" href="https://www.discogs.com/de/artist/85929?type=Releases&subtype=Albums&page=1" />
                                                                                    <link rel="alternate" hreflang="es" href="https://www.discogs.com/es/artist/85929?type=Releases&subtype=Albums&page=1" />
                                                                                    <link rel="alternate" hreflang="fr" href="https://www.discogs.com/fr/artist/85929?type=Releases&subtype=Albums&page=1" />
                                                                                    <link rel="alternate" hreflang="it" href="https://www.discogs.com/it/artist/85929?type=Releases&subtype=Albums&page=1" />
                                                                                    <link rel="alternate" hreflang="ja" href="https://www.discogs.com/ja/artist/85929?type=Releases&subtype=Albums&page=1" />
                                                                                    <link rel="alternate" hreflang="ko" href="https://www.discogs.com/ko/artist/85929?type=Releases&subtype=Albums&page=1" />
                                                                                    <link rel="alternate" hreflang="pt-BR" href="https://www.discogs.com/pt_BR/artist/85929?type=Releases&subtype=Albums&page=1" />
                                                                                    <link rel="alternate" hreflang="ru" href="https://www.discogs.com/ru/artist/85929?type=Releases&subtype=Albums&page=1" />
                                    
        <link rel="stylesheet" type="text/css" href="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/dst/stylesheets/discogs.css"  />
        

                    
    <link rel="stylesheet" type="text/css" href="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/dst/stylesheets/sections/artist.css"  />
    <link rel="stylesheet" type="text/css" href="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/dst/stylesheets/components/image-gallery.css"  />
                    <link rel="canonical" href="https://www.discogs.com/artist/85929-Kate-Bush">
                        <link rel="icon" href="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/images/favicon.ico" />
        <link rel="icon" sizes="16x16" href="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/images/favicon-16x16.png" />
        <link rel="icon" sizes="32x32" href="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/images/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/images/favicon-96x96.png" />
        <link rel="apple-touch-icon" href="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/images/apple-touch-icon-precomposed.png" />
        <link rel="mask-icon" href="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/images/discogs-record-icon.svg" color="black">
        <script id="dsdata">
            function dsdata (){
                return {"activationHelpUrl": "/help/doc/activation", "apiServer": "https://api.discogs.com", "appEnv": "production", "assetBasePath": "ff591de98745b0dc6f6345d2314025182ac8bed7/dst/", "assetsHost": "https://s.discogs.com/", "autocompleteUrl": "/search/ac", "cookieDomain": "www.discogs.com", "countryAbbr": "by", "countryName": "Belarus", "dataLayer": [], "defaultLocale": "en", "enableGaDebugging": false, "enableGaDebuggingVerbose": false, "enableGoogleAnalytics": true, "endpoint": "artist.view", "ga_pageview_page": "/artist.view", "ga_pageview_title": "artist.view", "isDiscogsApp": false, "isMobile": false, "locale": "en", "loginUrl": "https://www.discogs.com/login", "mp_web": {"cart_anon": true}, "recaptchaKey": "6LdGMgITAAAAAPG6lAC5r1yck_LpHUbQs4IbnNtV", "requireCookieConsent": false, "sentryKey": "https://387a0c015e78429ca256c602993e2b92@sentry.io/51758", "sha": "ff591de98745b0dc6f6345d2314025182ac8bed7", "useSentry": true, "userIsAdmin": false, "userIsRegistered": false, "videos/macro:playlist": [{"id": "oWaj8wU_qRg", "thumbnail": "https://i.ytimg.com/vi/oWaj8wU_qRg/default.jpg", "file": "https://www.youtube.com/watch?v=oWaj8wU_qRg", "title": "Kate Bush - Under The Ivy - Official Music Video", "description": "Courtesy of ITV Archive\n\nOfficial music video for Under The Ivy by Kate Bush\n\nOriginally aired on The Tube - Introduced by Paula Yates\n\nUnder The Ivy was specially written as a B-side for Running Up That Hill which was released on 5th August 1985.\n\nA pe", "duration": 174}, {"id": "wp43OdtAAkM", "thumbnail": "https://i.ytimg.com/vi/wp43OdtAAkM/default.jpg", "file": "https://www.youtube.com/watch?v=wp43OdtAAkM", "title": "Kate Bush - Running Up That Hill - Official Music Video", "description": "Official music video for the single Running Up That Hill written and produced by British singer Kate Bush.\n\nThe song was the first single from Kate\u0027s 1985 album Hounds of Love and released in the UK on 5 August 1985.\n  \nRunning Up That Hill entered th", "duration": 297}, {"id": "XmwYkt3f0lI", "thumbnail": "https://i.ytimg.com/vi/XmwYkt3f0lI/default.jpg", "file": "https://www.youtube.com/watch?v=XmwYkt3f0lI", "title": "Breathing (2018 Remaster)", "description": "Provided to YouTube by Rhino\n\nBreathing (2018 Remaster) \u00b7 Kate Bush\n\nNever for Ever\n\n\u2117 1980, 2018 Parlophone Records Ltd, a Warner Music Group Company\n\nElectric  Guitar: Alan Murphy\nDigital  Remasterer: Bernie Grundman\nElectric  Guitar: Brian Bath\nDigi", "duration": 331}, {"id": "k2mt7_Xe7Lg", "thumbnail": "https://i.ytimg.com/vi/k2mt7_Xe7Lg/default.jpg", "file": "https://www.youtube.com/watch?v=k2mt7_Xe7Lg", "title": "Kate Bush - The Kick Inside Full Album", "description": "Kate\u0027s Debut album which includes UK no. 1 \u0027Wuthering Heights\u0027\n\n1) Moving\n2) The Saxophone Song\n3) Strange Phenomena\n4) Kite\n5) The Man With The Child In His Eyes\n6) Wuthering Heights\n7) James and the Cold Gun\n8) Feel It\n9) Oh To Be In Love\n10) L\u0027amour Lo", "duration": 2590}, {"id": "6xckBwPdo1c", "thumbnail": "https://i.ytimg.com/vi/6xckBwPdo1c/default.jpg", "file": "https://www.youtube.com/watch?v=6xckBwPdo1c", "title": "Kate Bush - Babooshka - Official Music Video", "description": "Official music video for the single Babooshka by British singer Kate Bush, taken from her album Never for Ever. \r\n\r\nReleased as a single in June 1980, it spent 10 weeks in the UK chart, peaking at number five.  It was an even bigger hit in Australia, wh", "duration": 211}, {"id": "V8YgDaHpcXs", "thumbnail": "https://i.ytimg.com/vi/V8YgDaHpcXs/default.jpg", "file": "https://www.youtube.com/watch?v=V8YgDaHpcXs", "title": "Kate Bush - Wow  high-quality  1979", "description": "Kate Bush was born in Bexleyheath, Southeast London, to English physician Robert Bush and his Irish wife, Hannah Daly. She was raised as a Roman Catholic  in their farmhouse in East Wickham with her older brothers, John and Paddy. Bush came from an artist", "duration": 232}, {"id": "-1pMMIe4hb4", "thumbnail": "https://i.ytimg.com/vi/-1pMMIe4hb4/default.jpg", "file": "https://www.youtube.com/watch?v=-1pMMIe4hb4", "title": "Kate Bush - Wuthering Heights - Official Music Video - Version 1", "description": "Official music video for the single Wuthering Heights -- Version 1 by Kate Bush. \r\n\r\nWuthering Heights was released as Kate\u0027s debut single in January 1978. It became a No.1 hit in the UK singles chart and remains Kate\u0027s biggest-selling single. \r\n\r\nTwo m", "duration": 226}, {"id": "pZiadb3bpOI", "thumbnail": "https://i.ytimg.com/vi/pZiadb3bpOI/default.jpg", "file": "https://www.youtube.com/watch?v=pZiadb3bpOI", "title": "Kate Bush - December Will Be Magic Again (1979 Xmas Special)", "description": "Kate performs December Will Be Magic Again on the 1979 Christmas special.\r\n\r\nLyrics:\r\n\r\nDecember will be magic again.\r\nTake a husky to the ice\r\nWhile Bing Crosby sings White Christmas.\r\nHe makes you feel nice.\r\nDecember will be magic again.\r\nOld Saint N", "duration": 237}, {"id": "rpcUTWHlbvI", "thumbnail": "https://i.ytimg.com/vi/rpcUTWHlbvI/default.jpg", "file": "https://www.youtube.com/watch?v=rpcUTWHlbvI", "title": "Kate Bush / Experiment IV [12 Extended Version]", "description": "From the 8th CD of This Woman\u0027s Work anthology box set\n\nOne song each Friday / Un morceau par semaine * https://tgiftheplaylist.wordpress.com/", "duration": 398}, {"id": "VerK4zwMRQw", "thumbnail": "https://i.ytimg.com/vi/VerK4zwMRQw/default.jpg", "file": "https://www.youtube.com/watch?v=VerK4zwMRQw", "title": "Kate Bush - Hounds of Love - Official Music Video", "description": "Official music video for the single Hounds of Love -- which is the title track of the Hounds of Love album by Kate Bush.  It was also the third of the album\u0027s four singles. The single was released on 24 February 1986, and reached number 18 in the UK Sin", "duration": 183}, {"id": "F8xk_AkeP5c", "thumbnail": "https://i.ytimg.com/vi/F8xk_AkeP5c/default.jpg", "file": "https://www.youtube.com/watch?v=F8xk_AkeP5c", "title": "Kate Bush - King of the Mountain - Official Music Video", "description": "Official music video for the single King of the Mountain by English singer Kate Bush.\r\n\r\nTaken from the album Aerial, it was released as the lead single in 2005. The song was written and produced by Kate Bush.\r\n\r\nThe single was an immediate success by e", "duration": 283}, {"id": "_lsjXdH1tNY", "thumbnail": "https://i.ytimg.com/vi/_lsjXdH1tNY/default.jpg", "file": "https://www.youtube.com/watch?v=_lsjXdH1tNY", "title": "The Big Sky (Special Single Mix)", "description": "Provided to YouTube by Parlophone UK\n\nThe Big Sky (Special Single Mix) \u00b7 Kate Bush\n\nHounds Of Love\n\n\u2117 1986 The copyright in this sound recording is owned by Noble And Brite\n\nFeatured  Vocalist: Kate Bush\nProducer: Kate Bush\nWriter: Kate Bush\n\nAuto-gene", "duration": 279}, {"id": "XR4KnfcgLm0", "thumbnail": "https://i.ytimg.com/vi/XR4KnfcgLm0/default.jpg", "file": "https://www.youtube.com/watch?v=XR4KnfcgLm0", "title": "Kate Bush - Hammer Horror - Official Music Video", "description": "Official music video for the single Hammer Horror which was Kate Bush\u0027s third single release and first single from her second album Lionheart. \r\n\r\nIt was released on 27 October 1978 and charted at #44 in the UK singles chart. The parent album released a", "duration": 258}, {"id": "VjEq-r2agqc", "thumbnail": "https://i.ytimg.com/vi/VjEq-r2agqc/default.jpg", "file": "https://www.youtube.com/watch?v=VjEq-r2agqc", "title": "Peter Gabriel - Don\u0027t Give Up (ft. Kate Bush)", "description": "The official Don\u0027t Give Up video.  Directed by Godley and Creme.\n\nA standout track from Peter\u0027s fifth studio album and the first one  to have a proper title: So was a watershed release in his career. Its marriage of the artistic and the commercial made fo", "duration": 390}, {"id": "itX7uyZ4Ocw", "thumbnail": "https://i.ytimg.com/vi/itX7uyZ4Ocw/default.jpg", "file": "https://www.youtube.com/watch?v=itX7uyZ4Ocw", "title": "Kate Bush - Hammer Horror", "description": "Hammer Horror was Kate Bush\u0027s fourth single release and first single from her second album Lionheart. It was released on 27 October 1978.\n-", "duration": 259}, {"id": "jHzH3XfZqsw", "thumbnail": "https://i.ytimg.com/vi/jHzH3XfZqsw/default.jpg", "file": "https://www.youtube.com/watch?v=jHzH3XfZqsw", "title": "Pull Out The Pin", "description": "Provided to YouTube by Parlophone UK\n\nPull Out The Pin \u00b7 Kate Bush\n\nThe Dreaming\n\n\u2117 1982 The copyright in this sound recording is owned by Novercia Ltd under exclusive licence to EMI Records Ltd\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 327}, {"id": "_mIPneHdqbQ", "thumbnail": "https://i.ytimg.com/vi/_mIPneHdqbQ/default.jpg", "file": "https://www.youtube.com/watch?v=_mIPneHdqbQ", "title": "Babooshka", "description": "Provided to YouTube by Parlophone UK\n\nBabooshka \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 210}, {"id": "2KII-OXV86c", "thumbnail": "https://i.ytimg.com/vi/2KII-OXV86c/default.jpg", "file": "https://www.youtube.com/watch?v=2KII-OXV86c", "title": "Kate Bush: Rubberband Girl (U. S. Remix)", "description": "This is the 1994 U.S. mix of Rubberband Girl, remixed by Eric Cuppa.  The original 1993 version of this song was the first single from Kate\u0027s album The Red Shoes.\r\n\r\nIt often annoys me (these days) that Kate often gets lumped in a pile with (MOR) mi", "duration": 230}, {"id": "rmADS0sFCGA", "thumbnail": "https://i.ytimg.com/vi/rmADS0sFCGA/default.jpg", "file": "https://www.youtube.com/watch?v=rmADS0sFCGA", "title": "Kate Bush - Delius (Song of Summer)", "description": "A beautiful song from the album Never for Ever. This was also the b-side of the Army Dreamers single together with Passing Through Air.\n\nLyrics:\n\n(Delius)\nOoh, he\u0027s a moody Old Man\n(Delius)\nSong of Summer in his Hand\n(Delius)\nOoh, he\u0027s a moody old M", "duration": 154}, {"id": "M2Wa0LdCsvM", "thumbnail": "https://i.ytimg.com/vi/M2Wa0LdCsvM/default.jpg", "file": "https://www.youtube.com/watch?v=M2Wa0LdCsvM", "title": "Kate Bush - The Dreaming - Official Music Video", "description": "Official music video for the single The Dreaming written and produced by British singer Kate Bush.\n\nThe Dreaming is the title song from Kate Bush\u0027s fourth studio album of the same name and was released as a single on 26 July 1982.  The song reached nu", "duration": 247}, {"id": "PXI8iB_TTuM", "thumbnail": "https://i.ytimg.com/vi/PXI8iB_TTuM/default.jpg", "file": "https://www.youtube.com/watch?v=PXI8iB_TTuM", "title": "Kate Bush - Snowflake", "description": "Song from Kate\u0027s new album \u002750 Words For Snow\u0027:\n\nI was born in a cloud... \nNow I am falling.\nI want you to catch me.\nLook up and you\u0027ll see me.\nYou know you can hear me.\nThe world is so loud. Keep falling. I\u0027ll find you.\nWe\u0027re over a forest.\nThere\u0027s milli", "duration": 588}, {"id": "h1DDndY0FLI", "thumbnail": "https://i.ytimg.com/vi/h1DDndY0FLI/default.jpg", "file": "https://www.youtube.com/watch?v=h1DDndY0FLI", "title": "Kate Bush - The Sensual World - Official Music Video", "description": "Official music video for the single The Sensual World by Kate Bush. \r\n\r\nIt was the title track and first single from the album of the same name, released in September 1989. \r\n\r\nThe single entered and peaked at no.12 in the UK single charts.\r\n\r\nThe video", "duration": 234}, {"id": "b-7JWI8W38k", "thumbnail": "https://i.ytimg.com/vi/b-7JWI8W38k/default.jpg", "file": "https://www.youtube.com/watch?v=b-7JWI8W38k", "title": "Kate Bush - Eat The Music (U.S. Mix)", "description": "reuploaded", "duration": 562}, {"id": "Qb8K9KOEwkw", "thumbnail": "https://i.ytimg.com/vi/Qb8K9KOEwkw/default.jpg", "file": "https://www.youtube.com/watch?v=Qb8K9KOEwkw", "title": "Kate Bush - Rubberband Girl (Radio Mix)", "description": "Album: The Red Shoes\nLabel: EMI France\nCountry: France\nReleased: 1993\nGenre: Rock, Pop\n\nProducer \u2013 Kate Bush\nWritten-By \u2013 Kate Bush\nRecorded By, Mixed By \u2013 Del Palmer\n\n\u2117 1993 Novercia Ltd. and is exclusively licensed to EMI records Ltd.\n\u00a9 1993 No", "duration": 232}, {"id": "bSbOPPdXfSw", "thumbnail": "https://i.ytimg.com/vi/bSbOPPdXfSw/default.jpg", "file": "https://www.youtube.com/watch?v=bSbOPPdXfSw", "title": "Elton John\u0027s Candle in the Wind - Kate Bush 1991", "description": "An outtake from the 1991 tribute album Two Rooms: Celebrating the Songs of Elton John \u0026 Bernie Taupin. \nThis track appeared as an bonus track on a few of Kate Bush\u0027s releases.\nCandle in the Wind originally appeared on Elton John\u0027s 1973 album Goodbye ", "duration": 276}, {"id": "SsJrJc3X3b4", "thumbnail": "https://i.ytimg.com/vi/SsJrJc3X3b4/default.jpg", "file": "https://www.youtube.com/watch?v=SsJrJc3X3b4", "title": "Kate Bush - Burning Bridge", "description": "Hounds of Love (1985) track 17 (1997 re-edition bonus track)\r\n\r\nCome close to me. \r\nCome cross the bridge. \r\nI need to know what you have to say to me. \r\n(We\u0027ve been waiting all night long.) \r\nWhat have you got to say to me? \r\n(We\u0027ve been waiting all nigh", "duration": 278}, {"id": "4zB_kgWpC5o", "thumbnail": "https://i.ytimg.com/vi/4zB_kgWpC5o/default.jpg", "file": "https://www.youtube.com/watch?v=4zB_kgWpC5o", "title": "Kate Bush - The Red Shoes", "description": "Music video by Kate Bush performing The Red Shoes. (C) 1993 Novercia Ltd.", "duration": 231}, {"id": "BW3gKKiTvjs", "thumbnail": "https://i.ytimg.com/vi/BW3gKKiTvjs/default.jpg", "file": "https://www.youtube.com/watch?v=BW3gKKiTvjs", "title": "Kate Bush Wuthering Heights.", "description": "The Red Dress version. Very sharp.High quality when watched in full screen mode.", "duration": 267}, {"id": "vnR-ifjqn_E", "thumbnail": "https://i.ytimg.com/vi/vnR-ifjqn_E/default.jpg", "file": "https://www.youtube.com/watch?v=vnR-ifjqn_E", "title": "Kate Bush - Un Baiser D\u0027Enfant", "description": "", "duration": 171}, {"id": "Tu5bnFAJJzY", "thumbnail": "https://i.ytimg.com/vi/Tu5bnFAJJzY/default.jpg", "file": "https://www.youtube.com/watch?v=Tu5bnFAJJzY", "title": "Red Shoes Dance Mix - Kate Bush", "description": "Once upon a time in Dreamland, I got a hold of a Kate Bush track that was a dance mix of The Red Shoes. Ironically, it didn\u0027t have any bass on it so... I FIXED IT. I also did some E-bow guitar.\n2 of 2.", "duration": 463}, {"id": "ehwbvILs5vI", "thumbnail": "https://i.ytimg.com/vi/ehwbvILs5vI/default.jpg", "file": "https://www.youtube.com/watch?v=ehwbvILs5vI", "title": "Kate Bush - The Whole Story (1986)", "description": "Disclaimer:\nI do not own or claim to own the audio or video in this upload. It is the property of the respective copyright owners. It originates from a TV program recorded onto a VHS video tape, sometime between 1987 to 2002, recently made into an MKV fil", "duration": 3357}, {"id": "ExxjCtalm2c", "thumbnail": "https://i.ytimg.com/vi/ExxjCtalm2c/default.jpg", "file": "https://www.youtube.com/watch?v=ExxjCtalm2c", "title": "Kate Bush - The Man With The Child In His Eyes Music Video", "description": "Kate Bush - The Man With The Child In His Eyes Music Video.\n\u2117 1978 EMI Records Ltd.\n\nhttp://www.katebush.com/\nhttp://www.davidgilmour.com/\nhttps://andrewpowell.com/\n\nExecutive Producer: David Jon Gilmour (born 6/March/1946, Cambridge, East Region, Engla", "duration": 172}, {"id": "t24pRXsTveE", "thumbnail": "https://i.ytimg.com/vi/t24pRXsTveE/default.jpg", "file": "https://www.youtube.com/watch?v=t24pRXsTveE", "title": "\u0027Wake Up\u0027 - Kate Bush - Before The Dawn - Live Album Ad", "description": "", "duration": 48}, {"id": "qfNtPbHkp0U", "thumbnail": "https://i.ytimg.com/vi/qfNtPbHkp0U/default.jpg", "file": "https://www.youtube.com/watch?v=qfNtPbHkp0U", "title": "Kate Bush - Them Heavy People - Official Music Video", "description": "Official music video for the single Them Heavy People written and performed by British singer Kate Bush.\r\n\r\nThem Heavy People is a from Kate\u0027s debut album The Kick Inside.  In 1978 the song was issued as a single in Japan with the title Rolling the B", "duration": 246}, {"id": "cuOehmAjIDY", "thumbnail": "https://i.ytimg.com/vi/cuOehmAjIDY/default.jpg", "file": "https://www.youtube.com/watch?v=cuOehmAjIDY", "title": "Kate Bush - Un Baiser D\u0027Enfant (Scene From The Innocents)", "description": "I took a scene from The Innocents based on Henry James\u0027 The Turn Of The Screw and overdubbed Kate Bush\u0027s French version of The Infant Kiss from her album Never For Ever. Apparently the song was based on this scene where Deborah Kerr as the housekeeper is ", "duration": 171}, {"id": "PaUGy7ZMdak", "thumbnail": "https://i.ytimg.com/vi/PaUGy7ZMdak/default.jpg", "file": "https://www.youtube.com/watch?v=PaUGy7ZMdak", "title": "Kate Bush- Houdini HD", "description": "\u8aac\u660e", "duration": 232}, {"id": "I9I7M-nR978", "thumbnail": "https://i.ytimg.com/vi/I9I7M-nR978/default.jpg", "file": "https://www.youtube.com/watch?v=I9I7M-nR978", "title": "Kate Bush - Home For Christmas", "description": "Rubberband Girl/Moments of Pleasure B-Side", "duration": 112}, {"id": "a3BzjfAjug4", "thumbnail": "https://i.ytimg.com/vi/a3BzjfAjug4/default.jpg", "file": "https://www.youtube.com/watch?v=a3BzjfAjug4", "title": "Kate Bush - Wild Man - radio edit still video", "description": "Official still video for the new Kate Bush single Wild Man.\r\n\r\nWild Man will be released on 11th October 2011 and will be available from all digital retailers.\r\n\r\nIt is the first single from the forthcoming album 50 Words For Snow\r\n\r\n50 Words For Snow", "duration": 257}, {"id": "GPB4GM-WwwY", "thumbnail": "https://i.ytimg.com/vi/GPB4GM-WwwY/default.jpg", "file": "https://www.youtube.com/watch?v=GPB4GM-WwwY", "title": "Kate Bush - Eat The Music - Official Music Video", "description": "Official music video for the single Eat the Music written and recorded by Kate Bush. \r\n\r\nThe single reached number ten in the U.S. Modern Rock Tracks chart.\r\nA remix of the song by Tricky is featured on the mix album Back to Mine.", "duration": 321}, {"id": "D-M-CgG6fKU", "thumbnail": "https://i.ytimg.com/vi/D-M-CgG6fKU/default.jpg", "file": "https://www.youtube.com/watch?v=D-M-CgG6fKU", "title": "Kate Bush - Rubberband Girl", "description": "Kate Bush\u0027s video for Rubberband Girl.\r\nSpecial thanks to http://katebush.galactic.to/video/\r\nfor initially posting it", "duration": 275}, {"id": "ynuJnZN7tGw", "thumbnail": "https://i.ytimg.com/vi/ynuJnZN7tGw/default.jpg", "file": "https://www.youtube.com/watch?v=ynuJnZN7tGw", "title": "Breathing", "description": "Provided to YouTube by Parlophone UK\n\nBreathing \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 330}, {"id": "0ar7vovnH5I", "thumbnail": "https://i.ytimg.com/vi/0ar7vovnH5I/default.jpg", "file": "https://www.youtube.com/watch?v=0ar7vovnH5I", "title": "Kate Bush - Wow - Official Music Video - Version 1", "description": "Official music video for the single Wow written by British singer Kate Bush.\r\n\r\nWow was the second single to be released from Kate Bush\u0027s second album Lionheart.  There were 3 different videos made to accompany this single.  This is the video for vers", "duration": 226}, {"id": "pfD7FzcjVyQ", "thumbnail": "https://i.ytimg.com/vi/pfD7FzcjVyQ/default.jpg", "file": "https://www.youtube.com/watch?v=pfD7FzcjVyQ", "title": "Kate Bush - December Will Be Magic Again - Snowtime Special", "description": "This is a special on the United Kingdom\u0027s official TV network. I dare not speak it\u0027s dread name, as that\u0027s how videos are found and deleted. Never mind, of course, that there are NO Kate videos currently available for sale.\r\n\r\nI assembled this version fro", "duration": 231}, {"id": "pFnwc29NYEg", "thumbnail": "https://i.ytimg.com/vi/pFnwc29NYEg/default.jpg", "file": "https://www.youtube.com/watch?v=pFnwc29NYEg", "title": "Kate Bush Wuthering Heights; New Vocal with Video", "description": "Kate Bush\u0027s new vocal of Wuthering heights from The Whole Story, synched with the original music video.", "duration": 293}, {"id": "RtBZSIrmgiU", "thumbnail": "https://i.ytimg.com/vi/RtBZSIrmgiU/default.jpg", "file": "https://www.youtube.com/watch?v=RtBZSIrmgiU", "title": "Kate Bush - Jig Of Life", "description": "This song was part 5 of The Ninth Wave on the Hounds Of Love album from 1985. The music is traditional folk tunes collected by her brother Paddy Bush. Kate wrote the lyrics for the first part of the song, while the poem in the last part was read and w", "duration": 261}, {"id": "nPtfLSTjpQo", "thumbnail": "https://i.ytimg.com/vi/nPtfLSTjpQo/default.jpg", "file": "https://www.youtube.com/watch?v=nPtfLSTjpQo", "title": "Pi", "description": "Provided to YouTube by Sony Music Entertainment\n\nPi \u00b7 Kate Bush\n\nAerial\n\n\u2117 2005 Novercia Overseas Limited\n\nReleased on: 2005-11-07\n\nMastering  Engineer: James Guthrie\nRecording  Engineer: Del Palmer\n\nAuto-generated by YouTube.", "duration": 370}, {"id": "xrT1QI_Yrd8", "thumbnail": "https://i.ytimg.com/vi/xrT1QI_Yrd8/default.jpg", "file": "https://www.youtube.com/watch?v=xrT1QI_Yrd8", "title": "Peter Gabriel \u0026 Kate Bush - Don\u0027t Give Up (Version 2) (1986)", "description": "Don\u0027t Give Up is a song written by English rock musician Peter Gabriel and recorded as a duet with Kate Bush for Gabriel\u0027s sixth solo studio album So (1986). The single version was released as the second single from the album in the UK in 1986 and as th", "duration": 356}, {"id": "W3M9B2BVNdk", "thumbnail": "https://i.ytimg.com/vi/W3M9B2BVNdk/default.jpg", "file": "https://www.youtube.com/watch?v=W3M9B2BVNdk", "title": "Hammer Horror/Coffee Homeground - Kate Bush \u200e1978 (/Facciate:2)", "description": "Interprete: Catherine Bush, detta Kate\nNazionalit\u00e0  Regno Unito (Welling, 30 luglio 1958)\nPeriodo di attivit\u00e0 musicale 1978 \u2013 in attivit\u00e0\nSito ufficiale: http://www.katebush.com/\nEtichetta: EMI. La EMI (sigla di Electric and Musical Industries) \u00e8 st", "duration": 495}, {"id": "p55qdQYy85Q", "thumbnail": "https://i.ytimg.com/vi/p55qdQYy85Q/default.jpg", "file": "https://www.youtube.com/watch?v=p55qdQYy85Q", "title": "All We Ever Look For", "description": "Provided to YouTube by Parlophone UK\n\nAll We Ever Look For \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 229}, {"id": "QOZDKlpybZE", "thumbnail": "https://i.ytimg.com/vi/QOZDKlpybZE/default.jpg", "file": "https://www.youtube.com/watch?v=QOZDKlpybZE", "title": "Kate Bush - Army Dreamers - Official Music Video", "description": "Official Music Video for the single Army Dreamers written and produced by Kate Bush.  Army Dreamers was the third and final song to be released from Never For Ever by Kate Bush.\r\n\r\nArmy Dreamers was released on 22 September 1980 and peaked at number", "duration": 197}, {"id": "EMwagH_ado8", "thumbnail": "https://i.ytimg.com/vi/EMwagH_ado8/default.jpg", "file": "https://www.youtube.com/watch?v=EMwagH_ado8", "title": "Kate Bush - Hounds Of Love (Extended Version/Unique US Promo MIx)", "description": "This extended version is not the same as the Alternative version on most 12 releases of this record. It\u0027s more or less the album version with the first verse repeated later in the edit. \n\nThis version was only available in the US on promo copies of the", "duration": 223}, {"id": "07uxylovC5U", "thumbnail": "https://i.ytimg.com/vi/07uxylovC5U/default.jpg", "file": "https://www.youtube.com/watch?v=07uxylovC5U", "title": "Kate Bush - Lake Tahoe - Official Music Video (HD)", "description": "Official still video for the new Kate Bush track Lake Tahoe.\r\n\r\nLake Tahoe is the second track from Kate\u0027s 10th studio album 50 Words For Snow - released on 21st November 2011.\r\n\r\n50 Words For Snow is available for pre-order here: http://www.katebush.", "duration": 669}, {"id": "2jxjXpJSk5s", "thumbnail": "https://i.ytimg.com/vi/2jxjXpJSk5s/default.jpg", "file": "https://www.youtube.com/watch?v=2jxjXpJSk5s", "title": "Kate Bush - Ne t\u0027enfuis pas", "description": "Kate recorded this song in 1982 and released it as a single in 1983 in France and Canada. The b-side was Un baiser d\u0027enfant, the French version of The Infant Kiss. The song is also featured on the This Woman\u0027s Work box set.\n\nFrench lyrics:\n\nJe viens", "duration": 156}, {"id": "5agt0cpxsKU", "thumbnail": "https://i.ytimg.com/vi/5agt0cpxsKU/default.jpg", "file": "https://www.youtube.com/watch?v=5agt0cpxsKU", "title": "Kate Bush - Rocket Man - Official Music Video", "description": "Official music video for Rocket Man covered by Kate Bush\n\nFeatured on The Other Sides available to order here: https://lnk.to/KB_raritiesCD\n\nWritten by Elton John and Bernie Taupin.\n\nThis is one of Kate\u0027s favourite songs and she directed the video whe", "duration": 307}, {"id": "9ESyqbDQW3g", "thumbnail": "https://i.ytimg.com/vi/9ESyqbDQW3g/default.jpg", "file": "https://www.youtube.com/watch?v=9ESyqbDQW3g", "title": "Kate Bush - My Lagan Love", "description": "A beautiful song that Kate recorded and released as the b-side of the 12\u0027\u0027 version of Cloudbusting. The song is a traditional Irish folk song with new lyrics written by her brother John Carder Bush.\n\nLyrics:\n\nWhen rainy nights are soft with tears, \nAnd ", "duration": 152}, {"id": "weM8bJF6maA", "thumbnail": "https://i.ytimg.com/vi/weM8bJF6maA/default.jpg", "file": "https://www.youtube.com/watch?v=weM8bJF6maA", "title": "Kate Bush - Shoedance (The Red Shoes Dance Mix Edit)", "description": "Remixed by Karl Blagan\n\nThe original remix includes a long section with dialogue from KT\u0027s movie The Line, The Cross and The Curve. It always kind of irritated me, so I chopped it out.", "duration": 494}, {"id": "cbhv7urKuLc", "thumbnail": "https://i.ytimg.com/vi/cbhv7urKuLc/default.jpg", "file": "https://www.youtube.com/watch?v=cbhv7urKuLc", "title": "Kate Bush - Before the Dawn - Act 2 - The Ninth Wave live. put vpn to USA to watch!", "description": "Recorded 30/9/14, not my video but relentlessly been trawling the net for this. I was at the opening night, no spoilers and what an amazing show, still the best ever seen. As the blu ray of the show is now unlikely ever to be seen, enjoy this. If it says ", "duration": 2918}, {"id": "7gYvPYZZL8I", "thumbnail": "https://i.ytimg.com/vi/7gYvPYZZL8I/default.jpg", "file": "https://www.youtube.com/watch?v=7gYvPYZZL8I", "title": "Houdini", "description": "Provided to YouTube by Parlophone UK\n\nHoudini \u00b7 Kate Bush\n\nThe Dreaming\n\n\u2117 1982 The copyright in this sound recording is owned by Novercia Ltd under exclusive licence to EMI Records Ltd\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 230}, {"id": "85wZw1O83aE", "thumbnail": "https://i.ytimg.com/vi/85wZw1O83aE/default.jpg", "file": "https://www.youtube.com/watch?v=85wZw1O83aE", "title": "Kate Bush - Rubberband Girl - Official Music Video", "description": "Official music video for the single Rubberband Girl written by British singer Kate Bush.\r\nRubberband Girl was the first of four singles to be released from Kate\u0027s album The Red Shoes.  The song was released on 6 September 1993 and peaked at number 12 ", "duration": 304}, {"id": "pllRW9wETzw", "thumbnail": "https://i.ytimg.com/vi/pllRW9wETzw/default.jpg", "file": "https://www.youtube.com/watch?v=pllRW9wETzw", "title": "Kate Bush - Cloudbusting - Official Music Video", "description": "Official music video for the single Cloudbusting written, produced and performed by the British singer Kate Bush. It was the second single released from her no.1 1985 album Hounds of Love. Cloudbusting peaked at no.20 in the UK Singles Chart.\r\n\r\nThe m", "duration": 417}, {"id": "xyEHKGDSg5I", "thumbnail": "https://i.ytimg.com/vi/xyEHKGDSg5I/default.jpg", "file": "https://www.youtube.com/watch?v=xyEHKGDSg5I", "title": "Kate Bush - Love and Anger - Official Music Video", "description": "Official music video for the single Love and Anger written and performed by British singer Kate Bush.\r\n\r\nLove and Anger was the third and final single to be released from Kate\u0027s album The Sensual World in 1990.  \r\n\r\nIt was released on 26th February 19", "duration": 280}, {"id": "SPVP9T4_0xU", "thumbnail": "https://i.ytimg.com/vi/SPVP9T4_0xU/default.jpg", "file": "https://www.youtube.com/watch?v=SPVP9T4_0xU", "title": "Breathing", "description": "Provided to YouTube by The Orchard Enterprises\n\nBreathing \u00b7 Wuthering Heights\n\nA Tribute to Kate Bush\u2019s Wuthering Heights\n\n\u2117 2011 Xelon Entertainment\n\nReleased on: 2011-12-05\n\nAuto-generated by YouTube.", "duration": 283}, {"id": "3NMhpI2-pLU", "thumbnail": "https://i.ytimg.com/vi/3NMhpI2-pLU/default.jpg", "file": "https://www.youtube.com/watch?v=3NMhpI2-pLU", "title": "Babooshka (2018 Remaster)", "description": "Provided to YouTube by Rhino\n\nBabooshka (2018 Remaster) \u00b7 Kate Bush\n\nNever for Ever\n\n\u2117 1980, 2018 Parlophone Records Ltd, a Warner Music Group Company\n\nElectric  Guitar: Alan Murphy\nDigital  Remasterer: Bernie Grundman\nElectric  Guitar: Brian Bath\nBack", "duration": 200}, {"id": "ZyuxXWxKSTg", "thumbnail": "https://i.ytimg.com/vi/ZyuxXWxKSTg/default.jpg", "file": "https://www.youtube.com/watch?v=ZyuxXWxKSTg", "title": "Kate Bush - Wow - Official Music Video", "description": "Official music video for the single Wow written by British singer Kate Bush.  \r\n\r\nWow was the second single to be released from Kate Bush\u0027s second album Lionheart.  There were 3 different videos made to accompany this single.  This is the video for ve", "duration": 223}, {"id": "v4GF7imFczI", "thumbnail": "https://i.ytimg.com/vi/v4GF7imFczI/default.jpg", "file": "https://www.youtube.com/watch?v=v4GF7imFczI", "title": "December Will Be Magic Again (Kate Bush) - The Nightmare Before Christmas (Henry Selick/Tim Burton)", "description": "A Cinematic Journey with Selick/Burton \u0026 Kate Bush\n\nThe Nightmare Before Christmas - Henry Selick (written by Tim Burton)\nDecember Will Be Magic Again - Kate Bush (single version)\n\nhttp://barbra-movies.blogspot.com", "duration": 294}, {"id": "U3z0-GNB39o", "thumbnail": "https://i.ytimg.com/vi/U3z0-GNB39o/default.jpg", "file": "https://www.youtube.com/watch?v=U3z0-GNB39o", "title": "A Coral Room", "description": "Provided to YouTube by Sony Music Entertainment\n\nA Coral Room \u00b7 Kate Bush\n\nAerial\n\n\u2117 2005 Novercia Overseas Limited\n\nReleased on: 2005-11-07\n\nMastering  Engineer: James Guthrie\nRecording  Engineer: Del Palmer\n\nAuto-generated by YouTube.", "duration": 373}, {"id": "1GqEyxS3gqo", "thumbnail": "https://i.ytimg.com/vi/1GqEyxS3gqo/default.jpg", "file": "https://www.youtube.com/watch?v=1GqEyxS3gqo", "title": "Don\u2019t Give Up", "description": "Provided to YouTube by itspetergabriel\n\nDon\u2019t Give Up \u00b7 Peter Gabriel\n\nShaking The Tree - 16 Golden Greats (remastered)\n\n\u2117 2009 Peter Gabriel Ltd\n\nReleased on: 2018-10-18\n\nAuto-generated by YouTube.", "duration": 356}, {"id": "lProYoEtHYw", "thumbnail": "https://i.ytimg.com/vi/lProYoEtHYw/default.jpg", "file": "https://www.youtube.com/watch?v=lProYoEtHYw", "title": "Egypt", "description": "Provided to YouTube by Parlophone UK\n\nEgypt \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 253}, {"id": "TgQUZcwd-JQ", "thumbnail": "https://i.ytimg.com/vi/TgQUZcwd-JQ/default.jpg", "file": "https://www.youtube.com/watch?v=TgQUZcwd-JQ", "title": "Kate Bush - Passing Through Air", "description": "Kate recorded this song in 1973 with members of the band Unicorn with David Gilmour as producer. It was released in 1980 as the b-side of Army Dreamers, together with Delius (Song Of Summer).\n\nLyrics:\n\nPassing through air. \nYou mix the stars with your", "duration": 126}, {"id": "LE1-W-a9hCI", "thumbnail": "https://i.ytimg.com/vi/LE1-W-a9hCI/default.jpg", "file": "https://www.youtube.com/watch?v=LE1-W-a9hCI", "title": "Hounds Of Love", "description": "Provided to YouTube by Parlophone UK\n\nHounds Of Love \u00b7 Kate Bush\n\nHounds Of Love\n\n\u2117 1985 The copyright in this sound recording is owned by Novercia Ltd under exclusive licence to EMI Records Ltd\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 184}, {"id": "yhLoxRmLc-8", "thumbnail": "https://i.ytimg.com/vi/yhLoxRmLc-8/default.jpg", "file": "https://www.youtube.com/watch?v=yhLoxRmLc-8", "title": "Misty", "description": "Provided to YouTube by Epitaph\n\nMisty \u00b7 Kate Bush\n\n50 Words For Snow\n\n\u2117 Noble \u0026 Brite Ltd. trading as Fish People, under exclusive license to Anti Inc.\n\nReleased on: 2011-11-22\n\nMusic  Publisher: Noble and Brite Ltd.\nComposer  Lyricist: Kate Bush\n\nAuto", "duration": 813}, {"id": "qrt4y_6r3Qs", "thumbnail": "https://i.ytimg.com/vi/qrt4y_6r3Qs/default.jpg", "file": "https://www.youtube.com/watch?v=qrt4y_6r3Qs", "title": "Kate Bush - Hounds Of Love (Live at Before The Dawn 2014)", "description": "From CD1 of Before The Dawn. Perfect and tear-inducing.", "duration": 214}, {"id": "xiywYRvCtTo", "thumbnail": "https://i.ytimg.com/vi/xiywYRvCtTo/default.jpg", "file": "https://www.youtube.com/watch?v=xiywYRvCtTo", "title": "Kate Bush - Big Stripey Lie (music video)", "description": "Unofficial music video for Big Stripey Lie by Kate Bush. All rights to Kate Bush. \nSong: Big Stripey Lie from the album The Red Shoes (1993) \nVideo: From Rubberband Girl (US Version) and The Line, The Cross and the Curve.", "duration": 225}, {"id": "dgNVhpA4g9Y", "thumbnail": "https://i.ytimg.com/vi/dgNVhpA4g9Y/default.jpg", "file": "https://www.youtube.com/watch?v=dgNVhpA4g9Y", "title": "Kate Bush - December Will Be Magic Again", "description": "December Will Be Magic Again was written and originally recorded in 1979, but not released until the Christmas season of the next year on 17 November 1980.\nNo promotional video was filmed for this single, but an alternate recording of the song was perform", "duration": 298}, {"id": "6RK9Z-SSbMg", "thumbnail": "https://i.ytimg.com/vi/6RK9Z-SSbMg/default.jpg", "file": "https://www.youtube.com/watch?v=6RK9Z-SSbMg", "title": "Kate Bush - Somewhere in Between", "description": "", "duration": 301}, {"id": "lwxZSMlb1DU", "thumbnail": "https://i.ytimg.com/vi/lwxZSMlb1DU/default.jpg", "file": "https://www.youtube.com/watch?v=lwxZSMlb1DU", "title": "In Your Eyes (Special Remix)", "description": "Provided to YouTube by itspetergabriel\n\nIn Your Eyes (Special Remix) \u00b7 Peter Gabriel\n\nFlotsam and Jetsam\n\n\u2117 1986 Peter Gabriel Ltd\n\nReleased on: 2019-09-13\n\nAuto-generated by YouTube.", "duration": 439}, {"id": "NTIvsGEPROg", "thumbnail": "https://i.ytimg.com/vi/NTIvsGEPROg/default.jpg", "file": "https://www.youtube.com/watch?v=NTIvsGEPROg", "title": "Army Dreamers", "description": "Provided to YouTube by Parlophone UK\n\nArmy Dreamers \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 179}, {"id": "xeJUncCA11k", "thumbnail": "https://i.ytimg.com/vi/xeJUncCA11k/default.jpg", "file": "https://www.youtube.com/watch?v=xeJUncCA11k", "title": "Kate Bush - Hounds of Love (1985)", "description": "From the album Hounds of Love (1985)\nFrom Top of the pops (1985)", "duration": 188}, {"id": "JZVuXkQgFsA", "thumbnail": "https://i.ytimg.com/vi/JZVuXkQgFsA/default.jpg", "file": "https://www.youtube.com/watch?v=JZVuXkQgFsA", "title": "Kate Bush - Wild Man", "description": "", "duration": 437}, {"id": "KqkuhppOcfM", "thumbnail": "https://i.ytimg.com/vi/KqkuhppOcfM/default.jpg", "file": "https://www.youtube.com/watch?v=KqkuhppOcfM", "title": "Kate Bush - December will be magic again", "description": " ", "duration": 293}, {"id": "NiEubEyF8jA", "thumbnail": "https://i.ytimg.com/vi/NiEubEyF8jA/default.jpg", "file": "https://www.youtube.com/watch?v=NiEubEyF8jA", "title": "Kate Bush - A Sky of Honey (Aerial Side B)", "description": "01 Prelude 0:00\n02 Prologue 1:25\n03 An Architect\u0027s Dream 7:06\n04 The Painter\u0027s Link 11:56\n05 Sunset 13:32\n06 Aerial Tal 19:30\n07 Somewhere In Between 20:32\n08 Nocturn 25:31\n09 Aerial 34:21\nAll rights and music belongs to Kate Bush. Presented under fair us", "duration": 2534}, {"id": "A-gbrUGstn8", "thumbnail": "https://i.ytimg.com/vi/A-gbrUGstn8/default.jpg", "file": "https://www.youtube.com/watch?v=A-gbrUGstn8", "title": "Night Scented Stock", "description": "Provided to YouTube by Parlophone UK\n\nNight Scented Stock \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 52}, {"id": "U9pI40LnmHM", "thumbnail": "https://i.ytimg.com/vi/U9pI40LnmHM/default.jpg", "file": "https://www.youtube.com/watch?v=U9pI40LnmHM", "title": "Army Dreamers (2018 Remaster)", "description": "Provided to YouTube by Rhino\n\nArmy Dreamers (2018 Remaster) \u00b7 Kate Bush\n\nNever for Ever\n\n\u2117 1980, 2018 Parlophone Records Ltd, a Warner Music Group Company\n\nAcoustic  Bass: Alan Murphy\nElectric  Guitar: Alan Murphy\nBacking  Vocals: Alan Murphy\nDigital  ", "duration": 180}, {"id": "QJAtb3_m2Vc", "thumbnail": "https://i.ytimg.com/vi/QJAtb3_m2Vc/default.jpg", "file": "https://www.youtube.com/watch?v=QJAtb3_m2Vc", "title": "Hounds Of Love (2018 Remaster)", "description": "Provided to YouTube by Rhino\n\nHounds Of Love (2018 Remaster) \u00b7 Kate Bush\n\nHounds of Love\n\n\u2117 1985, 2018 Noble \u0026 Brite Ltd\n\nDigital  Remasterer: Bernie Grundman\nEngineer: Bill Somerville-Large\nEngineer: Brian Tench\nDrums: Charlie Morgan\nEngineer: Del Pal", "duration": 183}, {"id": "CfbC6oDs4N4", "thumbnail": "https://i.ytimg.com/vi/CfbC6oDs4N4/default.jpg", "file": "https://www.youtube.com/watch?v=CfbC6oDs4N4", "title": "Kate Bush - Snowed In At Wheeler St. (Full Album Stream)", "description": "Listen to the full album at http://bit.ly/WRKDfW\nSnowed In At Wheeler St. by Kate Bush from the album \u002750 Words For Snow,\u0027 available now\nDownload the album on iTunes: http://bit.ly/1plrtFS", "duration": 486}, {"id": "d3uV9GqVlXg", "thumbnail": "https://i.ytimg.com/vi/d3uV9GqVlXg/default.jpg", "file": "https://www.youtube.com/watch?v=d3uV9GqVlXg", "title": "Kate Bush - December Will Be Magic Again (Extended Edit)", "description": "", "duration": 442}, {"id": "rtfYu9iUdw8", "thumbnail": "https://i.ytimg.com/vi/rtfYu9iUdw8/default.jpg", "file": "https://www.youtube.com/watch?v=rtfYu9iUdw8", "title": "Blow Away", "description": "Provided to YouTube by Parlophone UK\n\nBlow Away \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 215}, {"id": "UGtYgN0j0RE", "thumbnail": "https://i.ytimg.com/vi/UGtYgN0j0RE/default.jpg", "file": "https://www.youtube.com/watch?v=UGtYgN0j0RE", "title": "Kate Bush - 50 Words For Snow (Full Album Stream)", "description": "Listen to the full album at http://bit.ly/WRKDfW\n50 Words For Snow by Kate Bush from the album \u002750 Words For Snow,\u0027 available now\nDownload the album on iTunes: http://bit.ly/1plrtFS", "duration": 511}, {"id": "ZsUQIMGIVrM", "thumbnail": "https://i.ytimg.com/vi/ZsUQIMGIVrM/default.jpg", "file": "https://www.youtube.com/watch?v=ZsUQIMGIVrM", "title": "Kashka from Baghdad", "description": "Provided to YouTube by Parlophone UK\n\nKashka from Baghdad \u00b7 Kate Bush\n\nLionheart\n\n\u2117 1978 Parlophone Records Ltd, a Warner Music Group Company\n\nProducer: Andrew Powell\nAssistant, Featured  Vocalist: Kate Bush\nPersonal  Assistant: Kate Bush\nWriter: Kate ", "duration": 237}, {"id": "hwwzRYjWN_k", "thumbnail": "https://i.ytimg.com/vi/hwwzRYjWN_k/default.jpg", "file": "https://www.youtube.com/watch?v=hwwzRYjWN_k", "title": "Kate Bush - December Will Be Magic Again", "description": "I DO NOT OWN THIS SONG", "duration": 290}, {"id": "sV7w5TaYjRA", "thumbnail": "https://i.ytimg.com/vi/sV7w5TaYjRA/default.jpg", "file": "https://www.youtube.com/watch?v=sV7w5TaYjRA", "title": "Kate Bush - The Big Sky - Official Music Video", "description": "Official music video for the single The Big Sky written and produced by British singer Kate Bush.\r\n\r\nThe song was the fourth and final single from the No. 1 album Hounds of Love.  The single was released on 28th April 1986 and peaked at number 37 in the", "duration": 264}, {"id": "whTAtr9CIaE", "thumbnail": "https://i.ytimg.com/vi/whTAtr9CIaE/default.jpg", "file": "https://www.youtube.com/watch?v=whTAtr9CIaE", "title": "The Wedding List", "description": "Provided to YouTube by Parlophone UK\n\nThe Wedding List \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 256}, {"id": "guIMXLYDrXY", "thumbnail": "https://i.ytimg.com/vi/guIMXLYDrXY/default.jpg", "file": "https://www.youtube.com/watch?v=guIMXLYDrXY", "title": "Kate Bush - Among Angels | HQ", "description": "The last track from Kate Bush\u0027s 50 Words For Snow - album.", "duration": 409}, {"id": "9fu6oAsFIH4", "thumbnail": "https://i.ytimg.com/vi/9fu6oAsFIH4/default.jpg", "file": "https://www.youtube.com/watch?v=9fu6oAsFIH4", "title": "Kate Bush - December Will Be Magic Again (Bongo Mix) (Official Audio)", "description": "Reuploaded", "duration": 231}, {"id": "73i_UC0nWws", "thumbnail": "https://i.ytimg.com/vi/73i_UC0nWws/default.jpg", "file": "https://www.youtube.com/watch?v=73i_UC0nWws", "title": "Violin", "description": "Provided to YouTube by Parlophone UK\n\nViolin \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 196}, {"id": "WFBFe8vwE4I", "thumbnail": "https://i.ytimg.com/vi/WFBFe8vwE4I/default.jpg", "file": "https://www.youtube.com/watch?v=WFBFe8vwE4I", "title": "Kate Bush - December Will Be Magic Again (Instrumentals and acapellas)", "description": "made theme here: https://vocalremover.org/\n\nwill add link to both version of the instrumentals and acapella are here:\nhttp://www.mediafire.com/folder/ufft3z4l2qgas/December_will_be_magic_again_(instrumentals_and_acapellas)", "duration": 1045}, {"id": "oIEgLePQbwE", "thumbnail": "https://i.ytimg.com/vi/oIEgLePQbwE/default.jpg", "file": "https://www.youtube.com/watch?v=oIEgLePQbwE", "title": "Big Stripey Lie", "description": "Provided to YouTube by Sony Music Entertainment\n\nBig Stripey Lie \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nEngineer: Haydn Bendall\nDrums, Percussion: Gaumont D\u0027Olivera\nMastering  Engineer: Ian Cooper\nOrchest", "duration": 212}, {"id": "ORAQITI1Gxw", "thumbnail": "https://i.ytimg.com/vi/ORAQITI1Gxw/default.jpg", "file": "https://www.youtube.com/watch?v=ORAQITI1Gxw", "title": "The Infant Kiss", "description": "Provided to YouTube by Parlophone UK\n\nThe Infant Kiss \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 171}, {"id": "NTUcoR8_pyE", "thumbnail": "https://i.ytimg.com/vi/NTUcoR8_pyE/default.jpg", "file": "https://www.youtube.com/watch?v=NTUcoR8_pyE", "title": "Kate Bush - Experiment IV - Official Music Video", "description": "Official music video for the single Experiment IV written by the British singer Kate Bush. \r\n\r\nIt was released as a single on 27 October 1986, in order to promote Kate\u0027s greatest hits album The Whole Story. \r\n\r\nThe single peaked at 23 in the UK Singles ", "duration": 284}, {"id": "TJgbxDbMtb0", "thumbnail": "https://i.ytimg.com/vi/TJgbxDbMtb0/default.jpg", "file": "https://www.youtube.com/watch?v=TJgbxDbMtb0", "title": "Delius", "description": "Provided to YouTube by Parlophone UK\n\nDelius \u00b7 Kate Bush\n\nNever For Ever\n\n\u2117 1980 Parlophone Records Ltd, a Warner Music Group Company\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 172}, {"id": "VUqdpi9pNEw", "thumbnail": "https://i.ytimg.com/vi/VUqdpi9pNEw/default.jpg", "file": "https://www.youtube.com/watch?v=VUqdpi9pNEw", "title": "Kate Bush - Cloudbusting (The Organon Mix)", "description": "Copyright Disclaimer Under Section 107 of the Copyright Act 1976, allowance is made for fair use for purposes such as criticism, comment, news reporting, teaching, scholarship, and research. Fair use is a use permitted by copyright statute that might ot", "duration": 401}, {"id": "Waac8sNUNcs", "thumbnail": "https://i.ytimg.com/vi/Waac8sNUNcs/default.jpg", "file": "https://www.youtube.com/watch?v=Waac8sNUNcs", "title": "Kate Bush - Not This Time", "description": "From the Big Sky singles.", "duration": 221}, {"id": "V3XAeg3B0To", "thumbnail": "https://i.ytimg.com/vi/V3XAeg3B0To/default.jpg", "file": "https://www.youtube.com/watch?v=V3XAeg3B0To", "title": "Kate Bush - Suspended in Gaffa - Official Music Video", "description": "Official music video for the single Suspended in Gaffa written and produced by British singer Kate Bush.", "duration": 231}, {"id": "tL1vE3yVZ7w", "thumbnail": "https://i.ytimg.com/vi/tL1vE3yVZ7w/default.jpg", "file": "https://www.youtube.com/watch?v=tL1vE3yVZ7w", "title": "Kate Bush - On Stage EP Side 1 (1979)", "description": "Kate Bush was a child prodigy, skilled in music, dance and theatre. She was discovered by Pink Floyd guitarist David Gilmour as a teenager, and he was able to get her a recording contract. These tracks are from her 1979 performance at the Hammersmith, whi", "duration": 469}, {"id": "NAj8suae3WY", "thumbnail": "https://i.ytimg.com/vi/NAj8suae3WY/default.jpg", "file": "https://www.youtube.com/watch?v=NAj8suae3WY", "title": "Kate Bush - The Man with the Child in His Eyes - Official Music Video", "description": "Official music video for the single The Man with the Child in His Eyes written by British singer Kate Bush.\r\n\r\nThe Man with the Child in His Eyes is the fifth track on Kate\u0027s debut album The Kick Inside.  It was released as her second single on 26th M", "duration": 172}, {"id": "bmHZjBPVfwI", "thumbnail": "https://i.ytimg.com/vi/bmHZjBPVfwI/default.jpg", "file": "https://www.youtube.com/watch?v=bmHZjBPVfwI", "title": "Kate Bush - Running Up That Hill (Extended Version)", "description": " ", "duration": 339}, {"id": "-Zf2szLzjY0", "thumbnail": "https://i.ytimg.com/vi/-Zf2szLzjY0/default.jpg", "file": "https://www.youtube.com/watch?v=-Zf2szLzjY0", "title": "Kate Bush - And so is love - Director\u0027s Cut", "description": "Kate Bush - And so is love - Director\u0027s Cut", "duration": 255}, {"id": "GOlkRP6zNlY", "thumbnail": "https://i.ytimg.com/vi/GOlkRP6zNlY/default.jpg", "file": "https://www.youtube.com/watch?v=GOlkRP6zNlY", "title": "Kate Bush - Hounds of Love", "description": "Hounds of Love (1985) track 2\r\n\r\nIt\u0027s in the trees! \r\nIt\u0027s coming! \r\n\r\nWhen I was a child: \r\nRunning in the night, \r\nAfraid of what might be \r\n\r\nHiding in the dark, \r\nHiding in the street, \r\nAnd of what was following me... \r\n\r\nNow hounds of love are hun", "duration": 183}, {"id": "5R86V64GLq4", "thumbnail": "https://i.ytimg.com/vi/5R86V64GLq4/default.jpg", "file": "https://www.youtube.com/watch?v=5R86V64GLq4", "title": "Kate Bush - Hounds Of Love (Alternative)", "description": "Kate released this version of Hounds Of Love as a 12\u0027\u0027 single in 1986.\n\nLyrics:\n\nWhen I was a child\nRunning away from nothing\nHeading for home\n(Do-de do do, do-de da da)\nNow hounds of love are hunting\n(Do-de do do, do-de da da)\nI\u0027ve always been a coward", "duration": 231}, {"id": "bNKwUtNnpE4", "thumbnail": "https://i.ytimg.com/vi/bNKwUtNnpE4/default.jpg", "file": "https://www.youtube.com/watch?v=bNKwUtNnpE4", "title": "Rubberband Girl", "description": "Provided to YouTube by Sony Music Entertainment\n\nRubberband Girl \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nEngineer: Haydn Bendall\nGuitar: Danny McIntosh\nMastering  Engineer: Ian Cooper\nDrums, Percussion: St", "duration": 283}, {"id": "rtDy0xQKhBs", "thumbnail": "https://i.ytimg.com/vi/rtDy0xQKhBs/default.jpg", "file": "https://www.youtube.com/watch?v=rtDy0xQKhBs", "title": "Kate Bush - Flower of the mountain (originally titled the sensual world) -  Director\u0027s Cut", "description": "Kate Bush - Flower of the mountain (originally titled the sensual world) -  Director\u0027s Cut \r\nLe Parc\r\nLaurent Hilaire and Isabelle Gu\u00e9rin.\r\nChoreography Angelin Preljocaj\r\nParis Opera Ballet", "duration": 318}, {"id": "KO0cYD3xXpQ", "thumbnail": "https://i.ytimg.com/vi/KO0cYD3xXpQ/default.jpg", "file": "https://www.youtube.com/watch?v=KO0cYD3xXpQ", "title": "Kate Bush - Suspended in Gaffa", "description": "Kate Bush performing Suspended in Gaffa at a French tv show.", "duration": 232}, {"id": "CH5yHa9ZD-Q", "thumbnail": "https://i.ytimg.com/vi/CH5yHa9ZD-Q/default.jpg", "file": "https://www.youtube.com/watch?v=CH5yHa9ZD-Q", "title": "Kate Bush On Stage Complete EP 1979", "description": "Recorded Live at the Hammersmith Odeon 1979\n\nTracks:\n00:00 - Them Heavy People\n04:08 - Don\u0027t Push Your Foot On The Heartbrake\n07:48 - James And The Cold Gun\n14:14 - L\u0027Amour Looks Something Like You", "duration": 1019}, {"id": "1rRisyIVaIw", "thumbnail": "https://i.ytimg.com/vi/1rRisyIVaIw/default.jpg", "file": "https://www.youtube.com/watch?v=1rRisyIVaIw", "title": "KATE BUSH   Running up that hill 1985", "description": "", "duration": 346}, {"id": "B2GDWtgd8zA", "thumbnail": "https://i.ytimg.com/vi/B2GDWtgd8zA/default.jpg", "file": "https://www.youtube.com/watch?v=B2GDWtgd8zA", "title": "Kate Bush - The Big Sky (Meteorological Mix)", "description": "This remix of The Big Sky was released as a 12\u0027\u0027 single in 1986. It is also available as a bonus track on the remastered Hounds Of Love album.\r\n\r\nLyrics:\r\n\r\nThat cloud, that cloud -- it looks like Ireland!\r\nC\u0027mon and blow it a kiss now\r\nBut quick --\r\n", "duration": 467}, {"id": "nzqF_gBpS84", "thumbnail": "https://i.ytimg.com/vi/nzqF_gBpS84/default.jpg", "file": "https://www.youtube.com/watch?v=nzqF_gBpS84", "title": "Kate Bush - Deeper Understanding - Official Video", "description": "Official music video for the single Deeper Understanding by Kate Bush\n\nStarring Robbie Coltrane.  Written and directed by Kate Bush.\n\nDeeper Understanding is the first single from Kate\u0027s album Director\u0027s Cut.\n\nIt was the first release on Kate\u0027s own Fi", "duration": 392}, {"id": "UpVKPUoI554", "thumbnail": "https://i.ytimg.com/vi/UpVKPUoI554/default.jpg", "file": "https://www.youtube.com/watch?v=UpVKPUoI554", "title": "Kate Bush - Be Kind to My Mistakes", "description": "Hounds of Love (1985) track 15 (1997 re-edition bonus track)\r\n\r\nIt is this that brings us together. \r\nIt is this that brings us together. \r\n\r\nIt\u0027s all right, darling, \r\nWe can do this together. \r\nIt\u0027s all right, darling, \r\nI can think of nothing better. \r", "duration": 181}, {"id": "B16RgN8-E28", "thumbnail": "https://i.ytimg.com/vi/B16RgN8-E28/default.jpg", "file": "https://www.youtube.com/watch?v=B16RgN8-E28", "title": "Suspended In Gaffa", "description": "Provided to YouTube by Parlophone UK\n\nSuspended In Gaffa \u00b7 Kate Bush\n\nThe Dreaming\n\n\u2117 1982 The copyright in this sound recording is owned by Novercia Ltd under exclusive licence to EMI Records Ltd\n\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 236}, {"id": "B5Kz26VSpqg", "thumbnail": "https://i.ytimg.com/vi/B5Kz26VSpqg/default.jpg", "file": "https://www.youtube.com/watch?v=B5Kz26VSpqg", "title": "Kate Bush - The Kick Inside (Efteling)", "description": "Kate performs The Kick Inside at Efteling in 1978.\n\nLyrics:\n\nI\u0027ve pulled down my lace and the chintz. \nOh, do you know you have the face of a genius? \nI\u0027ll send your love to Zeus. \nOh, by the time you read this, \nI\u0027ll be well in touch. \n\nI\u0027m giving it a", "duration": 216}, {"id": "Z6HTPUeAzY8", "thumbnail": "https://i.ytimg.com/vi/Z6HTPUeAzY8/default.jpg", "file": "https://www.youtube.com/watch?v=Z6HTPUeAzY8", "title": "KATE BUSH - SYMPHONY IN BLUE  ( HIGH QUALITY )", "description": " ", "duration": 212}, {"id": "JjFMmMMV6ww", "thumbnail": "https://i.ytimg.com/vi/JjFMmMMV6ww/default.jpg", "file": "https://www.youtube.com/watch?v=JjFMmMMV6ww", "title": "\u5d50\u304c\u4e18 - \u30b1\u30a4\u30c8\u30fb\u30d6\u30c3\u30b7\u30e5\u3000Wuthering Heights - Kate Bush", "description": " ", "duration": 225}, {"id": "qM_8vOG-3CY", "thumbnail": "https://i.ytimg.com/vi/qM_8vOG-3CY/default.jpg", "file": "https://www.youtube.com/watch?v=qM_8vOG-3CY", "title": "Kate Bush - Eat the Music", "description": "Music video by Kate Bush performing Eat The Music. (C) 1993 SONY BMG MUSIC ENTERTAINMENT", "duration": 316}, {"id": "zYO63Qu6tXI", "thumbnail": "https://i.ytimg.com/vi/zYO63Qu6tXI/default.jpg", "file": "https://www.youtube.com/watch?v=zYO63Qu6tXI", "title": "Kate Bush. Night of the Swallow", "description": "Using the Original audio track from the 1982 album. NOT a remastered 2018 version. ALL credits to Kate Bush, and the creators of any footage used here.", "duration": 320}, {"id": "YSOACab2t7k", "thumbnail": "https://i.ytimg.com/vi/YSOACab2t7k/default.jpg", "file": "https://www.youtube.com/watch?v=YSOACab2t7k", "title": "Moving", "description": "Provided to YouTube by Parlophone UK\n\nMoving \u00b7 Kate Bush\n\nThe Kick Inside\n\n\u2117 1975 Parlophone Records Ltd, a Warner Music Group Company\n\nProducer: Andrew Powell\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 182}, {"id": "-4csr6pLZLg", "thumbnail": "https://i.ytimg.com/vi/-4csr6pLZLg/default.jpg", "file": "https://www.youtube.com/watch?v=-4csr6pLZLg", "title": "Kate Bush - Sat in Your Lap - Official Music Video", "description": "Official music video for the single Sat in Your Lap written and produced by British singer Kate Bush.\r\n\r\nThe song was the first single to be released from Kate\u0027s fourth album The Dreaming.  The single was released on 21st June 1981 and peaked at number ", "duration": 210}, {"id": "lxVcrFTzZMs", "thumbnail": "https://i.ytimg.com/vi/lxVcrFTzZMs/default.jpg", "file": "https://www.youtube.com/watch?v=lxVcrFTzZMs", "title": "Kate Bush - There Goes a Tenner - Official Music Video", "description": "Official music video for the single There Goes a Tenner written and produced by British singer Kate Bush.  \r\n\r\nIt was the third single from the album The Dreaming and was released on 2 November 1982.  The single was only released in the UK.", "duration": 210}, {"id": "nwPFbql1gXw", "thumbnail": "https://i.ytimg.com/vi/nwPFbql1gXw/default.jpg", "file": "https://www.youtube.com/watch?v=nwPFbql1gXw", "title": "Kate Bush \u2022 4 Sucessos, Voume 1 \u0026 2 \u2117 2017 [1978]", "description": "1. Wuthering Heights 00:00\n2. The Man With The Child In His Eyes 04:30\n3. Moving 07:11\n4. Oh To Be in Love 10:14\n5. Strange Phenomena 13:33\n6. Wow 16:31\n7. Symphony In Blue 20:31\n8. Hammer Horror 24:07", "duration": 1728}, {"id": "hDzrVZuRAc4", "thumbnail": "https://i.ytimg.com/vi/hDzrVZuRAc4/default.jpg", "file": "https://www.youtube.com/watch?v=hDzrVZuRAc4", "title": "Kate Bush - Moments Of Pleasure (Instrumental Version)", "description": "Instrumental Version of \u0027\u0027Moments Of Pleasure\u0027\u0027\n\nmovies/clips:\nKate Bush - Moments Of Pleasure \u0026 Breathing music videos\nValerie and Her Week of Wonders (1970)\nSleeping Beauty (1959)\nRinging Bell (aka Chirin\u0027s Bell 1978)\nFantasia", "duration": 321}, {"id": "XqBOJUeGJCk", "thumbnail": "https://i.ytimg.com/vi/XqBOJUeGJCk/default.jpg", "file": "https://www.youtube.com/watch?v=XqBOJUeGJCk", "title": "Sunset (Kate Bush)", "description": "My sister had never been to see the ocean so my friend Donna and I took her to Montauk  (The farthest tip of Long Island).  I had taken amateur video and thought the ocean sky themes went well with Kate Bush\u0027s brilliant song Sunset.  Please be sure to che", "duration": 366}, {"id": "PXVxpgHjV1Y", "thumbnail": "https://i.ytimg.com/vi/PXVxpgHjV1Y/default.jpg", "file": "https://www.youtube.com/watch?v=PXVxpgHjV1Y", "title": "Kate Bush - Running Up That Hill (Extended 12 Version)", "description": "", "duration": 633}, {"id": "_256xd9N27o", "thumbnail": "https://i.ytimg.com/vi/_256xd9N27o/default.jpg", "file": "https://www.youtube.com/watch?v=_256xd9N27o", "title": "Kate Bush - And Dream of Sheep (Live) - Official Video", "description": "This is a special piece of film to accompany the release of the live single \u2018And Dream Of Sheep\u2019. The vocal was performed live while filming Kate lying in the huge water tank at Pinewood Studios. This was to create a sense of realism, as the character", "duration": 222}, {"id": "5n8tRputb_I", "thumbnail": "https://i.ytimg.com/vi/5n8tRputb_I/default.jpg", "file": "https://www.youtube.com/watch?v=5n8tRputb_I", "title": "Kate Bush - Suspended in Gaffa - Bananas", "description": "Check out Topcatsrepublic\u0027s edit of this video. Very cool!\r\n\r\nFrom a newly discovered, very high quality (Thanks Menro!) copy. I did a little fiddling to fix the beginning and the end so the cuts are less jarring. Sadly, this is all they aired, fading the", "duration": 186}, {"id": "o8DI9aOpJp4", "thumbnail": "https://i.ytimg.com/vi/o8DI9aOpJp4/default.jpg", "file": "https://www.youtube.com/watch?v=o8DI9aOpJp4", "title": "Kate Bush / 2018 remasters unboxing video", "description": "SuperDeluxeEdition.com Editor Paul Sinclair takes a first look at the Kate Bush CD and vinyl box sets which contain 2018 remasters of her entire studio output.", "duration": 2217}, {"id": "nHdXS4efX0k", "thumbnail": "https://i.ytimg.com/vi/nHdXS4efX0k/default.jpg", "file": "https://www.youtube.com/watch?v=nHdXS4efX0k", "title": "Kate Bush - Cloudbusting (The Organon Remix)", "description": "This track is Kate Bush - Cloudbusting (The Organon Remix). It appears to be an official remix released in 1986.\nThe original song\u0027s initial release was in 1985.\n\n(C) 1985 \u0026 1986 WMG, PLG UK Catalog \u0026 EMI Records\n\nPLEASE NOTE: The information I state abov", "duration": 394}, {"id": "La2REEazSks", "thumbnail": "https://i.ytimg.com/vi/La2REEazSks/default.jpg", "file": "https://www.youtube.com/watch?v=La2REEazSks", "title": "Kate Bush - Running Up That Hill (EmeraldCity Soft Dubstep Remix) [2010]", "description": "Kate Bush - Running Up That Hill (EmeraldCity Dubstep Remix): https://soundcloud.com/emeraldcitysmusic/kate-bush-running-up-that-hill-jedeye-re-dub\n\nKate Bush:\nhttps://soundcloud.com/kate-bush-official\nhttps://www.youtube.com/user/KateBushVEVO\nhttps://twi", "duration": 313}, {"id": "NotBVWAvTt0", "thumbnail": "https://i.ytimg.com/vi/NotBVWAvTt0/default.jpg", "file": "https://www.youtube.com/watch?v=NotBVWAvTt0", "title": "Kate Bush: Rubberband Girl (1993 Extended Mix)", "description": "This is my video edit of the original 1993 12 Extended Version of Rubberband Girl by Kate Bush.\r\n\r\nBefore Kate became famous in the seventies she used to travel into London from Kent on the Tube Train for daily dance Lessons from Lyndsay Kemp.\r\n\r\n\r\n(Wh", "duration": 428}, {"id": "Fk-4lXLM34g", "thumbnail": "https://i.ytimg.com/vi/Fk-4lXLM34g/default.jpg", "file": "https://www.youtube.com/watch?v=Fk-4lXLM34g", "title": "Kate Bush - Wuthering Heights - Official Music Video - Version 2", "description": "Official music video for the single Wuthering Heights -- Version 2 by Kate Bush. \r\n\r\nWuthering Heights was released as Kate\u0027s debut single in January 1978. It became a No.1 hit in the UK singles chart and remains Kate\u0027s biggest-selling single. \r\n\r\nTwo m", "duration": 271}, {"id": "VzlofSthVwc", "thumbnail": "https://i.ytimg.com/vi/VzlofSthVwc/default.jpg", "file": "https://www.youtube.com/watch?v=VzlofSthVwc", "title": "Kate Bush - Breathing - Official Music Video", "description": "Official music video for the single Breathing by Kate Bush, the first cut from her 1980 album Never For Ever, with backing vocals by Roy Harper.\r\n\r\nThe single was issued on April 14, 1980, four months before the album was released, and reached number 16", "duration": 335}, {"id": "9NkvmVvIpwk", "thumbnail": "https://i.ytimg.com/vi/9NkvmVvIpwk/default.jpg", "file": "https://www.youtube.com/watch?v=9NkvmVvIpwk", "title": "Kate Bush - The Sensual World (Instrumental)", "description": "Composed, arranged and produced by Kate", "duration": 239}, {"id": "xg3x7qwrPcY", "thumbnail": "https://i.ytimg.com/vi/xg3x7qwrPcY/default.jpg", "file": "https://www.youtube.com/watch?v=xg3x7qwrPcY", "title": "Kate Bush - Experiment IV", "description": " ", "duration": 256}, {"id": "L7f4ICjuurE", "thumbnail": "https://i.ytimg.com/vi/L7f4ICjuurE/default.jpg", "file": "https://www.youtube.com/watch?v=L7f4ICjuurE", "title": "Kate Bush - Sexual Healing (V\u00eddeo)", "description": "Sexual Healing can\u00e7\u00e3o B-side do single King of the Mountain.\n(V\u00eddeo pertence originalmente a m\u00fasica Running Up That Hill)\n\nInstagram: ed.borges.rs", "duration": 297}, {"id": "7l1JXs5Fe7g", "thumbnail": "https://i.ytimg.com/vi/7l1JXs5Fe7g/default.jpg", "file": "https://www.youtube.com/watch?v=7l1JXs5Fe7g", "title": "kate bush - running up that hill instrumental vinyl 1985 HQ", "description": "toujours pour le plaisir d\u0027\u00e9couter ce titre, voici une version instrumentale de la version 45t mais qui se trouve sur la face B du maxi 45t.\n\nmaxi 45t num\u00e9ris\u00e9 et restaur\u00e9 avec le liquide de restauration pour disques vinyles disponible sur : \n\nwww.45t", "duration": 295}, {"id": "sDn_3VysILs", "thumbnail": "https://i.ytimg.com/vi/sDn_3VysILs/default.jpg", "file": "https://www.youtube.com/watch?v=sDn_3VysILs", "title": "Kate Bush - The Handsome Cabin Boy", "description": "A traditional folk song that Kate recorded for the b-side of the Hounds Of Love single.\nLyrics:\n\n\u0027Tis of a pretty female \nAs you may understand. \nHer mind being bent for rambling \nUnto some foreign land, \nShe dressed herself in sailor\u0027s clothes, \nOr so ", "duration": 196}, {"id": "U4dAvYWURTc", "thumbnail": "https://i.ytimg.com/vi/U4dAvYWURTc/default.jpg", "file": "https://www.youtube.com/watch?v=U4dAvYWURTc", "title": "kate bush. Ran Tan Waltz", "description": "Using the Original audio track. NOT a remastered 2018 version. ALL credits to Kate Bush, and the creators of any footage used here.\nB side of babooshka", "duration": 159}, {"id": "1O4PgNx8s_Y", "thumbnail": "https://i.ytimg.com/vi/1O4PgNx8s_Y/default.jpg", "file": "https://www.youtube.com/watch?v=1O4PgNx8s_Y", "title": "And So Is Love", "description": "Provided to YouTube by Sony Music Entertainment\n\nAnd So Is Love \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nGuitar: Eric Clapton\nDrums: Stuart Elliott\nBass: John Giblin\nEngineer: Haydn Bendall\nMastering  Engin", "duration": 256}, {"id": "YLHLPbEQ-hE", "thumbnail": "https://i.ytimg.com/vi/YLHLPbEQ-hE/default.jpg", "file": "https://www.youtube.com/watch?v=YLHLPbEQ-hE", "title": "Kate Bush, And So Is Love, Top of the Pops 1994", "description": "Rare 1994 Top of the Pops appearance singing And So Is Love from the album The Red Shoes", "duration": 253}, {"id": "UsctatTAlHM", "thumbnail": "https://i.ytimg.com/vi/UsctatTAlHM/default.jpg", "file": "https://www.youtube.com/watch?v=UsctatTAlHM", "title": "Kate Bush - James And The Cold Gun: The Tour Of Life 1979", "description": "One of the standout moments from Kate\u0027s legendary 1979 live shows.", "duration": 521}, {"id": "zN2nQ2IkDWE", "thumbnail": "https://i.ytimg.com/vi/zN2nQ2IkDWE/default.jpg", "file": "https://www.youtube.com/watch?v=zN2nQ2IkDWE", "title": "Kate Bush - Suspended In Gaffa: Houba Houba, October 1982", "description": "Kate, Yannick Noah, and a stunning performance of my favourite track on The Dreaming. What\u0027s not to love?", "duration": 264}, {"id": "I1Qr6vtoUtY", "thumbnail": "https://i.ytimg.com/vi/I1Qr6vtoUtY/default.jpg", "file": "https://www.youtube.com/watch?v=I1Qr6vtoUtY", "title": "Kate Bush - I\u0027m Still Waiting 1989", "description": "Kate Bush - This Woman\u0027s Work (CD Single) 1989\nEMI\n\n1.  This Woman\u0027s Work (Single Mix)\n2.  Be Kind To My Mistakes\n3.  I\u0027m Still Waiting", "duration": 269}, {"id": "ADnPNTlqiwQ", "thumbnail": "https://i.ytimg.com/vi/ADnPNTlqiwQ/default.jpg", "file": "https://www.youtube.com/watch?v=ADnPNTlqiwQ", "title": "Suspended In Gaffa (2018 Remaster)", "description": "Provided to YouTube by Rhino\n\nSuspended In Gaffa (2018 Remaster) \u00b7 Kate Bush\n\nThe Dreaming\n\n\u2117 1982, 2018 Noble \u0026 Brite Ltd\n\nDigital  Remasterer: Bernie Grundman\nEngineer: Danny Dawson\nSynthesizer: Dave Lawson\nEngineer: David Taylor\nEngineer: David Teri", "duration": 235}, {"id": "r6NvNBpwQj0", "thumbnail": "https://i.ytimg.com/vi/r6NvNBpwQj0/default.jpg", "file": "https://www.youtube.com/watch?v=r6NvNBpwQj0", "title": "Kate Bush - Strange Phenomena (Efteling)", "description": "Kate performs Strange Phenomena at Efteling in 1978.\r\n\r\nLyrics:\r\n\r\nSoon it will be the phase of the moon \r\nWhen people tune in. \r\nEvery girl knows about the punctual blues, \r\nBut who\u0027s to know the power behind our moves? \r\n\r\nA day of coincidence with th", "duration": 171}, {"id": "Eq-5TvY4BEA", "thumbnail": "https://i.ytimg.com/vi/Eq-5TvY4BEA/default.jpg", "file": "https://www.youtube.com/watch?v=Eq-5TvY4BEA", "title": "Kate Bush - Night Of The Swallow", "description": "A great song from The Dreaming.\n\nLyrics:\n\nThe night doesn\u0027t like it. \nLooks just like your face on the moon, to me. \nAnd I won\u0027t let you do \nWhat you want to do. \n\nIt\u0027s funny how, even now, \nYou\u0027re laughing. \n\nI won\u0027t let you do it. \n\nIf you go, I\u0027ll le", "duration": 331}, {"id": "GIyyKcihw0o", "thumbnail": "https://i.ytimg.com/vi/GIyyKcihw0o/default.jpg", "file": "https://www.youtube.com/watch?v=GIyyKcihw0o", "title": "Kate Bush - The Sensual World (FULL AUDIO)", "description": "", "duration": 238}, {"id": "pW5hjWVS3ho", "thumbnail": "https://i.ytimg.com/vi/pW5hjWVS3ho/default.jpg", "file": "https://www.youtube.com/watch?v=pW5hjWVS3ho", "title": "Kate Bush - Moments of Pleasure - Official Music Video", "description": "Official music video for the single Moments of Pleasure written and performed by British singer Kate Bush.\r\n\r\nMoments of Pleasure was released as the second single from Bush\u0027s album The Red Shoes on 15 November 1993.  \r\n\r\nThe song reached number 26 in", "duration": 400}, {"id": "BkcJR-EV1Uc", "thumbnail": "https://i.ytimg.com/vi/BkcJR-EV1Uc/default.jpg", "file": "https://www.youtube.com/watch?v=BkcJR-EV1Uc", "title": "Kate Bush - Remastered - Ad", "description": "Official Ad for Kate Bush\u0027s Remastered Project.\n\nMore info available here: http://katebush.com/news/album-remasters-and-rare-tracks\n\nPre-order here: https://lnk.to/KateBushRemastered", "duration": 31}, {"id": "Pz3-_MJI1Co", "thumbnail": "https://i.ytimg.com/vi/Pz3-_MJI1Co/default.jpg", "file": "https://www.youtube.com/watch?v=Pz3-_MJI1Co", "title": "Kate Bush- Wild Man", "description": "From 50 Words For Snow", "duration": 437}, {"id": "uhh1KbeKr4M", "thumbnail": "https://i.ytimg.com/vi/uhh1KbeKr4M/default.jpg", "file": "https://www.youtube.com/watch?v=uhh1KbeKr4M", "title": "Kate Bush - Wild Man", "description": "This song tells the story of sightings of the Wild Man of the Himalayas, and of the efforts by the narrator and others to protect him from discovery.\n\n\n\n\nThis is a fan made video.\nNo monetary value is made from the video or the audio, and I have made it u", "duration": 441}, {"id": "RIgK6-tmPao", "thumbnail": "https://i.ytimg.com/vi/RIgK6-tmPao/default.jpg", "file": "https://www.youtube.com/watch?v=RIgK6-tmPao", "title": "Kate Bush - The Fog", "description": "A beautiful song from The Sensual World. The song features Nigel Kennedy on violin, Jonathan Williams on cello, Alan Stivell on celtic harp, Davy Spillane on whistles and Kate\u0027s father Robert John Bush on dialogue.\r\n\r\nLyrics:\r\n\r\nYou see, I\u0027m all grown ", "duration": 308}, {"id": "i42YBkfRmiQ", "thumbnail": "https://i.ytimg.com/vi/i42YBkfRmiQ/default.jpg", "file": "https://www.youtube.com/watch?v=i42YBkfRmiQ", "title": "Kite", "description": "Provided to YouTube by Parlophone UK\n\nKite \u00b7 Kate Bush\n\nThe Kick Inside\n\n\u2117 1978 Parlophone Records Ltd, a Warner Music Group Company\n\nProducer: Andrew Powell\nWriter: Kate Bush\n\nAuto-generated by YouTube.", "duration": 177}, {"id": "tWdHOm256N4", "thumbnail": "https://i.ytimg.com/vi/tWdHOm256N4/default.jpg", "file": "https://www.youtube.com/watch?v=tWdHOm256N4", "title": "Kate Bush - Army Dreamers", "description": "Kate Bush - Army Dreamers", "duration": 197}, {"id": "3rl8bSK8HB4", "thumbnail": "https://i.ytimg.com/vi/3rl8bSK8HB4/default.jpg", "file": "https://www.youtube.com/watch?v=3rl8bSK8HB4", "title": "Kate Bush - Walk Straight Down The Middle", "description": "Another great song from The Sensual World.\r\n\r\nLyrics:\r\n\r\nCan\u0027t move my arms, \r\nCan\u0027t move my legs. \r\nCan\u0027t say no, \r\nI can\u0027t say yes. \r\nCan\u0027t help myself. \r\nI need your help. \r\n\r\n(We go) \r\nOoh, ooh, what do we do, \r\nNow we just can\u0027t move? \r\nWe\u0027re cal", "duration": 231}, {"id": "jxiJ36phAlw", "thumbnail": "https://i.ytimg.com/vi/jxiJ36phAlw/default.jpg", "file": "https://www.youtube.com/watch?v=jxiJ36phAlw", "title": "Kate Bush - Ran Tan Waltz", "description": "I love the beat to this track, taken from  \u0027This Woman\u0027s Work - Volume 1\u0027.\r\n\r\nSorry about the quality of the pictures, but they are as I found them!", "duration": 168}, {"id": "3wZwJbQ7nYA", "thumbnail": "https://i.ytimg.com/vi/3wZwJbQ7nYA/default.jpg", "file": "https://www.youtube.com/watch?v=3wZwJbQ7nYA", "title": "Eat the Music", "description": "Provided to YouTube by Sony Music Entertainment\n\nEat the Music \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nVocal: Justin Vali\nVocal: Paddy Bush\nDrums, Percussion: Stuart Elliott\nBass: John Giblin\nTenor  Saxoph", "duration": 309}, {"id": "4w34E46fJ_8", "thumbnail": "https://i.ytimg.com/vi/4w34E46fJ_8/default.jpg", "file": "https://www.youtube.com/watch?v=4w34E46fJ_8", "title": "Kate Bush - Eat the Music (1993)", "description": "From the album The Red Shoes (1993)", "duration": 324}, {"id": "AaLFZwvK01w", "thumbnail": "https://i.ytimg.com/vi/AaLFZwvK01w/default.jpg", "file": "https://www.youtube.com/watch?v=AaLFZwvK01w", "title": "Kate Bush - Rubberband Girl", "description": "Music video by Kate Bush performing Rubberband Girl. (C) 1993 Novercia Ltd.", "duration": 249}, {"id": "CorTsvUfu_k", "thumbnail": "https://i.ytimg.com/vi/CorTsvUfu_k/default.jpg", "file": "https://www.youtube.com/watch?v=CorTsvUfu_k", "title": "kate bush \u2022 night of the swallow", "description": "", "duration": 326}, {"id": "YXKLWStu9iw", "thumbnail": "https://i.ytimg.com/vi/YXKLWStu9iw/default.jpg", "file": "https://www.youtube.com/watch?v=YXKLWStu9iw", "title": "Kate Bush , Moments of pleasure ( Directors cut ).", "description": "Moments of pleasure , taken from new album Directors cut .", "duration": 392}, {"id": "FCCzXcRphzw", "thumbnail": "https://i.ytimg.com/vi/FCCzXcRphzw/default.jpg", "file": "https://www.youtube.com/watch?v=FCCzXcRphzw", "title": "Kate Bush- Never Be Mine", "description": "One of the greatest Kate\u0027s song + rare photos.\r\n\r\nTaken from album The Sensual World (1989)", "duration": 228}, {"id": "dZMR4m3HV9Y", "thumbnail": "https://i.ytimg.com/vi/dZMR4m3HV9Y/default.jpg", "file": "https://www.youtube.com/watch?v=dZMR4m3HV9Y", "title": "Kate Bush - This Woman\u0027s Work", "description": "Wogan 1990\n\nWritten/recorded by Kate Bush in 1989.", "duration": 248}, {"id": "NVJpuwkeWN0", "thumbnail": "https://i.ytimg.com/vi/NVJpuwkeWN0/default.jpg", "file": "https://www.youtube.com/watch?v=NVJpuwkeWN0", "title": "Moments of Pleasure", "description": "Provided to YouTube by Sony Music Entertainment\n\nMoments of Pleasure \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nEngineer: Haydn Bendall\nDrums, Percussion: Gaumont D\u0027Olivera\nMastering  Engineer: Ian Cooper\nOrc", "duration": 318}, {"id": "qxrwE6Hc9UA", "thumbnail": "https://i.ytimg.com/vi/qxrwE6Hc9UA/default.jpg", "file": "https://www.youtube.com/watch?v=qxrwE6Hc9UA", "title": "Kate Bush - And So Is Love - Official Music Video", "description": "Official Music Video for the single And So Is Love written and recorded by Kate Bush. It was released as the fourth and final single release from the album The Red Shoes. Eric Clapton plays guitar on the track.\r\n\r\nReleased on 7 November 1994 the single ", "duration": 257}, {"id": "GPK0Oy2b0MI", "thumbnail": "https://i.ytimg.com/vi/GPK0Oy2b0MI/default.jpg", "file": "https://www.youtube.com/watch?v=GPK0Oy2b0MI", "title": "Kate Bush - Rubberband Girl - US Version - Official Music Video", "description": "Official music video for the US mix of the single Rubberband Girl written by British singer Kate Bush.\r\n\r\nRubberband Girl was the first of four singles to be released from Kate\u0027s album The Red Shoes.  The song was released on 6 September 1993 and peak", "duration": 257}, {"id": "lr2acDdfbvY", "thumbnail": "https://i.ytimg.com/vi/lr2acDdfbvY/default.jpg", "file": "https://www.youtube.com/watch?v=lr2acDdfbvY", "title": "Suspended In Gaffa - Kate Bush", "description": "This song belongs to Kate Bush/EMI\n\nThis is the song by Kate Bush called Suspended In Gaffa, from the 1982 album The Dreaming.  Read here for more info- http://en.wikipedia.org/wiki/The_Dreaming_(album)\n\nI know my two previous videos have been Anime b", "duration": 230}, {"id": "9VXn2vQbp2E", "thumbnail": "https://i.ytimg.com/vi/9VXn2vQbp2E/default.jpg", "file": "https://www.youtube.com/watch?v=9VXn2vQbp2E", "title": "Night Of The Swallow (Kate Bush) performed by Cloudbusting", "description": "Surely one of the greatest songs from one of the bravest albums ever written! And what a joy to perform it here, for the first time, at The Islington Assembly Hall as part of our celebration of 40 Years of Kate Bush.\n\nA big \u0027thank you\u0027 to our wonderful ba", "duration": 334}, {"id": "D5P0v0kGauc", "thumbnail": "https://i.ytimg.com/vi/D5P0v0kGauc/default.jpg", "file": "https://www.youtube.com/watch?v=D5P0v0kGauc", "title": "Kate Bush - Moments Of Pleasure", "description": "Beautiful Kate Bush video for Moments Of Pleasure.", "duration": 320}, {"id": "OdH_kNOvKtc", "thumbnail": "https://i.ytimg.com/vi/OdH_kNOvKtc/default.jpg", "file": "https://www.youtube.com/watch?v=OdH_kNOvKtc", "title": "The Song of Salomon", "description": "Provided to YouTube by Sony Music Entertainment\n\nThe Song of Salomon \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nVocal: The Trio Bulgarka\nEngineer: Haydn Bendall\nGuitar: Danny McIntosh\nMastering  Engineer: Ian", "duration": 268}, {"id": "3RVX9TdbJaQ", "thumbnail": "https://i.ytimg.com/vi/3RVX9TdbJaQ/default.jpg", "file": "https://www.youtube.com/watch?v=3RVX9TdbJaQ", "title": "Kate Bush - Suspended In Gaffa", "description": "For the first time on YouTube in High Quality, Kate\u0027s famous puppet version of Suspended in Gaffa, at a German tv show back in 1982. It\u0027s a pitty they cut off the end of this performance...", "duration": 177}, {"id": "v76J-P5ysjY", "thumbnail": "https://i.ytimg.com/vi/v76J-P5ysjY/default.jpg", "file": "https://www.youtube.com/watch?v=v76J-P5ysjY", "title": "Lily", "description": "Provided to YouTube by Sony Music Entertainment\n\nLily \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nGuitar: Danny McIntosh\nEngineer: Haydn Bendall\nDrums: Stuart Elliott\nMastering  Engineer: Ian Cooper\nOrchestrat", "duration": 233}, {"id": "GsdIj1PZO6I", "thumbnail": "https://i.ytimg.com/vi/GsdIj1PZO6I/default.jpg", "file": "https://www.youtube.com/watch?v=GsdIj1PZO6I", "title": "Kate Bush - Suspended In Gaffa", "description": "Performing Suspended In Gaffa at a French tv show.", "duration": 226}, {"id": "PsGsX1iyrlM", "thumbnail": "https://i.ytimg.com/vi/PsGsX1iyrlM/default.jpg", "file": "https://www.youtube.com/watch?v=PsGsX1iyrlM", "title": "The Red Shoes", "description": "Provided to YouTube by Sony Music Entertainment\n\nThe Red Shoes \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nVocal, Whistles: Paddy Bush\nEngineer: Haydn Bendall\nVocal: Colin Lloyd-Tucker\nMastering  Engineer: Ian", "duration": 240}, {"id": "s7qVZ2Stvzw", "thumbnail": "https://i.ytimg.com/vi/s7qVZ2Stvzw/default.jpg", "file": "https://www.youtube.com/watch?v=s7qVZ2Stvzw", "title": "Top of the City", "description": "Provided to YouTube by Sony Music Entertainment\n\nTop of the City \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nGuitar: Danny McIntosh\nEngineer: Haydn Bendall\nDrums: Stuart Elliott\nMastering  Engineer: Ian Cooper", "duration": 255}, {"id": "y6FTqFm196w", "thumbnail": "https://i.ytimg.com/vi/y6FTqFm196w/default.jpg", "file": "https://www.youtube.com/watch?v=y6FTqFm196w", "title": "Constellation of the Heart", "description": "Provided to YouTube by Sony Music Entertainment\n\nConstellation of the Heart \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nVocal: Paddy Bush\nEngineer: Haydn Bendall\nVocal: Colin Lloyd-Tucker\nMastering  Engineer: ", "duration": 287}, {"id": "Ia2yod6N71c", "thumbnail": "https://i.ytimg.com/vi/Ia2yod6N71c/default.jpg", "file": "https://www.youtube.com/watch?v=Ia2yod6N71c", "title": "Kate Bush - SUSPENDED IN GAFFA  (HQ)", "description": "Kate Bush - SUSPENDED IN GAFFA", "duration": 234}, {"id": "sreFD4yGVIs", "thumbnail": "https://i.ytimg.com/vi/sreFD4yGVIs/default.jpg", "file": "https://www.youtube.com/watch?v=sreFD4yGVIs", "title": "Kate Bush - Ne T\u0027enfuis Pas (with lyrics and English subtitles)", "description": "Released in 1983 in France and Canada as the B side to the single Un Baiser d\u0027Enfant (The Infant Kiss).", "duration": 156}, {"id": "N8EWa11Mu5I", "thumbnail": "https://i.ytimg.com/vi/N8EWa11Mu5I/default.jpg", "file": "https://www.youtube.com/watch?v=N8EWa11Mu5I", "title": "Why Should I Love You?", "description": "Provided to YouTube by Sony Music Entertainment\n\nWhy Should I Love You? \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nVocal: Lenny Henry\nEngineer: Haydn Bendall\nVocal: The Trio Bulgarka\nMastering  Engineer: Ian ", "duration": 301}, {"id": "E-r3va9tqto", "thumbnail": "https://i.ytimg.com/vi/E-r3va9tqto/default.jpg", "file": "https://www.youtube.com/watch?v=E-r3va9tqto", "title": "Kate Bush - Ne T\u0027Enfui Pas (Don\u0027t Fly Away)", "description": "Kate Bush - Ne T\u0027Enfui Pas\r\n\r\n Je viens\r\nComme un chat\r\nPar la nuit si noire.\r\nTu attends,\r\nEt je tombe\r\nDans tes ailes blanches, la-la-la...\r\nEt je vole,\r\nEt je coule\r\nComme une plume.\r\n\r\nSi les grands yeux de mon Dieu\r\nNe me gardaient pas,\r\nJe te volera", "duration": 154}, {"id": "IvS6JUlWTrs", "thumbnail": "https://i.ytimg.com/vi/IvS6JUlWTrs/default.jpg", "file": "https://www.youtube.com/watch?v=IvS6JUlWTrs", "title": "You\u0027re the One", "description": "Provided to YouTube by Sony Music Entertainment\n\nYou\u0027re the One \u00b7 Kate Bush\n\nThe Red Shoes\n\n\u2117 1993 Novercia Overseas Limited\n\nReleased on: 1993-11-02\n\nVocal: The Trio Bulgarka\nEngineer: Haydn Bendall\nGuitar: Jeff Beck\nMastering  Engineer: Ian Cooper\nDr", "duration": 352}, {"id": "uF0DYM6WCRw", "thumbnail": "https://i.ytimg.com/vi/uF0DYM6WCRw/default.jpg", "file": "https://www.youtube.com/watch?v=uF0DYM6WCRw", "title": "Kate Bush - Ne t\u0027enfuis pas 1983", "description": "Blog : http://annees-vinyls.blogspot.fr/\nPage Facebook : https://www.facebook.com/pages/Nos-Annees-Vinyls/199247493429019\n\nExtrait du 45 tours \u0027Ne t\u0027enfuis pas\u0027 paru chez EMI en 1983 !\n\nNos Ann\u00e9es Vinyls ! Le meilleur (et surtout le pire) des Ann\u00e9es 80 ", "duration": 153}, {"id": "ld0K91RkaTE", "thumbnail": "https://i.ytimg.com/vi/ld0K91RkaTE/default.jpg", "file": "https://www.youtube.com/watch?v=ld0K91RkaTE", "title": "Kate Bush - Ne t\u0027en Fui Pas + lyrics", "description": "Traducido al Castellano\r\n- Album: This Woman\u0027s Work (vol.I)\r\n- A\u00f1o: 1990", "duration": 155}, {"id": "pC08U3WNyV4", "thumbnail": "https://i.ytimg.com/vi/pC08U3WNyV4/default.jpg", "file": "https://www.youtube.com/watch?v=pC08U3WNyV4", "title": "Kate Bush - Lily (Director\u0027s Cut)", "description": "Kate Bush\u0027s \u0027Lily\u0027 from 2011 album Director\u0027s Cut, set to the video of \u0027Lily\u0027 from \u0027The Red Shoes\u0027,  from \u0027The Line, the Cross and the Curve\u0027. Hope you like.", "duration": 202}, {"id": "udLOPLhUiJo", "thumbnail": "https://i.ytimg.com/vi/udLOPLhUiJo/default.jpg", "file": "https://www.youtube.com/watch?v=udLOPLhUiJo", "title": "Kate Bush - Moving (Efteling)", "description": "Kate performs Moving at Efteling in 1978.\n\nLyrics:\n\nMoving stranger, \nDoes it really matter, \nAs long as you\u0027re not afraid to feel? \nTouch me, hold me. \nHow my open arms ache! \nTry to fall for me. \n\nHow I\u0027m moved. \nHow you move me \nWith your beauty\u0027s po", "duration": 191}, {"id": "ZvLeIi6_5Zg", "thumbnail": "https://i.ytimg.com/vi/ZvLeIi6_5Zg/default.jpg", "file": "https://www.youtube.com/watch?v=ZvLeIi6_5Zg", "title": "Kate Bush - The Kick Inside", "description": "A beautiful song from her first album. This was also the title track of the album.\r\n\r\nThe song is inspired by the traditional folk song The Ballad Of Lizzie Wan.\r\n\r\nLyrics:\r\n\r\nI\u0027ve pulled down my lace and the chintz. \r\nOh, do you know you have the face ", "duration": 216}, {"id": "TUSkdkENd_A", "thumbnail": "https://i.ytimg.com/vi/TUSkdkENd_A/default.jpg", "file": "https://www.youtube.com/watch?v=TUSkdkENd_A", "title": "Kate Bush - Feel It", "description": "i love Kate so much and this has always been my favorite of her, such a sensual and beautiful song!!!!! This is my best effort at trying to brighten up and clean this video up for fans that Love her!!! hope all enjoy...........\u262e\u266a\u266b\u2665\u266a\u266b\u2665\u262e", "duration": 177}, {"id": "_I6Ej9HJVEQ", "thumbnail": "https://i.ytimg.com/vi/_I6Ej9HJVEQ/default.jpg", "file": "https://www.youtube.com/watch?v=_I6Ej9HJVEQ", "title": "Kate Bush - Them Heavy People (1979 Xmas Special)", "description": "Kate performs Them Heavy People on the 1979 Christmas special.\n\nLyrics:\n\nRolling the ball, rolling the ball, rolling the ball to me. \nRolling the ball, rolling the ball, rolling the ball to me. \n\nThey arrived at an inconvenient time. \nI was hiding in a ", "duration": 273}, {"id": "YVijRSYfD5k", "thumbnail": "https://i.ytimg.com/vi/YVijRSYfD5k/default.jpg", "file": "https://www.youtube.com/watch?v=YVijRSYfD5k", "title": "Kate Bush - And So Is Love", "description": "Music video by Kate Bush performing And So Is Love. (C) 1994 SONY BMG MUSIC ENTERTAINMENT", "duration": 257}, {"id": "xd64Vu34Dkw", "thumbnail": "https://i.ytimg.com/vi/xd64Vu34Dkw/default.jpg", "file": "https://www.youtube.com/watch?v=xd64Vu34Dkw", "title": "Kate Bush There Goes A Tenner Razzamatazz", "description": "Straight from a good VHS source it\u0027s Kate Bush on Razzamatazz in Faux HD.", "duration": 240}, {"id": "Y_2NgoHOpw0", "thumbnail": "https://i.ytimg.com/vi/Y_2NgoHOpw0/default.jpg", "file": "https://www.youtube.com/watch?v=Y_2NgoHOpw0", "title": "Kate Bush - And So Is Love: Top Of The Pops, 17 November 1994", "description": "Kate\u0027s last appearance on the classic UK chart show, Top Of The Pops, with the fourth and final single from The Red Shoes.", "duration": 243}, {"id": "jWX8hFhNpdQ", "thumbnail": "https://i.ytimg.com/vi/jWX8hFhNpdQ/default.jpg", "file": "https://www.youtube.com/watch?v=jWX8hFhNpdQ", "title": "Kate Bush - James And The Cold Gun Live", "description": "HQ Sound Kate Bush Live  London 1979 - Hammersmith Odeon / Tour of Life --- Great Performance !!!\n\n\nCD-1   Moving 3:32 \nCD-2   Them Heavy People 4:02 \nCD-3   Violin 3:32 \nCD-4   Strange Phenomena 3:26 \nCD-5   Hammer Horror 4:25 \nCD-6   Don\u0027t Push Your Foo", "duration": 527}, {"id": "OC7u9w0Pwq8", "thumbnail": "https://i.ytimg.com/vi/OC7u9w0Pwq8/default.jpg", "file": "https://www.youtube.com/watch?v=OC7u9w0Pwq8", "title": "Kate Bush - This Woman\u0027s Work", "description": "Kate Bush This Woman\u0027s Work.  1989 single charting at #25 in the UK in December 1989, #20 in Ireland, and #89 in Australia in February 1990.  From the album \u0027The Sensual World\u0027.  Tim McInnerny appears in the video.  Official music video HQ 80s 90s I know ", "duration": 218}, {"id": "_0eoAkbXH7Y", "thumbnail": "https://i.ytimg.com/vi/_0eoAkbXH7Y/default.jpg", "file": "https://www.youtube.com/watch?v=_0eoAkbXH7Y", "title": "Kate Bush - Them heavy people", "description": "Kate Bush - Them heavy people", "duration": 246}, {"id": "0wkkuaTvIso", "thumbnail": "https://i.ytimg.com/vi/0wkkuaTvIso/default.jpg", "file": "https://www.youtube.com/watch?v=0wkkuaTvIso", "title": "Kate Bush - The Dreaming", "description": "Kate Bush on The Dreaming video", "duration": 248}, {"id": "7TupvVpxY_U", "thumbnail": "https://i.ytimg.com/vi/7TupvVpxY_U/default.jpg", "file": "https://www.youtube.com/watch?v=7TupvVpxY_U", "title": "Kate Bush - This Woman\u0027s Work", "description": "Kate Bush\u0027s official music video for \u0027This Woman\u0027s Work\u0027. Click to listen to Kate Bush on Spotify: http://smarturl.it/KBushSpotify?IQid=KBushTWW\n\nAs featured on The Sensual World. Click to buy the track or album via iTunes: http://smarturl.it/KBushTSWiTun", "duration": 224}, {"id": "2PRYhDItPT0", "thumbnail": "https://i.ytimg.com/vi/2PRYhDItPT0/default.jpg", "file": "https://www.youtube.com/watch?v=2PRYhDItPT0", "title": "Kate Bush \u0026 Larry Adler - The Man I Love", "description": "PV", "duration": 198}, {"id": "9ipM__nt8fM", "thumbnail": "https://i.ytimg.com/vi/9ipM__nt8fM/default.jpg", "file": "https://www.youtube.com/watch?v=9ipM__nt8fM", "title": "Kate Bush, Love And Anger.", "description": "Good Quality.", "duration": 278}, {"id": "MolX6obM4hc", "thumbnail": "https://i.ytimg.com/vi/MolX6obM4hc/default.jpg", "file": "https://www.youtube.com/watch?v=MolX6obM4hc", "title": "Kate Bush - Hammer Horror (Australia)", "description": "Kate performs Hammer Horror on an Australian TV show in 1978. Enjoy!\r\n\r\nLyrics:\r\n\r\nYou stood in the belltower, \r\nBut now you\u0027re gone. \r\nSo who knows all the sights \r\nOf Notre Dame? \r\n\r\nThey\u0027ve got the stars for the gallant hearts. \r\nI\u0027m the replacement ", "duration": 252}, {"id": "6g8v2RNLHr0", "thumbnail": "https://i.ytimg.com/vi/6g8v2RNLHr0/default.jpg", "file": "https://www.youtube.com/watch?v=6g8v2RNLHr0", "title": "Kate Bush - Rocket Man", "description": "Kate\u0027s version of the Elton John song, released in 1991. Fantastic vocal and lyrical strength.", "duration": 287}, {"id": "nyx4akq9_rA", "thumbnail": "https://i.ytimg.com/vi/nyx4akq9_rA/default.jpg", "file": "https://www.youtube.com/watch?v=nyx4akq9_rA", "title": "Kate Bush - Hammer Horror", "description": "Kate Bush - Hammer Horror\r\n\r\nYou stood in the belltower, \r\nBut now you\u0027re gone. \r\nSo who knows all the sights \r\nOf Notre Dame? \r\n\r\nThey\u0027ve got the stars for the gallant hearts. \r\nI\u0027m the replacement for your part. \r\nBut all I want to do is forget \r\nYou, f", "duration": 255}], "artist/view:images": null, "artist/view:artistID": 85929, "pageObject": {"id": "a85929", "objectType": "artist", "objectName": "Kate Bush", "objectId": 85929, "collection": [], "wantlist": [], "inventory": []}, "adsObject": {"ids": ["a85929"], "artist": "Kate Bush"}};
            }
        </script>
        <script>
            window.ds = typeof window.ds == "function" ? window.ds : function(){
                (ds.q = ds.q || []).push(arguments);
                return ds;
            };
        </script>

                
    </head>
    <body class="linux">
        <div id="main_wrapper">                            <div id="site_headers_super_wrap">
    <div id="site_header_wrap" >
        <div id="site_header" role="banner" aria-label="Discogs Header">
                                                                                        <a
                id="header_logo"
                href="/en"
                title="Go to Discogs.com homepage"
            >
                <img src="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/images/discogs-white.png?5" alt="" />
            </a>
            <form id="site_search" action="/search/" role="search" aria-label="Search Discogs">
                <input
                    id="search_q"
                    name="q"
                    type="text"
                    class="autocomplete ac_type_a_m_r_13 ac_submit init"
                    value=""
                    autocapitalize="off"
                    autocorrect="off"
                                            placeholder="Search artists, albums and more..."
                        aria-label="Search artists, albums and more..."
                                    />
                <button
                    type="submit"
                    id="do_site_search"
                    class="submit button"
                    name=""
                    value=""
                    aria-label="Search"
                >
                <i class="icon icon-search"></i>
                </button>
                <input type="hidden" class="advanced_search advanced_search_type" name="type" value="all"/>
            </form>
            <ul id="site_navigation" role="navigation" aria-label="Main Navigation">
                <li id="section_nav_explore" class="site_nav_group" data-id="explore">
                    <a href="/search/" class="nav_group_control">Explore<i class="icon icon-caret-down"></i>
                    </a>
                    <div class="site_nav_submenu site_nav_tray" id="site_nav_tray_explore">
                        <table>
    <tr>
        <td>
            <h4>Discover</h4>
            <ul>
                <li><a href="/search/?ev=em_rs">Explore All</a></li>
                <li><a href="/search/?type=release&sort=hot%2Cdesc&ev=em_tr">Trending Releases</a></li>
                <li><a href="/lists?ev=em_rl">List Explorer</a></li>
                <li><a href="/search/advanced?ev=em_as">Advanced Search</a></li>
                <li><a href="https://blog.discogs.com/en/tag/database-en/?utm_source=discogs&utm_medium=referral&utm_campaign=navigation_menu" target="_blank">Articles About Music</a></li>
            </ul>
        </td>
        <td>
            <h4>Contribute</h4>
            <ul>
                <li><a href="https://support.discogs.com/hc/articles/360004016474-Overview-of-Submission-Guidelines-for-Releases/?utm_source=discogs&utm_medium=referral&utm_campaign=navigation_menu" target="_blank">Submission Guidelines</a></li>
                <li><a href="/release/add?ev=em_sr" rel="nofollow">Submit a Release</a></li>
                <li><a href="https://support.discogs.com/hc/articles/360001567973/?utm_source=discogs&utm_medium=referral&utm_campaign=navigation_menu" target="_blank">How to Make a List</a>
                <li><a href="/leaderboard">Monthly Leaderboard</a></li>
                <li><a href="https://localization.discogs.com/?ev=em_bt" target="_blank">Help Translate Discogs</a></li>
            </ul>
        </td>
        <td>
            <div>
                <h4>Genres</h4>
                <ul>
                    <li><a href="/genre/rock?ev=em_rp">Rock</a></li>
                    <li><a href="/genre/electronic?ev=em_ep">Electronic</a></li>
                    <li><a href="/genre/hip+hop?ev=em_pp">Hip Hop</a></li>
                    <li><a href="/genre/folk%2C+world%2C+%26+country?ev=em_fwcp">Folk, World, & Country</a></li>
                    <li><a href="/genre/jazz?ev=em_jp">Jazz</a></li>
                </ul>
            </div>
        </td>
        <td>
            <div>
                <h4>Styles</h4>
                <ul>
                    <li><a href="/style/house?ev=em_hp">House</a></li>
                    <li><a href="/style/punk?ev=em_pup">Punk</a></li>
                    <li><a href="/style/soul?ev=em_vp">Soul</a></li>
                    <li><a href="https://blog.discogs.com/en/genres-and-styles-list/?utm_source=discogs&utm_medium=referral&utm_campaign=navigation_menu">Explore All Styles</a></li>
                    <li><a href="https://blog.discogs.com/regional-music-styles/">Regional Style Map</a></li>
                </ul>
            </div>
        </td>
    </tr>
</table>

                    </div>
                </li>
                <li id="section_nav_marketplace" class="site_nav_group" data-id="marketplace">
                    <a href="/sell/list" class="nav_group_control" aria-label="Toggle Marketplace Menu">
                        Marketplace<i class="icon icon-caret-down"></i>
                    </a>
                    <div class="site_nav_submenu site_nav_tray" id="site_nav_tray_marketplace">
                        <table>
    <tr>
        <td class="tray_formats">
            <h4>Format</h4>
            <ul>
                <li>
                    <a href="/sell/list?format=Vinyl">
                        Vinyl
                    </a>
                </li>
                <li>
                    <a href="/sell/list?format=CD">
                        CD
                    </a>
                </li>
                <li>
                    <a href="/sell/list?format=Cassette">
                        Cassette
                    </a>
                </li>
                <li>
                    <a href="/sell/list?format=DVD">
                        DVD
                    </a>
                </li>
                <li>
                    <a href="/sell/list?format=Box+Set">
                        Box Set
                    </a>
                </li>
            </ul>
        </td>
        <td class="tray_genres">
            <h4>Genre</h4>
            <ul>
                <li>
                    <a href="/sell/list?genre=Rock">
                        Rock
                    </a>
                </li>
                <li>
                    <a href="/sell/list?genre=Electronic">
                        Electronic
                    </a>
                </li>
                <li>
                    <a href="/sell/list?genre=Pop">
                        Pop
                    </a>
                </li>
                <li>
                    <a href="/sell/list?genre=Funk+%2F+Soul">
                        Funk / Soul
                    </a>
                </li>
                <li>
                    <a href="/sell/list?genre=Jazz">
                        Jazz
                    </a>
                </li>
            </ul>
        </td>
        <td class="tray_styles">
            <h4>Styles</h4>
            <ul>
                <li>
                    <a href="/sell/list?style=Pop%2BRock">
                        Pop Rock
                    </a>
                </li>
                <li>
                    <a href="/sell/list?style=House">
                        House
                    </a>
                </li>
                <li>
                    <a href="/sell/list?style=Disco">
                        Disco
                    </a>
                </li>
                <li>
                    <a href="/sell/list?style=Synth-pop">
                        Synth-pop
                    </a>
                </li>
                <li>
                    <a href="/sell/list?style=Soul">
                        Soul
                    </a>
                </li>
            </ul>
        </td>

        <td>
            <h4>
                <a href="/sell/list">
                    Buy Music                </a>
            </h4>
            <ul>
                <li>
                    <a href="/sell/list">
                        All Items                    </a>
                </li>
                <li>
                    <a href="/sell/mywants">
                        Items I Want                    </a>
                </li>
                <li>
                    <a href="/sell/purchases">
                        Purchases                    </a>
                </li>
                <li>
                    <a href="/sell/cart/">
                        Cart                    </a>
                </li>
                <li>
                    <a href="/record-store-day" target="_blank">
                        Record Store Day                    </a>
                </li>
            </ul>
        <td>
            <h4>Sell Music</h4>
            <ul>
                <li>
                    <a href="/sell/">
                        List Item For Sale                    </a>
                </li>
                <li>
                    <a href="/sell/orders">
                        Orders                    </a>
                </li>
                <li>
                    <a href="/sell/manage">
                        Inventory                    </a>
                </li>
                <li>
                    <a href="/sell/billing">
                        Billing                    </a>
                </li>
                            </ul>
        </td>
    </tr>
</table>

                    </div>
                </li>
                <li id="section_nav_community" class="site_nav_group" data-id="community">
                    <a href="/group/" class="nav_group_control" aria-label="Toggle Community Menu">
                        Community<i class="icon icon-caret-down"></i>
                    </a>
                    <ul class="site_nav_submenu" id="site_nav_submenu_community">
                        <li>
                            <a href="/group/">
                                Groups                            </a>
                        </li>
                        <li>
                            <a href="/forum/">
                                Forum                            </a>
                        </li>
                        <li>
                            <a href="https://blog.discogs.com/en/">
                                Blog                            </a>
                        </li>
                        <li>
                            <a href="/users/friends">
                                Friends                            </a>
                        </li>
                        <li>
                            <a href="/help/doc/forums">
                                Community Guidelines                            </a>
                        </li>
                        <li>
                            <a href="https://support.discogs.com/hc/articles/360004016474-Overview-of-Submission-Guidelines-for-Releases">
                                Database Guidelines                            </a>
                        </li>
                        <li>
                            <a href="/events">
                                Events                            </a>
                        </li>
                        <li>
                            <a href="https://vinylhub.discogs.com?utm_source=discogs-top-nav&utm_medium=referral" target="_blank">
                                Record Shops                            </a>
                        </li>
                    </ul>
                </li>
            </ul>            <ul
                id="activity_menu"
                                                                                    class="activity_menu_columns_3"
                role="navigation"
                aria-label="Activity Menu"
            >
                                    <li>
                        <a class="button-green button" href="/users/create">
                            Register                        </a>
                    </li>
                    <li>
                                                                            
                        <a href="/login?return_to=%2Fartist%2F85929%3Ftype%3DReleases%26subtype%3DAlbums%26page%3D1" id="log_in_link" class="nav_group_control">
                            Log In                        </a>
                    </li>
                            </ul>            <a href="#mobile_site_navigation_toggle" id="mobile_site_navigation_toggle" aria-label="Open Site Menu" class=""><i class="icon icon-bars"></i></a>
            <ul id="mobile_site_navigation">
                <li id="activity_menu_placeholder"></li>
                <li id="site_navigation_placeholder"></li>
            </ul>
        </div>    </div></div>
<div class="ac_div" id="ac_search_q"></div>


                        
<div class="flash_messages">
                        
                        
            <noscript>
                                <div class="alert-message alert-message-warning alert-message-top "
            id="alert-message-"
            data-alert-message-closable="false"
            data-alert-message-auto-close="false"
                                >
            <div class="alert-message-content float_fix ">
                <i class="icon icon-exclamation-triangle alert-message-icon"></i>
                                <span class="alert-message-text">
                                            <strong>Please enable Javascript to take full advantage of our site features.</strong>
                                    </span>
            </div>
        </div>
    
    </noscript>

    
</div>                                                                                                                                                <div id="page" class="aside_off_canvas">
                                <div class="ad_container ad_top" id='ad_top'></div>
        
                                                                                                    
                <div id="page_content" role="main">
        <div class="lr group">
        <div class="left">
            <div class="body">
                <div class="release_actions hide-desktop">
                        <span class="action_menu_toggler" aria-haspopup="true">
        <i class="icon icon-caret-down"></i>
    </span>
    <ul class="action_menu ui-dialog-arrow ui-dialog-arrow-top-right" role="menu">
                                <li class="menu-item">
                            <a href="/artist/85929-Kate-Bush/history#latest" id="edit_link">
                                Edit Artist                            </a>
                        </li>
                    
    </ul>
                </div>

                            
                <div
        class="image_gallery image_gallery_large"
                    data-images='[{"id": "10248290","thumb": "https://img.discogs.com/S388cIKcLTVhC6nvOHXaEymWWi0=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1382742029-2169.jpeg.jpg","full": "https://img.discogs.com/Tfn0QDHqibkP0T-MqPaDXeGohq8=/600x466/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382742029-2169.jpeg.jpg","width": "600","height": "466"},{"id": "21374752","thumb": "https://img.discogs.com/ax86g0RT6MYBMREi_8e_WyeEYJk=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1452354410-3133.jpeg.jpg","full": "https://img.discogs.com/oDFnX9HzIJ2G4ytakfVStsOqou8=/366x500/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1452354410-3133.jpeg.jpg","width": "366","height": "500"},{"id": "21737171","thumb": "https://img.discogs.com/-qI7pVr1nEl-ikoCuCyYLObcOic=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1454671532-9101.jpeg.jpg","full": "https://img.discogs.com/wfcKAEbyJTzJmxTRkZiBICsxvUw=/550x548/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1454671532-9101.jpeg.jpg","width": "550","height": "548"},{"id": "10248301","thumb": "https://img.discogs.com/sMGgLiZM4mhoZgAkvP8viSMp8_4=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1382742323-1933.jpeg.jpg","full": "https://img.discogs.com/VR28QAh-OTwFMSEqqZoAb4XcWLk=/600x610/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382742323-1933.jpeg.jpg","width": "600","height": "610"},{"id": "1783086","thumb": "https://img.discogs.com/6Ujvs0om_x8tLqFjZKwaC8zr6nw=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1205697052.jpeg.jpg","full": "https://img.discogs.com/3kxU8j7Ela-STTQl0dG4p3vMgLQ=/390x600/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1205697052.jpeg.jpg","width": "390","height": "600"},{"id": "448618","thumb": "https://img.discogs.com/X8omNuGK2Rk7ccpfhX2446opg2s=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1125765375.gif.jpg","full": "https://img.discogs.com/ROzotSnOHP5RZnV7LP8u4TX2Lqg=/320x320/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1125765375.gif.jpg","width": "320","height": "320"},{"id": "4238326","thumb": "https://img.discogs.com/DYHy4a39TyMp3xYYg4W85s4ksgk=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1287539610.png.jpg","full": "https://img.discogs.com/quIwnauNABzx3ZAMIQCzWfPQkMQ=/360x450/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1287539610.png.jpg","width": "360","height": "450"},{"id": "21374749","thumb": "https://img.discogs.com/Zmo3eeEF-N4wtewQnArdYc9CR1w=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1452354410-8934.jpeg.jpg","full": "https://img.discogs.com/V709znOHTxDl8IPcsFs943T0yV0=/252x252/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1452354410-8934.jpeg.jpg","width": "252","height": "252"},{"id": "58336612","thumb": "https://img.discogs.com/VcKsNn0d7A4fp87ehOZFSMqFhks=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1618723255-2032.jpeg.jpg","full": "https://img.discogs.com/gRn5s-9Ug1BJYwcI1SmymB5dktM=/440x640/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1618723255-2032.jpeg.jpg","width": "440","height": "640"},{"id": "21374742","thumb": "https://img.discogs.com/zWsBXJcu12mf7ux-yhCRbrLYgCo=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1452354409-1319.jpeg.jpg","full": "https://img.discogs.com/Lkok7TY7rBn_tTunwGwyr82gqrw=/574x467/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1452354409-1319.jpeg.jpg","width": "574","height": "467"},{"id": "3976156","thumb": "https://img.discogs.com/VJBlgrja-ADG-8jFPBS5UfQsD_0=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1281533548.jpeg.jpg","full": "https://img.discogs.com/EpYUp77VIT5pI3cxHEw7IAKq-xc=/600x393/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1281533548.jpeg.jpg","width": "600","height": "393"},{"id": "10248296","thumb": "https://img.discogs.com/VPuiF71nUa5h8nKPEERR8wOe3yg=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1382742201-8848.jpeg.jpg","full": "https://img.discogs.com/3K3QOciIewruFgPsjCoujN-2xrU=/540x676/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382742201-8848.jpeg.jpg","width": "540","height": "676"},{"id": "10248348","thumb": "https://img.discogs.com/vuxSFZROYl08J0L4JGZq4F-Jf10=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1382742883-8476.jpeg.jpg","full": "https://img.discogs.com/3jmdVO-IaG6VPwnjubiEMqjsSq0=/600x800/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382742883-8476.jpeg.jpg","width": "600","height": "800"},{"id": "10248308","thumb": "https://img.discogs.com/Gmu0GjVc9QSmnLLOHzRalEN-lC4=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1382742407-8712.jpeg.jpg","full": "https://img.discogs.com/FQ7eBgvSfUkmX7xhzxSTtLRl46Q=/600x593/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382742407-8712.jpeg.jpg","width": "600","height": "593"},{"id": "10248125","thumb": "https://img.discogs.com/etNTUI_IqDLCy5GG2zYJheLlJw0=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1382739870-1745.gif.jpg","full": "https://img.discogs.com/pQ1Bj-XXonb3kZIYhNXK0eLF1bs=/600x590/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382739870-1745.gif.jpg","width": "600","height": "590"},{"id": "1029555","thumb": "https://img.discogs.com/U6LRGH-CrBgQcNanFQc58cfuJww=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1167437440.jpeg.jpg","full": "https://img.discogs.com/VFxhrfX4BK2TztjZ0Uae0uaLvJY=/600x600/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1167437440.jpeg.jpg","width": "600","height": "600"},{"id": "20820007","thumb": "https://img.discogs.com/K__ZeF8NIE_4_U-hXq8g20I93SE=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1448339407-6828.png.jpg","full": "https://img.discogs.com/1OC5jxXkXXYJWQBNYgT5vXP4u7I=/554x688/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1448339407-6828.png.jpg","width": "554","height": "688"},{"id": "5213267","thumb": "https://img.discogs.com/z419jNYrLie0pPbkwOiCmOBgmqM=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1306052314.jpeg.jpg","full": "https://img.discogs.com/R5FhGZLEkRCQB7DcXl95a-cpW1Y=/596x600/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1306052314.jpeg.jpg","width": "596","height": "600"},{"id": "20820036","thumb": "https://img.discogs.com/9JLN1Ty_YpqMEijHNmr3B6OppDY=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1448339557-2249.png.jpg","full": "https://img.discogs.com/kXhyOVeYrjkSsUhJx_6i9pagIgA=/600x483/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1448339557-2249.png.jpg","width": "600","height": "483"},{"id": "21221144","thumb": "https://img.discogs.com/NrvhndgWPtLjXQ9P5K-5WLINDOU=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1451308644-3348.jpeg.jpg","full": "https://img.discogs.com/CXzwlrD5e-FkRf_ZNrvyifsEDws=/500x376/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1451308644-3348.jpeg.jpg","width": "500","height": "376"},{"id": "31936899","thumb": "https://img.discogs.com/K24W_Hl0qJMZ7KjX_4IcgOi98bY=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1514452799-9029.jpeg.jpg","full": "https://img.discogs.com/zIYwtu3Q96E8k9dIxc9iFPvjStI=/600x784/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1514452799-9029.jpeg.jpg","width": "600","height": "784"},{"id": "5213264","thumb": "https://img.discogs.com/3wd-r2VONNNiRbXZEq9ungiqTGM=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1306052299.jpeg.jpg","full": "https://img.discogs.com/ZsjMLkxJdYRfiD-Uhekh1mVsGUM=/500x600/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1306052299.jpeg.jpg","width": "500","height": "600"},{"id": "4238325","thumb": "https://img.discogs.com/d1ma0YaxeC09Arc_RUBN1bGS0tk=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1287539579.png.jpg","full": "https://img.discogs.com/-uEu7nt-oFExUyxKT28SGAadlmQ=/360x450/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1287539579.png.jpg","width": "360","height": "450"},{"id": "1783090","thumb": "https://img.discogs.com/ZKz4BjftbvqbkEYYEzxmQpiFv9Q=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1205697201.jpeg.jpg","full": "https://img.discogs.com/ZkM6ycVT4okVIH0ddxrtl6bwqlA=/320x400/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1205697201.jpeg.jpg","width": "320","height": "400"},{"id": "5213266","thumb": "https://img.discogs.com/KCOO4nG9NWRbdSBy23zuA2_jDWw=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1306052307.jpeg.jpg","full": "https://img.discogs.com/D9HSq-yaJFg3SL2wPssRiuo4ivI=/600x440/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1306052307.jpeg.jpg","width": "600","height": "440"},{"id": "4238320","thumb": "https://img.discogs.com/ujOrChdPYXHes6vbO3XSaH01HOE=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1287539291.jpeg.jpg","full": "https://img.discogs.com/4kBcMEj_5wQV-WTlry6-napU8aw=/467x468/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1287539291.jpeg.jpg","width": "467","height": "468"},{"id": "4238323","thumb": "https://img.discogs.com/yllpvSytqidgmLFXpCgl7FtceM4=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1287539505.jpeg.jpg","full": "https://img.discogs.com/FBpZsKsjh1R1O1PWQGyLzV-wH10=/500x639/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1287539505.jpeg.jpg","width": "500","height": "639"},{"id": "10248134","thumb": "https://img.discogs.com/Ij2IwuiOXzyiF_QNbdcLPPkfk3U=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1382739943-6754.jpeg.jpg","full": "https://img.discogs.com/fJz63UPvpvTAPYZzj4Gr4oGz6YE=/537x550/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382739943-6754.jpeg.jpg","width": "537","height": "550"},{"id": "10248136","thumb": "https://img.discogs.com/LWZFHCmG2bUsP73rFgeEF7IIo_g=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1382739959-9764.jpeg.jpg","full": "https://img.discogs.com/_sS91k9WK3buSB4_DceiBcnHD1k=/543x777/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382739959-9764.jpeg.jpg","width": "543","height": "777"},{"id": "21374725","thumb": "https://img.discogs.com/PSgvVi7mYbSoILRdnX4bbSzwlhs=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1452354407-2886.jpeg.jpg","full": "https://img.discogs.com/9GjRnI3o0-PeOZjyebfAquQJNfE=/486x720/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1452354407-2886.jpeg.jpg","width": "486","height": "720"},{"id": "21374739","thumb": "https://img.discogs.com/ZPDR3WH3Uot9j48OaGX4kAxmt0E=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1452354409-1465.jpeg.jpg","full": "https://img.discogs.com/GQG6nnEDIxfaZTYJLIXfkzHadl4=/600x768/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1452354409-1465.jpeg.jpg","width": "600","height": "768"},{"id": "21374750","thumb": "https://img.discogs.com/ivPULdCuGUrJmIW3lKWRLztnFok=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1452354410-4774.jpeg.jpg","full": "https://img.discogs.com/KZIqODAjiVmHS-vbkmabqoPA_WM=/600x800/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1452354410-4774.jpeg.jpg","width": "600","height": "800"},{"id": "10248340","thumb": "https://img.discogs.com/YfZ072L2CEk41UchxoL1BoKin58=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1382742811-7464.jpeg.jpg","full": "https://img.discogs.com/Q3zWQ81YZmkGrsVd-v_V-qk4E4A=/600x469/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-85929-1382742811-7464.jpeg.jpg","width": "600","height": "469"}]'
                        >
                                        <a        href="/artist/85929-Kate-Bush/images"        class="thumbnail_link
            thumbnail_size_large
            thumbnail_orientation_nocrop
            
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                            <img src="https://img.discogs.com/S388cIKcLTVhC6nvOHXaEymWWi0=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-85929-1382742029-2169.jpeg.jpg"
                alt="Kate Bush on Discogs" />
                    </span>
    </a>

                        <p class="image_gallery_more">
                <a href="/artist/85929-Kate-Bush/images">
                    More Images                </a>
              </p>
                    
    </div>
        <script type="text/template" id="image_gallery_modal_tpl">
        <div id="image_gallery_modal">
            <div class="image_gallery_actions">
                <button class="image_zoom button button-small hide_mobile">
                    <span class="image_zoom_in"><i class="icon icon-search-plus"></i> Zoom In</a></span>
                    <span class="image_zoom_out"><i class="icon icon-search-minus"></i> Zoom Out</a></span>
                </button>
                <button class="image_copy_permalink button button-small hide_mobile"><i class="icon icon-chain"></i> Permalink</button>
                <input class="image_copy_permalink_text" type="text">
                <a href="/artist/85929-Kate-Bush/images/update" class="images_edit button button-small"><i class="icon icon-pencil-square-o"></i> Edit Images</a>
                <a class="image_gallery_close hide_mobile"><i class="icon icon-times"></i></a>
            </div>
            <a class="image_gallery_nav image_gallery_prev hide_mobile"><i class="icon icon-chevron-left"></i></a>
            <a class="image_gallery_nav image_gallery_next hide_mobile"><i class="icon icon-chevron-right"></i></a>
            <div
                class="image_gallery_slide_wrapper"
                style="width: <%= 100 * images.length %>%"
            >
                <% _.each(images, function(image, index) { %>
                    <div
                        data-id="<%= image.id %>"
                        class="image_gallery_slide<% if (index === 0) { %> current<% } %>"
                        style="width: <%= (100 / images.length).toFixed(4) %>%">
                        <img
                            class="preview"
                            src="<%= image.thumb %>"
                            data-src="<%= image.full %>"
                            style="height: 100%; max-width: <%= image.width %>px; max-height: <%= image.height %>px;"
                        >
                    </div>
                <% }) %>
            </div>
            <div class="image_gallery_thumbs hide_mobile">
                <% _.each(images, function(image) { %>
                    <a href="#" data-id="<%= image.id %>" class="image_gallery_thumb">
                        <img src="<%= image.thumb %>">
                    </a>
                <% }) %>
            </div>
            <a href="/artist/85929-Kate-Bush/images/update" class="images_edit button last"><i class="icon icon-pencil-square-o"></i> Edit Images</a>
        </div>
    </script>



                <div class="profile"><h1 class="hide_mobile">Kate Bush</h1>
<div class="head">Real Name:</div>
    <div class="content">Catherine Bush</div>

    <div class="head">Profile:</div>
    <div class="content">
        <div class="readmore" id="profile">
            Highly distinctive singer/songwriter, born July 30th, 1958. Bush was signed to EMI at age 16 after <a href="https://www.discogs.com/artist/110863-David-Gilmour" target="_blank">David Gilmour</a> heard her work and helped her produce a demo tape.<br><br>In 1978 (at age 19), her debut single &quot;Wuthering Heights&quot; reached #1 in four countries. She has maintained a large cult following ever since. Bush's most prolific creative period was between 1978 to 1993, with a release of new material and new albums every few years. After the 1993 release of &quot;The Red Shoes,&quot; she began an extended break from public view,  and devoted time to her family.<br><br>&quot;Aerial,&quot; Bush's first album in 12 years, was released in November 2005, preceded by single &quot;King Of The Mountain&quot;. In 2011, two Kate Bush albums were released: &quot;Director's Cut,&quot; a reworking of several songs from &quot;The Sensual World&quot; and &quot;The Red Shoes,&quot; and &quot;50 Words for Snow,&quot; an album of new music.<br><br>In 2014, Bush performed in a series of live concerts in London, her first concerts in decades. All performances of the show, called &quot;Before The Dawn,&quot; sold out in minutes.<br><br>She was appointed Commander of the Most Excellent Order of the British Empire (CBE) in the 2013 New Year Honours for services to music.
                    </div>
    </div>

    <div class="head">Sites:</div>
    <div class="content"><a href="http://www.katebush.com/" rel="nofollow">katebush.com</a>, <a href="http://www.katebushnews.com/" rel="nofollow">katebushnews.com</a>, <a href="https://www.AllMusic.com/artist/kate-bush-mn0000855423" rel="nofollow">AllMusic.com</a>, <a href="https://www.facebook.com/katebush" rel="nofollow">Facebook</a>, <a href="https://www.imdb.com/name/nm0124165/" rel="nofollow">imdb.com</a>, <a href="http://www.ProgArchives.com/artist.asp?id=2107#discography" rel="nofollow">ProgArchives.com</a>, <a href="https://open.Spotify.com/artist/1aSxMhuvixZ8h9dK9jIDwL/discography" rel="nofollow">open.Spotify.com</a>, <a href="https://RateYourMusic.com/artist/kate-bush" rel="nofollow">RateYourMusic.com</a>, <a href="https://TheWorldOfKateBush.blogspot.com/" rel="nofollow">TheWorldOfKateBush.blogspot.com</a>, <a href="https://twitter.com/katebushmusic" rel="nofollow">Twitter</a>, <a href="https://www.whosampled.com/Kate-Bush/" rel="nofollow">whosampled.com</a>, <a href="https://en.wikipedia.org/wiki/Kate_Bush" rel="nofollow">Wikipedia</a>, <a href="https://www.youtube.com/user/KateBushMusic" rel="nofollow">YouTube</a></div>

    
    <div class="head">Aliases:</div>
    <div class="content">
                
                <a href="/artist/3629532-Girl-From-The-Ivy">Girl From The Ivy</a>    </div>

    
    
    
    <div class="head">In Groups:</div>
    <div class="content">
                
                <a href="/artist/420265-Ferry-Aid">Ferry Aid</a>, 
                <a href="/artist/3263822-Kate-Bush-And-Friends">Kate Bush And Friends</a>, 
                <a href="/artist/4253308-KT-Bush-Band">KT Bush Band</a>, 
                <a href="/artist/406643-Spirit-Of-The-Forest">Spirit Of The Forest</a>, 
                <a href="/artist/5673206-The-KT-Fellowship">The KT Fellowship</a>    </div>


                                        <div class="head">Variations:</div>
                    <div class="content">

                        <div class="filter_anv_wrap">
                                                        <span class="anv_selected">Viewing All</span>
                                                        |

                                                        <a href="/artist/85929-Kate-Bush?noanv=1">Kate Bush</a>
                            
                                                    </div>

                        <div id="anvs" class="readmore">
                                                        
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                                                        <a href="/artist/85929-Kate-Bush?anv=%28Kate+Bush%29&filter_anv=1">(Kate Bush)</a>, <a href="/artist/85929-Kate-Bush?anv=Bush&filter_anv=1">Bush</a>, <a href="/artist/85929-Kate-Bush?anv=C.+Bush&filter_anv=1">C. Bush</a>, <a href="/artist/85929-Kate-Bush?anv=Catherine+Bush&filter_anv=1">Catherine Bush</a>, <a href="/artist/85929-Kate-Bush?anv=K+Bush&filter_anv=1">K Bush</a>, <a href="/artist/85929-Kate-Bush?anv=K.+Bush&filter_anv=1">K. Bush</a>, <a href="/artist/85929-Kate-Bush?anv=K.Bush&filter_anv=1">K.Bush</a>, <a href="/artist/85929-Kate-Bush?anv=Kate&filter_anv=1">Kate</a>, <a href="/artist/85929-Kate-Bush?anv=Katherine+Bush&filter_anv=1">Katherine Bush</a>, <a href="/artist/85929-Kate-Bush?anv=KB&filter_anv=1">KB</a>, <a href="/artist/85929-Kate-Bush?anv=%D0%9A%D0%B5%D0%B9%D1%82+%D0%91%D1%83%D1%88&filter_anv=1">Кейт Буш</a>, <a href="/artist/85929-Kate-Bush?anv=%D7%A7%D7%99%D7%99%D7%98+%D7%91%D7%95%D7%A9&filter_anv=1">קייט בוש</a>, <a href="/artist/85929-Kate-Bush?anv=%D7%A7%D7%99%D7%99%D7%AA+%D7%91%D7%95%D7%A9&filter_anv=1">קיית בוש</a>, <a href="/artist/85929-Kate-Bush?anv=%E3%82%B1%E3%82%A4%E3%83%88%E3%83%BB%E3%83%96%E3%83%83%E3%82%B7%E3%83%A5&filter_anv=1">ケイト・ブッシュ</a>, <a href="/artist/85929-Kate-Bush?anv=%E5%87%B1%E7%89%B9%E5%B8%83%E5%B8%8C&filter_anv=1">凱特布希</a>, <a href="/artist/85929-Kate-Bush?anv=%EC%BC%80%EC%9D%B4%ED%8A%B8+%EB%B6%80%EC%8B%9C&filter_anv=1">케이트 부시</a>
                        </div>

                    </div> <!-- /content -->

                    
                </div> <!-- end profile -->

            </div> <!-- end body -->
        </div> <!-- end left -->

        <div class="right">

            <div class="section hide_mobile">

                        <span class="copy_shortcut needs_tooltip" data-title="Select Artist Code">
        <img src="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/images/favicon.ico" />
        <span class="copy_shortcut_code">[a85929]</span>
    </span>

                <h3>
                    Artist                </h3>

                <div class="section_content">

                    <ul class="list_no_style" id="listitems">
                        <li>
                            <a href="/artist/85929-Kate-Bush/history#latest" id="edit_link">
                                Edit Artist                            </a>
                        <li>
                    </ul>

                                                                <br />
                                <a class="share_link " data-text="Kate Bush" data-url="http://www.discogs.com/artist/85929-Kate-Bush" data-dialog-title="Share">
        <i class="icon icon-share-square-o"></i>
        Share</a>

                    
                </div> <!-- end section_content -->

            </div> <!-- end section -->

            <div class="hide_mobile">
                
                


<div class="section marketplace_box_links">
    <h3>
        Marketplace                <span class="marketplace_for_sale_count">
        <a href="/sell/list?artist_id=85929&ev=ab"><strong>46,248 For Sale</strong></a></span>
    </h3>

    <div class="section_content marketplace_box_buttons_count_1">


                        <a href="/sell/list?artist_id=85929&ev=ab" class="buy_release_button button button-blue">
                                                    Vinyl and CD
                            </a>
            
    
    </div>
</div>
            </div>

                    </div> <!-- /right -->
    </div> <!-- /lr -->

                    <div class="responsive_wrap tabs-wrap float_fix">
                    <ul class="tab_menu">
                        <li class="menu-item  first current last">    <a href="/artist/85929-Kate-Bush"
                >                <span class="link_text">Discography</span>
    
    </a></li>
    
        </ul>
    
    </div>


    <div id="discography_wrapper" class="aside_nav_wrap">

        <div class="discography_nav off_canvas_nav">

            <div class="hide_mobile">
                    <div class="search aside_search_form clearfix">
        <form class="artist_search_form">
            <input type="text" class="artist_search_query " placeholder="Search" value="" />
            <button class="button"><i class="icon icon-search"></i></button>
        </form>
    </div>

            </div>

                
                    <ul class="facets_nav">
            <li>
                <h3 class="facets_header">
                    <a
                        href="/artist/85929-Kate-Bush?type=Releases&filter_anv=0"
                        class="credit_type default"
                        data-credit-type="Releases"
                        data-credit-subtype="All"
                        data-credit-document-title="Kate Bush Discography at Discogs: All - Releases"
                    >
                        <span class="facet_count">132</span>
                        Releases
                    </a>
                </h3>
            </li>
                                                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Releases&subtype=Albums&filter_anv=0"
                        class="credit_type selected"
                        data-credit-type="Releases"
                        data-credit-subtype="Albums"
                        data-credit-document-title="Kate Bush Discography at Discogs: Albums - Releases"
                    >
                        <span class="facet_count">15</span>
                        Albums
                        <span class="facet-bar" style="width: 11.363636363636363%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Releases&subtype=Singles-EPs&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Releases"
                        data-credit-subtype="Singles-EPs"
                        data-credit-document-title="Kate Bush Discography at Discogs: Singles-EPs - Releases"
                    >
                        <span class="facet_count">73</span>
                        Singles & EPs
                        <span class="facet-bar" style="width: 55.3030303030303%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Releases&subtype=Compilations&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Releases"
                        data-credit-subtype="Compilations"
                        data-credit-document-title="Kate Bush Discography at Discogs: Compilations - Releases"
                    >
                        <span class="facet_count">24</span>
                        Compilations
                        <span class="facet-bar" style="width: 18.181818181818183%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Releases&subtype=Videos&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Releases"
                        data-credit-subtype="Videos"
                        data-credit-document-title="Kate Bush Discography at Discogs: Videos - Releases"
                    >
                        <span class="facet_count">10</span>
                        Videos
                        <span class="facet-bar" style="width: 7.575757575757576%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Releases&subtype=Miscellaneous&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Releases"
                        data-credit-subtype="Miscellaneous"
                        data-credit-document-title="Kate Bush Discography at Discogs: Miscellaneous - Releases"
                    >
                        <span class="facet_count">10</span>
                        Miscellaneous
                        <span class="facet-bar" style="width: 7.575757575757576%;"></span>
                    </a>
                    </li>
                                    </ul>
                    <ul class="facets_nav">
            <li>
                <h3 class="facets_header">
                    <a
                        href="/artist/85929-Kate-Bush?type=Appearances&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="All"
                        data-credit-document-title="Kate Bush Discography at Discogs: All - Appearances"
                    >
                        <span class="facet_count">1346</span>
                        Appearances
                    </a>
                </h3>
            </li>
                                                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Appearances&subtype=Albums&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Albums"
                        data-credit-document-title="Kate Bush Discography at Discogs: Albums - Appearances"
                    >
                        <span class="facet_count">61</span>
                        Albums
                        <span class="facet-bar" style="width: 4.531946508172362%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Appearances&subtype=Singles-EPs&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Singles-EPs"
                        data-credit-document-title="Kate Bush Discography at Discogs: Singles-EPs - Appearances"
                    >
                        <span class="facet_count">15</span>
                        Singles & EPs
                        <span class="facet-bar" style="width: 1.1144130757800892%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Appearances&subtype=Compilations&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Compilations"
                        data-credit-document-title="Kate Bush Discography at Discogs: Compilations - Appearances"
                    >
                        <span class="facet_count">1161</span>
                        Compilations
                        <span class="facet-bar" style="width: 86.2555720653789%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Appearances&subtype=Mixes&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Mixes"
                        data-credit-document-title="Kate Bush Discography at Discogs: Mixes - Appearances"
                    >
                        <span class="facet_count">51</span>
                        Mixes
                        <span class="facet-bar" style="width: 3.789004457652303%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Appearances&subtype=Videos&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Videos"
                        data-credit-document-title="Kate Bush Discography at Discogs: Videos - Appearances"
                    >
                        <span class="facet_count">52</span>
                        Videos
                        <span class="facet-bar" style="width: 3.863298662704309%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Appearances&subtype=Miscellaneous&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Miscellaneous"
                        data-credit-document-title="Kate Bush Discography at Discogs: Miscellaneous - Appearances"
                    >
                        <span class="facet_count">6</span>
                        Miscellaneous
                        <span class="facet-bar" style="width: 0.44576523031203563%;"></span>
                    </a>
                    </li>
                                    </ul>
                    <ul class="facets_nav">
            <li>
                <h3 class="facets_header">
                    <a
                        href="/artist/85929-Kate-Bush?type=Unofficial&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="All"
                        data-credit-document-title="Kate Bush Discography at Discogs: All - Unofficial"
                    >
                        <span class="facet_count">264</span>
                        Unofficial
                    </a>
                </h3>
            </li>
                                                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Unofficial&subtype=Albums&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="Albums"
                        data-credit-document-title="Kate Bush Discography at Discogs: Albums - Unofficial"
                    >
                        <span class="facet_count">82</span>
                        Albums
                        <span class="facet-bar" style="width: 31.060606060606062%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Unofficial&subtype=Singles-EPs&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="Singles-EPs"
                        data-credit-document-title="Kate Bush Discography at Discogs: Singles-EPs - Unofficial"
                    >
                        <span class="facet_count">55</span>
                        Singles & EPs
                        <span class="facet-bar" style="width: 20.833333333333336%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Unofficial&subtype=Compilations&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="Compilations"
                        data-credit-document-title="Kate Bush Discography at Discogs: Compilations - Unofficial"
                    >
                        <span class="facet_count">55</span>
                        Compilations
                        <span class="facet-bar" style="width: 20.833333333333336%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Unofficial&subtype=Videos&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="Videos"
                        data-credit-document-title="Kate Bush Discography at Discogs: Videos - Unofficial"
                    >
                        <span class="facet_count">32</span>
                        Videos
                        <span class="facet-bar" style="width: 12.121212121212121%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Unofficial&subtype=Miscellaneous&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="Miscellaneous"
                        data-credit-document-title="Kate Bush Discography at Discogs: Miscellaneous - Unofficial"
                    >
                        <span class="facet_count">40</span>
                        Miscellaneous
                        <span class="facet-bar" style="width: 15.151515151515152%;"></span>
                    </a>
                    </li>
                                    </ul>
                    <ul class="facets_nav">
            <li>
                <h3 class="facets_header">
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="All"
                        data-credit-document-title="Kate Bush Discography at Discogs: All - Credits"
                    >
                        <span class="facet_count">921</span>
                        Credits
                    </a>
                </h3>
            </li>
                                                                                                            <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&subtype=Remix&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Remix"
                        data-credit-document-title="Kate Bush Discography at Discogs: Remix - Credits"
                    >
                        <span class="facet_count">2</span>
                        Remix
                        <span class="facet-bar" style="width: 0.21715526601520088%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&subtype=Vocals&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Vocals"
                        data-credit-document-title="Kate Bush Discography at Discogs: Vocals - Credits"
                    >
                        <span class="facet_count">70</span>
                        Vocals
                        <span class="facet-bar" style="width: 7.600434310532031%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&subtype=Instruments-Performance&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Instruments-Performance"
                        data-credit-document-title="Kate Bush Discography at Discogs: Instruments-Performance - Credits"
                    >
                        <span class="facet_count">38</span>
                        Instruments & Performance
                        <span class="facet-bar" style="width: 4.125950054288817%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&subtype=Writing-Arrangement&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Writing-Arrangement"
                        data-credit-document-title="Kate Bush Discography at Discogs: Writing-Arrangement - Credits"
                    >
                        <span class="facet_count">680</span>
                        Writing & Arrangement
                        <span class="facet-bar" style="width: 73.8327904451683%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&subtype=Featuring-Presenting&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Featuring-Presenting"
                        data-credit-document-title="Kate Bush Discography at Discogs: Featuring-Presenting - Credits"
                    >
                        <span class="facet_count">17</span>
                        Featuring & Presenting
                        <span class="facet-bar" style="width: 1.8458197611292075%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&subtype=Conducting-Leading&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Conducting-Leading"
                        data-credit-document-title="Kate Bush Discography at Discogs: Conducting-Leading - Credits"
                    >
                        <span class="facet_count">2</span>
                        Conducting & Leading
                        <span class="facet-bar" style="width: 0.21715526601520088%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&subtype=Production&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Production"
                        data-credit-document-title="Kate Bush Discography at Discogs: Production - Credits"
                    >
                        <span class="facet_count">85</span>
                        Production
                        <span class="facet-bar" style="width: 9.229098805646037%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&subtype=Technical&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Technical"
                        data-credit-document-title="Kate Bush Discography at Discogs: Technical - Credits"
                    >
                        <span class="facet_count">1</span>
                        Technical
                        <span class="facet-bar" style="width: 0.10857763300760044%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&subtype=Visual&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Visual"
                        data-credit-document-title="Kate Bush Discography at Discogs: Visual - Credits"
                    >
                        <span class="facet_count">21</span>
                        Visual
                        <span class="facet-bar" style="width: 2.2801302931596092%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/85929-Kate-Bush?type=Credits&subtype=Acting-Literary-Spoken&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Acting-Literary-Spoken"
                        data-credit-document-title="Kate Bush Discography at Discogs: Acting-Literary-Spoken - Credits"
                    >
                        <span class="facet_count">5</span>
                        Acting, Literary & Spoken
                        <span class="facet-bar" style="width: 0.5428881650380022%;"></span>                    </a>
                    </li>
                                    </ul>
    
    


            <ul class="artist_actions list_no_style">
                <li>
                    <a title="Add Release" href="/release/add?from_artist=Kate+Bush" class="button"><i class="icon icon-plus"></i> Add Release</a>

                </li>
                            </ul>

            <div class="data_quality">
                <strong>Data Quality</strong>
                <a href="/help/doc/voting-guidelines"><i class="icon icon-question-circle"></i></a>
                <ul class="list_no_style data_quality_list">
                    
                                                                                <li class="correct" title="10%">
                    <span class="quality_label quality_label_correct">Correct</span>
                    <div class="data_quality_meter">
                        <span class="data_quality correct" style="width: 10.4%"></span>
                                            </div>
                    </li>
                                        
                                                                                <li class="nmajc" title="0%">
                    <span class="quality_label quality_label_nmajc">Needs</span>
                    <div class="data_quality_meter">
                        <span class="data_quality nmajc" style="width: 0.1%"></span>
                                                <span class="data_quality_note">major</span>
                                            </div>
                    </li>
                                        
                                                                                <li class="nminc" title="0%">
                    <span class="quality_label quality_label_nminc">Changes</span>
                    <div class="data_quality_meter">
                        <span class="data_quality nminc" style="width: 0.4%"></span>
                                                <span class="data_quality_note">minor</span>
                                            </div>
                    </li>
                                        
                                                                                <li class="new" title="63%">
                    <span class="quality_label quality_label_new">New</span>
                    <div class="data_quality_meter">
                        <span class="data_quality new" style="width: 63.1%"></span>
                                            </div>
                    </li>
                                        
                                                                                <li class="edit" title="26%">
                    <span class="quality_label quality_label_edit">Updated</span>
                    <div class="data_quality_meter">
                        <span class="data_quality edit" style="width: 25.9%"></span>
                                            </div>
                    </li>
                                                        </ul>
            </div>

            <ul class="facets_nav">
                <li>
                    <a href="/artist/85929-Kate-Bush/submissions">5631 submissions pending</a>
                </li>
            </ul>
        </div>

        <div id="releases" class="content_with_off_canvas">
            <div id="pjax_container" data-pjax-timeout="30000">
                
 
<div class="hide-desktop">
        <div class="search aside_search_form clearfix">
        <form class="artist_search_form">
            <input type="text" class="artist_search_query search_table_field" placeholder="Search" value="" />
            <button class="button"><i class="icon icon-search"></i></button>
        </form>
    </div>

</div>

        
    <div class="pagination top ">
        <form
            action="/artist/85929"
            method="get"
            data-persist-filters="True"
            data-section="artist"
        >
                            <strong class="pagination_total">
        1 &ndash; 15 of 15    </strong>

                                    <div class="pagination_controls ">
                                            
    <span id="layout_buttons" class="icon_button_group" data-section="artist"><a class="inset_button needs_tooltip"  data-placement="top" data-size="big" title="Large Covers" href="/artist/85929?type=Releases&amp;subtype=Albums&amp;page=1&amp;layout=big">
                <i class="icon icon-th-large"></i>
            </a><a class="inset_button needs_tooltip"  data-placement="top" data-size="med" title="Text With Covers" href="#" disabled="disabled">
                <i class="icon icon-list"></i>
            </a><a class="inset_button needs_tooltip"  data-placement="top" data-size="sm" title="Text Only" href="/artist/85929?type=Releases&amp;subtype=Albums&amp;page=1&amp;layout=sm">
                <i class="icon icon-align-justify"></i>
            </a></span>

                
                                        
                    <label for="sort_top" class="sort_top">Sort</label>
        <select name="sort" id="sort_top">
            
            <option value="title,asc">Title, A-Z</option><option value="title,desc">Title, Z-A</option><option value="label,asc">Label, A-Z</option><option value="label,desc">Label, Z-A</option><option value="year,asc" selected="selected">Year, 0-9</option><option value="year,desc">Year, 9-0</option>    
        </select>
        <br class="hide-desktop">
        

                                                            <label class="hide_mobile" for="limit_top">Show</label>
    <select class="hide_mobile" name="limit" id="limit_top">
        
            <option value="25" selected="selected">25</option><option value="50">50</option><option value="100">100</option><option value="250">250</option><option value="500">500</option>    
    </select>

                                <noscript><button type="submit">Refresh</button></noscript>
            </div>
                                                                                                                                                    <input type="hidden" name="type" value="Releases" />
                                    <input type="hidden" name="subtype" value="Albums" />
                                    </form>
    </div>


        
                <table class="cards table_responsive layout_normal" id="artist">
                                                                                                                                                                                            <tr
        class="card r_tr m28522 main master edit new change
            shortcut_navigable
            "
                                                data-id="/master/28522/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="28522"
    data-object-type="master release"
                data-group-url="/master/28522/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m28522"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission / Needs Changes"></span></div></td>

                <td class="catno_first"><span>SMAS-17008</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-Lionheart/master/28522"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/NiA8hDZlyWikYCmBRlo5Lm-gyYA=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-426108-1611174421-4296.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - Lionheart album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-Lionheart/master/28522">Lionheart</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            157
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/26126-EMI">EMI</a>, <a href="https://www.discogs.com/label/26126-EMI">EMI</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>SMAS-17008</span></td>

                <td class="country has_header" data-header="Country: "><span>US</span></td>

                <td class="year has_header" data-header="Year: ">1978</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m28522"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/28522">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            157
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m28531 main master edit new change
            shortcut_navigable
            "
                                                data-id="/master/28531/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="28531"
    data-object-type="master release"
                data-group-url="/master/28531/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m28531"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission / Needs Changes"></span></div></td>

                <td class="catno_first"><span>SW-11761</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-The-Kick-Inside/master/28531"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/tp0mTjpfluTRC2aT8xXbQShJAUA=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-414374-1411407209-7587.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - The Kick Inside album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-The-Kick-Inside/master/28531">The Kick Inside</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            245
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/26126-EMI">EMI</a>, <a href="https://www.discogs.com/label/26126-EMI">EMI</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>SW-11761</span></td>

                <td class="country has_header" data-header="Country: "><span>US</span></td>

                <td class="year has_header" data-header="Year: ">1978</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m28531"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/28531">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            245
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m28582 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/28582/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="28582"
    data-object-type="master release"
                data-group-url="/master/28582/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m28582"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>2 C 266-07339, C 266 - 07.339</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-Never-For-Ever/master/28582"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/r9iAFGPB9Z6rAWfns6iSPsIG_0E=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-508248-1474741790-3505.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - Never For Ever album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-Never-For-Ever/master/28582">Never For Ever</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            127
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/26126-EMI">EMI</a>, <a href="https://www.discogs.com/label/26126-EMI">EMI</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>2 C 266-07339, C 266 - 07.339</span></td>

                <td class="country has_header" data-header="Country: "><span>France</span></td>

                <td class="year has_header" data-header="Year: ">1980</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m28582"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/28582">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            127
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m28613 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/28613/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="28613"
    data-object-type="master release"
                data-group-url="/master/28613/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m28613"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>ST-17084</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-The-Dreaming/master/28613"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/-8FbM1BMGTmLQrg_hX_ssFCBSi0=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-461384-1116860433.gif.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - The Dreaming album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-The-Dreaming/master/28613">The Dreaming</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            95
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/26126-EMI">EMI</a>, <a href="https://www.discogs.com/label/26126-EMI">EMI</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>ST-17084</span></td>

                <td class="country has_header" data-header="Country: "><span>US</span></td>

                <td class="year has_header" data-header="Year: ">1982</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m28613"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/28613">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            95
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m28680 main master edit new change
            shortcut_navigable
            "
                                                data-id="/master/28680/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="28680"
    data-object-type="master release"
                data-group-url="/master/28680/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m28680"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission / Needs Changes"></span></div></td>

                <td class="catno_first"><span>64 2403844</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-Hounds-Of-Love-/master/28680"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/rV_mube1uuM9syTR3sAp3rXPp_Y=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-197163-1475590932-6411.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - Hounds Of Love album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-Hounds-Of-Love-/master/28680">Hounds Of Love</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            166
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/26126-EMI">EMI</a>, <a href="https://www.discogs.com/label/26126-EMI">EMI</a>, <a href="https://www.discogs.com/label/26126-EMI">EMI</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>64 2403844</span></td>

                <td class="country has_header" data-header="Country: "><span>Italy</span></td>

                <td class="year has_header" data-header="Year: ">1985</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m28680"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/28680">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            166
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m5804 main master edit new change
            shortcut_navigable
            "
                                                data-id="/master/5804/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="5804"
    data-object-type="master release"
                data-group-url="/master/5804/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m5804"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission / Needs Changes"></span></div></td>

                <td class="catno_first"><span>C2 93078</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-The-Sensual-World/master/5804"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/a9X66RNkaazoAAOU-6o0nSf6jVs=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-264474-1159610478.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - The Sensual World album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-The-Sensual-World/master/5804">The Sensual World</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            107
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/26126-EMI">EMI</a>, <a href="https://www.discogs.com/label/26126-EMI">EMI</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>C2 93078</span></td>

                <td class="country has_header" data-header="Country: "><span>Canada</span></td>

                <td class="year has_header" data-header="Year: ">1989</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m5804"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/5804">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            107
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m28785 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/28785/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="28785"
    data-object-type="master release"
                data-group-url="/master/28785/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m28785"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>827277-4</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-The-Red-Shoes/master/28785"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/TAXMUbVgsaJWiHgNQKmDLdYY3_4=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-686910-1305486386.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - The Red Shoes album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-The-Red-Shoes/master/28785">The Red Shoes</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            65
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/28991-EMI-United-Kingdom">EMI United Kingdom</a>, <a href="https://www.discogs.com/label/28991-EMI-United-Kingdom">EMI United Kingdom</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>827277-4</span></td>

                <td class="country has_header" data-header="Country: "><span>Uruguay</span></td>

                <td class="year has_header" data-header="Year: ">1993</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m28785"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/28785">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            65
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m28811 main master edit new change
            shortcut_navigable
            "
                                                data-id="/master/28811/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="28811"
    data-object-type="master release"
                data-group-url="/master/28811/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m28811"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission / Needs Changes"></span></div></td>

                <td class="catno_first"><span>none</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-Aerial/master/28811"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/P-tZAgaEViF2X4V-YF1cedrwL3E=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-559101-1395432130-8923.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - Aerial album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-Aerial/master/28811">Aerial</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            45
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/26126-EMI">EMI</a>, <a href="https://www.discogs.com/label/26126-EMI">EMI</a>, <a href="https://www.discogs.com/label/26126-EMI">EMI</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>none</span></td>

                <td class="country has_header" data-header="Country: "><span>Denmark</span></td>

                <td class="year has_header" data-header="Year: ">2005</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m28811"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/28811">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            45
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m386159 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/386159/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="386159"
    data-object-type="master release"
                data-group-url="/master/386159/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m386159"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>50999 729866 22, FPCD007</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-50-Words-For-Snow/master/386159"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/JIEf7xei0-ptTBmNnsfPGiwe4GM=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-3235127-1336563603-5872.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - 50 Words For Snow album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-50-Words-For-Snow/master/386159">50 Words For Snow</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            26
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/245607-Fish-People">Fish People</a>, <a href="https://www.discogs.com/label/245607-Fish-People">Fish People</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>50999 729866 22, FPCD007</span></td>

                <td class="country has_header" data-header="Country: "><span>Taiwan</span></td>

                <td class="year has_header" data-header="Year: ">2011</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m386159"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/386159">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            26
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m336495 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/336495/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="336495"
    data-object-type="master release"
                data-group-url="/master/336495/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m336495"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>FPCD001, 5099902777221</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-Directors-Cut/master/336495"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/-edLo2PKp3R9yRX8raKAEMOn1Zg=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-2883500-1370642923-7824.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - Director&#39;s Cut album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-Directors-Cut/master/336495">Director&#39;s Cut</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            23
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/245607-Fish-People">Fish People</a>, <a href="https://www.discogs.com/label/245607-Fish-People">Fish People</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>FPCD001, 5099902777221</span></td>

                <td class="country has_header" data-header="Country: "><span>US</span></td>

                <td class="year has_header" data-header="Year: ">2011</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m336495"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/336495">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            23
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr r8428578 main release new
            shortcut_navigable
            "
                                                data-id="r8428578"
    data-object-id="8428578"
    data-object-type="release"
                                                
        id="r8428578"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="New Submission"></span></div></td>

                <td class="catno_first"><span>none</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-Hounds-Of-Love-Classic-Album/release/8428578"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/QmGPzK6IVIG9iOe4Pr_xHy2Nnzg=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-8428578-1461426027-3547.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - Hounds Of Love (Classic Album) album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable="a:visible:not(.credits a):not(.artist_in_title a)">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-Hounds-Of-Love-Classic-Album/release/8428578">Hounds Of Love (Classic Album)</a>
        &lrm;<span class="format">(CDr, Transcription)</span>
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/752586-BBC-Radio-6-Music">BBC Radio 6 Music</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>none</span></td>

                <td class="country has_header" data-header="Country: "><span>UK</span></td>

                <td class="year has_header" data-header="Year: ">2011</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check r8428578"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/8428578">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
            
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr r8677723 main release new
            shortcut_navigable
            "
                                                data-id="r8677723"
    data-object-id="8677723"
    data-object-type="release"
                                                
        id="r8677723"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="New Submission"></span></div></td>

                <td class="catno_first"><span>none</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-Mark-Radcliffe-Talks-With-Kate-Bush/release/8677723"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/buW2x2FD50T-DK8HFc2HaUETZLg=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-8677723-1466433871-9552.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - Mark Radcliffe Talks With Kate Bush album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable="a:visible:not(.credits a):not(.artist_in_title a)">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-Mark-Radcliffe-Talks-With-Kate-Bush/release/8677723">Mark Radcliffe Talks With Kate Bush</a>
        &lrm;<span class="format">(CDr, Transcription)</span>
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/752586-BBC-Radio-6-Music">BBC Radio 6 Music</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>none</span></td>

                <td class="country has_header" data-header="Country: "><span>UK</span></td>

                <td class="year has_header" data-header="Year: ">2012</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check r8677723"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/8677723">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
            
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr r9817882 main release new
            shortcut_navigable
            "
                                                data-id="r9817882"
    data-object-id="9817882"
    data-object-type="release"
                                                
        id="r9817882"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="New Submission"></span></div></td>

                <td class="catno_first"><span>none</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-Phil-Collins-Johnnie-Walker-Long-Players/release/9817882"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/gvrH_qngfPSByoFzWLHdWDH4Qfo=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-9817882-1486983567-6603.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - Johnnie Walker - Long Players album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a> / <a href="/artist/101028-Phil-Collins">Phil Collins</a></td>

                <td class="title" data-followable="a:visible:not(.credits a):not(.artist_in_title a)">
                                                <span class="credits">
                                            </span>
                                        <span class="artist_in_title">
                    <a href="/artist/85929-Kate-Bush">Kate Bush</a> / <a href="/artist/101028-Phil-Collins">Phil Collins</a> -
                </span>
                                    <a href="/Kate-Bush-Phil-Collins-Johnnie-Walker-Long-Players/release/9817882">Johnnie Walker - Long Players</a>
        &lrm;<span class="format">(CDr, Transcription)</span>
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/640517-BBC-Radio-2">BBC Radio 2</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>none</span></td>

                <td class="country has_header" data-header="Country: "><span>UK</span></td>

                <td class="year has_header" data-header="Year: ">2013</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check r9817882"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/9817882">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
            
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m1095570 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/1095570/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
    data-object-id="1095570"
    data-object-type="master release"
                data-group-url="/master/1095570/versions/artist/85929?noanv=False&sort=year&sort_order=asc"
                                        
        id="m1095570"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>none</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-Before-The-Dawn/master/1095570"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/_jHvrDApoK7D6Wl2esr8UA2thGI=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-9410324-1480125326-6336.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - Before The Dawn album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-Before-The-Dawn/master/1095570">Before The Dawn</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            9
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/245607-Fish-People">Fish People</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>none</span></td>

                <td class="country has_header" data-header="Country: "><span>US</span></td>

                <td class="year has_header" data-header="Year: ">2016</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m1095570"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/1095570">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            9
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr r10663059 main release new
            shortcut_navigable
            "
                                                data-id="r10663059"
    data-object-id="10663059"
    data-object-type="release"
                                                
        id="r10663059"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="New Submission"></span></div></td>

                <td class="catno_first"><span>none</span></td>

                <td class="image">            
    
                <a        href="/Kate-Bush-Documentary-Kate-Bush-On-6-Music/release/10663059"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/p49McV4eOH_P6_5F9boH0x-I5N8=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-10663059-1501956775-9147.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Kate Bush - Documentary (Kate Bush On 6 Music) album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/85929-Kate-Bush">Kate Bush</a></td>

                <td class="title" data-followable="a:visible:not(.credits a):not(.artist_in_title a)">
                                                <span class="credits">
                                            </span>
                                                <a href="/Kate-Bush-Documentary-Kate-Bush-On-6-Music/release/10663059">Documentary (Kate Bush On 6 Music)</a>
        &lrm;<span class="format">(CDr, Transcription)</span>
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/752586-BBC-Radio-6-Music">BBC Radio 6 Music</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>none</span></td>

                <td class="country has_header" data-header="Country: "><span>UK</span></td>

                <td class="year has_header" data-header="Year: ">2016</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check r10663059"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/10663059">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
            
        </td>
    </tr>

    
            </table>

    

        
    <div class="pagination bottom ">
        <form
            action="/artist/85929"
            method="get"
            
            data-section="general"
        >
                            <strong class="pagination_total">
        1 &ndash; 15 of 15    </strong>

                                    <div class="pagination_controls multiple_filters">
                
                                                            <label class="hide_mobile" for="limit_bottom">Show</label>
    <select class="hide_mobile" name="limit" id="limit_bottom">
        
            <option value="25" selected="selected">25</option><option value="50">50</option><option value="100">100</option><option value="250">250</option><option value="500">500</option>    
    </select>

                                <noscript><button type="submit">Refresh</button></noscript>
            </div>
                                                                                    <input type="hidden" name="type" value="Releases" />
                                    <input type="hidden" name="subtype" value="Albums" />
                                    </form>
    </div>
            </div>
        </div>
    </div>

    
    <div class="lr">
        <div class="left">
            
    

                                                                    <div
        class="section reviews toggle_section    toggle_section_remember"
        data-toggle-section-id="reviews"
        id="reviews"
    >
        <h3 class="toggle_section_control float_fix" data-for=".reviews">
                            Reviews    
        </h3>
        <div class="section_content toggle_section_content">
                        <p>
            <a href="#add-new-review" class="button" id="add_new_review">Add Review</a>
        </p>
                                        <div class="review
        row_with_actions
        
        
        has_thumbnail
        
        "
        data-cid="1358775"
                        id="comment1358775"
        >
                                    
                    
        <a        href="/user/LordBenjamin"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://secure.gravatar.com/avatar/7ce7a047625f209d5ccce08554dac4e7?s=100&r=pg&d=mm" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="LordBenjamin" />

                    </span>
    </a>

                <div class="review_comment_column">
            <h4>
                                    <a href="/user/LordBenjamin" class="user">LordBenjamin</a>
                            </h4>
            <small class="date">
                December 19, 2019
            </small>
            <div class="row_actions_dropdown">
                    <span class="action_menu_toggler" aria-haspopup="true">
        <i class="icon icon-caret-down"></i>
    </span>
    <ul class="action_menu ui-dialog-arrow ui-dialog-arrow-top-right" role="menu">
                                                <li class="menu-item"><a class="review_action2" href="/reviews/report/1358775">
                        <i class="icon icon-ban"></i>
                        Report</a></li>
                                                       
    </ul>
            </div>

            
            <div class="width_limit">
                                                                <div class="review_comment">
                    Ian Penman wrote a great article on Kate Bush for the London Review of Books, titled &quot;Sonic Foam&quot;. It also appears in his essay collection &quot;It Gets Me Home, This Curving Track&quot;, which I would recommend to any music enthusiast.<br><br><a href="https://www.lrb.co.uk/the-paper/v36/n08/ian-penman/sonic-foam" rel="nofollow" target="_blank">https://www.lrb.co.uk/the-paper/v36/n08/ian-penman/sonic-foam</a>
                </div>
            </div>
        </div>
        <div class="button_space row_actions">
                        <a class="review_action1 review_action1-reply">
                    <i class="icon icon-reply"></i>
                    Reply</a>
                                                    <a id="rvnotify_1358775" class="review_action2 review_action2-notify">
                    <i class="icon icon-envelope"></i> Notify me</a>
                        <span id="c1358775" class="review_content">
                <span class="tags" id="tags_rv1358775" >
                                                                <a href="#" class="review_tag">
            <i class="icon icon-tag"></i> 6 Helpful
        </a>
    
                </span>
            </span>
        </div>
    </div>

            
        </div>
    </div>
                                                                                        <div
        class="section list toggle_section  toggle_section_show_controls  toggle_section_remember"
        data-toggle-section-id="list"
        id="list"
    >
        <h3 class="toggle_section_control float_fix" data-for=".list">
            <i class="icon icon-chevron-down"></i>
                <i class="icon icon-chevron-up"></i>                    Lists                    
    <a
        class="add_to_list"
        data-list-add-url="/artist/85929-Kate-Bush/lists/add"
        data-list-add-pos="bottom"
        href="#"
    >
        Add to List    </a>

            
        </h3>
        <div class="section_content toggle_section_content">
                    <div id="lists" class="section_content toggle_section_content">
                                                                                    <div>
                            <a href="/lists/females-singers-80S/765241">females singers 80'S</a>
                            by <a href="/user/paul62300fr" class="user">paul62300fr</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Rejected-from-the-Women-Wearing-Boots-list-/253479">Rejected from the ***Women Wearing Boots*** list 👢👢</a>
                            by <a href="/user/sauvageon27" class="user">sauvageon27</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Digital-Music-Library/490298">Digital Music Library</a>
                            by <a href="/user/patricepatrick" class="user">patricepatrick</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Listened-Artists/487192">Listened Artists</a>
                            by <a href="/user/Appotheozz" class="user">Appotheozz</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Collections-mp3-DVD/345979">Collections mp3 DVD</a>
                            by <a href="/user/deepinsoul" class="user">deepinsoul</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Acts-I-have-seen-live/189439">Acts I have seen live</a>
                            by <a href="/user/daisydog" class="user">daisydog</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Revered-Bands-Acts-Artists/189596">Revered Bands, Acts & Artists</a>
                            by <a href="/user/planetbjork" class="user">planetbjork</a>
                        </div>
                                                                                <div>
                            <a href="/lists/My-Favorite-Vocalists/534908">My Favorite Vocalists</a>
                            by <a href="/user/crimsonmetal74" class="user">crimsonmetal74</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/110051">Favorite Artists</a>
                            by <a href="/user/oliversweeting" class="user">oliversweeting</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Composers/74129">Favorite Composers</a>
                            by <a href="/user/psyance_QL" class="user">psyance_QL</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-artists/426366">Favorite artists</a>
                            by <a href="/user/YazMindsNomi82" class="user">YazMindsNomi82</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-artists/329848">Favorite artists</a>
                            by <a href="/user/patlebouc" class="user">patlebouc</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Uropress-Iconic-Artists-Labels-and-Bands-Gallery/139672">Uropress' Iconic Artists, Labels, and Bands Gallery</a>
                            by <a href="/user/uropress" class="user">uropress</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/612777">Favorite Artists</a>
                            by <a href="/user/francesco.esposito" class="user">francesco.esposito</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/62608">Favorite Artists</a>
                            by <a href="/user/fcgb" class="user">fcgb</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Some-Of-My-Favourites/281662">Some Of My Favourites</a>
                            by <a href="/user/piharrod" class="user">piharrod</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/385826">Favorite Artists</a>
                            by <a href="/user/11able" class="user">11able</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Artists-I-Follow/558041">Artists I Follow</a>
                            by <a href="/user/Tombo1970" class="user">Tombo1970</a>
                        </div>
                                                                                <div>
                            <a href="/lists/My-Inspirations-Idols/626554">My Inspirations & Idols</a>
                            by <a href="/user/Indigo_Phoenix" class="user">Indigo_Phoenix</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Artists-for-the-Future/382027">Artists for the Future</a>
                            by <a href="/user/Milesbeet-hoven1" class="user">Milesbeet-hoven1</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/40594">Favorite Artists</a>
                            by <a href="/user/data_boy" class="user">data_boy</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Mis-Artistas/394587">Mis Artistas</a>
                            by <a href="/user/Blake01492" class="user">Blake01492</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/106907">Favorite Artists</a>
                            by <a href="/user/sydneybliss" class="user">sydneybliss</a>
                        </div>
                                                                                <div>
                            <a href="/lists/All-time-faves/623869">All time faves</a>
                            by <a href="/user/Lydiawoods1" class="user">Lydiawoods1</a>
                        </div>
                                                                                <div>
                            <a href="/lists/VH1s-Top-100-Women-Of-Rock-n-Roll/622366">“VH1’s Top 100 Women Of Rock ‘n’ Roll”</a>
                            by <a href="/user/crimsonmetal74" class="user">crimsonmetal74</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/41352">Favorite Artists</a>
                            by <a href="/user/U-Never-C" class="user">U-Never-C</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favourite-Artists/618871">Favourite Artists</a>
                            by <a href="/user/Basiq" class="user">Basiq</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/112001">Favorite Artists</a>
                            by <a href="/user/jheffward" class="user">jheffward</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Great-music-Weird-Music-Important-Music/511981">Great music, Weird Music, Important Music</a>
                            by <a href="/user/Laughing_Chaos" class="user">Laughing_Chaos</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Discogs-to-listen-to/560971">Discogs to listen to</a>
                            by <a href="/user/tearsdry" class="user">tearsdry</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/479264">Favorite Artists</a>
                            by <a href="/user/GruenerTee" class="user">GruenerTee</a>
                        </div>
                                                                                <div>
                            <a href="/lists/My-favs/530251">My favs</a>
                            by <a href="/user/ajames45" class="user">ajames45</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Konzerte-1977-heute/590329">Konzerte 1977 - heute</a>
                            by <a href="/user/Marcel_I." class="user">Marcel_I.</a>
                        </div>
                                                                                <div>
                            <a href="/lists/love-love-love/497254">love love love</a>
                            by <a href="/user/foalborn" class="user">foalborn</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/105725">Favorite Artists</a>
                            by <a href="/user/johnsanz" class="user">johnsanz</a>
                        </div>
                                                                                <div>
                            <a href="/lists/0001-Favorite-Artists/44984">00.01 - Favorite Artists</a>
                            by <a href="/user/DJ.Soon" class="user">DJ.Soon</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Tu-Cara-Me-Suena-6-2017-Espa%C3%B1a/367460">Tu Cara Me Suena 6 [2017] España.</a>
                            by <a href="/user/AaromGustinmondir" class="user">AaromGustinmondir</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Music-For-The-Dark-Hours/540462">Music For The Dark Hours</a>
                            by <a href="/user/Stifle" class="user">Stifle</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Respected/403147">Respected</a>
                            by <a href="/user/liquidspacedeffect" class="user">liquidspacedeffect</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Need-to-be-in-RNRHOF/519570">Need to be in RNRHOF</a>
                            by <a href="/user/robtadrian" class="user">robtadrian</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/66060">Favorite Artists</a>
                            by <a href="/user/double-happiness" class="user">double-happiness</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Les-sir%C3%A8nes-des-sph%C3%A8res-c%C3%A9lestes/491048">Les sirènes des sphères célestes</a>
                            by <a href="/user/vajrakilaya" class="user">vajrakilaya</a>
                        </div>
                                                                                <div>
                            <a href="/lists/My-Favorite-Artists/97096">My Favorite Artists</a>
                            by <a href="/user/r.courb" class="user">r.courb</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Artists-in-My-LP-Collection/169912">Artists in My LP Collection</a>
                            by <a href="/user/sillypenta" class="user">sillypenta</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/304088">Favorite Artists</a>
                            by <a href="/user/spacemanspiff22" class="user">spacemanspiff22</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Artists-seen-live/416004">Artists seen live</a>
                            by <a href="/user/jsf559" class="user">jsf559</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Insi_Music/373985">Insi_Music</a>
                            by <a href="/user/Insidermusic" class="user">Insidermusic</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favoritas/392839">Favoritas</a>
                            by <a href="/user/tpretendes" class="user">tpretendes</a>
                        </div>
                                                                                <div>
                            <a href="/lists/gingers-we-stan/391909">gingers we stan</a>
                            by <a href="/user/rockalittle" class="user">rockalittle</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Masters-of-Dance-Music-Part-Seven/176013">Masters of Dance Music Part Seven</a>
                            by <a href="/user/airwolffliesagain" class="user">airwolffliesagain</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/32576">Favorite Artists</a>
                            by <a href="/user/aka_dmsr" class="user">aka_dmsr</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Seen-Live/339322">Seen Live</a>
                            by <a href="/user/thajeztah" class="user">thajeztah</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Fav/262480">Fav</a>
                            by <a href="/user/ruvish" class="user">ruvish</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/44450">Favorite Artists</a>
                            by <a href="/user/happydogs" class="user">happydogs</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favourite-Artists/169651">Favourite Artists</a>
                            by <a href="/user/Robotrock04" class="user">Robotrock04</a>
                        </div>
                                                                                <div>
                            <a href="/lists/my-favorite-artists/128203">my favorite artists</a>
                            by <a href="/user/giovanni64" class="user">giovanni64</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Women/177221">Women</a>
                            by <a href="/user/Thedead" class="user">Thedead</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/62496">Favorite Artists</a>
                            by <a href="/user/Simoom" class="user">Simoom</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Bands-In-My-Collection-K/214379">Bands In My Collection - K</a>
                            by <a href="/user/TragicVision504" class="user">TragicVision504</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/51778">Favorite Artists</a>
                            by <a href="/user/satyrnik" class="user">satyrnik</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Rolling-Stone-2005/157345">Rolling Stone 2005</a>
                            by <a href="/user/indy133" class="user">indy133</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Musikexpress-2011/155865">Musikexpress 2011</a>
                            by <a href="/user/indy133" class="user">indy133</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/99482">Favorite Artists</a>
                            by <a href="/user/madonnagirl3" class="user">madonnagirl3</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/103267">Favorite Artists</a>
                            by <a href="/user/wtfan1995" class="user">wtfan1995</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/104569">Favorite Artists</a>
                            by <a href="/user/labaronne" class="user">labaronne</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favourite-Artists/135614">Favourite Artists</a>
                            by <a href="/user/unicorn27" class="user">unicorn27</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/111387">Favorite Artists</a>
                            by <a href="/user/A.U." class="user">A.U.</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/108777">Favorite Artists</a>
                            by <a href="/user/ArthurR" class="user">ArthurR</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/57681">Favorite Artists</a>
                            by <a href="/user/PLAYANGEL" class="user">PLAYANGEL</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Watchlist/43561">Watchlist</a>
                            by <a href="/user/Thamightyryang" class="user">Thamightyryang</a>
                        </div>
                                                                    </div>
        <a href="/lists" target="_blank" class="more_lists_link">
            View More Lists &rarr;
        </a>
    
        </div>
    </div>

        </div>
        <div class="right">
            <div class="section">
                <div class="section_content">
                                <div class="ad_container ad_right" id='ad_right'></div>
        
                </div>
            </div>
                                                                                                                            <div
        class="section video toggle_section  toggle_section_show_controls  toggle_section_remember"
        data-toggle-section-id="video"
        id="video"
    >
        <h3 class="toggle_section_control float_fix" data-for=".video">
            <i class="icon icon-chevron-down"></i>
                <i class="icon icon-chevron-up"></i>                        Videos                            (121)
                                        <a href="/artist/85929-Kate-Bush/videos/update">
                    Edit                </a>
                    
        </h3>
        <div class="section_content toggle_section_content">
                                            <div id="youtube_player_wrapper">
        <div
            id="youtube_player_placeholder"
            data-video-ids="oWaj8wU_qRg,wp43OdtAAkM,XmwYkt3f0lI,k2mt7_Xe7Lg,6xckBwPdo1c,V8YgDaHpcXs,-1pMMIe4hb4,pZiadb3bpOI,rpcUTWHlbvI,VerK4zwMRQw,F8xk_AkeP5c,_lsjXdH1tNY,XR4KnfcgLm0,VjEq-r2agqc,itX7uyZ4Ocw,jHzH3XfZqsw,_mIPneHdqbQ,2KII-OXV86c,rmADS0sFCGA,M2Wa0LdCsvM,PXI8iB_TTuM,h1DDndY0FLI,b-7JWI8W38k,Qb8K9KOEwkw,bSbOPPdXfSw,SsJrJc3X3b4,4zB_kgWpC5o,BW3gKKiTvjs,vnR-ifjqn_E,Tu5bnFAJJzY,ehwbvILs5vI,ExxjCtalm2c,t24pRXsTveE,qfNtPbHkp0U,cuOehmAjIDY,PaUGy7ZMdak,I9I7M-nR978,a3BzjfAjug4,GPB4GM-WwwY,D-M-CgG6fKU,ynuJnZN7tGw,0ar7vovnH5I,pfD7FzcjVyQ,pFnwc29NYEg,RtBZSIrmgiU,nPtfLSTjpQo,xrT1QI_Yrd8,W3M9B2BVNdk,p55qdQYy85Q,QOZDKlpybZE,EMwagH_ado8,07uxylovC5U,2jxjXpJSk5s,5agt0cpxsKU,9ESyqbDQW3g,weM8bJF6maA,cbhv7urKuLc,7gYvPYZZL8I,85wZw1O83aE,pllRW9wETzw,xyEHKGDSg5I,SPVP9T4_0xU,3NMhpI2-pLU,ZyuxXWxKSTg,v4GF7imFczI,U3z0-GNB39o,1GqEyxS3gqo,lProYoEtHYw,TgQUZcwd-JQ,LE1-W-a9hCI,yhLoxRmLc-8,qrt4y_6r3Qs,xiywYRvCtTo,dgNVhpA4g9Y,6RK9Z-SSbMg,lwxZSMlb1DU,NTIvsGEPROg,xeJUncCA11k,JZVuXkQgFsA,KqkuhppOcfM,NiEubEyF8jA,A-gbrUGstn8,U9pI40LnmHM,QJAtb3_m2Vc,CfbC6oDs4N4,d3uV9GqVlXg,rtfYu9iUdw8,UGtYgN0j0RE,ZsUQIMGIVrM,hwwzRYjWN_k,sV7w5TaYjRA,whTAtr9CIaE,guIMXLYDrXY,9fu6oAsFIH4,73i_UC0nWws,WFBFe8vwE4I,oIEgLePQbwE,ORAQITI1Gxw,NTUcoR8_pyE,TJgbxDbMtb0,VUqdpi9pNEw,Waac8sNUNcs,V3XAeg3B0To,tL1vE3yVZ7w,NAj8suae3WY,bmHZjBPVfwI,-Zf2szLzjY0,GOlkRP6zNlY,5R86V64GLq4,bNKwUtNnpE4,rtDy0xQKhBs,KO0cYD3xXpQ,CH5yHa9ZD-Q,1rRisyIVaIw,B2GDWtgd8zA,nzqF_gBpS84,UpVKPUoI554,B16RgN8-E28,B5Kz26VSpqg,Z6HTPUeAzY8,JjFMmMMV6ww"
            style="100%; 330px;"
        >
        </div>
        <div id="youtube_extender"></div>
    </div>

                    
        </div>
    </div>
    

        </div>
    </div>

    <div id="mr_panel" style="display:none;">

    <div id="mr_panel_control">
        <h3 class="mr_panel_head">
            <span id="mr_panel_title">Master Release</span>
            <small> - <a href="/help/doc/submission-guidelines-master-release" target="_blank">[Help]</a></small>
        </h3>

        <div class="mr_panel_control_sec">
            <small><b>Release Notes:</b> <i>(optional)</i></small><br/>
            <textarea name="mr_notes" id="mr_notes" rows="3" cols="30"></textarea>
        </div>

        <div class="mr_panel_control_sec">
            <small>Submission Notes: <i>(optional)</i></small><br/>
            <textarea name="sub_notes" id="sub_notes" rows="1" cols="30"></textarea>
        </div>

        <div class="mr_panel_control_sec">
            <button id="mr_save_button" class="button button-green">Save</button>
            <button id="mr_cancel_button" class="button">Cancel</button>
        </div>

    </div>

    <div id="mr_panel_list">
        <h3 class="mr_panel_head">Contained Releases:</h3>
        <div id="mr_panel_inner"></div>
    </div>

</div>

<script type="text/html" class="underscore_template" id="edit_master_table_template">
    <table class="table_block discography">
        <% _.each(versions, function(version) { %>
            <%= ds.require('templates').editMasterRow(version) %>
        <% }) %>
    </table>
</script>

<script type="text/html" class="underscore_template" id="edit_master_row_template">
    <tr>
        <td><input type="radio" name="mr_main" class="r_radio r<%- id %>" /></td>
        <% if (typeof html !== 'undefined') { %>
            <%= html %>
        <% } else { %>
            <td></td>             <td><a href="<%- url %>"><%- title %></a> (<%= format_html %>)</td>
            <td><%= label_html %></td>
            <td><%- year %></td>
        <% } %>
    </tr>
</script>

</div>
                                                    
            </div>                                                    <div class="sticky_footer">
                <button id="move"><i class="icon icon-close"></i></button>
                <div class="ad_container ad_bottom" id='ad_bottom'></div>
            </div>
        
                            <div id="push_footer"></div>
                    </div>                            
<div id="site_footer_wrap">
    <div id="site_footer" role="navigation" aria-label="Footer Navigation"><div class="banner_ad pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links">
        </div>
        <ul id="site_footer_list">
            <li>
                <h5>Discogs</h5>
                <ul>
                    <li>
                        <a href="/about">
                            About Us</a>
                    </li>
                    <li>
                        <a href="https://blog.discogs.com/en/">
                            Blog</a>
                    </li>
                    <li>
                        <a href="/app">
                            App</a>
                    </li>
                    <li>
                        <a href="/careers">
                            Careers</a>
                    </li>
                    <li>
                        <a href="/developers">
                            API</a>
                    </li>
                    <li>
                        <a href="https://blog.discogs.com/en/tag/engineering-en/">
                            Change Log</a>
                    </li>
                </ul>
            </li>
            <li>
                <h5>Help Is Here</h5>
                <ul>
                    <li>
                        <a href="https://support.discogs.com">
                            Help &amp; Support</a>
                    </li>
                    <li>
                        <a href="/forum/">
                            Forum</a>
                    </li>
                    <li>
                        <a class="show_keyboard_shortcuts" href="#show_keyboard_shortcuts">
                            Keyboard Shortcuts                        </a>
                    </li>
                    <li>
                        <a href="https://support.discogs.com/hc/articles/360004016474-Overview-of-Submission-Guidelines-for-Releases">Database Guidelines</a>
                    </li>
                    <li>
                        <a href="/shipping">Discogs Shipping</a>
                    </li>
                </ul>
            </li>
            <li>
                <h5>Join In</h5>
                <ul>
                    <li>
                        <a href="/getstarted/">
                            Get Started</a>
                    </li>
                                            <li>
                            <a href="/users/create">
                                Sign Up</a>
                        </li>
                                        <li>
                        <a href="/help/doc/contributing">
                            Contribute</a>
                    </li>
                    <li>
                        <a href="/release/add">
                            Add Release</a>
                    </li>
                    <li>
                        <a href="/stats/contributors">
                            Contributor List</a>
                    </li>
                    <li>
                        <a href="https://support.discogs.com/hc/articles/360001585814-How-Can-I-Help-Translate-Discogs-">
                            Help Translate</a>
                    </li>
                    <li>
                        <a href="/events">
                            Discogs Events                        </a>
                    </li>
                    <li>
                        <a href="/record-store-day">
                            Record Store Day                        </a>
                    </li>
                    <li>
                        <a href="https://campaigns.discogs.com">
                            Advertise With Us</a>
                    </li>
                </ul>
            </li>
            <li>
                <h5>Follow Us</h5>
                <ul>
                    <li>
                        <a href="https://www.facebook.com/discogs">
                            <i class="icon icon-facebook-square"></i>Facebook
                        </a>
                    </li>
                    <li>
                        <a href="https://twitter.com/discogs">
                            <i class="icon icon-twitter"></i>Twitter
                        </a>
                    </li>
                    <li>
                        <a href="https://www.instagram.com/discogs/">
                            <i class="icon icon-instagram"></i>Instagram
                        </a>
                    </li>
                    <li>
                        <a href="http://www.mixcloud.com/discogs/">
                            <i class="icon icon-mixcloud"></i>Mixcloud
                        </a>
                    </li>
                    <li>
                        <a href="https://soundcloud.com/discogs">
                            <i class="icon icon-soundcloud"></i>Soundcloud
                        </a>
                    </li>
                    <li>
                        <a href="https://nl.pinterest.com/officialdiscogs/boards/">
                            <i class="icon icon-pinterest"></i>Pinterest
                        </a>
                    </li>
                </ul>
            </li>        </ul>    </div>    <div id="site_footer_legal">
        <div><img src="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/images/discogs-white.png?5" alt="" />
            <span id="copyright">
                &copy; 2021 Discogs&reg;
            </span>
            <button id="ot-sdk-btn" class="ot-sdk-show-settings"> Cookie Settings</button>
            <a id="cookie_link" href="/help/doc/cookie-policy">Cookie Policy</a>
            <a id="terms_link" href="/help/doc/terms-of-service">Terms of Service</a>
            <a id="privacy_link" href="/help/doc/privacy-policy">Privacy Policy</a>
            <a href="https://support.discogs.com/hc/articles/360039846494-California-Privacy-Notice">California Privacy Notice</a>
            <a href="https://support.discogs.com/hc/en-us/articles/360017786278-Accessibility-Statement" target="_blank">Accessibility Statement</a>
                        <span id="language_container">
                <a id="i18n_link" href="#select-language" data-code="en" data-name="English">
                    <i class="icon icon-globe"></i>
                    English
                    <i class="icon icon-caret-down"></i>
                </a>
                    <select id="i18n_select">        <option id="language_de_field" name="language_code" class="language" value="de" > Deutsch </option>
    <option id="language_en_field" name="language_code" class="language" value="en" selected> English </option>
    <option id="language_es_field" name="language_code" class="language" value="es" > Español </option>
    <option id="language_fr_field" name="language_code" class="language" value="fr" > Français </option>
    <option id="language_it_field" name="language_code" class="language" value="it" > Italiano </option>
    <option id="language_ja_field" name="language_code" class="language" value="ja" > 日本語 </option>
    <option id="language_ko_field" name="language_code" class="language" value="ko" > 한국어 </option>
    <option id="language_pt_BR_field" name="language_code" class="language" value="pt_BR" > Português (Brasil) </option>
    <option id="language_ru_field" name="language_code" class="language" value="ru" > Русский </option>
</select>
 
            </span><a id="footer_menu_link">
                <i class='icon icon-chevron-down'></i>
                <i class='icon icon-chevron-up'></i>
            </a>
        </div>
    </div>
</div>
<div id="act"></div>        
        
                <script type='text/javascript'>
!function(){"use strict";function a(a){return"function"==typeof a||"object"==typeof a&&null!==a}function b(a){return"function"==typeof a}function c(a){return"object"==typeof a&&null!==a}function g(){}function n(){return function(){process.nextTick(s)}}function o(){var a=0,b=new l(s),c=document.createTextNode("");return b.observe(c,{characterData:!0}),function(){c.data=a=++a%2}}function p(){var a=new MessageChannel;return a.port1.onmessage=s,function(){a.port2.postMessage(0)}}function q(){return function(){setTimeout(s,1)}}function s(){for(var a=0;i>a;a+=2){var b=r[a],c=r[a+1];b(c),r[a]=void 0,r[a+1]=void 0}i=0}function u(){}function z(){return new TypeError("You cannot resolve a promise with itself")}function A(){return new TypeError("A promises callback cannot return that same promise.")}function B(a){try{return a.then}catch(b){return y.error=b,y}}function C(a,b,c,d){try{a.call(b,c,d)}catch(e){return e}}function D(a,b,c){j(function(a){var d=!1,e=C(c,b,function(c){d||(d=!0,b!==c?G(a,c):I(a,c))},function(b){d||(d=!0,J(a,b))},"Settle: "+(a._label||" unknown promise"));!d&&e&&(d=!0,J(a,e))},a)}function E(a,b){b._state===w?I(a,b._result):a._state===x?J(a,b._result):K(b,void 0,function(b){G(a,b)},function(b){J(a,b)})}function F(a,c){if(c.constructor===a.constructor)E(a,c);else{var d=B(c);d===y?J(a,y.error):void 0===d?I(a,c):b(d)?D(a,c,d):I(a,c)}}function G(b,c){b===c?J(b,z()):a(c)?F(b,c):I(b,c)}function H(a){a._onerror&&a._onerror(a._result),L(a)}function I(a,b){a._state===v&&(a._result=b,a._state=w,0===a._subscribers.length||j(L,a))}function J(a,b){a._state===v&&(a._state=x,a._result=b,j(H,a))}function K(a,b,c,d){var e=a._subscribers,f=e.length;a._onerror=null,e[f]=b,e[f+w]=c,e[f+x]=d,0===f&&a._state&&j(L,a)}function L(a){var b=a._subscribers,c=a._state;if(0!==b.length){for(var d,e,f=a._result,g=0;g<b.length;g+=3)d=b[g],e=b[g+c],d?P(c,d,e,f):e(f);a._subscribers.length=0}}function M(){this.error=null}function O(a,b){try{return a(b)}catch(c){return N.error=c,N}}function P(a,c,d,e){var g,h,i,j,f=b(d);if(f){if(g=O(d,e),g===N?(j=!0,h=g.error,g=null):i=!0,c===g)return J(c,A()),void 0}else g=e,i=!0;c._state!==v||(f&&i?G(c,g):j?J(c,h):a===w?I(c,g):a===x&&J(c,g))}function Q(a,b){try{b(function(b){G(a,b)},function(b){J(a,b)})}catch(c){J(a,c)}}function S(a,b,c,d){this._instanceConstructor=a,this.promise=new a(u,d),this._abortOnReject=c,this._validateInput(b)?(this._input=b,this.length=b.length,this._remaining=b.length,this._init(),0===this.length?I(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&I(this.promise,this._result))):J(this.promise,this._validationError())}function Z(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function $(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function ab(a,c){this._id=Y++,this._label=c,this._state=void 0,this._result=void 0,this._subscribers=[],u!==a&&(b(a)||Z(),this instanceof ab||$(),Q(this,a))}var d;d=Array.isArray?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)};var e=d;Date.now||function(){return(new Date).getTime()},Object.create||function(a){if(arguments.length>1)throw new Error("Second argument not supported");if("object"!=typeof a)throw new TypeError("Argument must be an object");return g.prototype=a,new g};var t,i=0,j=function(a,b){r[i]=a,r[i+1]=b,i+=2,2===i&&t()},k="undefined"!=typeof window?window:{},l=k.MutationObserver||k.WebKitMutationObserver,m="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,r=new Array(1e3);t="undefined"!=typeof process&&"[object process]"==={}.toString.call(process)?n():l?o():m?p():q();var v=void 0,w=1,x=2,y=new M,N=new M;S.prototype._validateInput=function(a){return e(a)},S.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},S.prototype._init=function(){this._result=new Array(this.length)};var T=S;S.prototype._enumerate=function(){for(var a=this.length,b=this.promise,c=this._input,d=0;b._state===v&&a>d;d++)this._eachEntry(c[d],d)},S.prototype._eachEntry=function(a,b){var d=this._instanceConstructor;c(a)?a.constructor===d&&a._state!==v?(a._onerror=null,this._settledAt(a._state,b,a._result)):this._willSettleAt(d.resolve(a),b):(this._remaining--,this._result[b]=this._makeResult(w,b,a))},S.prototype._settledAt=function(a,b,c){var d=this.promise;d._state===v&&(this._remaining--,this._abortOnReject&&a===x?J(d,c):this._result[b]=this._makeResult(a,b,c)),0===this._remaining&&I(d,this._result)},S.prototype._makeResult=function(a,b,c){return c},S.prototype._willSettleAt=function(a,b){var c=this;K(a,void 0,function(a){c._settledAt(w,b,a)},function(a){c._settledAt(x,b,a)})};var U=function(a,b){return new T(this,a,!0,b).promise},V=function(a,b){function g(a){G(d,a)}function h(a){J(d,a)}var c=this,d=new c(u,b);if(!e(a))return J(d,new TypeError("You must pass an array to race.")),d;for(var f=a.length,i=0;d._state===v&&f>i;i++)K(c.resolve(a[i]),void 0,g,h);return d},W=function(a,b){var c=this;if(a&&"object"==typeof a&&a.constructor===c)return a;var d=new c(u,b);return G(d,a),d},X=function(a,b){var c=this,d=new c(u,b);return J(d,a),d},Y=0,_=ab;ab.all=U,ab.race=V,ab.resolve=W,ab.reject=X,ab.prototype={constructor:ab,then:function(a,b,c){var d=this,e=d._state;if(e===w&&!a||e===x&&!b)return this;d._onerror=null;var f=new this.constructor(u,c),g=d._result;if(e){var h=arguments[e-1];j(function(){P(e,f,h,g)})}else K(d,f,a,b);return f},"catch":function(a,b){return this.then(null,a,b)}};var bb=function(){var a;a="undefined"!=typeof global?global:"undefined"!=typeof window&&window.document?window:self;var c="Promise"in a&&"resolve"in a.Promise&&"reject"in a.Promise&&"all"in a.Promise&&"race"in a.Promise&&function(){var c;return new a.Promise(function(a){c=a}),b(c)}();c||(a.Promise=_)},cb={Promise:_,polyfill:bb};"function"==typeof define&&define.amd?define(function(){return cb}):"undefined"!=typeof module&&module.exports?module.exports=cb:"undefined"!=typeof this&&(this.ES6Promise=cb)}.call(this);

ES6Promise.polyfill();
</script>


<!--[if lte IE 9]>    <script src="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/dst/javascripts/vendor.js"></script>
    <script src="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/dst/javascripts/discogs.js"></script>
    <script src="https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/dst/javascripts/sections/artist.js"></script>
<script>ds.require('app')</script>
<script>ds.require('googleTagServices');</script><![endif]-->
<!--[if gt IE 9]><!-->
<script>
(function(scripts){

    var i = -1, l = scripts.length - 1;
    var startTime = new Date().getTime();
    var _scripts  = [];
    var loads     = [];
    var j;

    var head = document.head || document.getElementsByTagName('head')[0];

    function log(){
        window.console && console.log && console.log.apply(console, arguments);
    }

    function makeScript(src){
        var element  = document.createElement('script');
        var isVendor = !!src.match(/javascripts\/(vendor|react-bundle)/);
        var isSync   = !!(src.match('javascripts/define.js') || src.match('discogs.js') || src.match('moment-lib.js'));
        var isAsync  = !(isVendor || isSync);
        var load     = new Promise(function(resolve){
            element.onload = function(){ resolve(src); };
            element.src = src;
            element.setAttribute('defer', 'defer');
            if (isAsync) {
                element.setAttribute('async', 'async');
            }
        });
        _scripts.push({ element: element, load: load, isAsync: isAsync });
    }

    for (j = 0; j <= l; j++) {
        makeScript(scripts[j]);
    }

    for (j = 0; j <= l; j++) {
        loads.push(_scripts[j].load);
    }

    Promise.all(loads).then(function(urls){
                var app = ds.require('app');
            });

    function loadNext(){
        i++;
        var script = _scripts[i];
        if (script) {
            head.appendChild(script.element);
            if (script.isAsync) {
                loadNext();
            } else {
                script.load.then(loadNext);
            }
        }
    }

    loadNext();

})(["https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/dst/javascripts/vendor.js", "https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/dst/javascripts/discogs.js", "https://s.discogs.com/ff591de98745b0dc6f6345d2314025182ac8bed7/dst/javascripts/sections/artist.js"]);
</script>
<!--<![endif]-->
<script>
ds(function(require){
    require("imageGallery");
    require("copyShortcut");
    require("share");
    require("pagination");
    require("toggleSection");
});

</script>


                
                            </body>
</html>
  recorded_at: Tue, 25 May 2021 09:23:44 GMT
recorded_with: VCR 6.0.0
