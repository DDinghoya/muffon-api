---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/tag/dream+pop/tracks
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.0p0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/tag/dream+pop/tracks
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - csrftoken=EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H; expires=Tue, 25-Jan-2022 16:45:39
        GMT; Max-Age=31449600; Path=/; Secure
      - lfmanon=1; Path=/
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6ImJjNzMxOTlkLTdjYzYtNGM2Ni04NjIyLTYxZWZmZWQ3ZGFkMCJ9:1l4RTH:Zw8pkg9CSF3eNiZlSVmgn-YKhCw;
        Domain=.last.fm; expires=Wed, 26-Jan-2022 16:45:39 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 26 Jan 2021 16:45:39 GMT
      X-Served-By:
      - prod-lfm-web-55f66b8564-jwwtd, cache-hhn4042-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1611679539.634858,VS0,VE988
      Vary:
      - Accept-Encoding, Cookie
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        





<!doctype html>
<html
    lang="en"
    class="
        no-js
        playbar-masthead-release-shim
        youtube-provider-not-ready
    "
>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge"><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"UwYPV15QGwYFXFlXDgU=",licenseKey:"0ed0ce50b0",applicationID:"5588594"};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var i=e[n]={exports:{}};t[n][0].call(i.exports,function(e){var i=t[n][1][e];return r(i||e)},i,i.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var i=0;i<n.length;i++)r(n[i]);return r}({1:[function(t,e,n){function r(t){try{c.console&&console.log(t)}catch(e){}}var i,o=t("ee"),a=t(23),c={};try{i=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(c.console=!0,i.indexOf("dev")!==-1&&(c.dev=!0),i.indexOf("nr_dev")!==-1&&(c.nrDev=!0))}catch(s){}c.nrDev&&o.on("internal-error",function(t){r(t.stack)}),c.dev&&o.on("fn-err",function(t,e,n){r(n.stack)}),c.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(c,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,c){try{p?p-=1:i(c||new UncaughtException(t,e,n),!0)}catch(f){try{o("ierr",[f,s.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function i(t,e){var n=e?null:s.now();o("err",[t,n])}var o=t("handle"),a=t(24),c=t("ee"),s=t("loader"),f=t("gos"),u=window.onerror,d=!1,l="nr@seenError",p=0;s.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(h){"stack"in h&&(t(9),t(8),"addEventListener"in window&&t(5),s.xhrWrappable&&t(10),d=!0)}c.on("fn-start",function(t,e,n){d&&(p+=1)}),c.on("fn-err",function(t,e,n){d&&!n[l]&&(f(n,l,function(){return!0}),this.thrown=!0,i(n))}),c.on("fn-end",function(){d&&!this.thrown&&p>0&&(p-=1)}),c.on("internal-error",function(t){o("ierr",[t,s.now(),!0])})},{}],3:[function(t,e,n){t("loader").features.ins=!0},{}],4:[function(t,e,n){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var i=t("ee"),o=t("handle"),a=t(9),c=t(8),s="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",l="resource",p="-start",h="-end",m="fn"+p,w="fn"+h,v="bstTimer",g="pushState",y=t("loader");y.features.stn=!0,t(7),"addEventListener"in window&&t(5);var x=NREUM.o.EV;i.on(m,function(t,e){var n=t[0];n instanceof x&&(this.bstStart=y.now())}),i.on(w,function(t,e){var n=t[0];n instanceof x&&o("bst",[n,e,this.bstStart,y.now()])}),a.on(m,function(t,e,n){this.bstStart=y.now(),this.bstType=n}),a.on(w,function(t,e){o(v,[e,this.bstStart,y.now(),this.bstType])}),c.on(m,function(){this.bstStart=y.now()}),c.on(w,function(t,e){o(v,[e,this.bstStart,y.now(),"requestAnimationFrame"])}),i.on(g+p,function(t){this.time=y.now(),this.startPath=location.pathname+location.hash}),i.on(g+h,function(t){o("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+s]?window.performance[f](u,function(t){o(d,[window.performance.getEntriesByType(l)]),window.performance["c"+s]()},!1):window.performance[f]("webkit"+u,function(t){o(d,[window.performance.getEntriesByType(l)]),window.performance["webkitC"+s]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],5:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&i(e)}function i(t){c.inPlace(t,[u,d],"-",o)}function o(t,e){return t[1]}var a=t("ee").get("events"),c=t("wrap-function")(a,!0),s=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(i(window),i(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=s(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?c(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],6:[function(t,e,n){function r(t,e,n){var r=t[e];"function"==typeof r&&(t[e]=function(){var t=o(arguments),e={};i.emit(n+"before-start",[t],e);var a;e[m]&&e[m].dt&&(a=e[m].dt);var c=r.apply(this,t);return i.emit(n+"start",[t,a],c),c.then(function(t){return i.emit(n+"end",[null,t],c),t},function(t){throw i.emit(n+"end",[t],c),t})})}var i=t("ee").get("fetch"),o=t(24),a=t(23);e.exports=i;var c=window,s="fetch-",f=s+"body-",u=["arrayBuffer","blob","json","text","formData"],d=c.Request,l=c.Response,p=c.fetch,h="prototype",m="nr@context";d&&l&&p&&(a(u,function(t,e){r(d[h],e,f),r(l[h],e,f)}),r(c,"fetch",s),i.on(s+"end",function(t,e){var n=this;if(e){var r=e.headers.get("content-length");null!==r&&(n.rxSize=r),i.emit(s+"done",[null,e],n)}else i.emit(s+"done",[t],n)}))},{}],7:[function(t,e,n){var r=t("ee").get("history"),i=t("wrap-function")(r);e.exports=r;var o=window.history&&window.history.constructor&&window.history.constructor.prototype,a=window.history;o&&o.pushState&&o.replaceState&&(a=o),i.inPlace(a,["pushState","replaceState"],"-")},{}],8:[function(t,e,n){var r=t("ee").get("raf"),i=t("wrap-function")(r),o="equestAnimationFrame";e.exports=r,i.inPlace(window,["r"+o,"mozR"+o,"webkitR"+o,"msR"+o],"raf-"),r.on("raf-start",function(t){t[0]=i(t[0],"fn-")})},{}],9:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function i(t,e,n){this.method=n,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,n)}var o=t("ee").get("timer"),a=t("wrap-function")(o),c="setTimeout",s="setInterval",f="clearTimeout",u="-start",d="-";e.exports=o,a.inPlace(window,[c,"setImmediate"],c+d),a.inPlace(window,[s],s+d),a.inPlace(window,[f,"clearImmediate"],f+d),o.on(s+u,r),o.on(c+u,i)},{}],10:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",c)}function i(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,g,"fn-",c)}function o(t){y.push(t),h&&(b?b.then(a):w?w(a):(E=-E,R.data=E))}function a(){for(var t=0;t<y.length;t++)r([],y[t]);y.length&&(y=[])}function c(t,e){return e}function s(t,e){for(var n in t)e[n]=t[n];return e}t(5);var f=t("ee"),u=f.get("xhr"),d=t("wrap-function")(u),l=NREUM.o,p=l.XHR,h=l.MO,m=l.PR,w=l.SI,v="readystatechange",g=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],y=[];e.exports=u;var x=window.XMLHttpRequest=function(t){var e=new p(t);try{u.emit("new-xhr",[e],e),e.addEventListener(v,i,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(s(p,x),x.prototype=p.prototype,d.inPlace(x.prototype,["open","send"],"-xhr-",c),u.on("send-xhr-start",function(t,e){r(t,e),o(e)}),u.on("open-xhr-start",r),h){var b=m&&m.resolve();if(!w&&!m){var E=1,R=document.createTextNode(E);new h(a).observe(R,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===v||a()})},{}],11:[function(t,e,n){function r(t){if(!c(t))return null;var e=window.NREUM;if(!e.loader_config)return null;var n=(e.loader_config.accountID||"").toString()||null,r=(e.loader_config.agentID||"").toString()||null,f=(e.loader_config.trustKey||"").toString()||null;if(!n||!r)return null;var h=p.generateSpanId(),m=p.generateTraceId(),w=Date.now(),v={spanId:h,traceId:m,timestamp:w};return(t.sameOrigin||s(t)&&l())&&(v.traceContextParentHeader=i(h,m),v.traceContextStateHeader=o(h,w,n,r,f)),(t.sameOrigin&&!u()||!t.sameOrigin&&s(t)&&d())&&(v.newrelicHeader=a(h,m,w,n,r,f)),v}function i(t,e){return"00-"+e+"-"+t+"-01"}function o(t,e,n,r,i){var o=0,a="",c=1,s="",f="";return i+"@nr="+o+"-"+c+"-"+n+"-"+r+"-"+t+"-"+a+"-"+s+"-"+f+"-"+e}function a(t,e,n,r,i,o){var a="btoa"in window&&"function"==typeof window.btoa;if(!a)return null;var c={v:[0,1],d:{ty:"Browser",ac:r,ap:i,id:t,tr:e,ti:n}};return o&&r!==o&&(c.d.tk=o),btoa(JSON.stringify(c))}function c(t){return f()&&s(t)}function s(t){var e=!1,n={};if("init"in NREUM&&"distributed_tracing"in NREUM.init&&(n=NREUM.init.distributed_tracing),t.sameOrigin)e=!0;else if(n.allowed_origins instanceof Array)for(var r=0;r<n.allowed_origins.length;r++){var i=h(n.allowed_origins[r]);if(t.hostname===i.hostname&&t.protocol===i.protocol&&t.port===i.port){e=!0;break}}return e}function f(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.enabled}function u(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.exclude_newrelic_header}function d(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&NREUM.init.distributed_tracing.cors_use_newrelic_header!==!1}function l(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.cors_use_tracecontext_headers}var p=t(20),h=t(13);e.exports={generateTracePayload:r,shouldGenerateTrace:c}},{}],12:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<l;r++)t.removeEventListener(d[r],this.listener,!1);e.aborted||(n.duration=a.now()-this.startTime,this.loadCaptureCalled||4!==t.readyState?null==e.status&&(e.status=0):o(this,t),n.cbTime=this.cbTime,u.emit("xhr-done",[t],t),c("xhr",[e,n,this.startTime]))}}function i(t,e){var n=s(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.parsedOrigin=s(e),t.sameOrigin=t.parsedOrigin.sameOrigin}function o(t,e){t.params.status=e.status;var n=w(e,t.lastSize);if(n&&(t.metrics.rxSize=n),t.sameOrigin){var r=e.getResponseHeader("X-NewRelic-App-Data");r&&(t.params.cat=r.split(", ").pop())}t.loadCaptureCalled=!0}var a=t("loader");if(a.xhrWrappable){var c=t("handle"),s=t(13),f=t(11).generateTracePayload,u=t("ee"),d=["load","error","abort","timeout"],l=d.length,p=t("id"),h=t(17),m=t(16),w=t(14),v=window.XMLHttpRequest;a.features.xhr=!0,t(10),t(6),u.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,e.loadCaptureCalled=!1,t.addEventListener("load",function(n){o(e,t)},!1),h&&(h>34||h<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),u.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),u.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid);var n=f(this.parsedOrigin);if(n){var r=!1;n.newrelicHeader&&(e.setRequestHeader("newrelic",n.newrelicHeader),r=!0),n.traceContextParentHeader&&(e.setRequestHeader("traceparent",n.traceContextParentHeader),n.traceContextStateHeader&&e.setRequestHeader("tracestate",n.traceContextStateHeader),r=!0),r&&(this.dt=n)}}),u.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],i=this;if(n&&r){var o=m(r);o&&(n.txSize=o)}this.startTime=a.now(),this.listener=function(t){try{"abort"!==t.type||i.loadCaptureCalled||(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}};for(var c=0;c<l;c++)e.addEventListener(d[c],this.listener,!1)}),u.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),u.on("xhr-load-added",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),u.on("xhr-load-removed",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),u.on("addEventListener-end",function(t,e){e instanceof v&&"load"===t[0]&&u.emit("xhr-load-added",[t[1],t[2]],e)}),u.on("removeEventListener-end",function(t,e){e instanceof v&&"load"===t[0]&&u.emit("xhr-load-removed",[t[1],t[2]],e)}),u.on("fn-start",function(t,e,n){e instanceof v&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),u.on("fn-end",function(t,e){this.xhrCbStart&&u.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,e],e)}),u.on("fetch-before-start",function(t){function e(t,e){var n=!1;return e.newrelicHeader&&(t.set("newrelic",e.newrelicHeader),n=!0),e.traceContextParentHeader&&(t.set("traceparent",e.traceContextParentHeader),e.traceContextStateHeader&&t.set("tracestate",e.traceContextStateHeader),n=!0),n}var n,r=t[1]||{};"string"==typeof t[0]?n=t[0]:t[0]&&t[0].url?n=t[0].url:window.URL&&t[0]&&t[0]instanceof URL&&(n=t[0].href),n&&(this.parsedOrigin=s(n),this.sameOrigin=this.parsedOrigin.sameOrigin);var i=f(this.parsedOrigin);if(i&&(i.newrelicHeader||i.traceContextParentHeader))if("string"==typeof t[0]||window.URL&&t[0]&&t[0]instanceof URL){var o={};for(var a in r)o[a]=r[a];o.headers=new Headers(r.headers||{}),e(o.headers,i)&&(this.dt=i),t.length>1?t[1]=o:t.push(o)}else t[0]&&t[0].headers&&e(t[0].headers,i)&&(this.dt=i)})}},{}],13:[function(t,e,n){var r={};e.exports=function(t){if(t in r)return r[t];var e=document.createElement("a"),n=window.location,i={};e.href=t,i.port=e.port;var o=e.href.split("://");!i.port&&o[1]&&(i.port=o[1].split("/")[0].split("@").pop().split(":")[1]),i.port&&"0"!==i.port||(i.port="https"===o[0]?"443":"80"),i.hostname=e.hostname||n.hostname,i.pathname=e.pathname,i.protocol=o[0],"/"!==i.pathname.charAt(0)&&(i.pathname="/"+i.pathname);var a=!e.protocol||":"===e.protocol||e.protocol===n.protocol,c=e.hostname===document.domain&&e.port===n.port;return i.sameOrigin=a&&(!e.hostname||c),"/"===i.pathname&&(r[t]=i),i}},{}],14:[function(t,e,n){function r(t,e){var n=t.responseType;return"json"===n&&null!==e?e:"arraybuffer"===n||"blob"===n||"json"===n?i(t.response):"text"===n||""===n||void 0===n?i(t.responseText):void 0}var i=t(16);e.exports=r},{}],15:[function(t,e,n){function r(){}function i(t,e,n){return function(){return o(t,[f.now()].concat(c(arguments)),e?null:this,n),e?void 0:this}}var o=t("handle"),a=t(23),c=t(24),s=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],l="api-",p=l+"ixn-";a(d,function(t,e){u[e]=i(l+e,!0,"api")}),u.addPageAction=i(l+"addPageAction",!0),u.setCurrentRouteName=i(l+"routeName",!0),e.exports=newrelic,u.interaction=function(){return(new r).get()};var h=r.prototype={createTracer:function(t,e){var n={},r=this,i="function"==typeof e;return o(p+"tracer",[f.now(),t,n],r),function(){if(s.emit((i?"":"no-")+"fn-start",[f.now(),r,i],n),i)try{return e.apply(this,arguments)}catch(t){throw s.emit("fn-err",[arguments,this,t],n),t}finally{s.emit("fn-end",[f.now()],n)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){h[e]=i(p+e)}),newrelic.noticeError=function(t,e){"string"==typeof t&&(t=new Error(t)),o("err",[t,f.now(),!1,e])}},{}],16:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],17:[function(t,e,n){var r=0,i=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);i&&(r=+i[1]),e.exports=r},{}],18:[function(t,e,n){function r(){return c.exists&&performance.now?Math.round(performance.now()):(o=Math.max((new Date).getTime(),o))-a}function i(){return o}var o=(new Date).getTime(),a=o,c=t(25);e.exports=r,e.exports.offset=a,e.exports.getLastTimestamp=i},{}],19:[function(t,e,n){function r(t,e){var n=t.getEntries();n.forEach(function(t){"first-paint"===t.name?d("timing",["fp",Math.floor(t.startTime)]):"first-contentful-paint"===t.name&&d("timing",["fcp",Math.floor(t.startTime)])})}function i(t,e){var n=t.getEntries();n.length>0&&d("lcp",[n[n.length-1]])}function o(t){t.getEntries().forEach(function(t){t.hadRecentInput||d("cls",[t])})}function a(t){if(t instanceof h&&!w){var e=Math.round(t.timeStamp),n={type:t.type};e<=l.now()?n.fid=l.now()-e:e>l.offset&&e<=Date.now()?(e-=l.offset,n.fid=l.now()-e):e=l.now(),w=!0,d("timing",["fi",e,n])}}function c(t){d("pageHide",[l.now(),t])}if(!("init"in NREUM&&"page_view_timing"in NREUM.init&&"enabled"in NREUM.init.page_view_timing&&NREUM.init.page_view_timing.enabled===!1)){var s,f,u,d=t("handle"),l=t("loader"),p=t(22),h=NREUM.o.EV;if("PerformanceObserver"in window&&"function"==typeof window.PerformanceObserver){s=new PerformanceObserver(r);try{s.observe({entryTypes:["paint"]})}catch(m){}f=new PerformanceObserver(i);try{f.observe({entryTypes:["largest-contentful-paint"]})}catch(m){}u=new PerformanceObserver(o);try{u.observe({type:"layout-shift",buffered:!0})}catch(m){}}if("addEventListener"in document){var w=!1,v=["click","keydown","mousedown","pointerdown","touchstart"];v.forEach(function(t){document.addEventListener(t,a,!1)})}p(c)}},{}],20:[function(t,e,n){function r(){function t(){return e?15&e[n++]:16*Math.random()|0}var e=null,n=0,r=window.crypto||window.msCrypto;r&&r.getRandomValues&&(e=r.getRandomValues(new Uint8Array(31)));for(var i,o="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",a="",c=0;c<o.length;c++)i=o[c],"x"===i?a+=t().toString(16):"y"===i?(i=3&t()|8,a+=i.toString(16)):a+=i;return a}function i(){return a(16)}function o(){return a(32)}function a(t){function e(){return n?15&n[r++]:16*Math.random()|0}var n=null,r=0,i=window.crypto||window.msCrypto;i&&i.getRandomValues&&Uint8Array&&(n=i.getRandomValues(new Uint8Array(31)));for(var o=[],a=0;a<t;a++)o.push(e().toString(16));return o.join("")}e.exports={generateUuid:r,generateSpanId:i,generateTraceId:o}},{}],21:[function(t,e,n){function r(t,e){if(!i)return!1;if(t!==i)return!1;if(!e)return!0;if(!o)return!1;for(var n=o.split("."),r=e.split("."),a=0;a<r.length;a++)if(r[a]!==n[a])return!1;return!0}var i=null,o=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var c=navigator.userAgent,s=c.match(a);s&&c.indexOf("Chrome")===-1&&c.indexOf("Chromium")===-1&&(i="Safari",o=s[1])}e.exports={agent:i,version:o,match:r}},{}],22:[function(t,e,n){function r(t){function e(){t(a&&document[a]?document[a]:document[i]?"hidden":"visible")}"addEventListener"in document&&o&&document.addEventListener(o,e,!1)}e.exports=r;var i,o,a;"undefined"!=typeof document.hidden?(i="hidden",o="visibilitychange",a="visibilityState"):"undefined"!=typeof document.msHidden?(i="msHidden",o="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(i="webkitHidden",o="webkitvisibilitychange",a="webkitVisibilityState")},{}],23:[function(t,e,n){function r(t,e){var n=[],r="",o=0;for(r in t)i.call(t,r)&&(n[o]=e(r,t[r]),o+=1);return n}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],24:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,i=n-e||0,o=Array(i<0?0:i);++r<i;)o[r]=t[e+r];return o}e.exports=r},{}],25:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(t,e,n){function r(){}function i(t){function e(t){return t&&t instanceof r?t:t?f(t,s,a):a()}function n(n,r,i,o,a){if(a!==!1&&(a=!0),!p.aborted||o){t&&a&&t(n,r,i);for(var c=e(i),s=m(n),f=s.length,u=0;u<f;u++)s[u].apply(c,r);var l=d[y[n]];return l&&l.push([x,n,r,c]),c}}function o(t,e){g[t]=m(t).concat(e)}function h(t,e){var n=g[t];if(n)for(var r=0;r<n.length;r++)n[r]===e&&n.splice(r,1)}function m(t){return g[t]||[]}function w(t){return l[t]=l[t]||i(n)}function v(t,e){u(t,function(t,n){e=e||"feature",y[n]=e,e in d||(d[e]=[])})}var g={},y={},x={on:o,addEventListener:o,removeEventListener:h,emit:n,get:w,listeners:m,context:e,buffer:v,abort:c,aborted:!1};return x}function o(t){return f(t,s,a)}function a(){return new r}function c(){(d.api||d.feature)&&(p.aborted=!0,d=p.backlog={})}var s="nr@context",f=t("gos"),u=t(23),d={},l={},p=e.exports=i();e.exports.getOrSetContext=o,p.backlog=d},{}],gos:[function(t,e,n){function r(t,e,n){if(i.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(o){}return t[e]=r,r}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){i.buffer([t],r),i.emit(t,e,n)}var i=t("ee").get("handle");e.exports=r,r.ee=i},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,o,function(){return i++})}var i=1,o="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!b++){var t=x.info=NREUM.info,e=l.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return f.abort();s(g,function(e,n){t[e]||(t[e]=n)});var n=a();c("mark",["onload",n+x.offset],null,"api"),c("timing",["load",n]);var r=l.createElement("script");r.src="https://"+t.agent,e.parentNode.insertBefore(r,e)}}function i(){"complete"===l.readyState&&o()}function o(){c("mark",["domContent",a()+x.offset],null,"api")}var a=t(18),c=t("handle"),s=t(23),f=t("ee"),u=t(21),d=window,l=d.document,p="addEventListener",h="attachEvent",m=d.XMLHttpRequest,w=m&&m.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var v=""+location,g={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1194.min.js"},y=m&&w&&w[p]&&!/CriOS/.test(navigator.userAgent),x=e.exports={offset:a.getLastTimestamp(),now:a,origin:v,features:{},xhrWrappable:y,userAgent:u};t(15),t(19),l[p]?(l[p]("DOMContentLoaded",o,!1),d[p]("load",r,!1)):(l[h]("onreadystatechange",i),d[h]("onload",r)),c("mark",["firstbyte",a.getLastTimestamp()],null,"api");var b=0},{}],"wrap-function":[function(t,e,n){function r(t,e){function n(e,n,r,s,f){function nrWrapper(){var o,a,u,l;try{a=this,o=d(arguments),u="function"==typeof r?r(o,a):r||{}}catch(p){i([p,"",[o,a,s],u],t)}c(n+"start",[o,a,s],u,f);try{return l=e.apply(a,o)}catch(h){throw c(n+"err",[o,a,h],u,f),h}finally{c(n+"end",[o,a,l],u,f)}}return a(e)?e:(n||(n=""),nrWrapper[l]=e,o(e,nrWrapper,t),nrWrapper)}function r(t,e,r,i,o){r||(r="");var c,s,f,u="-"===r.charAt(0);for(f=0;f<e.length;f++)s=e[f],c=t[s],a(c)||(t[s]=n(c,u?s+r:r,i,s,o))}function c(n,r,o,a){if(!h||e){var c=h;h=!0;try{t.emit(n,r,o,e,a)}catch(s){i([s,n,r,o],t)}h=c}}return t||(t=u),n.inPlace=r,n.flag=l,n}function i(t,e){e||(e=u);try{e.emit("internal-error",t)}catch(n){}}function o(t,e,n){if(Object.defineProperty&&Object.keys)try{var r=Object.keys(t);return r.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(o){i([o],n)}for(var a in t)p.call(t,a)&&(e[a]=t[a]);return e}function a(t){return!(t&&t instanceof Function&&t.apply&&!t[l])}function c(t,e){var n=e(t);return n[l]=t,o(t,n,u),n}function s(t,e,n){var r=t[e];t[e]=c(r,n)}function f(){for(var t=arguments.length,e=new Array(t),n=0;n<t;++n)e[n]=arguments[n];return e}var u=t("ee"),d=t(24),l="nr@original",p=Object.prototype.hasOwnProperty,h=!1;e.exports=r,e.exports.wrapFunction=c,e.exports.wrapInPlace=s,e.exports.argsToArray=f},{}]},{},["loader",2,12,4,3]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam-cell.nr-data.net","errorBeacon":"bam-cell.nr-data.net","licenseKey":"0ed0ce50b0","applicationID":"5588594","transactionName":"Y1BRbUUFWkMEWxYMV1oadUxZB0BZClZNCV5ZG0RcVUpDRxIWAxVIRxtHWFBKQlkATxFfbEZUUFJEN0FSFVkFABZTUEc=","queueTime":0,"applicationTime":873,"agent":""}</script>
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title aria-live="assertive">Top dream pop tracks | Last.fm</title>

        
    <link rel="canonical" href="https://www.last.fm/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="en" href="https://www.last.fm/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="de" href="https://www.last.fm/de/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="es" href="https://www.last.fm/es/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="fr" href="https://www.last.fm/fr/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="it" href="https://www.last.fm/it/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ja" href="https://www.last.fm/ja/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pl" href="https://www.last.fm/pl/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pt" href="https://www.last.fm/pt/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ru" href="https://www.last.fm/ru/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="sv" href="https://www.last.fm/sv/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="tr" href="https://www.last.fm/tr/tag/dream+pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="zh" href="https://www.last.fm/zh/tag/dream+pop/tracks" data-replaceable-head-tag />
    
    <link rel="alternate" hreflang="x-default" href="https://www.last.fm/tag/dream+pop/tracks" data-replaceable-head-tag />


        
            
                
                
                
    <meta name="description" content="Browse the top dream pop tracks to find new music and discover artists. Listen online to dream pop music for free at Last.fm." data-replaceable-head-tag>

    <meta property="og:title"           content="Top dream pop tracks | Last.fm" data-replaceable-head-tag>
    <meta property="og:description"     content="Browse the top dream pop tracks to find new music and discover artists. Listen online to dream pop music for free at Last.fm." data-replaceable-head-tag>
    <meta property="og:type"            content="website" data-replaceable-head-tag>
    <meta property="og:site_name"       content="Last.fm" data-replaceable-head-tag>
    <meta property="og:url"             content="https://www.last.fm/tag/dream+pop/tracks" data-replaceable-head-tag />
    <meta property="og:image"           content="https://www.last.fm/static/images/lastfm_logo_facebook.15d8133be114.png" data-replaceable-head-tag>
    <meta property="og:image:width"     content="1200" data-replaceable-head-tag>
    <meta property="og:image:height"    content="630" data-replaceable-head-tag>

    <meta name="twitter:title"          content="Top dream pop tracks | Last.fm" data-replaceable-head-tag>
    <meta name="twitter:description"    content="Browse the top dream pop tracks to find new music and discover artists. Listen online to dream pop music for free at Last.fm." data-replaceable-head-tag>
    <meta name="twitter:image"          content="https://www.last.fm/static/images/lastfm_avatar_twitter.52a5d69a85ac.png" data-replaceable-head-tag>
    <meta name="twitter:card"           content="summary" data-replaceable-head-tag>
    <meta name="twitter:site"           content="@lastfm" data-replaceable-head-tag>

    <link rel="apple-music-app-icon" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />
    <link rel="apple-touch-icon-precomposed" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />
    <link rel="apple-touch-icon" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />

    

            
        

        

        <script>(function(e) { e.className = e.className.replace(/\bno-js\b/,'js'); })(document.documentElement)</script>

        

        
            
<script
    id="initial-tealium-data"
    data-tealium-data="{&#34;siteSection&#34;: &#34;tag&#34;, &#34;pageType&#34;: &#34;tag_tracks&#34;, &#34;pageName&#34;: &#34;tag/tracks&#34;, &#34;nativeEventTracking&#34;: true, &#34;userState&#34;: &#34;not authenticated&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;ipGeo&#34;: &#34;BY&#34;, &#34;pageViewGuid&#34;: &#34;7092c078-a729-4cac-8584-c988ccd908cb&#34;}"
    data-tealium-environment="prod"
></script>
<script>
    var initialTealiumElement = document.getElementById('initial-tealium-data');
    window.utag_data = JSON.parse(initialTealiumElement.getAttribute('data-tealium-data'));
</script>
        

        <link rel="icon" href="/static/images/favicon.702b239b6194.ico">

        <link rel="stylesheet" href="/static/styles/build/anhv1-defaults-ea27c67e33.ea27c67e3369.css" data-stylesheet-name="defaults" charset="utf-8">

        
            <link rel="stylesheet" href="/static/styles/build/app-reduced-645923357f.645923357f05.css" data-stylesheet-name="app" charset="utf-8">
        

        
    
        <link rel="stylesheet" href="/static/styles/build/tag-153a3a3aa2.153a3a3aa240.css" data-stylesheet-name="page-specific" charset="utf-8">
    


        <script
            src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js"
            
                data-domain-script="d9f750da-0271-4142-9b0e-43d9a3b334d1"
            
        ></script>

        
            
    
    
        <script async data-main="/static/js-build/init.9b0c874dca0d" src="/static/js-build/lib/require/require.53bc64c729e9.js"></script>
    

        

        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
    </head>
    <body
        class="
            
    two-column-layout

            anhv1
            namespace--tag_tracks
            
        "
        data-require="ads/page-ads,ads/searchlinks,player/playlink-handler,dev/grid-overlay,dev/toggle-version,dev/debug-log,dev/debug-image-analysis,dev/js-log,dev/ads-toggle,components/link-block,components/ajax-form,core/media-size-events-v2"
        data-player-supported="true"
        data-country-code="BY"
        data-initial-view-guid="7092c078-a729-4cac-8584-c988ccd908cb"data-cbsi-player-config="/static/config/video-player.015786d691c2.xml"data-sensitive-path-regex="^/(../)?(googlec3ea1b252774e1ab\.html|account_deleted|inbox|join|login|lostpassword(/confirm)?|staff|subscribe|support(?!/images|/shouts|/shout)|settings/(account|website|subscription|password|lostpassword)|user/.+?/support)(/.*)?/?$"
        data-facebook-placement-id="195612451022080_220502155199776"
        data-google-maps-api-key="AIzaSyBX6-IE3lz4PpJUSBVIo_dPb0BAyMgi-VE"
        
            data-onetrust-prod
        
    >
        <div
            data-require="components/loading-indicator"
            data-loading-indicator-copy="Loading…"
        ></div>
        <div
            data-require="components/open-modal,components/submit-to-modal,components/show-alert"
            data-show-alert-ok-copy="Okay"
        ></div>
        

    
        <div class="top-bar">
            
                
                    
    <section
        data-require="player/controls,player/status,player/tracking"
        data-player-status-ad-playing="Ad playing"
        data-player-status-inactive="&nbsp;"
        data-player-status-loading-spotify="Connecting Spotify…"
        data-player-status-spotify-auth-error="Could not authenticate with Spotify."

        data-player-error-cannot-play-item="Cannot play that item."
        data-player-error-track-unavailable="Track unavailable."
        data-player-modal-title="Play video"

        

        class="
            player-bar
            inactive
        "
        aria-label="audio player"
        aria-disabled="true"
    >
        <div class="player-bar-inner-wrap">
            <a class="player-bar-artwork js-artwork">
                <img class="" src="/static/images/defaults/player_default_album.430223706b14.png" alt="" loading="lazy"/>
            </a>

            <span class="
                player-bar-source
                player-bar-source--spotify
            ">Playing via Spotify</span>

            <span class="
                player-bar-source
                player-bar-source--youtube
            ">Playing via YouTube</span>

            <div class="source-info">
                <button
                    class="player-bar-playback-options-button"
                    data-disclose-hover
                    aria-controls="player-bar-playback-options"
                >
                    Playback options
                </button>
                <div
                    id="player-bar-playback-options"
                    class="
                        player-bar-playback-options-wrap
                        disclose-hide
                    "
                >
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-spotify
                    ">
                        <li class="dropdown-menu-non-interactive-item-dark">
                            <span class="player-bar-listening-on-heading">Listening on…</span>
                            <span class="
                                player-bar-listening-on
                                js-player-bar-listening-on
                            "></span>
                        </li>
                        <li><button class="
                            dropdown-menu-item-dark
                            js-switch-device
                            player-bar-playback-options-switch-device
                        ">Switch Spotify device</button></li>
                        <li><a
                            class="
                                js-source
                                dropdown-menu-item-dark
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open in Spotify Web Player</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="https://secure.last.fm/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-youtube
                    ">
                        <li><a
                            class="
                                dropdown-menu-item-dark
                                js-source
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open on YouTube website</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="https://secure.last.fm/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                </div>
            </div>

            

            <div class="player-bar-controls">

                <ul aria-label="controls" class="media-controls">
                    <li>
                        <button
                            disabled
                            class="
                                js-previous
                                player-bar-btn
                                player-bar-btn--previous
                            "
                            data-analytics-action="PlaybarBackTrack"
                        >
                            Previous
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-play-pause
                                player-bar-btn
                                player-bar-btn--play
                            "
                            data-string-pause="Pause"
                            data-analytics-action="PlaybarResumeTrack"
                            data-analytics-action-pause="PlaybarPauseTrack"
                        >
                            Play
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-next
                                player-bar-btn
                                player-bar-btn--next
                            "
                            data-analytics-action="PlaybarSkipTrack"
                        >
                            Next
                        </button>
                    </li>
                    
                </ul>

                <a class="
                        player-bar-skiplink
                        player-bar-skiplink--youtube
                    "
                    href="#youtube-video"
                >Skip to YouTube video</a>

            </div>

            <div class="player-bar-now-playing">
                <div class="player-bar-now-playing-inner-wrap">
                    <p
                        class="player-bar-track js-player-status"
                        aria-label="now playing"
                        aria-live="polite"
                        aria-atomic="true"
                    >
                        Loading player…
                    </p>

                    <p class="player-bar-error js-player-error player-bar-status--hide">
                        <span class="player-bar-error-message js-player-error-message"></span>
                    </p>
                </div>
            </div>
        </div>

        
        <div class="player-bar-progress-wrap">
            <div
                class="player-bar-progress"
                aria-label="progress"
                role="timer"
            >
                <div
                    class="
                        js-progress-slug
                        player-bar-progress-slug
                    "
                >
                    <span
                        class="
                            js-progress-remaining
                            player-bar-progress-remaining
                        "
                        aria-label="remaining"
                    ></span>
                </div>
            </div>
        </div>

        <div data-require="player/scrobble-client"></div>
    </section>

                    
    <div
        class="
            masthead-popup
            masthead-popup--spotify-scrobbling
            masthead-popup--hidden
        "
        data-require="components/spotify-scrobbling-prompt,components/alert-dismissable,components/spotify-scrobbling-banner"
        data-spotify-scobbling-success-modal="/socialmodal/spotify-scrobbling-success"
        data-spotify-scobbling-fail-modal="/socialmodal/spotify-scrobbling-fail"
    >
        <div class="masthead-popup-inner">
            <h3>Scrobble from Spotify?</h3>
            <p>Connect your Spotify account to your Last.fm account and scrobble everything you listen to, from any Spotify app on any device or platform.</p>
            <p>
                <a
                    class="btn-primary js-setup-spotify-scrobbling"
                    href="/settings/applications"
                >
                    Connect to Spotify
                </a>
            </p>
            <a
                href="/nagbar/dismiss/spotify-scrobbling-prompt?period=permanent"
                class="masthead-popup-close js-alert-dismissable-close"
                data-close-ajax
            >
                Dismiss
            </a>
        </div>
    </div>

                
            
        </div>
    

    <div id="content" class="main-content" role="main" aria-live="polite">
        
    

    <div id="tlmdata" hidden class="hidden"
         data-tealium-data='{&#34;siteSection&#34;: &#34;tag&#34;, &#34;pageType&#34;: &#34;tag_tracks&#34;, &#34;pageName&#34;: &#34;tag/tracks&#34;, &#34;nativeEventTracking&#34;: true, &#34;userState&#34;: &#34;not authenticated&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;ipGeo&#34;: &#34;BY&#34;}'>
     </div>

        <div
            
                
            
            
            >
            
    <div
        data-require="components/disclose-base,components/disclose-autoclose-v2,components/disclose-dropdown-v2,components/disclose-dropdown-location-picker-v2,components/disclose-collapsing-nav-v2,components/disclose-artwork,components/disclose-remove,components/disclose-search,components/disclose-hover-v3,components/disclose-select,components/disclose-lazy-buylinks,components/focus-controls,components/prevent-resubmit-v2,components/edit-scrobble,components/toggle-buttons,components/click-proxy,components/bookmark-notification"
    ></div>

    
        

    <nav class="masthead"><div class="masthead-inner-wrap"><div class="masthead-logo"><span class="masthead-logo-loading"></span><a href="/"> Last.fm</a></div><a
        class="masthead-search-toggle" href="/search" data-disclose-search aria-controls="masthead-search">Search</a><form
        class=" masthead-search-form disclose-hide disclose-hide--js-only " id="masthead-search" action="/search" method="get"><div class="masthead-search-inner-wrap"><label for="masthead-search-field" class="sr-only">Search</label><input
                id="masthead-search-field" class="masthead-search-field" type="text" name="q" placeholder="Search for music…" /><button class="masthead-search-submit" type="submit">Search</button></div></form><div class="visible-xs"><button
                        class=" masthead-hamburger-toggle " data-disclose-autoclose aria-controls="masthead-nav">Toggle navigation</button><ul
                        class=" masthead-nav disclose-hide disclose-hide--js-only " aria-label="Primary navigation" id="masthead-nav"><li class="masthead-nav-item masthead-nav-pro"><a
                class="masthead-nav-control masthead-pro-text" href="/pro" data-analytics-label="subscribe" data-analytics-action="UserMenuClick">Upgrade to Pro</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/charts" data-analytics-action="NavigationLink" data-analytics-label="charts">Charts</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li>
    
        
            <li class="masthead-nav-item">
                <a
                    class="masthead-nav-control"
                    href="/pro"
                    data-analytics-label="subscribe"
                    data-analytics-action="UserMenuClick"
                >Subscribe</a>
            </li>
        
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="/join"
                data-analytics-action="SignUpClick"
            >Join</a>
        </li>
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="https://secure.last.fm/login"
            >Login</a>
        </li>
    
</ul></div><div
                    class=" navlist navlist--more masthead-nav hidden-xs " data-require="components/primary-nav" data-more-string="More…"><ul
                        class="js-navlist-items navlist-items" aria-label="Primary navigation"><li class="masthead-nav-item masthead-nav-pro"><a
                class="masthead-nav-control masthead-pro-text" href="/pro" data-analytics-label="subscribe" data-analytics-action="UserMenuClick">Upgrade to Pro</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/charts" data-analytics-action="NavigationLink" data-analytics-label="charts">Charts</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li></ul></div><ul
            class=" site-auth site-auth--anon hidden-xs ">
    <li class="site-auth-item"><a
                class="site-auth-control" href="/join" data-analytics-action="SignUpClick">Join</a></li><li class="site-auth-item"><a
                class="site-auth-control" href="https://secure.last.fm/login">Login</a></li>
</ul></div></nav>

    

    

    

    

    

    
    


    
    


    
    


    

    

    
    <div
        class="nag-bar nag-bar--plybar-masthead-release-warning "
        
        role="status"
    >
        <div class="container">
            
            <p class="nag-bar-message ">
                
        A new version of Last.fm is available, to keep everything running smoothly, please <a href="javascript:window.location.reload()">reload</a> the site.
    
            </p>
        </div>
    </div>


    

    

    
    

    
        
    


    
    




    
    

    <header class="
        header
        
        
            header--sub-page
        
        
            header--tag
        
        
    ">
        
            <div
                class="
                    header-background
                    header-background--has-image
                "
                style="background-image: url(https://lastfm.freetls.fastly.net/i/u/ar0/cb1bfdf71247424cbb85e44177ed4589.jpg);"
            ></div>
        

        
    
    <div
        class="
            recommended-next-page-container
            recommended-next-page-container--desktop-expanded
            recommended-next-page-container--mobile-hidden
        "
        data-require="components/recommended-next-page">
        
    
    <div class="js-link-block recommended-next-page recommended-next-page--tag">
        <img src="https://lastfm.freetls.fastly.net/i/u/avatar70s/dc3c775e076d40cac0124c80b258365c.jpg" class="recommended-next-page-image" alt="" loading="lazy"/>
        <div class="recommended-next-page-details">
            <h4 class="recommended-next-page-title">
                Recommended next
            </h4>
            
                <a href="/tag/indie+pop" class="link-block-target recommended-next-page-name-unified">indie pop</a>
                <a href="/tag/indie+pop" class="link-block-target recommended-next-page-name">indie pop</a>
            
        </div>
        <span class="recommended-next-button"></span>
        <a
            class="js-link-block-cover-link recommended-next-page-cover-link"
            href="/tag/indie+pop"
            tabindex="-1"
            aria-hidden="true"
            data-analytics-action="RecommendedNextClick"
            ></a>
    </div>
    

    </div>
    


        <div class="container">
            <div class="header-inner-wrap">
                
                <div class="header-info">
                    
    <div class="header-info-primary header-info-primary--with-columns">
        
    
        
    
    <section class="share-mobile">
        <button
            aria-controls="share-002031f9-be37-4d52-b09b-b06d7e8028f6"
            aria-expanded="false"
            data-disclose-dropdown
            data-dropdown-layout-at="center bottom+5"
            class="
                disclose-trigger
                share-button
            "
            data-analytics-action="ShareShowOptions"
        >
            Share…
        </button>

        <div
            id="share-002031f9-be37-4d52-b09b-b06d7e8028f6"
            class="
                disclose-hide
                disclose-hide--js-only
                share-block
            "
        >
            
            
    <h2 class="share-heading">
        
            Share this tag:
        
    </h2>

            
    
    
    

    <ul class="share-options">
        <li class="share-option ">
            <a
                href="https://www.facebook.com/sharer/sharer.php?ref=facebooklink&amp;u=https://www.last.fm/tag/dream%2Bpop/tracks"
                data-analytics-social="2"
                target="_blank"
            >
                <img src="/static/images/icons/facebook.e0cc15e8e1d2.svg" alt="Facebook"></a>
            </a>
        </li>
        <li class="share-option ">
            <a
                href="https://twitter.com/intent/tweet?url=https://www.last.fm/tag/dream%2Bpop/tracks&amp;lang=en&amp;text=Check+out+dream+pop"
                data-analytics-social="8"
                target="_blank"
            >
                <img src="/static/images/icons/twitter.841d4ebdbe86.svg" alt="Twitter"></a>
            </a>
        </li>
    </ul>

        
        </div>
    </section>

    


        <div class="header-info-primary-col1">
            <div class="header-title-column-ellipsis-wrap">
                <h1 class="header-title"><a href="/tag/dream+pop">Dream pop music</a></h1>
            </div>

            
    
        
    <nav
        class="
            
                navlist
            
            secondary-nav
            
                navlist--more
            
            
        "
        aria-label="Secondary navigation"
        
            data-require="components/collapsing-nav-v2"
            data-more-string="More…"
        
    >
        <ul class="navlist-items js-navlist-items">
            <li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--overview
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop"
                            
                        >
                            Overview
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--artists
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/artists"
                            
                        >
                            Artists
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--albums
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/albums"
                            
                        >
                            Albums
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--tracks
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                                    secondary-nav-item-link--active
                                
                            "
                            href="/tag/dream+pop/tracks"
                            
                        >
                            Tracks
                            
                                <span class="sr-only">(current section)</span>
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--wiki
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/wiki"
                            
                        >
                            Wiki
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--shoutbox
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/shoutbox"
                            
                        >
                            Shouts
                            
                        </a></li>
        </ul>
    </nav>

    

        </div>
    </div>

                </div>
            </div>
        </div>
    </header>



    
    <div id="mantle_skin" class="adaptive-skin-container">
        <div class="adaptive-skin-wrapper">
            <div id="adSkinLeft" class="adaptive-skin-left"></div>
            <div id="adSkinRight" class="adaptive-skin-right"></div>
        </div>
        
    
        
        
        
    


        

        
    <div class="content-top">
        <div class="content-top-inner-wrap">
            
                
    
        
        
            <div id="leader_plus_top" data-ad="leader_plus_top" class="leader_plus_top lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;leader_plus_top&#34;, &#34;sizes&#34;: [[728, 90], [970, 66], [970, 250], [728, 91]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
    

                
                    
    
        
        
            <div id="mobile_pos_1" data-ad="mobile_pos_1" class="mobile_pos_1 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_1&#34;, &#34;sizes&#34;: [[300, 250], [320, 50]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;1&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mobile_pos_1">
                Don't want to see ads? <a href="/pro" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Upgrade Now</a>
            </p>
        
    

                
            

            <div class="container content-top-lower">
                
                    


                

                

                
                    
                        <h1 class="content-top-header">
                            
    Dream Pop Tracks

                        </h1>
                    
                

                

                
            </div>
        </div>
    </div>


        
    <div class="container page-content">
        
    <div class="row">
        <div class="col-main">
            
                <section id="top-tracks-section">
                    
    

    
    
    
    
    
    
    
    

    <table
        
        class="
            chartlist
            
            
                chartlist--with-index
                chartlist--with-index--length-2
            
            
                chartlist--with-play
            
            
                chartlist--with-mobile-play
            
            
            
            
                chartlist--with-loved
            
            
                chartlist--with-artist
            
            
            
                chartlist--with-more
            
            
            
            
            
            
            
            
                chartlist--with-buylinks
            
            
            
            
        "
    >
        <thead class="sr-only">
            <tr>
                

                
                    
                    <th>Rank</th>
                

                

                
                    
                    <th>Play</th>
                

                

                

                
                    
                    <th>Loved</th>
                

                <th>
                    
                    
                        Track name
                    
                </th>

                
                    
                    <th>Artist name </th>
                

                

                
                    
                    <th>Buy</th>
                

                
                    
                    <th>Options</th>
                

                

                

                

                

                

                

                

                

                

                
            </tr>
        </thead>
        <tbody data-playlisting-add-entries>
            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                1
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=avv2IIdDnnk"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="avv2IIdDnnk"
    data-youtube-url="https://www.youtube.com/watch?v=avv2IIdDnnk"

    data-track-name="Fade Into You"
    data-track-url="/music/Mazzy+Star/_/Fade+Into+You"
    
        data-artist-name="Mazzy Star"
        data-artist-url="/music/Mazzy+Star"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="506427a9ffe73b3b5703a667947405c7"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="506427a9ffe73b3b5703a667947405c7"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Mazzy+Star/_/Fade+Into+You"
            
            
                title="Fade Into You"
            
                class=""
            
        >Fade Into You</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Mazzy+Star"
            
            
                title="Mazzy Star"
            
        >Mazzy Star</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-2fa41db1-0d0b-414e-997f-bea68aaa5e61"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Mazzy+Star/_/Fade+Into+You/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-2fa41db1-0d0b-414e-997f-bea68aaa5e61"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-4f005e4a-2775-467b-896f-0ae2d2e99970"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Mazzy+Star/_/Fade+Into+You/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-4f005e4a-2775-467b-896f-0ae2d2e99970"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="506427a9ffe73b3b5703a667947405c7"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                2
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=t0dJqlvOSq4"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="t0dJqlvOSq4"
    data-youtube-url="https://www.youtube.com/watch?v=t0dJqlvOSq4"

    data-track-name="Sometimes"
    data-track-url="/music/My+Bloody+Valentine/_/Sometimes"
    
        data-artist-name="My Bloody Valentine"
        data-artist-url="/music/My+Bloody+Valentine"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="bf50be9f5b255e845c56c638652dd565"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="bf50be9f5b255e845c56c638652dd565"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/My+Bloody+Valentine/_/Sometimes"
            
            
                title="Sometimes"
            
                class=""
            
        >Sometimes</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                title="My Bloody Valentine"
            
        >My Bloody Valentine</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-ff6f42f4-3f01-458f-a016-44b664958dbf"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Sometimes/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-ff6f42f4-3f01-458f-a016-44b664958dbf"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-7629e299-f92e-4b52-8399-a035fd7b4b95"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Sometimes/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-7629e299-f92e-4b52-8399-a035fd7b4b95"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="bf50be9f5b255e845c56c638652dd565"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                3
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=jkM3M3zGcGE"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="jkM3M3zGcGE"
    data-youtube-url="https://www.youtube.com/watch?v=jkM3M3zGcGE"

    data-track-name="Alison"
    data-track-url="/music/Slowdive/_/Alison"
    
        data-artist-name="Slowdive"
        data-artist-url="/music/Slowdive"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="74152423d6327f003e7ef9ec3ccce5b6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="74152423d6327f003e7ef9ec3ccce5b6"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Slowdive/_/Alison"
            
            
                title="Alison"
            
                class=""
            
        >Alison</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Slowdive"
            
            
                title="Slowdive"
            
        >Slowdive</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-7442639e-e51b-43bf-a3f9-4a6d26e55c65"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/_/Alison/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-7442639e-e51b-43bf-a3f9-4a6d26e55c65"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-4b0ab474-386d-469d-bec5-050e62609f4c"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Slowdive/_/Alison/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-4b0ab474-386d-469d-bec5-050e62609f4c"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="74152423d6327f003e7ef9ec3ccce5b6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                4
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=l9-NOIalUYU"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="l9-NOIalUYU"
    data-youtube-url="https://www.youtube.com/watch?v=l9-NOIalUYU"

    data-track-name="When You Sleep"
    data-track-url="/music/My+Bloody+Valentine/_/When+You+Sleep"
    
        data-artist-name="My Bloody Valentine"
        data-artist-url="/music/My+Bloody+Valentine"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="4f85d2197d221982a734cb56d815ca0c"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="4f85d2197d221982a734cb56d815ca0c"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/My+Bloody+Valentine/_/When+You+Sleep"
            
            
                title="When You Sleep"
            
                class=""
            
        >When You Sleep</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                title="My Bloody Valentine"
            
        >My Bloody Valentine</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-2753e6dc-ba07-4610-b9af-fc5a6e753a73"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/_/When+You+Sleep/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-2753e6dc-ba07-4610-b9af-fc5a6e753a73"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-0d838703-f0f6-4433-aad6-acf03841c36f"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/My+Bloody+Valentine/_/When+You+Sleep/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-0d838703-f0f6-4433-aad6-acf03841c36f"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="4f85d2197d221982a734cb56d815ca0c"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                5
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=yCwXa7jsPzI"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="yCwXa7jsPzI"
    data-youtube-url="https://www.youtube.com/watch?v=yCwXa7jsPzI"

    data-track-name="Norway"
    data-track-url="/music/Beach+House/_/Norway"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e9ab7e815f34051b30106a2b508a2216"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="e9ab7e815f34051b30106a2b508a2216"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/Norway"
            
            
                title="Norway"
            
                class=""
            
        >Norway</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-dbf85bdb-ce4b-4f06-84ae-4d419a40ce07"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/Norway/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-dbf85bdb-ce4b-4f06-84ae-4d419a40ce07"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-0a8f6214-5ca5-4c25-924f-a09d67315c47"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/Norway/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-0a8f6214-5ca5-4c25-924f-a09d67315c47"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e9ab7e815f34051b30106a2b508a2216"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                6
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=N-wfb25WmV4"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="N-wfb25WmV4"
    data-youtube-url="https://www.youtube.com/watch?v=N-wfb25WmV4"

    data-track-name="Zebra"
    data-track-url="/music/Beach+House/_/Zebra"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="88e80c8d3e4a4f06d8c8e3867f4cae57"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="88e80c8d3e4a4f06d8c8e3867f4cae57"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/Zebra"
            
            
                title="Zebra"
            
                class=""
            
        >Zebra</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-b480c3f9-25b3-47eb-abe6-675323204f5b"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/Zebra/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-b480c3f9-25b3-47eb-abe6-675323204f5b"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-a49c2d08-e69a-4f9d-857e-3bab1d8c1693"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/Zebra/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-a49c2d08-e69a-4f9d-857e-3bab1d8c1693"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="88e80c8d3e4a4f06d8c8e3867f4cae57"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                7
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="1e8149e2d35bc5c691b7f1946630947f"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="1e8149e2d35bc5c691b7f1946630947f"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Eftos!rx/_/Uten+deg+(Nogsf)"
            
            
                title="Uten deg (Nogsf)"
            
                class=""
            
        >Uten deg (Nogsf)</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Eftos!rx"
            
            
                title="Eftos!rx"
            
        >Eftos!rx</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-9560edd7-b1eb-4481-9a13-585b7f2b0cbc"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Eftos!rx/_/Uten+deg+(Nogsf)/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-9560edd7-b1eb-4481-9a13-585b7f2b0cbc"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-ab6aae11-4b3d-44b6-a046-e799551618c7"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Eftos!rx/_/Uten+deg+(Nogsf)/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-ab6aae11-4b3d-44b6-a046-e799551618c7"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="1e8149e2d35bc5c691b7f1946630947f"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                8
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=586-G4TcUxQ"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="586-G4TcUxQ"
    data-youtube-url="https://www.youtube.com/watch?v=586-G4TcUxQ"

    data-track-name="Soon"
    data-track-url="/music/My+Bloody+Valentine/_/Soon"
    
        data-artist-name="My Bloody Valentine"
        data-artist-url="/music/My+Bloody+Valentine"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="564c39961a8d5cce3f1b38f3fc6c5899"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="564c39961a8d5cce3f1b38f3fc6c5899"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/My+Bloody+Valentine/_/Soon"
            
            
                title="Soon"
            
                class=""
            
        >Soon</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                title="My Bloody Valentine"
            
        >My Bloody Valentine</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-9d02accb-1249-454a-b1b3-22d14a824a1d"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Soon/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-9d02accb-1249-454a-b1b3-22d14a824a1d"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-d1c6606f-64b1-49d4-9de0-7b48d43f3ae6"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Soon/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-d1c6606f-64b1-49d4-9de0-7b48d43f3ae6"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="564c39961a8d5cce3f1b38f3fc6c5899"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                9
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=HeaHW-rUsUQ"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="HeaHW-rUsUQ"
    data-youtube-url="https://www.youtube.com/watch?v=HeaHW-rUsUQ"

    data-track-name="Walk in the Park"
    data-track-url="/music/Beach+House/_/Walk+in+the+Park"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="844cc2d88be53ce8b6fd3e6dcf9c60e6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="844cc2d88be53ce8b6fd3e6dcf9c60e6"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/Walk+in+the+Park"
            
            
                title="Walk in the Park"
            
                class=""
            
        >Walk in the Park</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-2b54691b-73a2-4b04-b40a-b766c99f6db2"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/Walk+in+the+Park/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-2b54691b-73a2-4b04-b40a-b766c99f6db2"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-cd8242a3-7513-45c2-8ae2-987a567424d0"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/Walk+in+the+Park/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-cd8242a3-7513-45c2-8ae2-987a567424d0"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="844cc2d88be53ce8b6fd3e6dcf9c60e6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                10
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=SiO_7LhPZFM"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="SiO_7LhPZFM"
    data-youtube-url="https://www.youtube.com/watch?v=SiO_7LhPZFM"

    data-track-name="Into Dust"
    data-track-url="/music/Mazzy+Star/_/Into+Dust"
    
        data-artist-name="Mazzy Star"
        data-artist-url="/music/Mazzy+Star"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="108d0b74156c44aaedfe9ffa75084eea"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="108d0b74156c44aaedfe9ffa75084eea"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Mazzy+Star/_/Into+Dust"
            
            
                title="Into Dust"
            
                class=""
            
        >Into Dust</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Mazzy+Star"
            
            
                title="Mazzy Star"
            
        >Mazzy Star</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-2fbec972-3405-44f7-9646-9aa1e7d4ca29"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Mazzy+Star/_/Into+Dust/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-2fbec972-3405-44f7-9646-9aa1e7d4ca29"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-798979a0-a232-46d5-8e73-59db1977584c"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Mazzy+Star/_/Into+Dust/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-798979a0-a232-46d5-8e73-59db1977584c"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="108d0b74156c44aaedfe9ffa75084eea"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                11
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=G0LIO138Z-A"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="G0LIO138Z-A"
    data-youtube-url="https://www.youtube.com/watch?v=G0LIO138Z-A"

    data-track-name="Souvlaki Space Station"
    data-track-url="/music/Slowdive/_/Souvlaki+Space+Station"
    
        data-artist-name="Slowdive"
        data-artist-url="/music/Slowdive"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="67968b255e6345f69dae4944497074e1"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="67968b255e6345f69dae4944497074e1"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Slowdive/_/Souvlaki+Space+Station"
            
            
                title="Souvlaki Space Station"
            
                class=""
            
        >Souvlaki Space Station</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Slowdive"
            
            
                title="Slowdive"
            
        >Slowdive</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-5741d026-caa6-47e0-be76-95c5ccca72c1"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/_/Souvlaki+Space+Station/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-5741d026-caa6-47e0-be76-95c5ccca72c1"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-98c88615-44e5-439b-8136-6485894764e0"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Slowdive/_/Souvlaki+Space+Station/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-98c88615-44e5-439b-8136-6485894764e0"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="67968b255e6345f69dae4944497074e1"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                12
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=O5iK_mqtJ04"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="O5iK_mqtJ04"
    data-youtube-url="https://www.youtube.com/watch?v=O5iK_mqtJ04"

    data-track-name="When the Sun Hits"
    data-track-url="/music/Slowdive/_/When+the+Sun+Hits"
    
        data-artist-name="Slowdive"
        data-artist-url="/music/Slowdive"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="2d232aeaef95d5d72cd46c49b2c4345d"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="2d232aeaef95d5d72cd46c49b2c4345d"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Slowdive/_/When+the+Sun+Hits"
            
            
                title="When the Sun Hits"
            
                class=""
            
        >When the Sun Hits</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Slowdive"
            
            
                title="Slowdive"
            
        >Slowdive</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-d9c9b8f4-4067-4929-92be-70856c44ac25"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/_/When+the+Sun+Hits/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-d9c9b8f4-4067-4929-92be-70856c44ac25"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-9c83366c-eac3-47de-807d-f767e0777107"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Slowdive/_/When+the+Sun+Hits/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-9c83366c-eac3-47de-807d-f767e0777107"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="2d232aeaef95d5d72cd46c49b2c4345d"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                13
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=cu2COw-4g8Q"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="cu2COw-4g8Q"
    data-youtube-url="https://www.youtube.com/watch?v=cu2COw-4g8Q"

    data-track-name="Lorelei"
    data-track-url="/music/Cocteau+Twins/_/Lorelei"
    
        data-artist-name="Cocteau Twins"
        data-artist-url="/music/Cocteau+Twins"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="08566494d789cff29b421f319326b8e6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="08566494d789cff29b421f319326b8e6"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Cocteau+Twins/_/Lorelei"
            
            
                title="Lorelei"
            
                class=""
            
        >Lorelei</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Cocteau+Twins"
            
            
                title="Cocteau Twins"
            
        >Cocteau Twins</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-7a30fc1d-74a7-48d5-bad9-ecc459d1962a"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/_/Lorelei/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-7a30fc1d-74a7-48d5-bad9-ecc459d1962a"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-cfe6e25b-14f3-450c-b379-6d6c8e1edeb9"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Cocteau+Twins/_/Lorelei/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-cfe6e25b-14f3-450c-b379-6d6c8e1edeb9"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="08566494d789cff29b421f319326b8e6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                14
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=1FH-q0I1fJY"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="1FH-q0I1fJY"
    data-youtube-url="https://www.youtube.com/watch?v=1FH-q0I1fJY"

    data-track-name="Genesis"
    data-track-url="/music/Grimes/_/Genesis"
    
        data-artist-name="Grimes"
        data-artist-url="/music/Grimes"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="c9b40d94e243a6c6352558fd7e07504e"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="c9b40d94e243a6c6352558fd7e07504e"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Grimes/_/Genesis"
            
            
                title="Genesis"
            
                class=""
            
        >Genesis</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Grimes"
            
            
                title="Grimes"
            
        >Grimes</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-997e5316-30e7-4897-bb3d-a620ab9ee5ef"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Grimes/_/Genesis/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-997e5316-30e7-4897-bb3d-a620ab9ee5ef"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-b401f979-e7d1-4b90-b31a-7713af007cbd"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Grimes/_/Genesis/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-b401f979-e7d1-4b90-b31a-7713af007cbd"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="c9b40d94e243a6c6352558fd7e07504e"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                15
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=tVj-fc1M_D0"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="tVj-fc1M_D0"
    data-youtube-url="https://www.youtube.com/watch?v=tVj-fc1M_D0"

    data-track-name="I Only Said"
    data-track-url="/music/My+Bloody+Valentine/_/I+Only+Said"
    
        data-artist-name="My Bloody Valentine"
        data-artist-url="/music/My+Bloody+Valentine"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="f991486dbfd711e3d2ffff5a97a445da"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="f991486dbfd711e3d2ffff5a97a445da"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/My+Bloody+Valentine/_/I+Only+Said"
            
            
                title="I Only Said"
            
                class=""
            
        >I Only Said</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                title="My Bloody Valentine"
            
        >My Bloody Valentine</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-e0ae9523-74c8-4434-8703-3e7a73650eb0"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/_/I+Only+Said/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-e0ae9523-74c8-4434-8703-3e7a73650eb0"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-23dba1f6-8ddd-426e-bc82-f1190f24d6f6"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/My+Bloody+Valentine/_/I+Only+Said/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-23dba1f6-8ddd-426e-bc82-f1190f24d6f6"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="f991486dbfd711e3d2ffff5a97a445da"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                16
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=dUkggdQW2xE"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="dUkggdQW2xE"
    data-youtube-url="https://www.youtube.com/watch?v=dUkggdQW2xE"

    data-track-name="To Here Knows When"
    data-track-url="/music/My+Bloody+Valentine/_/To+Here+Knows+When"
    
        data-artist-name="My Bloody Valentine"
        data-artist-url="/music/My+Bloody+Valentine"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="c260006c6cef8fc247f89e0f4a2eca7a"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="c260006c6cef8fc247f89e0f4a2eca7a"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/My+Bloody+Valentine/_/To+Here+Knows+When"
            
            
                title="To Here Knows When"
            
                class=""
            
        >To Here Knows When</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                title="My Bloody Valentine"
            
        >My Bloody Valentine</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-e5285a19-d9a1-4116-89e1-a65fd9e63616"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/_/To+Here+Knows+When/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-e5285a19-d9a1-4116-89e1-a65fd9e63616"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-cb989de6-eaf2-4e88-a451-b5e70419662d"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/My+Bloody+Valentine/_/To+Here+Knows+When/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-cb989de6-eaf2-4e88-a451-b5e70419662d"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="c260006c6cef8fc247f89e0f4a2eca7a"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                17
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=KwwZPp2CkUU"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="KwwZPp2CkUU"
    data-youtube-url="https://www.youtube.com/watch?v=KwwZPp2CkUU"

    data-track-name="Siren"
    data-track-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Siren"
    
        data-artist-name="志方あきこ"
        data-artist-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="72bf99e8fc9b0caad8f90b5c5c2fd89d"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="72bf99e8fc9b0caad8f90b5c5c2fd89d"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Siren"
            
            
                title="Siren"
            
                class=""
            
        >Siren</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
            
            
                title="志方あきこ"
            
        >志方あきこ</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-c3f80ce1-91e6-4e64-8579-cdbf002763ef"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Siren/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-c3f80ce1-91e6-4e64-8579-cdbf002763ef"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-47f7ad7b-d959-4f6b-a339-72579f091062"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Siren/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-47f7ad7b-d959-4f6b-a339-72579f091062"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="72bf99e8fc9b0caad8f90b5c5c2fd89d"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                18
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=HF1k1m6eYV0"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="HF1k1m6eYV0"
    data-youtube-url="https://www.youtube.com/watch?v=HF1k1m6eYV0"

    data-track-name="Machine Gun"
    data-track-url="/music/Slowdive/_/Machine+Gun"
    
        data-artist-name="Slowdive"
        data-artist-url="/music/Slowdive"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="69eb2e6dd6163b10561232408c51ead4"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="69eb2e6dd6163b10561232408c51ead4"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Slowdive/_/Machine+Gun"
            
            
                title="Machine Gun"
            
                class=""
            
        >Machine Gun</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Slowdive"
            
            
                title="Slowdive"
            
        >Slowdive</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-32c59bc4-f688-4a69-8a17-de0d1aa273e4"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/_/Machine+Gun/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-32c59bc4-f688-4a69-8a17-de0d1aa273e4"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-6f5f3089-8a09-4ab4-b255-36a952469154"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Slowdive/_/Machine+Gun/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-6f5f3089-8a09-4ab4-b255-36a952469154"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="69eb2e6dd6163b10561232408c51ead4"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                19
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=8paDhfGQH4E"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="8paDhfGQH4E"
    data-youtube-url="https://www.youtube.com/watch?v=8paDhfGQH4E"

    data-track-name="Thursday"
    data-track-url="/music/Asobi+Seksu/_/Thursday"
    
        data-artist-name="Asobi Seksu"
        data-artist-url="/music/Asobi+Seksu"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="d13aae67a09e2318c009d1e08f035368"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="d13aae67a09e2318c009d1e08f035368"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Asobi+Seksu/_/Thursday"
            
            
                title="Thursday"
            
                class=""
            
        >Thursday</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Asobi+Seksu"
            
            
                title="Asobi Seksu"
            
        >Asobi Seksu</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-ce44357b-5a1e-43b2-a4a1-9e9370e3f675"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Asobi+Seksu/_/Thursday/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-ce44357b-5a1e-43b2-a4a1-9e9370e3f675"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-94ca8a52-d893-4855-a0dd-07cea9cbbc4b"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Asobi+Seksu/_/Thursday/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-94ca8a52-d893-4855-a0dd-07cea9cbbc4b"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="d13aae67a09e2318c009d1e08f035368"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                20
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=pVuARAzNnKw"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="pVuARAzNnKw"
    data-youtube-url="https://www.youtube.com/watch?v=pVuARAzNnKw"

    data-track-name="Blown a Wish"
    data-track-url="/music/My+Bloody+Valentine/_/Blown+a+Wish"
    
        data-artist-name="My Bloody Valentine"
        data-artist-url="/music/My+Bloody+Valentine"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="bfa285b67bca52064b95b110b6be16d5"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="bfa285b67bca52064b95b110b6be16d5"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/My+Bloody+Valentine/_/Blown+a+Wish"
            
            
                title="Blown a Wish"
            
                class=""
            
        >Blown a Wish</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                title="My Bloody Valentine"
            
        >My Bloody Valentine</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-90f33baa-fa55-4351-99f1-836d05068112"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Blown+a+Wish/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-90f33baa-fa55-4351-99f1-836d05068112"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-91ebe74e-d786-4b39-a927-6016a7990166"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Blown+a+Wish/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-91ebe74e-d786-4b39-a927-6016a7990166"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="bfa285b67bca52064b95b110b6be16d5"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                21
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=fIY64norZqY"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="fIY64norZqY"
    data-youtube-url="https://www.youtube.com/watch?v=fIY64norZqY"

    data-track-name="Skin of the Night"
    data-track-url="/music/M83/_/Skin+of+the+Night"
    
        data-artist-name="M83"
        data-artist-url="/music/M83"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="df213376f929e42fdbd9ac6f9bffba45"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="df213376f929e42fdbd9ac6f9bffba45"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/M83/_/Skin+of+the+Night"
            
            
                title="Skin of the Night"
            
                class=""
            
        >Skin of the Night</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/M83"
            
            
                title="M83"
            
        >M83</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-a069ab5d-7620-40ad-9c3e-ce6595c5948f"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/M83/_/Skin+of+the+Night/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-a069ab5d-7620-40ad-9c3e-ce6595c5948f"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-92f4d854-8b4f-4e19-afa4-c8438cf2e373"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/M83/_/Skin+of+the+Night/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-92f4d854-8b4f-4e19-afa4-c8438cf2e373"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="df213376f929e42fdbd9ac6f9bffba45"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                22
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=49cwYNVIu5E"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="49cwYNVIu5E"
    data-youtube-url="https://www.youtube.com/watch?v=49cwYNVIu5E"

    data-track-name="Only Shallow"
    data-track-url="/music/My+Bloody+Valentine/_/Only+Shallow"
    
        data-artist-name="My Bloody Valentine"
        data-artist-url="/music/My+Bloody+Valentine"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="2051a78fc88c63b608b649376e796c71"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="2051a78fc88c63b608b649376e796c71"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/My+Bloody+Valentine/_/Only+Shallow"
            
            
                title="Only Shallow"
            
                class=""
            
        >Only Shallow</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                title="My Bloody Valentine"
            
        >My Bloody Valentine</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-27ee9cbb-1049-43e4-9b36-6c2e72aa6c68"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Only+Shallow/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-27ee9cbb-1049-43e4-9b36-6c2e72aa6c68"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-8b1058b3-754f-4f90-ad03-511546d2771a"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Only+Shallow/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-8b1058b3-754f-4f90-ad03-511546d2771a"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="2051a78fc88c63b608b649376e796c71"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                23
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=hxR-GSKvg2A"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="hxR-GSKvg2A"
    data-youtube-url="https://www.youtube.com/watch?v=hxR-GSKvg2A"

    data-track-name="Cherry-Coloured Funk"
    data-track-url="/music/Cocteau+Twins/_/Cherry-Coloured+Funk"
    
        data-artist-name="Cocteau Twins"
        data-artist-url="/music/Cocteau+Twins"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="9dc8d6ae043346bb15c2e1c3ea793971"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="9dc8d6ae043346bb15c2e1c3ea793971"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Cocteau+Twins/_/Cherry-Coloured+Funk"
            
            
                title="Cherry-Coloured Funk"
            
                class=""
            
        >Cherry-Coloured Funk</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Cocteau+Twins"
            
            
                title="Cocteau Twins"
            
        >Cocteau Twins</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-e8d98eed-040d-4fa1-a831-c303172ac621"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/_/Cherry-Coloured+Funk/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-e8d98eed-040d-4fa1-a831-c303172ac621"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-6c8b3494-ec31-432f-bfdb-a607ad40fda6"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Cocteau+Twins/_/Cherry-Coloured+Funk/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-6c8b3494-ec31-432f-bfdb-a607ad40fda6"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="9dc8d6ae043346bb15c2e1c3ea793971"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                24
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=ztnutktJP7M"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="ztnutktJP7M"
    data-youtube-url="https://www.youtube.com/watch?v=ztnutktJP7M"

    data-track-name="Loomer"
    data-track-url="/music/My+Bloody+Valentine/_/Loomer"
    
        data-artist-name="My Bloody Valentine"
        data-artist-url="/music/My+Bloody+Valentine"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="d70b0cf08d5effc4fce360ccdf28683d"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="d70b0cf08d5effc4fce360ccdf28683d"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/My+Bloody+Valentine/_/Loomer"
            
            
                title="Loomer"
            
                class=""
            
        >Loomer</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                title="My Bloody Valentine"
            
        >My Bloody Valentine</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-3e5d15e6-e497-4aff-b662-a096aec503c3"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Loomer/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-3e5d15e6-e497-4aff-b662-a096aec503c3"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-beb8f10f-5db3-4499-8448-6c643f70458e"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Loomer/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-beb8f10f-5db3-4499-8448-6c643f70458e"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="d70b0cf08d5effc4fce360ccdf28683d"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                25
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=aZkCliuOXnQ"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="aZkCliuOXnQ"
    data-youtube-url="https://www.youtube.com/watch?v=aZkCliuOXnQ"

    data-track-name="Silver Soul"
    data-track-url="/music/Beach+House/_/Silver+Soul"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="1dc43c78ed7305f08e80c3b65dd1a71a"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="1dc43c78ed7305f08e80c3b65dd1a71a"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/Silver+Soul"
            
            
                title="Silver Soul"
            
                class=""
            
        >Silver Soul</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-120893fc-c1a8-4abb-bb0b-2518275147fe"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/Silver+Soul/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-120893fc-c1a8-4abb-bb0b-2518275147fe"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-6a4be6aa-05bf-49e8-936c-210caae84cdf"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/Silver+Soul/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-6a4be6aa-05bf-49e8-936c-210caae84cdf"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="1dc43c78ed7305f08e80c3b65dd1a71a"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                26
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=JtH68PJIQLE"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="JtH68PJIQLE"
    data-youtube-url="https://www.youtube.com/watch?v=JtH68PJIQLE"

    data-track-name="Oblivion"
    data-track-url="/music/Grimes/_/Oblivion"
    
        data-artist-name="Grimes"
        data-artist-url="/music/Grimes"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="04e36d703f0158ae71662d40270dba91"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="04e36d703f0158ae71662d40270dba91"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Grimes/_/Oblivion"
            
            
                title="Oblivion"
            
                class=""
            
        >Oblivion</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Grimes"
            
            
                title="Grimes"
            
        >Grimes</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-183519a6-d240-4501-aa6e-5c0292efe9ef"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Grimes/_/Oblivion/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-183519a6-d240-4501-aa6e-5c0292efe9ef"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-5bc0c9b6-0cfb-4db6-b8ac-fe1d1873158d"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Grimes/_/Oblivion/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-5bc0c9b6-0cfb-4db6-b8ac-fe1d1873158d"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="04e36d703f0158ae71662d40270dba91"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                27
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=6KnYw4EwYGc"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="6KnYw4EwYGc"
    data-youtube-url="https://www.youtube.com/watch?v=6KnYw4EwYGc"

    data-track-name="Heaven or Las Vegas"
    data-track-url="/music/Cocteau+Twins/_/Heaven+or+Las+Vegas"
    
        data-artist-name="Cocteau Twins"
        data-artist-url="/music/Cocteau+Twins"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="d105877a663bf2f2bf902cdeadfcd4be"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="d105877a663bf2f2bf902cdeadfcd4be"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Cocteau+Twins/_/Heaven+or+Las+Vegas"
            
            
                title="Heaven or Las Vegas"
            
                class=""
            
        >Heaven or Las Vegas</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Cocteau+Twins"
            
            
                title="Cocteau Twins"
            
        >Cocteau Twins</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-ab5709d7-9b3d-4269-b61d-08cf10ee8ad9"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/_/Heaven+or+Las+Vegas/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-ab5709d7-9b3d-4269-b61d-08cf10ee8ad9"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-c57b0244-1fa6-4600-8678-3dc8f89b7485"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Cocteau+Twins/_/Heaven+or+Las+Vegas/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-c57b0244-1fa6-4600-8678-3dc8f89b7485"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="d105877a663bf2f2bf902cdeadfcd4be"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                28
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=u0DLCyWrxDo"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="u0DLCyWrxDo"
    data-youtube-url="https://www.youtube.com/watch?v=u0DLCyWrxDo"

    data-track-name="Come in Alone"
    data-track-url="/music/My+Bloody+Valentine/_/Come+in+Alone"
    
        data-artist-name="My Bloody Valentine"
        data-artist-url="/music/My+Bloody+Valentine"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="0ebaa05e89ac3309217df4850f1439e6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="0ebaa05e89ac3309217df4850f1439e6"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/My+Bloody+Valentine/_/Come+in+Alone"
            
            
                title="Come in Alone"
            
                class=""
            
        >Come in Alone</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                title="My Bloody Valentine"
            
        >My Bloody Valentine</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-f0c00633-3e28-4b17-96a0-064fd6d18704"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Come+in+Alone/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-f0c00633-3e28-4b17-96a0-064fd6d18704"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-0f032f58-d0ca-48d5-ac78-c82e70c0ea87"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/My+Bloody+Valentine/_/Come+in+Alone/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-0f032f58-d0ca-48d5-ac78-c82e70c0ea87"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="0ebaa05e89ac3309217df4850f1439e6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                29
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=ewABojPWmY0"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="ewABojPWmY0"
    data-youtube-url="https://www.youtube.com/watch?v=ewABojPWmY0"

    data-track-name="Flowers In December"
    data-track-url="/music/Mazzy+Star/_/Flowers+In+December"
    
        data-artist-name="Mazzy Star"
        data-artist-url="/music/Mazzy+Star"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="44a3f69cf1af7f61074046799359930f"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="44a3f69cf1af7f61074046799359930f"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Mazzy+Star/_/Flowers+In+December"
            
            
                title="Flowers In December"
            
                class=""
            
        >Flowers In December</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Mazzy+Star"
            
            
                title="Mazzy Star"
            
        >Mazzy Star</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-bcfe135a-ace4-4f4f-9627-e6aad69166d1"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Mazzy+Star/_/Flowers+In+December/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-bcfe135a-ace4-4f4f-9627-e6aad69166d1"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-91475896-ff88-42d4-a8de-8ca6b72ed669"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Mazzy+Star/_/Flowers+In+December/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-91475896-ff88-42d4-a8de-8ca6b72ed669"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="44a3f69cf1af7f61074046799359930f"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                30
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=HHuVWG-Pv-4"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="HHuVWG-Pv-4"
    data-youtube-url="https://www.youtube.com/watch?v=HHuVWG-Pv-4"

    data-track-name="Sorriso"
    data-track-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Sorriso"
    
        data-artist-name="志方あきこ"
        data-artist-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="f021d0e14efdc51bf27008e7b0cc7a6d"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="f021d0e14efdc51bf27008e7b0cc7a6d"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Sorriso"
            
            
                title="Sorriso"
            
                class=""
            
        >Sorriso</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
            
            
                title="志方あきこ"
            
        >志方あきこ</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-f9b643bc-3308-4407-a85b-cec141bf9c0a"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Sorriso/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-f9b643bc-3308-4407-a85b-cec141bf9c0a"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-153d39ca-f044-4533-b601-d0f5bedb1902"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Sorriso/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-153d39ca-f044-4533-b601-d0f5bedb1902"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="f021d0e14efdc51bf27008e7b0cc7a6d"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                31
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=OKDwJOdq3zU"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="OKDwJOdq3zU"
    data-youtube-url="https://www.youtube.com/watch?v=OKDwJOdq3zU"

    data-track-name="Ivo"
    data-track-url="/music/Cocteau+Twins/_/Ivo"
    
        data-artist-name="Cocteau Twins"
        data-artist-url="/music/Cocteau+Twins"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="3121a0607a89585ae4dce8a8f94b79dc"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="3121a0607a89585ae4dce8a8f94b79dc"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Cocteau+Twins/_/Ivo"
            
            
                title="Ivo"
            
                class=""
            
        >Ivo</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Cocteau+Twins"
            
            
                title="Cocteau Twins"
            
        >Cocteau Twins</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-b9910cfc-9a61-4644-9815-3ab7c0e74d28"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/_/Ivo/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-b9910cfc-9a61-4644-9815-3ab7c0e74d28"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-8436b85d-ebc3-4839-bb43-eccc277a6b93"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Cocteau+Twins/_/Ivo/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-8436b85d-ebc3-4839-bb43-eccc277a6b93"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="3121a0607a89585ae4dce8a8f94b79dc"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                32
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=7rrG-uONREE"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="7rrG-uONREE"
    data-youtube-url="https://www.youtube.com/watch?v=7rrG-uONREE"

    data-track-name="Lover of Mine"
    data-track-url="/music/Beach+House/_/Lover+of+Mine"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="1c09cb2400dc99e491b371b6b6d31192"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="1c09cb2400dc99e491b371b6b6d31192"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/Lover+of+Mine"
            
            
                title="Lover of Mine"
            
                class=""
            
        >Lover of Mine</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-e04dadc4-ed73-4610-8efb-f596333188dc"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/Lover+of+Mine/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-e04dadc4-ed73-4610-8efb-f596333188dc"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-3954edd8-1370-4416-98a3-4582234efea2"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/Lover+of+Mine/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-3954edd8-1370-4416-98a3-4582234efea2"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="1c09cb2400dc99e491b371b6b6d31192"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                33
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=_nW5AF0m9Zw"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="_nW5AF0m9Zw"
    data-youtube-url="https://www.youtube.com/watch?v=_nW5AF0m9Zw"

    data-track-name="Angels"
    data-track-url="/music/The+xx/_/Angels"
    
        data-artist-name="The xx"
        data-artist-url="/music/The+xx"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="bb658213a12f00f07231680099d20099"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="bb658213a12f00f07231680099d20099"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/The+xx/_/Angels"
            
            
                title="Angels"
            
                class=""
            
        >Angels</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/The+xx"
            
            
                title="The xx"
            
        >The xx</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-23e4ba56-cd55-464b-b106-416c120e3da0"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/The+xx/_/Angels/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-23e4ba56-cd55-464b-b106-416c120e3da0"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-6d09bb22-c291-4ec9-9f76-04b3f90cb4e6"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/The+xx/_/Angels/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-6d09bb22-c291-4ec9-9f76-04b3f90cb4e6"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="bb658213a12f00f07231680099d20099"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                34
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=FuvWc3ToDHg"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="FuvWc3ToDHg"
    data-youtube-url="https://www.youtube.com/watch?v=FuvWc3ToDHg"

    data-track-name="Myth"
    data-track-url="/music/Beach+House/_/Myth"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="1a64640247212b6ffe6710d5e82894fa"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="1a64640247212b6ffe6710d5e82894fa"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/Myth"
            
            
                title="Myth"
            
                class=""
            
        >Myth</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-3c46ee51-2757-438b-b994-4bf517d9e4e8"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/Myth/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-3c46ee51-2757-438b-b994-4bf517d9e4e8"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-0f49a1a2-67e6-48b0-84af-2af4db5c7de9"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/Myth/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-0f49a1a2-67e6-48b0-84af-2af4db5c7de9"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="1a64640247212b6ffe6710d5e82894fa"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                35
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=e2p4Zb3u0jI"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="e2p4Zb3u0jI"
    data-youtube-url="https://www.youtube.com/watch?v=e2p4Zb3u0jI"

    data-track-name="40 Days"
    data-track-url="/music/Slowdive/_/40+Days"
    
        data-artist-name="Slowdive"
        data-artist-url="/music/Slowdive"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e672adb90be7fba064ad29a0ccc5de0f"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="e672adb90be7fba064ad29a0ccc5de0f"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Slowdive/_/40+Days"
            
            
                title="40 Days"
            
                class=""
            
        >40 Days</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Slowdive"
            
            
                title="Slowdive"
            
        >Slowdive</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-b0010421-cffc-485e-b8e2-8e0052717ede"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/_/40+Days/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-b0010421-cffc-485e-b8e2-8e0052717ede"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-33c00508-8a00-467e-aaad-75a8e9073258"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Slowdive/_/40+Days/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-33c00508-8a00-467e-aaad-75a8e9073258"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e672adb90be7fba064ad29a0ccc5de0f"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                36
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=TXhDshQ0IWI"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="TXhDshQ0IWI"
    data-youtube-url="https://www.youtube.com/watch?v=TXhDshQ0IWI"

    data-track-name="La Corolle"
    data-track-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/La+Corolle"
    
        data-artist-name="志方あきこ"
        data-artist-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="c71b10c8be0e954366b2fd49e0093e28"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="c71b10c8be0e954366b2fd49e0093e28"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/La+Corolle"
            
            
                title="La Corolle"
            
                class=""
            
        >La Corolle</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
            
            
                title="志方あきこ"
            
        >志方あきこ</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-de828b38-6e8f-494a-b1a6-14436f6d34fd"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/La+Corolle/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-de828b38-6e8f-494a-b1a6-14436f6d34fd"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-e1840ce7-4824-4ea3-98b3-21993bb0c5c6"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/La+Corolle/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-e1840ce7-4824-4ea3-98b3-21993bb0c5c6"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="c71b10c8be0e954366b2fd49e0093e28"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                37
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=pFxdDE0k1_Q"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="pFxdDE0k1_Q"
    data-youtube-url="https://www.youtube.com/watch?v=pFxdDE0k1_Q"

    data-track-name="Gila"
    data-track-url="/music/Beach+House/_/Gila"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="dda3713f23f1f0dc9f9abcdfbd501e6b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="dda3713f23f1f0dc9f9abcdfbd501e6b"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/Gila"
            
            
                title="Gila"
            
                class=""
            
        >Gila</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-64d84b10-aecf-41e4-ac38-c42ef76d5674"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/Gila/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-64d84b10-aecf-41e4-ac38-c42ef76d5674"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-47e0b90f-8a3f-4002-bbb8-303c0516909f"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/Gila/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-47e0b90f-8a3f-4002-bbb8-303c0516909f"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="dda3713f23f1f0dc9f9abcdfbd501e6b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                38
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=n5cgzcjqOtE"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="n5cgzcjqOtE"
    data-youtube-url="https://www.youtube.com/watch?v=n5cgzcjqOtE"

    data-track-name="Kim &amp; Jessie"
    data-track-url="/music/M83/_/Kim+&amp;+Jessie"
    
        data-artist-name="M83"
        data-artist-url="/music/M83"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="97a1cad87718eec08c36dba03f8f5dea"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="97a1cad87718eec08c36dba03f8f5dea"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/M83/_/Kim+&amp;+Jessie"
            
            
                title="Kim &amp; Jessie"
            
                class=""
            
        >Kim &amp; Jessie</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/M83"
            
            
                title="M83"
            
        >M83</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-80e5963d-e65e-4f46-9830-8a9cb29b27cc"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/M83/_/Kim+&amp;+Jessie/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-80e5963d-e65e-4f46-9830-8a9cb29b27cc"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-0601efc6-baff-4168-93d0-3a4060094338"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/M83/_/Kim+&amp;+Jessie/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-0601efc6-baff-4168-93d0-3a4060094338"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="97a1cad87718eec08c36dba03f8f5dea"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                39
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=GD-EdxU-rm4"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="GD-EdxU-rm4"
    data-youtube-url="https://www.youtube.com/watch?v=GD-EdxU-rm4"

    data-track-name="Bluebeard"
    data-track-url="/music/Cocteau+Twins/_/Bluebeard"
    
        data-artist-name="Cocteau Twins"
        data-artist-url="/music/Cocteau+Twins"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="2052a095679eb990a7db88c44ddfd216"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="2052a095679eb990a7db88c44ddfd216"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Cocteau+Twins/_/Bluebeard"
            
            
                title="Bluebeard"
            
                class=""
            
        >Bluebeard</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Cocteau+Twins"
            
            
                title="Cocteau Twins"
            
        >Cocteau Twins</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-184a0b04-68c3-4c6b-9afc-c129533bae86"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/_/Bluebeard/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-184a0b04-68c3-4c6b-9afc-c129533bae86"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-f73a05e9-7450-47f9-a898-a56b83bd0146"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Cocteau+Twins/_/Bluebeard/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-f73a05e9-7450-47f9-a898-a56b83bd0146"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="2052a095679eb990a7db88c44ddfd216"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                40
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=N5kKenry2kU"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="N5kKenry2kU"
    data-youtube-url="https://www.youtube.com/watch?v=N5kKenry2kU"

    data-track-name="Take Care"
    data-track-url="/music/Beach+House/_/Take+Care"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="eaaa58e6261ce3ee7a6bf00fcd938731"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="eaaa58e6261ce3ee7a6bf00fcd938731"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/Take+Care"
            
            
                title="Take Care"
            
                class=""
            
        >Take Care</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-b8a4e615-5d68-4b4b-9d93-38de23e1a8cd"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/Take+Care/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-b8a4e615-5d68-4b4b-9d93-38de23e1a8cd"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-4e209f9b-487f-4fca-8198-47224c4459af"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/Take+Care/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-4e209f9b-487f-4fca-8198-47224c4459af"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="eaaa58e6261ce3ee7a6bf00fcd938731"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                41
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=h_ICl20EJjY"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="h_ICl20EJjY"
    data-youtube-url="https://www.youtube.com/watch?v=h_ICl20EJjY"

    data-track-name="Pandora"
    data-track-url="/music/Cocteau+Twins/_/Pandora"
    
        data-artist-name="Cocteau Twins"
        data-artist-url="/music/Cocteau+Twins"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="3c070e8685e4de7055d6b699caa08aa7"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="3c070e8685e4de7055d6b699caa08aa7"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Cocteau+Twins/_/Pandora"
            
            
                title="Pandora"
            
                class=""
            
        >Pandora</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Cocteau+Twins"
            
            
                title="Cocteau Twins"
            
        >Cocteau Twins</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-6150f188-e540-4e60-911e-d3c4f5467962"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/_/Pandora/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-6150f188-e540-4e60-911e-d3c4f5467962"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-77585995-ccf3-4eda-ac0c-889017aada27"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Cocteau+Twins/_/Pandora/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-77585995-ccf3-4eda-ac0c-889017aada27"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="3c070e8685e4de7055d6b699caa08aa7"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                42
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=pVhNi5cU8mo"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="pVhNi5cU8mo"
    data-youtube-url="https://www.youtube.com/watch?v=pVhNi5cU8mo"

    data-track-name="Vapour Trail"
    data-track-url="/music/Ride/_/Vapour+Trail"
    
        data-artist-name="Ride"
        data-artist-url="/music/Ride"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="227c6b359b486e8d73498ae1ca49374d"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="227c6b359b486e8d73498ae1ca49374d"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Ride/_/Vapour+Trail"
            
            
                title="Vapour Trail"
            
                class=""
            
        >Vapour Trail</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Ride"
            
            
                title="Ride"
            
        >Ride</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-334b082d-4f18-43a5-8eb8-0d44d13b8a8c"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Ride/_/Vapour+Trail/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-334b082d-4f18-43a5-8eb8-0d44d13b8a8c"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-fa3e132b-9228-4a2b-95e7-51ef449e3851"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Ride/_/Vapour+Trail/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-fa3e132b-9228-4a2b-95e7-51ef449e3851"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="227c6b359b486e8d73498ae1ca49374d"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                43
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=gY8iy8S0S4w"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="gY8iy8S0S4w"
    data-youtube-url="https://www.youtube.com/watch?v=gY8iy8S0S4w"

    data-track-name="Graveyard Girl"
    data-track-url="/music/M83/_/Graveyard+Girl"
    
        data-artist-name="M83"
        data-artist-url="/music/M83"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="2372c9ebb8bf99f00ef559d4d2f96f49"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="2372c9ebb8bf99f00ef559d4d2f96f49"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/M83/_/Graveyard+Girl"
            
            
                title="Graveyard Girl"
            
                class=""
            
        >Graveyard Girl</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/M83"
            
            
                title="M83"
            
        >M83</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-17d7492f-7748-4596-b48e-e67d2f35d1a3"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/M83/_/Graveyard+Girl/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-17d7492f-7748-4596-b48e-e67d2f35d1a3"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-a39d7513-c610-41c9-beb6-78803385742d"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/M83/_/Graveyard+Girl/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-a39d7513-c610-41c9-beb6-78803385742d"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="2372c9ebb8bf99f00ef559d4d2f96f49"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                44
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=xKFIJSTGtTM"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="xKFIJSTGtTM"
    data-youtube-url="https://www.youtube.com/watch?v=xKFIJSTGtTM"

    data-track-name="Half Asleep"
    data-track-url="/music/School+of+Seven+Bells/_/Half+Asleep"
    
        data-artist-name="School of Seven Bells"
        data-artist-url="/music/School+of+Seven+Bells"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e73224f1d2002778b9c3a69b037449c3"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="e73224f1d2002778b9c3a69b037449c3"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/School+of+Seven+Bells/_/Half+Asleep"
            
            
                title="Half Asleep"
            
                class=""
            
        >Half Asleep</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/School+of+Seven+Bells"
            
            
                title="School of Seven Bells"
            
        >School of Seven Bells</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-df1b1740-7b60-4d16-8b91-fb9dfad4051b"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/School+of+Seven+Bells/_/Half+Asleep/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-df1b1740-7b60-4d16-8b91-fb9dfad4051b"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-51168ac8-b82e-42f7-8519-c3ad35d3f5fa"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/School+of+Seven+Bells/_/Half+Asleep/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-51168ac8-b82e-42f7-8519-c3ad35d3f5fa"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e73224f1d2002778b9c3a69b037449c3"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                45
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=Nru6NHBSL1I"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="Nru6NHBSL1I"
    data-youtube-url="https://www.youtube.com/watch?v=Nru6NHBSL1I"

    data-track-name="Used to Be"
    data-track-url="/music/Beach+House/_/Used+to+Be"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e68489c2df0e6ffee8488570258ed5c6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="e68489c2df0e6ffee8488570258ed5c6"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/Used+to+Be"
            
            
                title="Used to Be"
            
                class=""
            
        >Used to Be</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-3385c844-a419-4ced-9708-5c5b0e985356"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/Used+to+Be/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-3385c844-a419-4ced-9708-5c5b0e985356"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-7b92dc77-84ee-43ee-ab5f-757dee1c6ccc"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/Used+to+Be/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-7b92dc77-84ee-43ee-ab5f-757dee1c6ccc"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e68489c2df0e6ffee8488570258ed5c6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                46
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=VX4saFhSzx4"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="VX4saFhSzx4"
    data-youtube-url="https://www.youtube.com/watch?v=VX4saFhSzx4"

    data-track-name="Persephone"
    data-track-url="/music/Cocteau+Twins/_/Persephone"
    
        data-artist-name="Cocteau Twins"
        data-artist-url="/music/Cocteau+Twins"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="c970c69019ac8760430fcee4b22bfda5"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="c970c69019ac8760430fcee4b22bfda5"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Cocteau+Twins/_/Persephone"
            
            
                title="Persephone"
            
                class=""
            
        >Persephone</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Cocteau+Twins"
            
            
                title="Cocteau Twins"
            
        >Cocteau Twins</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-52b14454-8268-404a-9f65-d10a276a9ac5"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/_/Persephone/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-52b14454-8268-404a-9f65-d10a276a9ac5"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-546faf3b-6938-4c93-9194-75aaf8302d21"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Cocteau+Twins/_/Persephone/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-546faf3b-6938-4c93-9194-75aaf8302d21"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="c970c69019ac8760430fcee4b22bfda5"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                47
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=y8odHyZp5IQ"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="y8odHyZp5IQ"
    data-youtube-url="https://www.youtube.com/watch?v=y8odHyZp5IQ"

    data-track-name="10 Mile Stereo"
    data-track-url="/music/Beach+House/_/10+Mile+Stereo"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="650bc174f9701b9ee997280a7d87cd79"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="650bc174f9701b9ee997280a7d87cd79"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/10+Mile+Stereo"
            
            
                title="10 Mile Stereo"
            
                class=""
            
        >10 Mile Stereo</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-383786d5-b168-4b45-b15f-45fe1edf90d3"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/10+Mile+Stereo/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-383786d5-b168-4b45-b15f-45fe1edf90d3"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-dd2e0edd-e1e8-4e34-8d0d-720d7a7f89be"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/10+Mile+Stereo/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-dd2e0edd-e1e8-4e34-8d0d-720d7a7f89be"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="650bc174f9701b9ee997280a7d87cd79"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                48
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=hiYBpCUNddM"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="hiYBpCUNddM"
    data-youtube-url="https://www.youtube.com/watch?v=hiYBpCUNddM"

    data-track-name="Better Times"
    data-track-url="/music/Beach+House/_/Better+Times"
    
        data-artist-name="Beach House"
        data-artist-url="/music/Beach+House"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="ad2e741bbee46eceddda6ab215e2c8df"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="ad2e741bbee46eceddda6ab215e2c8df"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beach+House/_/Better+Times"
            
            
                title="Better Times"
            
                class=""
            
        >Better Times</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beach+House"
            
            
                title="Beach House"
            
        >Beach House</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-3501b269-7540-43db-acbb-f0052b25a558"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/_/Better+Times/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-3501b269-7540-43db-acbb-f0052b25a558"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-0c471178-729b-4a2c-8c37-4ed4a33635b0"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beach+House/_/Better+Times/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-0c471178-729b-4a2c-8c37-4ed4a33635b0"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="ad2e741bbee46eceddda6ab215e2c8df"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                49
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=RQKD-ftwqCM"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="RQKD-ftwqCM"
    data-youtube-url="https://www.youtube.com/watch?v=RQKD-ftwqCM"

    data-track-name="To the Lighthouse"
    data-track-url="/music/Memoryhouse/_/To+the+Lighthouse"
    
        data-artist-name="Memoryhouse"
        data-artist-url="/music/Memoryhouse"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="0ba509615e771731e8d439780304fbab"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="0ba509615e771731e8d439780304fbab"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Memoryhouse/_/To+the+Lighthouse"
            
            
                title="To the Lighthouse"
            
                class=""
            
        >To the Lighthouse</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Memoryhouse"
            
            
                title="Memoryhouse"
            
        >Memoryhouse</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-7527b4f8-9627-4510-95f5-02071ffdc82f"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Memoryhouse/_/To+the+Lighthouse/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-7527b4f8-9627-4510-95f5-02071ffdc82f"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-428deb8d-5554-409a-8f5f-b77edcde6274"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Memoryhouse/_/To+the+Lighthouse/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-428deb8d-5554-409a-8f5f-b77edcde6274"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="0ba509615e771731e8d439780304fbab"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >

        

        
            <td class="chartlist-index">
                50
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=-_XmM-XccH0"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="-_XmM-XccH0"
    data-youtube-url="https://www.youtube.com/watch?v=-_XmM-XccH0"

    data-track-name="Navigatoria"
    data-track-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Navigatoria"
    
        data-artist-name="志方あきこ"
        data-artist-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="5b5b8aec1b109bbe978db072bdc9fd14"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="5b5b8aec1b109bbe978db072bdc9fd14"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Navigatoria"
            
            
                title="Navigatoria"
            
                class=""
            
        >Navigatoria</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
            
            
                title="志方あきこ"
            
        >志方あきこ</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-3905ef53-e5b4-4874-91da-2a625f4f69e8"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Navigatoria/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-3905ef53-e5b4-4874-91da-2a625f4f69e8"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-aa868090-a5ab-4c9f-85bd-589fec3f1487"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/_/Navigatoria/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-aa868090-a5ab-4c9f-85bd-589fec3f1487"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="5b5b8aec1b109bbe978db072bdc9fd14"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fdream%2Bpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/dream%2Bpop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
        </tbody>
    </table>


                </section>
            
            
    
        

        

        <nav class="pagination">
            <h2 class="sr-only">Pagination</h2>

            <ul class="pagination-list">
                
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                            aria-current="page"
                        
                    >
                        
                            
                               <span>1</span>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=2">2</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=3">3</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=4">4</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                                pagination-page--hide-mobile
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=5">5</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                                pagination-page--hide-mobile
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=6">6</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                                pagination-page--ellipsis
                            
                        "
                        
                    >
                        
                            <span>…</span>
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=20">20</a>
                            
                        
                    </li>
                
                
                    <li class="pagination-next" data-pagination-next-link>
                        <a href="?page=2">Next</a>
                    </li>
                
            </ul>
        </nav>
    

        </div>
        <div class="col-sidebar">
            
    

    

    
    


    

    
    
        
        
            <div id="mpu_plus_top" data-ad="mpu_plus_top" class="mpu_plus_top lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;mpu_plus_top&#34;, &#34;sizes&#34;: [[300, 250], [300, 600]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mpu">
                Don't want to see ads? <a href="/pro" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Upgrade Now</a>
            </p>
        
    


    

    
        
    
        <div
            class="
                tonefuze
                
                    tonefuze--desktop
                    hidden-xs
                
                
            "
            data-require="ads/tonefuze"

            
                id="tonefuze-desktop-d8e4b007-2c3c-4279-be89-0a7f6dbc4e4d"
                data-tonefuze-id="100000054"
            

            
                
                data-tonefuze-artist="Post Malone"
            
        ></div>
    

    

    
        
    
        <div
            class="
                tonefuze
                
                    tonefuze--mobile
                    visible-xs
                
                
            "
            data-require="ads/tonefuze"

            
                id="tonefuze-mobile-b1523f17-4905-4e39-979e-fa4cfac9a8c1"
                data-tonefuze-id="100000055"
            

            
                
                data-tonefuze-artist="BTS"
            
        ></div>
    

    

    
    
        <section class="share-desktop">
            
    <h2 class="share-heading">
        
            Share this tag:
        
    </h2>

            
    
    
    

    <ul class="share-options">
        <li class="share-option ">
            <a
                href="https://www.facebook.com/sharer/sharer.php?ref=facebooklink&amp;u=https://www.last.fm/tag/dream%2Bpop/tracks"
                data-analytics-social="2"
                target="_blank"
            >
                <img src="/static/images/icons/facebook.e0cc15e8e1d2.svg" alt="Facebook"></a>
            </a>
        </li>
        <li class="share-option ">
            <a
                href="https://twitter.com/intent/tweet?url=https://www.last.fm/tag/dream%2Bpop/tracks&amp;lang=en&amp;text=Check+out+dream+pop"
                data-analytics-social="8"
                target="_blank"
            >
                <img src="/static/images/icons/twitter.841d4ebdbe86.svg" alt="Twitter"></a>
            </a>
        </li>
    </ul>

        </section>
    


    

        
    

        
    
        
        
            <div id="mobile_pos_4" data-ad="mobile_pos_4" class="mobile_pos_4 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_4&#34;, &#34;sizes&#34;: [[300, 250], [320, 50]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;4&#34;}}'></div>
        
        
    

        
    
        
            
        
        <div class="related-content" id="taboola-right-rail-thumbnails" data-require="ads/taboola" data-taboola-layout="None"></div>
    

        
    <div class="related-ads">
            <div
                
                    data-searchlinks-desktop
                
            ></div>
        </div>


    

    
    
    
        
        
            <div id="mpu_bottom" data-ad="mpu_bottom" class="mpu_bottom lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;mpu_bottom&#34;, &#34;sizes&#34;: [[300, 250]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}}'></div>
        
        
    


        </div>
    </div>

    </div>


        


        
    <div class="container">
        
    
        
        
            <div id="leader_bottom" data-ad="leader_bottom" class="leader_bottom lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;leader_bottom&#34;, &#34;sizes&#34;: [[728, 90], [970, 66], [728, 92]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}}'></div>
        
        
    

    </div>


        
            <div class="container page-content visible-xs">
                
    <div class="related-ads">
            <div
                
                    data-searchlinks-mobile
                
            ></div>
        </div>

            </div>
        
    </div>

    <div id="qa-page-load"></div>

    
    
        
            
    
    
    
    <div
        class="lazy-features-footer"
        data-require="components/lazy-load-v3"
        data-lazy-load-content="/features/partial/footer"
        data-lazy-load-when-on-screen
        data-lazy-load-inverted-bg
    ></div>

        
    


    
    <footer class="footer" itemscope itemtype="http://schema.org/Organization">
        <link itemprop="url" href="https://www.last.fm">

        <div class="footer-top">
            <div class="container">
                <div class="footer-top-row">
                    <div class="footer-top-col">
                        <h2 class="footer-heading">Company</h2>
                        <ul class="footer-links">
                            <li><a href="/about">About Last.fm</a></li>
                            <li><a href="/about/contact">Contact Us</a></li>
                            <li><a href="/about/jobs">Jobs</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Help</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Track My Music</a></li>
                            
                                <li><a href="https://support.last.fm/" target="_BLANK">Community Support</a></li>
                            
                            <li><a href="/help/guidelines">Community Guidelines</a></li>
                            
                                <li><a href="http://cbsi.force.com/CBSi/lastfm" target="_BLANK">Help</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Goodies</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Download Scrobbler</a></li>
                            <li><a href="/api">Developer API</a></li>
                            <li><a href="/music/+free-music-downloads">Free Music Downloads</a></li>
                            <li><a href="https://store.last.fm">Merchandise</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Account</h2>
                        <ul class="footer-links">
                            
                                <li><a href="/join">Join</a></li>
                                <li><a href="https://secure.last.fm/login">Login</a></li>
                                <li><a href="/pro">Subscribe</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Follow Us</h2>
                        <ul class="footer-links">
                            <li><a itemprop="sameAs" target="_blank" href="https://www.facebook.com/lastfm">Facebook</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://twitter.com/lastfm">Twitter</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.instagram.com/last_fm">Instagram</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.youtube.com/user/lastfm">YouTube</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-xs-12 col-sm-9">
                        <ul id="language-selector">
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                            footer-language--active
                                        
                                    "
                                >
                                    
                                        <strong>English</strong><span class="sr-only">current language</span>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="de" />
                                            <button class="mimic-link" name="de" type="submit">Deutsch</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="es" />
                                            <button class="mimic-link" name="es" type="submit">Español</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="fr" />
                                            <button class="mimic-link" name="fr" type="submit">Français</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="it" />
                                            <button class="mimic-link" name="it" type="submit">Italiano</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="ja" />
                                            <button class="mimic-link" name="ja" type="submit">日本語</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="pl" />
                                            <button class="mimic-link" name="pl" type="submit">Polski</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="pt" />
                                            <button class="mimic-link" name="pt" type="submit">Português</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="ru" />
                                            <button class="mimic-link" name="ru" type="submit">Русский</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="sv" />
                                            <button class="mimic-link" name="sv" type="submit">Svenska</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="tr" />
                                            <button class="mimic-link" name="tr" type="submit">Türkçe</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='EJixJ2afnBb2e0zuQRQdQNMX5BY06G5H' />
                                            <input type="hidden" name="language" value="zh" />
                                            <button class="mimic-link" name="zh" type="submit">简体中文</button>
                                        </form>
                                    
                                </li>
                            
                        </ul>
                        
                        <p class="footer-timezone">
                            
                                Time zone: <strong>Europe/Minsk</strong>
                            
                        </p>

                        <div class="footer-legal">
                            <ul>
                                <li class="footer-legal-item"><a rel="nofollow" href="http://www.cbsinteractive.com/">CBS Interactive</a> © 2021 <span itemprop="name">Last.fm</span> Ltd. All rights reserved</li>
                                <li class="footer-legal-item"><a href="/legal/terms">Terms of Use</a></li>
                                <li class="footer-legal-item"><a href="/legal/privacy">Privacy Policy</a></li>
                                <li class="footer-legal-item"><a href="/legal">Legal Policies</a></li>
                                
                                    <li class="footer-legal-item"><a href="https://ca.privacy.cbs">California Privacy/Info We Collect</a></li>
                                    <li class="footer-legal-item"><a href="https://ca.privacy.cbs/donotsell">California Do Not Sell My Info</a></li>
                                
                                <li class="footer-legal-item"><a target="_blank" href="http://www.cbsinteractive.com/careers">Jobs at CBSi</a></li>
                                <li class="footer-legal-item"><a rel="nofollow" href="http://www.last.fm">Last.fm Music</a></li>
                            </ul>
                            
                        </div>
                    </div>


                    <div class="logo col-xs-12 col-sm-3">
                        <p>Audioscrobbler</p>
                        <img src="/static/images/footer_logo@2x.49ca51948b0a.png"
                             width="37"
                             height="20"
                             alt="Last.fm 'as' logo"
                             loading="lazy"
                        >
                    </div>
                </div>
            </div>
        </div>

        <div class="feedback-message">
    <div class="feedback-message-inner">
        <p>
            <span class="hidden-xs">
                Let us know what you think of the Last.fm website.
            </span>
            <a href="http://cbsi.force.com/CBSi/template_lfmfbk?p_userid=" target="_blank">Leave feedback</a>
        </p>
    </div>
</div>
    </footer>


    <section class="debug-log">
    <h2 class="debug-log-heading">API Calls</h2>
    
</section>


        </div>
        
    
        <div id="data-ads"
            data-ads-beacon
            data-ads-targeting='{&#34;geo&#34;: &#34;BY&#34;, &#34;lang&#34;: &#34;en&#34;, &#34;beta&#34;: &#34;yes&#34;, &#34;ptype&#34;: &#34;tag_tracks&#34;, &#34;tag&#34;: &#34;dreampop,shoegaze,indie,indiepop,electronic,ethereal,femalevocalists&#34;}'
            data-ads-unitname='/8264/row-lastfm/tag/tracks'
            data-ads-unitname-mobile='/8264/maw-lastfm/tag/tracks'
            data-ads-zone='/tag/tracks'
            data-ads-env='prod'
        ></div>
    

    </div>

    
        <div
            data-require="player/providers/spotify/spotify-provider"
            data-spotify-auth-modal="/player/modal/spotify"
            data-spotify-premium-modal="/player/modal/spotify-premium"
            data-spotify-inactive-modal="/player/modal/spotify-inactive"
            data-spotify-initial-device-modal="/player/modal/spotify-initial-device-detection"
        ></div>

        <div
            data-require="player/providers/youtube/youtube-provider"
            class="video-player"
            aria-hidden="true"
            id="youtube-video"
        >
            <div class="video-player-inner-wrap">
                <div class="video-player-embed js-player"></div>
                <button class="
                    video-player-close
                    js-close-player
                ">Close</button>
            </div>
        </div>
    


        
            
        
        
            
    
        
        
            <div id="intromercial" data-ad="intromercial" class="intromercial lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;intromercial&#34;, &#34;out_of_page&#34;: true}'></div>
        
        
    

            
    
        
        
            <div id="mobile_intromercial" data-ad="mobile_intromercial" class="mobile_intromercial lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_intromercial&#34;, &#34;is_mobile&#34;: true, &#34;out_of_page&#34;: true}'></div>
        
        
    

        

        <script class="js-modal-template" type="text/template">
            <div class="modal-dialog" role="dialog" aria-labelledby="modal-label">
                <div class="modal-content">
                    <div class="modal-actions">
                        <button class="modal-dismiss js-close">Close</button>
                    </div>
                    <div js-modal-body class="modal-body">
                    </div>
                </div>
            </div>
        </script>

        <script>
            var immediateUseBidBarrelFunctions = ['auction', 'initialize', 'setTargeting', 'destroySlots', 'setConfig'];
            (function(a){
                var w=window,b='BidBarrel',q='queue';w[b]=w[b]?w[b]:{};w[b][q]=w[b][q]?w[b][q]:[];
                a.forEach(function(z){w[b][z]=w[b][z]||function(){var c=arguments;w[b][q].push(function(r){w[b][z].apply(w[b],c);r()})}});
            })(immediateUseBidBarrelFunctions);
        </script><script id="bb-lib" async src="https://at.cbsi.com/lib/dist/prod/bidbarrel-lastfm.min.js"></script>
        
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--adfree
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Browse ad-free</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageAdfree"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageAdfree"
            ></a>
        </section>
    </div></div>

            </script>
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--support
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Show your support</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageSupport"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageSupport"
            ></a>
        </section>
    </div></div>

            </script>
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--benefits
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Get exclusive benefits</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageBenefits"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageBenefits"
            ></a>
        </section>
    </div></div>

            </script>
        

        <script>
            window.lfmDomReadyCallback && window.lfmDomReadyCallback();
            window.lfmDomReady = true;
        </script>
        
            <link
                href="/static/styles/build/app-f3a2d2cf58.f3a2d2cf58e0.css"
                rel="preload"
                as="style"
                charset="utf-8"
                data-require="shim/rel-preload"
                media="(min-width: 768px)" 
            >
        
    </body>
</html>
  recorded_at: Tue, 26 Jan 2021 16:45:37 GMT
recorded_with: VCR 6.0.0
