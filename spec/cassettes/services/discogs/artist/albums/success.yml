---
http_interactions:
- request:
    method: get
    uri: https://www.discogs.com/artist/6271?page=2&sort=year,desc&subtype=Albums&type=Releases
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.1p64
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.discogs.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 16 Jul 2021 16:21:54 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Set-Cookie:
      - __cf_bm=ff70431044d649195e92f5a47f34cf1d209f75c0-1626452514-1800-AUQZC+cVRWmjbQ5ZlrrUpGaZrV3JgciPhTwYXNjTZ9NQTEOJ7nO9xOGP6U1CDcTyn8o4ZW15pcEyyQ7DZa6zgYQ=;
        path=/; expires=Fri, 16-Jul-21 16:51:54 GMT; domain=.discogs.com; HttpOnly;
        Secure; SameSite=None
      - language2=en; Domain=www.discogs.com; Path=/
      - sid=d45c134d902d362f7b80c03d563fcebc; Domain=www.discogs.com; Expires=Mon,
        14-Jul-2031 16:21:53 GMT; Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=15724800
      Cf-Cache-Status:
      - DYNAMIC
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 66fc90f18d980d3a-ARN
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html
    class="is_not_mobile needs_reduced_ui "
    lang="en"
    xmlns:og="http://opengraphprotocol.org/schema/"
    xmlns:fb="http://www.facebook.com/2008/fbml"
>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta http-equiv="content-language" content="en">
        <meta http-equiv="pragma" content="no-cache" />
        <meta http-equiv="expires" content="-1" />

        <!-- OT will rewrite convert these to javascript and update our consent module accordingly -->
        <script type="text/plain" class="optanon-category-C0002">
            window.consent.resolveGroup(window.consent.PERFORMANCE_GROUP)
        </script>
        <script type="text/plain" class="optanon-category-C0003">
            window.consent.resolveGroup(window.consent.FUNCTIONALITY_GROUP)
        </script>
        <script type="text/plain" class="optanon-category-C0004">
            window.consent.resolveGroup(window.consent.TARGETING_GROUP)
        </script>

                <meta id="viewport" name="viewport" content="initial-scale=1.0,width=device-width" />

        <script>
            if (window.innerWidth <= 600) document.getElementById('viewport').setAttribute('content', 'initial-scale=1.0, minimum-scale 1.0, width="device-width"');
                                            </script>
        
        <script type="text/javascript">
            window.__start = new Date().getTime();
        </script>

        <script type="text/javascript">
            // dataLayer additions consumed by Google Tag Manager for later submission
            // to Google Analytics - this object is added to _every_ page.
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
                'event': 'dataLayer-initialized',
                'userId': undefined,
                'loggedIn': false,
                'siteVersion': undefined,
                'pageCategory': "artist.view"
            });
        </script>

                    <meta name="description" content="Explore releases from Sparks at Discogs. Shop for Vinyl, CDs and more from Sparks at the Discogs Marketplace.">
                <meta property="fb:app_id" content="117175028305858"><meta property="og:image" content="https://img.discogs.com/3H9X7ZPmKNzzG97vqJhSQUMAOZc=/455x371/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622749890-3111.jpeg.jpg"><meta property="og:site_name" content="Discogs"><meta property="og:title" content="Sparks"><meta property="og:type" content="musician"><meta property="og:url" content="https://www.discogs.com/artist/6271-Sparks"><meta property="twitter:card" content="summary"><meta property="twitter:description" content="Sparks Discography at Discogs"><meta property="twitter:image" content="https://img.discogs.com/3H9X7ZPmKNzzG97vqJhSQUMAOZc=/455x371/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622749890-3111.jpeg.jpg"><meta property="twitter:site" content="@discogs"><meta property="twitter:title" content="Sparks"><meta property="twitter:url" content="https://api.discogs.com/artists/6271">                    
                            <script type="text/javascript" src="https://lngtd.com/discogs_a.js"></script>
            
            <meta property="og:description" content="Explore releases from Sparks at Discogs. Shop for Vinyl, CDs and more from Sparks at the Discogs Marketplace.">

                        <script type="application/ld+json" id="artist_schema">
        {
 "@context": "http://schema.org",
 "@type": "MusicGroup",
 "@id": "https://www.discogs.com/artist/6271-Sparks",
 "name": "Sparks",
 "image": "https://img.discogs.com/3H9X7ZPmKNzzG97vqJhSQUMAOZc=/455x371/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622749890-3111.jpeg.jpg",
 "description": "Brothers Ron and Russell Mael from Los Angeles, USA have been making diverse music since 1969 under various incarnations of Sparks. In 1979 they ditched the guitars and keyboards of glam geek rock and started working with Italian producer Giorgio Moroder, beginning a love affair with electronic music. Since then they have worked with a variety of people including Finitribe, Les Rita Mitsouko, Erasure, Faith No More and Franz Ferdinand.",
 "sameAs": [
  "http://www.allsparks.com/",
  "http://en.wikipedia.org/wiki/Sparks_%28band%29",
  "https://www.facebook.com/sparksofficial",
  "https://twitter.com/sparksofficial",
  "https://www.instagram.com/sparks_official/",
  "https://www.youtube.com/user/SparksOfficialVideo/featured",
  "http://graphikdesigns.free.fr/halfnelson.html",
  "https://www.sparkives.com/"
 ],
 "member": [
  {
   "@type": "Person",
   "@id": "https://www.discogs.com/artist/258985-Dean-Menta",
   "name": "Dean Menta"
  },
  {
   "@type": "Person",
   "@id": "https://www.discogs.com/artist/133319-Ron-Mael",
   "name": "Ron Mael"
  },
  {
   "@type": "Person",
   "@id": "https://www.discogs.com/artist/133320-Russell-Mael",
   "name": "Russell Mael"
  },
  {
   "@type": "Person",
   "@id": "https://www.discogs.com/artist/101275-Tammy-Glover",
   "name": "Tammy Glover"
  }
 ],
 "album": [
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Sparks-Introducing-Sparks/master/478556",
   "name": "Introducing Sparks",
   "datePublished": 1977
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Sparks-Big-Beat/master/87048",
   "name": "Big Beat",
   "datePublished": 1976
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Sparks-Indiscreet/master/87057",
   "name": "Indiscreet",
   "datePublished": 1975
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Sparks-Propaganda/master/87068",
   "name": "Propaganda",
   "datePublished": 1974
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Sparks-Kimono-My-House/master/87047",
   "name": "Kimono My House",
   "datePublished": 1974
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Sparks-A-Woofer-In-Tweeters-Clothing/master/87042",
   "name": "A Woofer In Tweeter's Clothing",
   "datePublished": 1972
  },
  {
   "@type": "MusicAlbum",
   "@id": "https://www.discogs.com/Sparks-Sparks/master/92474",
   "name": "Halfnelson",
   "datePublished": 1971
  }
 ]
}
    </script>
            
                
        <title>Sparks | Discography | Discogs</title>
                                                                <link rel="alternate" hreflang="en" href="https://www.discogs.com/artist/6271?type=Releases&subtype=Albums&page=2&sort=year%2Cdesc" />
                                                                                    <link rel="alternate" hreflang="de" href="https://www.discogs.com/de/artist/6271?type=Releases&subtype=Albums&page=2&sort=year%2Cdesc" />
                                                                                    <link rel="alternate" hreflang="es" href="https://www.discogs.com/es/artist/6271?type=Releases&subtype=Albums&page=2&sort=year%2Cdesc" />
                                                                                    <link rel="alternate" hreflang="fr" href="https://www.discogs.com/fr/artist/6271?type=Releases&subtype=Albums&page=2&sort=year%2Cdesc" />
                                                                                    <link rel="alternate" hreflang="it" href="https://www.discogs.com/it/artist/6271?type=Releases&subtype=Albums&page=2&sort=year%2Cdesc" />
                                                                                    <link rel="alternate" hreflang="ja" href="https://www.discogs.com/ja/artist/6271?type=Releases&subtype=Albums&page=2&sort=year%2Cdesc" />
                                                                                    <link rel="alternate" hreflang="ko" href="https://www.discogs.com/ko/artist/6271?type=Releases&subtype=Albums&page=2&sort=year%2Cdesc" />
                                                                                    <link rel="alternate" hreflang="pt-BR" href="https://www.discogs.com/pt_BR/artist/6271?type=Releases&subtype=Albums&page=2&sort=year%2Cdesc" />
                                                                                    <link rel="alternate" hreflang="ru" href="https://www.discogs.com/ru/artist/6271?type=Releases&subtype=Albums&page=2&sort=year%2Cdesc" />
                                    
        <link rel="stylesheet" type="text/css" href="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/dst/stylesheets/discogs.css"  />
        

                    
    <link rel="stylesheet" type="text/css" href="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/dst/stylesheets/sections/artist.css"  />
    <link rel="stylesheet" type="text/css" href="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/dst/stylesheets/components/image-gallery.css"  />
                    <link rel="canonical" href="https://www.discogs.com/artist/6271-Sparks">
                        <link rel="icon" href="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/images/favicon.ico" />
        <link rel="icon" sizes="16x16" href="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/images/favicon-16x16.png" />
        <link rel="icon" sizes="32x32" href="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/images/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/images/favicon-96x96.png" />
        <link rel="apple-touch-icon" href="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/images/apple-touch-icon-precomposed.png" />
        <link rel="mask-icon" href="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/images/discogs-record-icon.svg" color="black">
        <script id="dsdata">
            function dsdata (){
                return {"activationHelpUrl": "/help/doc/activation", "apiServer": "https://api.discogs.com", "appEnv": "production", "assetBasePath": "99b2be0afb5f3a6c170161a706d0264aee9fc6f2/dst/", "assetsHost": "https://s.discogs.com/", "autocompleteUrl": "/search/ac", "cookieDomain": "www.discogs.com", "countryAbbr": "by", "countryName": "Belarus", "dataLayer": [], "defaultLocale": "en", "enableGaDebugging": false, "enableGaDebuggingVerbose": false, "enableGoogleAnalytics": true, "endpoint": "artist.view", "ga_pageview_page": "/artist.view", "ga_pageview_title": "artist.view", "isDiscogsApp": false, "isMobile": false, "locale": "en", "loginUrl": "https://www.discogs.com/login", "mp_web": {"cart_anon": true}, "recaptchaKey": "6LdGMgITAAAAAPG6lAC5r1yck_LpHUbQs4IbnNtV", "requireCookieConsent": false, "sentryKey": "https://387a0c015e78429ca256c602993e2b92@sentry.io/51758", "sha": "99b2be0afb5f3a6c170161a706d0264aee9fc6f2", "useSentry": true, "userIsAdmin": false, "userIsRegistered": false, "videos/macro:playlist": [{"id": "zzKOVQEk5BA", "thumbnail": "https://i.ytimg.com/vi/zzKOVQEk5BA/default.jpg", "file": "https://www.youtube.com/watch?v=zzKOVQEk5BA", "title": "Sparks   The Number One Song In Heaven Maxi", "description": "Written-By \u2013 Giorgio Moroder, Ron Mael, Russell Mael\n\nOriginal 12\u0027\u0027 Maxi 45rpm\nAriola \u200e\u2013 600.056\nNetherlands 1979", "duration": 420}, {"id": "2hOCNtEvx5M", "thumbnail": "https://i.ytimg.com/vi/2hOCNtEvx5M/default.jpg", "file": "https://www.youtube.com/watch?v=2hOCNtEvx5M", "title": "Sparks / Tryouts For The Human Race (Long)", "description": "Rare version of 7:54 minutes named Long.", "duration": 483}, {"id": "g3f9rbOEmps", "thumbnail": "https://i.ytimg.com/vi/g3f9rbOEmps/default.jpg", "file": "https://www.youtube.com/watch?v=g3f9rbOEmps", "title": "My Other Voice", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nMy Other Voice \u00b7 Sparks\n\nNo.1 In Heaven\n\n\u2117 1979 Lil\u0027 Beethoven\n\nReleased on: 1979-03-01\n\nAuto-generated by YouTube.", "duration": 296}, {"id": "tBtkSVJlwAc", "thumbnail": "https://i.ytimg.com/vi/tBtkSVJlwAc/default.jpg", "file": "https://www.youtube.com/watch?v=tBtkSVJlwAc", "title": "National Crime Awareness Week (13 Minutes in Heaven)", "description": "Provided to YouTube by BMG Rights Management (UK) Ltd\n\nNational Crime Awareness Week (13 Minutes in Heaven) \u00b7 Sparks\n\nGratuitous Sax \u0026 Senseless Violins\n\n\u2117 2019 Lil\u0027 Beethoven under exclusive license to BMG Rights Management (UK) Limited\n\nKeyboards: Ro", "duration": 786}, {"id": "iU4pwcQjE4c", "thumbnail": "https://i.ytimg.com/vi/iU4pwcQjE4c/default.jpg", "file": "https://www.youtube.com/watch?v=iU4pwcQjE4c", "title": "Sparks \u200e\u2013 Beat The Clock  12 1980", "description": "Elektra \u200e\u2013 AS-11412\n\nPhonographic Copyright (p) \u2013 Elektra Records\nPressed By \u2013 Specialty Records Corporation\nPublished By \u2013 Ackee Music, Inc.\nPublished By \u2013 Heath Levy Music Co. Inc.\nPublished By \u2013 April Music Inc.\n\nProducer \u2013 Giorgio Moro", "duration": 402}, {"id": "O-iw3yyLApQ", "thumbnail": "https://i.ytimg.com/vi/O-iw3yyLApQ/default.jpg", "file": "https://www.youtube.com/watch?v=O-iw3yyLApQ", "title": "Sparks - Tryouts For The Human Race (official video)", "description": "The official video for the single Tryouts For The Human Race from the 1979 album No. 1 Heaven.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow SPARKS on Instagram: htt", "duration": 199}, {"id": "JNX8YSTLzD0", "thumbnail": "https://i.ytimg.com/vi/JNX8YSTLzD0/default.jpg", "file": "https://www.youtube.com/watch?v=JNX8YSTLzD0", "title": "Sparks - When do I Get to Sing My Way (Plutone club mix)", "description": "http://www.discogs.com/Sparks-When-Do-I-Get-To-Sing-My-Way-2nd-Edition/release/324608", "duration": 344}, {"id": "7OygMu9SS68", "thumbnail": "https://i.ytimg.com/vi/7OygMu9SS68/default.jpg", "file": "https://www.youtube.com/watch?v=7OygMu9SS68", "title": "Sparks - Music That You Can Dance To (official video)", "description": "Official video for the 1985 single Music That You Can Dance To from the album Music That You Can Dance To. (Directed by Ron Mael and Russell Mael.)\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitt", "duration": 260}, {"id": "Z45lcOv9EM0", "thumbnail": "https://i.ytimg.com/vi/Z45lcOv9EM0/default.jpg", "file": "https://www.youtube.com/watch?v=Z45lcOv9EM0", "title": "Sparks - More Than a Sex Machine", "description": "More than a sex machine by Sparks, album \u0027Balls\u0027 (2000)\r\n\r\nLyrics\r\n\r\nI earned my reputation\r\nThen, when it was expected\r\nNow, there\u0027s a new equation\r\nWho wouldn\u0027t feel dejected\r\nBut I\u0027m much more than this\r\n\r\nMore than a sex machine\r\nI really do exist\r\nMo", "duration": 304}, {"id": "JoMCip83GZ4", "thumbnail": "https://i.ytimg.com/vi/JoMCip83GZ4/default.jpg", "file": "https://www.youtube.com/watch?v=JoMCip83GZ4", "title": "Sparks - Beat The Clock (official video)", "description": "The official video for the single Beat The Clock from the 1979 album No.1 In Heaven. (Directed by Millaney/Grant.)\n\nNo. 1 In Heaven \u2022 40th Anniversary Edition is released March 2019 on double LP/CD. Available for pre-order \u2192 http://store.allsparks.c", "duration": 233}, {"id": "Y-bNZDHSFhU", "thumbnail": "https://i.ytimg.com/vi/Y-bNZDHSFhU/default.jpg", "file": "https://www.youtube.com/watch?v=Y-bNZDHSFhU", "title": "Sparks - Alabamy Right", "description": "Clippings from various mid-70\u0027s mags. Articles and pics can be viewed here http://www.allsparks.com/forum/viewtopic.php?t=7921", "duration": 132}, {"id": "TVTH7OsNbhs", "thumbnail": "https://i.ytimg.com/vi/TVTH7OsNbhs/default.jpg", "file": "https://www.youtube.com/watch?v=TVTH7OsNbhs", "title": "Sparks - When I\u0027m With You (official video)", "description": "The official video for the single When I\u0027m With You from the 1980 album Terminal Jive directed by Millaney/Grant.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow SPARK", "duration": 206}, {"id": "rvWAMmtLZNY", "thumbnail": "https://i.ytimg.com/vi/rvWAMmtLZNY/default.jpg", "file": "https://www.youtube.com/watch?v=rvWAMmtLZNY", "title": "Sparks - When I\u0027m With You (1980) (Maxi 45T)", "description": "\u00c9norme succ\u00e8s \u00e0 sa sortie, ce single est un peu tomb\u00e9 aux oubliettes.......\n\nBonne \u00e9coute \u00e0 tous..............\n\n Sparks \u2013 Terminal Jive\nLabel: Underdog (5) \u2013 67.597\nFormat: Vinyl, LP, Album\nCountry: France      Sortie: 1980 \n\nSparks\nProfil:\nBrot", "duration": 346}, {"id": "7olmplFhkas", "thumbnail": "https://i.ytimg.com/vi/7olmplFhkas/default.jpg", "file": "https://www.youtube.com/watch?v=7olmplFhkas", "title": "Just Because You Love Me", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nJust Because You Love Me \u00b7 Sparks\n\nTerminal Jive\n\n\u2117 1980 Lil\u0027 Beethoven\n\nReleased on: 1980-01-28\n\nAuto-generated by YouTube.", "duration": 279}, {"id": "RzMFWFwbktk", "thumbnail": "https://i.ytimg.com/vi/RzMFWFwbktk/default.jpg", "file": "https://www.youtube.com/watch?v=RzMFWFwbktk", "title": "Sparks - Just Got Back From Heaven", "description": "Ron \u0026 Russell Mael - 2 Hip 4 Tv 1988", "duration": 244}, {"id": "1BCSacXbV6g", "thumbnail": "https://i.ytimg.com/vi/1BCSacXbV6g/default.jpg", "file": "https://www.youtube.com/watch?v=1BCSacXbV6g", "title": "Young Girls", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nYoung Girls \u00b7 Sparks\n\nTerminal Jive\n\n\u2117 1980 Lil\u0027 Beethoven\n\nReleased on: 1980-01-28\n\nAuto-generated by YouTube.", "duration": 292}, {"id": "_34IS79hxDQ", "thumbnail": "https://i.ytimg.com/vi/_34IS79hxDQ/default.jpg", "file": "https://www.youtube.com/watch?v=_34IS79hxDQ", "title": "This Town Ain\u0027t Big Enough for Both Of Us (feat. Faith No More)", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nThis Town Ain\u0027t Big Enough for Both Of Us (feat. Faith No More) \u00b7 Sparks \u00b7 Faith No More\n\nPlagiarism\n\n\u2117 1997 Lil\u0027 Beethoven\n\nReleased on: 1997-01-01\n\nAuto-generated by YouTube.", "duration": 181}, {"id": "6X7t9fz8RSw", "thumbnail": "https://i.ytimg.com/vi/6X7t9fz8RSw/default.jpg", "file": "https://www.youtube.com/watch?v=6X7t9fz8RSw", "title": "Sparks - When I\u0027m With You", "description": ", French TV  1980\n\n\u043d\u0430\u043b\u043e\u0436\u0435\u043d \u0441\u0442\u0435\u0440\u0435\u043e \u0437\u0432\u0443\u043a", "duration": 241}, {"id": "3YBmS5oaNwU", "thumbnail": "https://i.ytimg.com/vi/3YBmS5oaNwU/default.jpg", "file": "https://www.youtube.com/watch?v=3YBmS5oaNwU", "title": "Amateur Hour", "description": "Provided to YouTube by Universal Music Group\n\nAmateur Hour \u00b7 Sparks\n\nKimono My House\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2008-01-01\n\nAssociated  Performer, Keyboards: Ron Mael\nAssociated  Performer, ", "duration": 218}, {"id": "mTdc8mb5XUk", "thumbnail": "https://i.ytimg.com/vi/mTdc8mb5XUk/default.jpg", "file": "https://www.youtube.com/watch?v=mTdc8mb5XUk", "title": "Hospitality On Parade", "description": "Provided to YouTube by Universal Music Group\n\nHospitality On Parade \u00b7 Sparks\n\nIndiscreet\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Tony Visconti\nComposer  Lyricist: Ron Mael\n\nAuto-gen", "duration": 240}, {"id": "UNHgXpHR-XU", "thumbnail": "https://i.ytimg.com/vi/UNHgXpHR-XU/default.jpg", "file": "https://www.youtube.com/watch?v=UNHgXpHR-XU", "title": "National Crime Awareness Week (The Janet Leigh Mix)", "description": "Provided to YouTube by BMG Rights Management (UK) Ltd\n\nNational Crime Awareness Week (The Janet Leigh Mix) \u00b7 Sparks\n\nGratuitous Sax \u0026 Senseless Violins\n\n\u2117 2019 Lil\u0027 Beethoven under exclusive license to BMG Rights Management (UK) Limited\n\nKeyboards: Ron", "duration": 350}, {"id": "eUJ_ifjKopM", "thumbnail": "https://i.ytimg.com/vi/eUJ_ifjKopM/default.jpg", "file": "https://www.youtube.com/watch?v=eUJ_ifjKopM", "title": "Sparks - This Town Ain\u0027t Big Enough For Both Of Us (official video)", "description": "The original promo video for the hit single This Town Ain\u0027t Big Enough For Both Of Us from the 1974 album Kimono My House. Yes, years before there was an MTV!  (mono mix)\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on", "duration": 184}, {"id": "xaXYwdS_V2Q", "thumbnail": "https://i.ytimg.com/vi/xaXYwdS_V2Q/default.jpg", "file": "https://www.youtube.com/watch?v=xaXYwdS_V2Q", "title": "Sparks - Now That I Own The BBC (official video)", "description": "The official video for the single Now That I Own The BBC from the 1994 album Gratuitous Sax \u0026 Senseless Violins directed by Kuntzel + Deygas.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com", "duration": 233}, {"id": "6Hm4L4Tq-MI", "thumbnail": "https://i.ytimg.com/vi/6Hm4L4Tq-MI/default.jpg", "file": "https://www.youtube.com/watch?v=6Hm4L4Tq-MI", "title": "Fingertips", "description": "(SPARKS) audio\r\nWith a broken heart audio-swapped due to copyright-complaint; very sorry, even if I\u0027m not responsible", "duration": 255}, {"id": "weu3KnAhxhU", "thumbnail": "https://i.ytimg.com/vi/weu3KnAhxhU/default.jpg", "file": "https://www.youtube.com/watch?v=weu3KnAhxhU", "title": "Sparks - The Calm Before The Storm (official video)", "description": "Sparks official video for the 2000 single The Calm Before The Storm from the album Balls directed by Kuntzel + Deygas.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow ", "duration": 221}, {"id": "WNKIba_yZJo", "thumbnail": "https://i.ytimg.com/vi/WNKIba_yZJo/default.jpg", "file": "https://www.youtube.com/watch?v=WNKIba_yZJo", "title": "Sparks (with Jane Wiedlin) - Cool Places (official video)", "description": "The official video for the single Cool Places from the 1983 album In Outer Space. Directed by Graham Whiffler. The song features Jane Wiedlin from The Go-Go\u0027s.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: h", "duration": 206}, {"id": "1b9fU99KFHA", "thumbnail": "https://i.ytimg.com/vi/1b9fU99KFHA/default.jpg", "file": "https://www.youtube.com/watch?v=1b9fU99KFHA", "title": "So Important [Extremley Important Remix]", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nSo Important [Extremley Important Remix] \u00b7 Sparks \u00b7 Extremley Important\n\nInterior Design\n\n\u2117 1988 Lil\u0027 Beethoven\n\nReleased on: 1988-08-01\n\nAuto-generated by YouTube.", "duration": 425}, {"id": "FrzJKBBeRbI", "thumbnail": "https://i.ytimg.com/vi/FrzJKBBeRbI/default.jpg", "file": "https://www.youtube.com/watch?v=FrzJKBBeRbI", "title": "Sparks - Please Baby Please", "description": " ", "duration": 226}, {"id": "96d1cqM12eo", "thumbnail": "https://i.ytimg.com/vi/96d1cqM12eo/default.jpg", "file": "https://www.youtube.com/watch?v=96d1cqM12eo", "title": "Sparks: National Crime Awareness Week Video - Bates Motel Mix", "description": "", "duration": 146}, {"id": "IJr61z44m6c", "thumbnail": "https://i.ytimg.com/vi/IJr61z44m6c/default.jpg", "file": "https://www.youtube.com/watch?v=IJr61z44m6c", "title": "Beat the Clock [Extended Version]", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nBeat the Clock [Extended Version] \u00b7 Sparks\n\nNo. 1 In Heaven\n\n\u2117 2019 Lil\u0027 Beethoven Records\n\nReleased on: 1979-03-02\n\nAuto-generated by YouTube.", "duration": 406}, {"id": "NIzleISU5jw", "thumbnail": "https://i.ytimg.com/vi/NIzleISU5jw/default.jpg", "file": "https://www.youtube.com/watch?v=NIzleISU5jw", "title": "Beat the Clock", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nBeat the Clock \u00b7 Sparks\n\nNo. 1 In Heaven\n\n\u2117 2019 Lil\u0027 Beethoven Records\n\nReleased on: 1979-03-02\n\nAuto-generated by YouTube.", "duration": 264}, {"id": "P6I6yr7WDeg", "thumbnail": "https://i.ytimg.com/vi/P6I6yr7WDeg/default.jpg", "file": "https://www.youtube.com/watch?v=P6I6yr7WDeg", "title": "Sparks - The Number One Song In Heaven (official video)", "description": "The original and official video for the single The Number One Song In Heaven from the 1979 album No. 1 In Heaven.\n\nNo. 1 In Heaven \u2022 40th Anniversary Edition is released March 2019 on double LP/CD. Available for pre-order \u2192 http://store.allsparks.co", "duration": 231}, {"id": "5NNeZuB4qjg", "thumbnail": "https://i.ytimg.com/vi/5NNeZuB4qjg/default.jpg", "file": "https://www.youtube.com/watch?v=5NNeZuB4qjg", "title": "Sparks - Change", "description": "Sparks performing Change", "duration": 236}, {"id": "GJMUkLTBXEk", "thumbnail": "https://i.ytimg.com/vi/GJMUkLTBXEk/default.jpg", "file": "https://www.youtube.com/watch?v=GJMUkLTBXEk", "title": "Wildchild - Renegade Master (Fatboy Slim Old Skool Mix)", "description": "(Fatboyslim Norman Cook collection edit)", "duration": 361}, {"id": "W8T8WMgwQlQ", "thumbnail": "https://i.ytimg.com/vi/W8T8WMgwQlQ/default.jpg", "file": "https://www.youtube.com/watch?v=W8T8WMgwQlQ", "title": "Sparks - This Town Ain\u0027t Big Enough For Both Of Us (Island 1974).", "description": "WIP 6193\nSide A", "duration": 183}, {"id": "V9DoxHSpXcI", "thumbnail": "https://i.ytimg.com/vi/V9DoxHSpXcI/default.jpg", "file": "https://www.youtube.com/watch?v=V9DoxHSpXcI", "title": "Sparks - Propaganda/At Home, At Work, At Play", "description": "", "duration": 213}, {"id": "a08OHx6Z6kM", "thumbnail": "https://i.ytimg.com/vi/a08OHx6Z6kM/default.jpg", "file": "https://www.youtube.com/watch?v=a08OHx6Z6kM", "title": "Sparks - Beat The Clock (Meat Beat Manifesto \u0027Double Bass\u0027 Mix)", "description": "Imperial Records (2009)", "duration": 374}, {"id": "KSs63V-RmPk", "thumbnail": "https://i.ytimg.com/vi/KSs63V-RmPk/default.jpg", "file": "https://www.youtube.com/watch?v=KSs63V-RmPk", "title": "Sparks - Angst in My Pants", "description": "from Angst In My Pants", "duration": 210}, {"id": "p8YRg1rBZSg", "thumbnail": "https://i.ytimg.com/vi/p8YRg1rBZSg/default.jpg", "file": "https://www.youtube.com/watch?v=p8YRg1rBZSg", "title": "Sparks-Sparks (Halfnelson) [Full Album] 1971", "description": "Also known as Halfnelson.", "duration": 2393}, {"id": "V0jWKaRcraE", "thumbnail": "https://i.ytimg.com/vi/V0jWKaRcraE/default.jpg", "file": "https://www.youtube.com/watch?v=V0jWKaRcraE", "title": "Sparks \u0027Fa La Fa Lee\u0027", "description": "Lyrics-\n\nFa la fa lee, she ain\u0027t heavy she\u0027s a brother to me\nWhat I need, she can\u0027t be\nNature, nurture, who\u0027s to say?\nBut still fa la, fa lee\nAnything between us is a felony\n\nFa la fa lee, she thinks only of the higher parts of me\nSuch a shame, were I she", "duration": 176}, {"id": "6uUKLsi_c7Q", "thumbnail": "https://i.ytimg.com/vi/6uUKLsi_c7Q/default.jpg", "file": "https://www.youtube.com/watch?v=6uUKLsi_c7Q", "title": "A Fun Bunch of Guys From\u2026", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nA Fun Bunch of Guys From\u2026 \u00b7 Sparks\n\nIn Outer Space\n\n\u2117 1983 Lil\u0027 Beethoven\n\nReleased on: 1983-04-01\n\nAuto-generated by YouTube.", "duration": 243}, {"id": "WnVOOpaDK8Y", "thumbnail": "https://i.ytimg.com/vi/WnVOOpaDK8Y/default.jpg", "file": "https://www.youtube.com/watch?v=WnVOOpaDK8Y", "title": "Sparks - So Important (official video)", "description": "The video for the single So Important from the 1988 album Interior Design. \n(Directed by Ron Mael \u0026 Russell Mael)\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow SPARK", "duration": 277}, {"id": "ojVPOEYR6Mo", "thumbnail": "https://i.ytimg.com/vi/ojVPOEYR6Mo/default.jpg", "file": "https://www.youtube.com/watch?v=ojVPOEYR6Mo", "title": "Big Boy", "description": "Provided to YouTube by Universal Music Group\n\nBig Boy \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1976 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Rupert Holmes\nProducer, Associate  Producer: Jeffrey Lesser\nStudio  ", "duration": 209}, {"id": "_j2CJN8rmBE", "thumbnail": "https://i.ytimg.com/vi/_j2CJN8rmBE/default.jpg", "file": "https://www.youtube.com/watch?v=_j2CJN8rmBE", "title": "Sparks - Hippopotamus (Official Video)", "description": "From the new Sparks album \u0027Hippopotamus\u0027, out now. \nGet it here: https://sparks.lnk.to/hippopotamusID\nOrder special bundles: https://sparks.tmstor.es/\n\nVideo created by Scott Peters - http://www.madebyscottpeters.com/\n\nTour dates: http://www.allsparks.com", "duration": 228}, {"id": "haf5s0b--zw", "thumbnail": "https://i.ytimg.com/vi/haf5s0b--zw/default.jpg", "file": "https://www.youtube.com/watch?v=haf5s0b--zw", "title": "Sparks - Never Turn Your Back On Mother Earth", "description": "Dutch tv 1974. Ron Mael - Russell Mael - Ian Hampton - Trevor White - Dinky Diamond", "duration": 130}, {"id": "v5jtqCo43WM", "thumbnail": "https://i.ytimg.com/vi/v5jtqCo43WM/default.jpg", "file": "https://www.youtube.com/watch?v=v5jtqCo43WM", "title": "Sparks - Edith Piaf (Said It Better Than Me) [Official Video]", "description": "The new single from Sparks\u0027 latest album \u0027Hippopotamus\u0027, out now. \nGet it here: https://sparks.lnk.to/hippopotamusID. \nOrder special bundles: https://sparks.tmstor.es/\n\nCredits \nEdith Piaf (Said it Better than Me)  - written, produced and performed by Ron", "duration": 226}, {"id": "0FymsV3Ja1s", "thumbnail": "https://i.ytimg.com/vi/0FymsV3Ja1s/default.jpg", "file": "https://www.youtube.com/watch?v=0FymsV3Ja1s", "title": "Aeroflot", "description": "Provided to YouTube by BMG Rights Management (UK) Ltd\n\nAeroflot \u00b7 Sparks\n\nBalls\n\n\u2117 2010 Ron \u0026 Russell Mael under exclusive licence to BMG Rights Management (UK) Limited\n\nComposer, Lyricist, Writer: Ron Mael\nComposer, Lyricist, Writer: Russell Mael\n\nAut", "duration": 269}, {"id": "SjcmyUWOIfg", "thumbnail": "https://i.ytimg.com/vi/SjcmyUWOIfg/default.jpg", "file": "https://www.youtube.com/watch?v=SjcmyUWOIfg", "title": "SPARKS - MODESTY PLAYS - 12  MIXES 1983", "description": "Pochodz\u0105cy z 1983 roku kawa\u0142ek . W tym przypadku pochodzi on ze sk\u0142\u0105danki zawieraj\u0105cej wersje utwor\u00f3w wydanych na 12 singlach:  SPARKS 12 MIXES  wydanej przez OGLIO RECORDS w 1998. Na CD znajduj\u0105 si\u0119 jeszcze:\r\n\r\n01: All You Ever Think About Is", "duration": 319}, {"id": "vjU1fXY0DcU", "thumbnail": "https://i.ytimg.com/vi/vjU1fXY0DcU/default.jpg", "file": "https://www.youtube.com/watch?v=vjU1fXY0DcU", "title": "SPARKS - Past Tense - The Best Of Sparks 3 CD Unboxing and Spotify Playlist", "description": "\ud835\udc6a\ud835\udc68\ud835\udc75\ud835\udc68\ud835\udc6b\ud835\udc70\ud835\udc68\ud835\udc75 \ud835\udc7a\ud835\udc7b\ud835\udc7c\ud835\udc6b\ud835\udc74\ud835\udc7c\ud835\udc6d\ud835\udc6d\ud835\udc70\ud835\udc75 \ud835\udc74\ud835\udc6c\ud835\udc74\ud835\udc69\ud835\udc6c\ud835\udc79\ud835\udc7a\ud835\udc6f\ud835\udc70\ud835\udc77: https://www.youtube.com/channel/UCug-FoKfBmPBI-N3BD4_8rw/join \ud835\udc77\ud835\udc73\ud835\udc68\ud835\udc80\ud835\udc73\ud835\udc70\ud835\udc7a\ud835\udc7b\ud835\udc7a: https://www.youtube.com/user/canadianst", "duration": 905}, {"id": "C3CIDPuxwrY", "thumbnail": "https://i.ytimg.com/vi/C3CIDPuxwrY/default.jpg", "file": "https://www.youtube.com/watch?v=C3CIDPuxwrY", "title": "Sparks - iPhone (Official Video)", "description": "Official video for iPhone by Sparks, from the new album \u0027A Steady Drip, Drip, Drip\u0027. Buy/listen: https://sparks.lnk.to/dripID\n\nLyrics\n\nAdam said to Eve\nRepositioning his entire leaf\nI have many things that I need to say\nAnd\u2005I\u2005wish that that\u2005snake ", "duration": 251}, {"id": "dLxPIOxgkM0", "thumbnail": "https://i.ytimg.com/vi/dLxPIOxgkM0/default.jpg", "file": "https://www.youtube.com/watch?v=dLxPIOxgkM0", "title": "Sparks - The Existential Threat (Official Video)", "description": "The official video for \u0027The Existential Threat\u0027 by Sparks, taken from the album \u0027A Steady Drip, Drip, Drip\u0027. Listen: https://sparks.lnk.to/dripCY. \nhttps://allsparks.com.\n\nAnimated and directed by Cyriak.\n\n#Cyriak #Sparks #ASteadyDripDripDrip #Animation \n", "duration": 204}, {"id": "eVxnnyvpqr0", "thumbnail": "https://i.ytimg.com/vi/eVxnnyvpqr0/default.jpg", "file": "https://www.youtube.com/watch?v=eVxnnyvpqr0", "title": "Todd Rundgren \u0026 Sparks - Your Fandango (Official Video)", "description": "The official video for the collaborative song Your Fandango by Todd Rundgren \u0026 Sparks, released April 23rd, 2021 on Cleopatra Records.\n\nStream YOUR FANDANGO: https://orcd.co/todd_rundgren_sparks_your_fandango \n\nAs a special treat for both Rundgren and S", "duration": 265}, {"id": "di3mNRymKZg", "thumbnail": "https://i.ytimg.com/vi/di3mNRymKZg/default.jpg", "file": "https://www.youtube.com/watch?v=di3mNRymKZg", "title": "Sparks, Adam Driver, Marion Cotillard - So May We Start | From Annette ft. Simon Helb...", "description": "So May We Start - from the soundtrack to Annette performed by Sparks, Adam Driver, Marion Cotillard feat. Simon Helberg \nListen to the single here: https://annette.lnk.to/SMWS\nPre-order the album on vinyl: https://annette.lnk.to/highlights \n\nABOUT ANNET", "duration": 225}, {"id": "5MQCIneS3Cg", "thumbnail": "https://i.ytimg.com/vi/5MQCIneS3Cg/default.jpg", "file": "https://www.youtube.com/watch?v=5MQCIneS3Cg", "title": "Beat the clock - Sparks", "description": "Another Electro, Disco Classic", "duration": 403}, {"id": "4ar-LRd7DX8", "thumbnail": "https://i.ytimg.com/vi/4ar-LRd7DX8/default.jpg", "file": "https://www.youtube.com/watch?v=4ar-LRd7DX8", "title": "Sparks - When Do I Get To Sing My Way (The Grid Radio Edit, 1994)", "description": " ", "duration": 251}, {"id": "-n3Ni8XxZmQ", "thumbnail": "https://i.ytimg.com/vi/-n3Ni8XxZmQ/default.jpg", "file": "https://www.youtube.com/watch?v=-n3Ni8XxZmQ", "title": "More Than a Sex Machine", "description": "Provided to YouTube by BMG Rights Management (UK) Ltd\n\nMore Than a Sex Machine \u00b7 Sparks\n\nBalls\n\n\u2117 2010 Ron \u0026 Russell Mael under exclusive licence to BMG Rights Management (UK) Limited\n\nComposer, Lyricist, Writer: Ron Mael\nComposer, Lyricist, Writer: Ru", "duration": 304}, {"id": "ya3hRBWx_kY", "thumbnail": "https://i.ytimg.com/vi/ya3hRBWx_kY/default.jpg", "file": "https://www.youtube.com/watch?v=ya3hRBWx_kY", "title": "When I\u0027m With You", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nWhen I\u0027m With You \u00b7 Sparks\n\nTerminal Jive\n\n\u2117 1980 Lil\u0027 Beethoven\n\nReleased on: 1980-01-28\n\nAuto-generated by YouTube.", "duration": 349}, {"id": "b1LGxyH20Ek", "thumbnail": "https://i.ytimg.com/vi/b1LGxyH20Ek/default.jpg", "file": "https://www.youtube.com/watch?v=b1LGxyH20Ek", "title": "Sparks - Just Got Back From Heaven (Art Of Mix Version)", "description": "No copyright infringement intended. \r\nFor promotional an entertainment purposes only. \r\nThe Art Of Mix edit of this 80\u0027s club hit. \r\nIssue #8\r\nEdit by Michael Marshall \u0026 Steve Smith.", "duration": 391}, {"id": "2tA0N8Yz01k", "thumbnail": "https://i.ytimg.com/vi/2tA0N8Yz01k/default.jpg", "file": "https://www.youtube.com/watch?v=2tA0N8Yz01k", "title": "This Town Aint Big Enough for Both of Us", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nThis Town Aint Big Enough for Both of Us \u00b7 Sparks\n\nPlagiarism\n\n\u2117 1997 Lil\u0027 Beethoven\n\nReleased on: 1997-01-01\n\nAuto-generated by YouTube.", "duration": 244}, {"id": "tTiLKCYSyyM", "thumbnail": "https://i.ytimg.com/vi/tTiLKCYSyyM/default.jpg", "file": "https://www.youtube.com/watch?v=tTiLKCYSyyM", "title": "Sparks - Indiscreet - Happy Hunting Ground", "description": "Sparks.  Indiscreet", "duration": 224}, {"id": "TH5USLpPa_0", "thumbnail": "https://i.ytimg.com/vi/TH5USLpPa_0/default.jpg", "file": "https://www.youtube.com/watch?v=TH5USLpPa_0", "title": "Sparks - I Predict (official video)", "description": "The video for the single I Predict from the 1982 album Angst In My Pants.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow SPARKS on Instagram: https://www.instagram.co", "duration": 194}, {"id": "PciM6nY7kaM", "thumbnail": "https://i.ytimg.com/vi/PciM6nY7kaM/default.jpg", "file": "https://www.youtube.com/watch?v=PciM6nY7kaM", "title": "Sparks   National Crime Awareness Week  The Radio Mix", "description": "Sparks - National Crime Awareness Week (The Original Radio Mix) 1993", "duration": 316}, {"id": "GFOZ4kgayhA", "thumbnail": "https://i.ytimg.com/vi/GFOZ4kgayhA/default.jpg", "file": "https://www.youtube.com/watch?v=GFOZ4kgayhA", "title": "This Town Ain\u0027t Big Enough For Both Of Us", "description": "Provided to YouTube by Universal Music Group\n\nThis Town Ain\u0027t Big Enough For Both Of Us \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Muff", "duration": 186}, {"id": "AoIU7O030VE", "thumbnail": "https://i.ytimg.com/vi/AoIU7O030VE/default.jpg", "file": "https://www.youtube.com/watch?v=AoIU7O030VE", "title": "Sparks - Now That I Own The BBC", "description": "from Gratuitous Sax \u0026 Sensless Violins (1994) - \r\nRon \u0026 Russell Mael", "duration": 236}, {"id": "JQCPsjjPvzI", "thumbnail": "https://i.ytimg.com/vi/JQCPsjjPvzI/default.jpg", "file": "https://www.youtube.com/watch?v=JQCPsjjPvzI", "title": "The Sparks-  The Scene", "description": "", "duration": 369}, {"id": "Pdi5Se1xE2Q", "thumbnail": "https://i.ytimg.com/vi/Pdi5Se1xE2Q/default.jpg", "file": "https://www.youtube.com/watch?v=Pdi5Se1xE2Q", "title": "Sparks - Tryouts For The Human Race (TOTP 1979)", "description": "Sparks - Tryouts For The Human Race (Top Of The Pops 1979)", "duration": 158}, {"id": "mf-ZXj0qNrk", "thumbnail": "https://i.ytimg.com/vi/mf-ZXj0qNrk/default.jpg", "file": "https://www.youtube.com/watch?v=mf-ZXj0qNrk", "title": "Sparks - Marry me.wmv", "description": " ", "duration": 166}, {"id": "tbZXJTSvy3g", "thumbnail": "https://i.ytimg.com/vi/tbZXJTSvy3g/default.jpg", "file": "https://www.youtube.com/watch?v=tbZXJTSvy3g", "title": "SPARKS - The Calm Before The Storm [Promo Only Long Version].wmv", "description": "From the promo cd", "duration": 306}, {"id": "0uiOmU-ttJI", "thumbnail": "https://i.ytimg.com/vi/0uiOmU-ttJI/default.jpg", "file": "https://www.youtube.com/watch?v=0uiOmU-ttJI", "title": "\u00b7 SPARKS - So Important (Extremely Important Mix) Vinyl 1988", "description": "Engineer \u2013 John Thomas (5)\nProducer, Arranged By, Written-By \u2013 Ron Mael, Russell Mael #DjSergioGilles #Musicaenvinilos", "duration": 415}, {"id": "0w58EcuZ0yQ", "thumbnail": "https://i.ytimg.com/vi/0w58EcuZ0yQ/default.jpg", "file": "https://www.youtube.com/watch?v=0w58EcuZ0yQ", "title": "Please, Baby, Please", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nPlease, Baby, Please \u00b7 Sparks\n\nIn Outer Space\n\n\u2117 1983 Lil\u0027 Beethoven\n\nReleased on: 1983-04-01\n\nAuto-generated by YouTube.", "duration": 223}, {"id": "BI9gOtRMogY", "thumbnail": "https://i.ytimg.com/vi/BI9gOtRMogY/default.jpg", "file": "https://www.youtube.com/watch?v=BI9gOtRMogY", "title": "This Town Ain\u0027t Big Enough For Both Of Us", "description": "Provided to YouTube by Universal Music Group\n\nThis Town Ain\u0027t Big Enough For Both Of Us \u00b7 Sparks\n\nKimono My House\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2008-01-01\n\nAssociated  Performer, Bass  Guitar: ", "duration": 185}, {"id": "T_RA3XvUqz4", "thumbnail": "https://i.ytimg.com/vi/T_RA3XvUqz4/default.jpg", "file": "https://www.youtube.com/watch?v=T_RA3XvUqz4", "title": "Marry Me", "description": "Provided to YouTube by Universal Music Group\n\nMarry Me \u00b7 Sparks\n\nPropaganda\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 1974-01-01\n\nProducer: Muff Winwood\nAssociated  Performer, Vocals: Russell Mael\nAssociat", "duration": 166}, {"id": "FwUViOpzm6I", "thumbnail": "https://i.ytimg.com/vi/FwUViOpzm6I/default.jpg", "file": "https://www.youtube.com/watch?v=FwUViOpzm6I", "title": "Angst In My Pants", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nAngst In My Pants \u00b7 Sparks\n\nAngst In My Pants\n\n\u2117 1982 Lil\u0027 Beethoven\n\nReleased on: 1982-03-29\n\nAuto-generated by YouTube.", "duration": 210}, {"id": "n3PhpBVCtO4", "thumbnail": "https://i.ytimg.com/vi/n3PhpBVCtO4/default.jpg", "file": "https://www.youtube.com/watch?v=n3PhpBVCtO4", "title": "I Wish I Looked a Little Better", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nI Wish I Looked a Little Better \u00b7 Sparks\n\nIn Outer Space\n\n\u2117 1983 Lil\u0027 Beethoven\n\nReleased on: 1983-04-01\n\nAuto-generated by YouTube.", "duration": 179}, {"id": "ODK8U7KxCj0", "thumbnail": "https://i.ytimg.com/vi/ODK8U7KxCj0/default.jpg", "file": "https://www.youtube.com/watch?v=ODK8U7KxCj0", "title": "Sparks Madonna", "description": "Sparks song about Madonna ~ support the band and make them rich(er) thank u", "duration": 273}, {"id": "930MziBILtQ", "thumbnail": "https://i.ytimg.com/vi/930MziBILtQ/default.jpg", "file": "https://www.youtube.com/watch?v=930MziBILtQ", "title": "Fill-Er-Up", "description": "Provided to YouTube by Universal Music Group\n\nFill-Er-Up \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1976 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Rupert Holmes\nProducer, Associate  Producer: Jeffrey Lesser\nStudi", "duration": 140}, {"id": "9cHDuwLL__Q", "thumbnail": "https://i.ytimg.com/vi/9cHDuwLL__Q/default.jpg", "file": "https://www.youtube.com/watch?v=9cHDuwLL__Q", "title": "The Number One Song in Heaven", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nThe Number One Song in Heaven \u00b7 Sparks\n\nNo. 1 In Heaven\n\n\u2117 2019 Lil\u0027 Beethoven Records\n\nReleased on: 1979-03-02\n\nAuto-generated by YouTube.", "duration": 231}, {"id": "gAhMG-2mxXQ", "thumbnail": "https://i.ytimg.com/vi/gAhMG-2mxXQ/default.jpg", "file": "https://www.youtube.com/watch?v=gAhMG-2mxXQ", "title": "Past tense \u2606the best of sparks 1967-2017\u2606", "description": "The ultimate sparks collection.", "duration": 136}, {"id": "tPSFpaCQEvA", "thumbnail": "https://i.ytimg.com/vi/tPSFpaCQEvA/default.jpg", "file": "https://www.youtube.com/watch?v=tPSFpaCQEvA", "title": "Sparks - Lawnmower (Official Video)", "description": "Lawnmower by Sparks, from the new album \u0027A Steady Drip, Drip, Drip\u0027. Buy/listen: https://sparks.lnk.to/dripID\n\nThe video was created in self-isolation by Ron and Russell!\n\nFollow Sparks\nWebsite: http://allsparks.com/\nFacebook: https://www.facebook.com/s", "duration": 243}, {"id": "203jsu0SFO0", "thumbnail": "https://i.ytimg.com/vi/203jsu0SFO0/default.jpg", "file": "https://www.youtube.com/watch?v=203jsu0SFO0", "title": "Sparks, Adam Driver, Marion Cotillard - We Love Each Other So Much | From Annette (Ly...", "description": "We Love Each Other So Much | From Annette \nListen to the single here: https://annette.lnk.to/WLEOSM\nPre-order the album on vinyl: https://annette.lnk.to/highlights \n\nABOUT ANNETTE \n\nAnnette, the much-anticipated new film from LEOS CARAX, is set to open ", "duration": 214}, {"id": "IQUXMD_qkYE", "thumbnail": "https://i.ytimg.com/vi/IQUXMD_qkYE/default.jpg", "file": "https://www.youtube.com/watch?v=IQUXMD_qkYE", "title": "Sparks - When i kiss you ( Remix Video Version VHS Pro-Rip Edited From MTV\u0027s Party Zone 1995 )", "description": "", "duration": 262}, {"id": "XTe5aClA3QE", "thumbnail": "https://i.ytimg.com/vi/XTe5aClA3QE/default.jpg", "file": "https://www.youtube.com/watch?v=XTe5aClA3QE", "title": "Sparks - When I\u0027m With You [480p]", "description": "http://itunes.apple.com/us/album/terminal-jive/id279473888\r\n\r\nI do not make claim to nor have ownership of this video. All rights are reserved by copyright owners.", "duration": 197}, {"id": "_yF9VcS64Zk", "thumbnail": "https://i.ytimg.com/vi/_yF9VcS64Zk/default.jpg", "file": "https://www.youtube.com/watch?v=_yF9VcS64Zk", "title": "Sparks - When Do I Get To Sing My Way (Pro-Gress Remix)", "description": "Excellent remix of Sparks\u0027 1994 classic", "duration": 480}, {"id": "MpHIdxjYfcI", "thumbnail": "https://i.ytimg.com/vi/MpHIdxjYfcI/default.jpg", "file": "https://www.youtube.com/watch?v=MpHIdxjYfcI", "title": "Sparks - With All My Might (official video)", "description": "Sparks single With All My Might from the 1984 album Pulling Rabbits Out Of A Hat. (Directed by Graeme Wifler)\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow SPARKS on", "duration": 221}, {"id": "qTOlgmsiSag", "thumbnail": "https://i.ytimg.com/vi/qTOlgmsiSag/default.jpg", "file": "https://www.youtube.com/watch?v=qTOlgmsiSag", "title": "When I\u0027m With You [Instrumental]", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nWhen I\u0027m With You [Instrumental] \u00b7 Sparks\n\nTerminal Jive\n\n\u2117 1980 Lil\u0027 Beethoven\n\nReleased on: 1980-01-28\n\nAuto-generated by YouTube.", "duration": 228}, {"id": "OGxPqS3z_vw", "thumbnail": "https://i.ytimg.com/vi/OGxPqS3z_vw/default.jpg", "file": "https://www.youtube.com/watch?v=OGxPqS3z_vw", "title": "SPARKS - Young Girls", "description": "Young Girls - Palace 1, French TV 1981 - Ron \u0026 Russell Mael", "duration": 229}, {"id": "4ARV51t_6g4", "thumbnail": "https://i.ytimg.com/vi/4ARV51t_6g4/default.jpg", "file": "https://www.youtube.com/watch?v=4ARV51t_6g4", "title": "Something For The Girl With Everything (feat. Faith No More)", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nSomething For The Girl With Everything (feat. Faith No More) \u00b7 Sparks \u00b7 Faith No More\n\nPlagiarism\n\n\u2117 1997 Lil\u0027 Beethoven\n\nReleased on: 1997-01-01\n\nAuto-generated by YouTube.", "duration": 195}, {"id": "OC-2dxOMU2I", "thumbnail": "https://i.ytimg.com/vi/OC-2dxOMU2I/default.jpg", "file": "https://www.youtube.com/watch?v=OC-2dxOMU2I", "title": "Sparks - Without Using Hands", "description": "Sparks 1974", "duration": 205}, {"id": "2j-01_uoUvo", "thumbnail": "https://i.ytimg.com/vi/2j-01_uoUvo/default.jpg", "file": "https://www.youtube.com/watch?v=2j-01_uoUvo", "title": "Hasta Manana, Monsieur", "description": "Provided to YouTube by Universal Music Group\n\nHasta Manana, Monsieur \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Muff Winwood\nAssociated", "duration": 224}, {"id": "9H5uCSimxQg", "thumbnail": "https://i.ytimg.com/vi/9H5uCSimxQg/default.jpg", "file": "https://www.youtube.com/watch?v=9H5uCSimxQg", "title": "Sparks - Now That I Own The BBC", "description": "Sparks live in London - Gratuitous Sax and Senseless Violins: 16th show of the Sparks Spectacular", "duration": 217}, {"id": "hBTukdqwoLc", "thumbnail": "https://i.ytimg.com/vi/hBTukdqwoLc/default.jpg", "file": "https://www.youtube.com/watch?v=hBTukdqwoLc", "title": "Sparks - Fingertips, 12in single", "description": "Fingertips by Sparks, 12\u0027\u0027 single version\n\nIf you want to support this channel, see more uploads and earn some crypto via a revolutionary new mobile app which uses no battery life or resources, join my Pi mining circle via https://minepi.com/kerempooh. Al", "duration": 393}, {"id": "jjbKSg97-SI", "thumbnail": "https://i.ytimg.com/vi/jjbKSg97-SI/default.jpg", "file": "https://www.youtube.com/watch?v=jjbKSg97-SI", "title": "Tryouts for the Human Race [Alternative Extended Version]", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nTryouts for the Human Race [Alternative Extended Version] \u00b7 Sparks\n\nNo. 1 In Heaven\n\n\u2117 2019 Lil\u0027 Beethoven Records\n\nReleased on: 1979-03-02\n\nAuto-generated by YouTube.", "duration": 477}, {"id": "VgRIgLdqEls", "thumbnail": "https://i.ytimg.com/vi/VgRIgLdqEls/default.jpg", "file": "https://www.youtube.com/watch?v=VgRIgLdqEls", "title": "Sparks The Calm Before the Storm ( TV)", "description": "Sparks performing The Calm Before the storm on TV program", "duration": 197}, {"id": "aqTeFfWy7V0", "thumbnail": "https://i.ytimg.com/vi/aqTeFfWy7V0/default.jpg", "file": "https://www.youtube.com/watch?v=aqTeFfWy7V0", "title": "Sparks - Beat The Clock", "description": "TOTP 1979 Ron Mael - Russell Mael - David Humphrey", "duration": 139}, {"id": "hUYo5S6z49g", "thumbnail": "https://i.ytimg.com/vi/hUYo5S6z49g/default.jpg", "file": "https://www.youtube.com/watch?v=hUYo5S6z49g", "title": "Sparks - Excerpts From The Seduction of Ingmar Bergman live @ The Chapel, SF - April 10, 2013", "description": "http://www.allsparks.com\nhttps://www.facebook.com/sparksofficial\nWith The Weddding of Jacqueline Kennedy", "duration": 513}, {"id": "hngryNMHSYk", "thumbnail": "https://i.ytimg.com/vi/hngryNMHSYk/default.jpg", "file": "https://www.youtube.com/watch?v=hngryNMHSYk", "title": "Sparks - Tryouts For The Human Race 12 1980", "description": "Elektra \u200e\u2013 AS-11412\n\nPhonographic Copyright (p) \u2013 Elektra Records\nPressed By \u2013 Specialty Records Corporation\nPublished By \u2013 Ackee Music, Inc.\nPublished By \u2013 Heath Levy Music Co. Inc.\nPublished By \u2013 April Music Inc.\n\nProducer \u2013 Giorgio Moro", "duration": 472}, {"id": "W9loFpbEVxo", "thumbnail": "https://i.ytimg.com/vi/W9loFpbEVxo/default.jpg", "file": "https://www.youtube.com/watch?v=W9loFpbEVxo", "title": "Barbecutie", "description": "Provided to YouTube by Universal Music Group\n\nBarbecutie \u00b7 Sparks\n\nKimono My House\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2008-01-01\n\nAssociated  Performer, Bass  Guitar: Martin Gordon\nAssociated  Perfo", "duration": 188}, {"id": "wJt2C0p8x-g", "thumbnail": "https://i.ytimg.com/vi/wJt2C0p8x-g/default.jpg", "file": "https://www.youtube.com/watch?v=wJt2C0p8x-g", "title": "Lucky Me, Lucky You", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nLucky Me, Lucky You \u00b7 Sparks\n\nIn Outer Space\n\n\u2117 1983 Lil\u0027 Beethoven\n\nReleased on: 1983-04-01\n\nAuto-generated by YouTube.", "duration": 218}, {"id": "s6P-TghK_3s", "thumbnail": "https://i.ytimg.com/vi/s6P-TghK_3s/default.jpg", "file": "https://www.youtube.com/watch?v=s6P-TghK_3s", "title": "Sparks -  The Number One Song In Heaven", "description": "TOTP 1979", "duration": 245}, {"id": "6DA95FFBJNs", "thumbnail": "https://i.ytimg.com/vi/6DA95FFBJNs/default.jpg", "file": "https://www.youtube.com/watch?v=6DA95FFBJNs", "title": "Sparks - One for the Ages (Official Video)", "description": "The official video for One for the Ages by Sparks. \nDirected, animated, and hand-drawn by Chintis Lundgren.\nFrom the new album \u0027A Steady Drip, Drip, Drip\u0027. \nPre-order now: https://sparks.lnk.to/dripID\nAlbum out on download \u0026 streaming on May 15th and on C", "duration": 226}, {"id": "zf6y7p2iauE", "thumbnail": "https://i.ytimg.com/vi/zf6y7p2iauE/default.jpg", "file": "https://www.youtube.com/watch?v=zf6y7p2iauE", "title": "Pacific Standard Time", "description": "Provided to YouTube by BMG Rights Management (UK) Limited\n\nPacific Standard Time \u00b7 Sparks\n\nA Steady Drip, Drip, Drip\n\n\u2117 2020 BMG Rights Management (UK) Limited\n\nEngineer: Bill Inglot\nEngineer: Dave Schultz\nKeyboards, Producer, Programmer: Ron Mael\nEngi", "duration": 264}, {"id": "nkvxIeV1fQ8", "thumbnail": "https://i.ytimg.com/vi/nkvxIeV1fQ8/default.jpg", "file": "https://www.youtube.com/watch?v=nkvxIeV1fQ8", "title": "Sparks - The Existential Threat (+ bonus How To Make A Music Video by Cyriak)", "description": "\u0027The Existential Threat\u0027 with bonus How To Make A Music Video clip.\n\n\u0027The Existential Threat\u0027 and How To Make A Music Video are both created, directed, animated by @cyriak. \n\nTaken from the new album \u0027A Steady Drip, Drip, Drip\u0027. Buy/listen: https://sp", "duration": 251}, {"id": "3b3jMrkZgCE", "thumbnail": "https://i.ytimg.com/vi/3b3jMrkZgCE/default.jpg", "file": "https://www.youtube.com/watch?v=3b3jMrkZgCE", "title": "Sparks - What Are All These Bands so Angry About", "description": "Sparks is an American rock and pop band formed in Los Angeles in 1970 by brothers Ron (keyboards) and Russell Mael (vocals), initially under the name Halfnelson. Best known for their quirky approach to songwriting,[2] Sparks\u0027 music is often accompanied by", "duration": 216}, {"id": "5Kom9iVq6t8", "thumbnail": "https://i.ytimg.com/vi/5Kom9iVq6t8/default.jpg", "file": "https://www.youtube.com/watch?v=5Kom9iVq6t8", "title": "Sparks  - When Do I Get To Sing MY WAY (Microbots Club Mix Version)", "description": "Sparks  - When Do I Get To Sing MY WAY (Microbots Club Mix Version)\nfrom:\nSparks \u200e\u2013 When Do I Get To Sing My Way (2nd Edition)\nLabel:Logic Records \u200e\u2013 LOC 155, BMG \u200e\u2013 74321235062, BMG \u200e\u2013 7432123506-2\nFormat:CD, Maxi-Single \nCountry:German", "duration": 345}, {"id": "qMMJbzQ02cI", "thumbnail": "https://i.ytimg.com/vi/qMMJbzQ02cI/default.jpg", "file": "https://www.youtube.com/watch?v=qMMJbzQ02cI", "title": "Sparks - Change (TVAM)", "description": "Sparks on TVAM featuring part of the Change video", "duration": 228}, {"id": "PNgD96Svr-o", "thumbnail": "https://i.ytimg.com/vi/PNgD96Svr-o/default.jpg", "file": "https://www.youtube.com/watch?v=PNgD96Svr-o", "title": "Sparks - Young Girls - Palace 1, French TV, 1981 (Edited by Rafael Progressivo)", "description": "Sparks - Young Girls\nPalace 1, French TV, 1981\nEdited by me, with remastered audio\n\n\nhttps://ragnarockgold.blogspot.com/2020/10/sparks-video-collection-vol-2-1980-1984.html", "duration": 285}, {"id": "8k9cJjp_j3s", "thumbnail": "https://i.ytimg.com/vi/8k9cJjp_j3s/default.jpg", "file": "https://www.youtube.com/watch?v=8k9cJjp_j3s", "title": "Sparks   The Great Leap Forward", "description": "Surprised this has never been uploaded to YouTube before.\n\nB-Side from the great \u0027Sparks Vs. Faith No More \u200e\u2013 This Town Ain\u0027t Big Enough For Both Of Us\u0027 single released in 1997.\n\nWritten-By, Mixed By \u2013 Russell Mael, recorded at Sparks Studios, Los a", "duration": 153}, {"id": "3C5LngDvkLY", "thumbnail": "https://i.ytimg.com/vi/3C5LngDvkLY/default.jpg", "file": "https://www.youtube.com/watch?v=3C5LngDvkLY", "title": "Sparks - Get in the swing 1975", "description": "Sparks Russell Mael \u0026 Ron Mael  - Get in the swing 1975", "duration": 183}, {"id": "MliHp87iFwg", "thumbnail": "https://i.ytimg.com/vi/MliHp87iFwg/default.jpg", "file": "https://www.youtube.com/watch?v=MliHp87iFwg", "title": "Amateur Hour", "description": "Provided to YouTube by Universal Music Group\n\nAmateur Hour \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nAssociated  Performer, Keyboards: Ron Mael\n", "duration": 214}, {"id": "-UwmrlU23MU", "thumbnail": "https://i.ytimg.com/vi/-UwmrlU23MU/default.jpg", "file": "https://www.youtube.com/watch?v=-UwmrlU23MU", "title": "Now That I Own the BBC (2019 - Remaster)", "description": "Provided to YouTube by BMG Rights Management (UK) Ltd\n\nNow That I Own the BBC (2019 - Remaster) \u00b7 Sparks\n\nGratuitous Sax \u0026 Senseless Violins\n\n\u2117 2019 Lil\u0027 Beethoven under exclusive license to BMG Rights Management (UK) Limited\n\nKeyboards, Producer: Ron ", "duration": 299}, {"id": "0OSNv5uOHSI", "thumbnail": "https://i.ytimg.com/vi/0OSNv5uOHSI/default.jpg", "file": "https://www.youtube.com/watch?v=0OSNv5uOHSI", "title": "Sparks - The Scene (Special Club Edit)", "description": "Remixed by Steve Bates.\n\nI found a bad rip of this online, high-treble and running too fast. I had been looking for this mix for a long time, hoping it would see a digital release, but as of 2020 it\u0027s unavailable. It was a letdown to hear how little had b", "duration": 364}, {"id": "PX6c_7upnwc", "thumbnail": "https://i.ytimg.com/vi/PX6c_7upnwc/default.jpg", "file": "https://www.youtube.com/watch?v=PX6c_7upnwc", "title": "Tryouts For The Human Race", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nTryouts For The Human Race \u00b7 Sparks\n\nNo.1 In Heaven\n\n\u2117 1979 Lil\u0027 Beethoven\n\nReleased on: 1979-03-01\n\nAuto-generated by YouTube.", "duration": 369}, {"id": "raRxYGKTrfk", "thumbnail": "https://i.ytimg.com/vi/raRxYGKTrfk/default.jpg", "file": "https://www.youtube.com/watch?v=raRxYGKTrfk", "title": "Calm Before the Storm (Full Length Instrumental) (Bonus Track)", "description": "Provided to YouTube by BMG Rights Management (UK) Ltd\n\nCalm Before the Storm (Full Length Instrumental) (Bonus Track) \u00b7 Sparks\n\nBalls\n\n\u2117 2010 Ron \u0026 Russell Mael under exclusive licence to BMG Rights Management (UK) Limited\n\nComposer, Writer: Ron Mael\nC", "duration": 303}, {"id": "9YPAqlI0eQE", "thumbnail": "https://i.ytimg.com/vi/9YPAqlI0eQE/default.jpg", "file": "https://www.youtube.com/watch?v=9YPAqlI0eQE", "title": "Sparks - National Crime Awareness Week (Perkins Playtime)", "description": "1993\r\nLabel:Finiflex", "duration": 491}, {"id": "OfbpAPSqI1I", "thumbnail": "https://i.ytimg.com/vi/OfbpAPSqI1I/default.jpg", "file": "https://www.youtube.com/watch?v=OfbpAPSqI1I", "title": "Dance Godammit", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nDance Godammit \u00b7 Sparks\n\nIn Outer Space\n\n\u2117 1983 Lil\u0027 Beethoven\n\nReleased on: 1983-04-01\n\nAuto-generated by YouTube.", "duration": 203}, {"id": "XaHi6VK1K2c", "thumbnail": "https://i.ytimg.com/vi/XaHi6VK1K2c/default.jpg", "file": "https://www.youtube.com/watch?v=XaHi6VK1K2c", "title": "The No.1 Song in Heaven (feat. Jimmy Somerville)", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nThe No.1 Song in Heaven (feat. Jimmy Somerville) \u00b7 Sparks \u00b7 Jimmy Somerville\n\nPlagiarism\n\n\u2117 1997 Lil\u0027 Beethoven\n\nReleased on: 1997-01-01\n\nAuto-generated by YouTube.", "duration": 322}, {"id": "rKG6o3nRK_0", "thumbnail": "https://i.ytimg.com/vi/rKG6o3nRK_0/default.jpg", "file": "https://www.youtube.com/watch?v=rKG6o3nRK_0", "title": "Sparks   When Do I Get To Sing \u0027My Way\u0027 The Grid Radio Instrumental", "description": "", "duration": 253}, {"id": "peHgxI1ZG1w", "thumbnail": "https://i.ytimg.com/vi/peHgxI1ZG1w/default.jpg", "file": "https://www.youtube.com/watch?v=peHgxI1ZG1w", "title": "In The Future", "description": "Provided to YouTube by Universal Music Group\n\nIn The Future \u00b7 Sparks\n\nIndiscreet\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Tony Visconti\nComposer  Lyricist: Ron Mael\n\nAuto-generated b", "duration": 133}, {"id": "0iYo2eL7-Gs", "thumbnail": "https://i.ytimg.com/vi/0iYo2eL7-Gs/default.jpg", "file": "https://www.youtube.com/watch?v=0iYo2eL7-Gs", "title": "Get In The Swing", "description": "Provided to YouTube by Universal Music Group\n\nGet In The Swing \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Tony Visconti\nAssociated  Per", "duration": 247}, {"id": "4dNcSYeQNBc", "thumbnail": "https://i.ytimg.com/vi/4dNcSYeQNBc/default.jpg", "file": "https://www.youtube.com/watch?v=4dNcSYeQNBc", "title": "Now That I Own the BBC (Live Acoustic Version, Simon Mayo Show)", "description": "Provided to YouTube by BMG Rights Management (UK) Ltd\n\nNow That I Own the BBC (Live Acoustic Version, Simon Mayo Show) \u00b7 Sparks\n\nGratuitous Sax \u0026 Senseless Violins\n\n\u2117 1995 BBC. Licensed courtesy of BBC Studios\n\nKeyboards: Ron Mael\nVocals: Russell Mael\n", "duration": 92}, {"id": "XvLSZRQqbLI", "thumbnail": "https://i.ytimg.com/vi/XvLSZRQqbLI/default.jpg", "file": "https://www.youtube.com/watch?v=XvLSZRQqbLI", "title": "Sparks - Fingertips (Short Version)", "description": "Remixed by Steve Bates. This is not the album version, but a short version of the 12 extended club mix.\nI found a bad rip of this online, high-treble and running too fast. I did what I could.\n**I don\u0027t monatise these videos. Any revenue goes to the publi", "duration": 226}, {"id": "nezmr6ZeYXA", "thumbnail": "https://i.ytimg.com/vi/nezmr6ZeYXA/default.jpg", "file": "https://www.youtube.com/watch?v=nezmr6ZeYXA", "title": "Calm Before the Opera (Bonus Track)", "description": "Provided to YouTube by BMG Rights Management (UK) Ltd\n\nCalm Before the Opera (Bonus Track) \u00b7 Sparks\n\nBalls\n\n\u2117 2010 Ron \u0026 Russell Mael under exclusive licence to BMG Rights Management (UK) Limited\n\nComposer, Writer: Ron Mael\nComposer, Writer: Russell Ma", "duration": 190}, {"id": "xwxG1Cs3s2M", "thumbnail": "https://i.ytimg.com/vi/xwxG1Cs3s2M/default.jpg", "file": "https://www.youtube.com/watch?v=xwxG1Cs3s2M", "title": "Sparks - National Crime Awareness Week (13 Minutes In Heaven)", "description": "1993\r\nLabel:Finiflex", "duration": 786}, {"id": "cmN_kGP0meE", "thumbnail": "https://i.ytimg.com/vi/cmN_kGP0meE/default.jpg", "file": "https://www.youtube.com/watch?v=cmN_kGP0meE", "title": "Rockin\u0027 Girls", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nRockin\u0027 Girls \u00b7 Sparks\n\nIn Outer Space\n\n\u2117 1983 Lil\u0027 Beethoven\n\nReleased on: 1983-04-01\n\nAuto-generated by YouTube.", "duration": 288}, {"id": "Ro5iI-RhKxM", "thumbnail": "https://i.ytimg.com/vi/Ro5iI-RhKxM/default.jpg", "file": "https://www.youtube.com/watch?v=Ro5iI-RhKxM", "title": "Sparks - No. 1 Song In Heaven (Plagiarism) official video", "description": "Sparks official video for the 1997 remake of the single No. 1 Song In Heaven from the album Plagiarism. Video directed by Kuntzel + Deygas.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/s", "duration": 227}, {"id": "pGJX6S5xEHw", "thumbnail": "https://i.ytimg.com/vi/pGJX6S5xEHw/default.jpg", "file": "https://www.youtube.com/watch?v=pGJX6S5xEHw", "title": "Sparks Beat The Clock [Full 12 Extended Version] (1979)", "description": "Sparks -- Beat The Clock [Full 12 Extended Version] (1979) I was born a little premature Mom just couldn\u0027t take no more Had no time to learn to cry Goodbye, .\r\n\r\nLa Grande Disco Music Anni 70 80 90 By Carmelo.\r\n\r\nSparks - Beat The Clock (12 \u0027Long Version\u0027", "duration": 786}, {"id": "OGaQkfUZwX0", "thumbnail": "https://i.ytimg.com/vi/OGaQkfUZwX0/default.jpg", "file": "https://www.youtube.com/watch?v=OGaQkfUZwX0", "title": "Sparks - Music That You Can Dance To (Belgium Single 12)", "description": "\u0412\u0438\u043d\u0438\u043b\u043e\u0432\u0430\u044f \u041f\u043b\u0430\u0441\u0442\u0438\u043d\u043a\u0430 Sparks - Music That You Can Dance To (Vinyl Single)\nhttps://www.discogs.com/Sparks-Music-That-You-Can-Dance-To/release/201746\n\nA Music That You Can Dance To 6:29\nB1 Music That You Can Dance To 4:22\nB2 Music That You C", "duration": 395}, {"id": "9esSNC9L0VE", "thumbnail": "https://i.ytimg.com/vi/9esSNC9L0VE/default.jpg", "file": "https://www.youtube.com/watch?v=9esSNC9L0VE", "title": "Complaints", "description": "Provided to YouTube by Universal Music Group\n\nComplaints \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist: Ro", "duration": 170}, {"id": "KYY2jfhtJWY", "thumbnail": "https://i.ytimg.com/vi/KYY2jfhtJWY/default.jpg", "file": "https://www.youtube.com/watch?v=KYY2jfhtJWY", "title": "Sparks   National Crime Awareness Week  Highly Strung Hoedown Mix", "description": "Sparks - National Crime Awareness Week (Highly Strung Hoedown Mix) 1993\n\nRemixed by Finitribe", "duration": 211}, {"id": "HVa1TBhT5j0", "thumbnail": "https://i.ytimg.com/vi/HVa1TBhT5j0/default.jpg", "file": "https://www.youtube.com/watch?v=HVa1TBhT5j0", "title": "Sparks feat. Giorgio Moroder - The Number One Song In Heaven (12 Single)", "description": "Sparks - The Number One Song In Heaven (1979)\n\nProducer: Giorgio Moroder\nWriters: Russell Mael, Ron Mael, Giorgio Moroder\nVocals: Russell Mael\nBackground Vocals: Chris Bennett, Ron Mael, Giorgio Moroder, Jack Moran, Dennis Young\nKeyboards: Ron Mael, Giorg", "duration": 451}, {"id": "T068d62ueTM", "thumbnail": "https://i.ytimg.com/vi/T068d62ueTM/default.jpg", "file": "https://www.youtube.com/watch?v=T068d62ueTM", "title": "Here In Heaven", "description": "Provided to YouTube by Universal Music Group\n\nHere In Heaven \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist", "duration": 168}, {"id": "TpDnpCrboqs", "thumbnail": "https://i.ytimg.com/vi/TpDnpCrboqs/default.jpg", "file": "https://www.youtube.com/watch?v=TpDnpCrboqs", "title": "Happy Hunting Ground", "description": "Provided to YouTube by Universal Music Group\n\nHappy Hunting Ground \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Tony Visconti\nComposer  L", "duration": 221}, {"id": "IYyWfDfgFyM", "thumbnail": "https://i.ytimg.com/vi/IYyWfDfgFyM/default.jpg", "file": "https://www.youtube.com/watch?v=IYyWfDfgFyM", "title": "Without Using Hands", "description": "Provided to YouTube by Universal Music Group\n\nWithout Using Hands \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Tony Visconti\nComposer  Ly", "duration": 201}, {"id": "igQBt23H30I", "thumbnail": "https://i.ytimg.com/vi/igQBt23H30I/default.jpg", "file": "https://www.youtube.com/watch?v=igQBt23H30I", "title": "Sparks - Propaganda + At Home, At Work, At Play (Propaganda)", "description": "", "duration": 214}, {"id": "pau9qlmaf_8", "thumbnail": "https://i.ytimg.com/vi/pau9qlmaf_8/default.jpg", "file": "https://www.youtube.com/watch?v=pau9qlmaf_8", "title": "It Ain\u0027t 1918", "description": "Provided to YouTube by Universal Music Group\n\nIt Ain\u0027t 1918 \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Tony Visconti\nComposer  Lyricist", "duration": 127}, {"id": "8MLcx_oLY2c", "thumbnail": "https://i.ytimg.com/vi/8MLcx_oLY2c/default.jpg", "file": "https://www.youtube.com/watch?v=8MLcx_oLY2c", "title": "Sparks - Something for the girl with everything.wmv", "description": " ", "duration": 139}, {"id": "DLCbwS1NYgA", "thumbnail": "https://i.ytimg.com/vi/DLCbwS1NYgA/default.jpg", "file": "https://www.youtube.com/watch?v=DLCbwS1NYgA", "title": "Sparks - All You Ever Think About Is Sex (New Mix) 1983", "description": "\u05ea\u05d9\u05d0\u05d5\u05e8", "duration": 306}, {"id": "0Gk01gOuvZM", "thumbnail": "https://i.ytimg.com/vi/0Gk01gOuvZM/default.jpg", "file": "https://www.youtube.com/watch?v=0Gk01gOuvZM", "title": "Hospitality On Parade", "description": "Provided to YouTube by Universal Music Group\n\nHospitality On Parade \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Tony Visconti\nComposer  ", "duration": 239}, {"id": "V3G4iA6UBJY", "thumbnail": "https://i.ytimg.com/vi/V3G4iA6UBJY/default.jpg", "file": "https://www.youtube.com/watch?v=V3G4iA6UBJY", "title": "Sparks: The Calm Before The Storm", "description": "Sparks: The Calm Before The Storm", "duration": 196}, {"id": "SAQBhmv3xO8", "thumbnail": "https://i.ytimg.com/vi/SAQBhmv3xO8/default.jpg", "file": "https://www.youtube.com/watch?v=SAQBhmv3xO8", "title": "Looks, Looks, Looks", "description": "Provided to YouTube by Universal Music Group\n\nLooks, Looks, Looks \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Tony Visconti\nAssociated  ", "duration": 154}, {"id": "p4wjDX5uq-A", "thumbnail": "https://i.ytimg.com/vi/p4wjDX5uq-A/default.jpg", "file": "https://www.youtube.com/watch?v=p4wjDX5uq-A", "title": "In The Future", "description": "Provided to YouTube by Universal Music Group\n\nIn The Future \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Tony Visconti\nComposer  Lyricist", "duration": 133}, {"id": "Srxh8nbdkRU", "thumbnail": "https://i.ytimg.com/vi/Srxh8nbdkRU/default.jpg", "file": "https://www.youtube.com/watch?v=Srxh8nbdkRU", "title": "Sparks - With all my might (1984)", "description": " ", "duration": 400}, {"id": "qIfJxzXa4d8", "thumbnail": "https://i.ytimg.com/vi/qIfJxzXa4d8/default.jpg", "file": "https://www.youtube.com/watch?v=qIfJxzXa4d8", "title": "Thank God It\u0027s Not Christmas", "description": "Provided to YouTube by Universal Music Group\n\nThank God It\u0027s Not Christmas \u00b7 Sparks\n\nMael Intuition: Best Of Sparks 1974-76\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1990-01-01\n\nProducer: Muff Winwood\nAsso", "duration": 307}, {"id": "0pOnxcxYWWg", "thumbnail": "https://i.ytimg.com/vi/0pOnxcxYWWg/default.jpg", "file": "https://www.youtube.com/watch?v=0pOnxcxYWWg", "title": "Sparks - Pulling Rabbits Out Of A Hat \u0026 Interview", "description": "", "duration": 445}, {"id": "DBBrRb7P9KQ", "thumbnail": "https://i.ytimg.com/vi/DBBrRb7P9KQ/default.jpg", "file": "https://www.youtube.com/watch?v=DBBrRb7P9KQ", "title": "Les Rita Mitsouko and Sparks - Singing In The Shower - Music Video Mix", "description": "A music video mix I made of the brilliant Les Rita Mitsouko/Sparks collaboration \u0027Singing In The Shower\u0027. Enjoy!", "duration": 351}, {"id": "_0hSxdQHJ_s", "thumbnail": "https://i.ytimg.com/vi/_0hSxdQHJ_s/default.jpg", "file": "https://www.youtube.com/watch?v=_0hSxdQHJ_s", "title": "Sparks - Perfume (official video)", "description": "Sparks official video for the single Perfume from the 2006 album Hello Young Lovers. Directed by Shaw Petronio.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow SPARKS ", "duration": 223}, {"id": "mp3OAJyZocg", "thumbnail": "https://i.ytimg.com/vi/mp3OAJyZocg/default.jpg", "file": "https://www.youtube.com/watch?v=mp3OAJyZocg", "title": "TOPPOP: Sparks - La Dolce Vita", "description": "Artist: Sparks\nTitle: La Dolce Vita\nBroadcast date:9-9-1979\nTV program: TopPop\nVideo rights: AVRO\n\nhttp://www.avro.tv gives you easy access to unique footage. .\n\nTopPop was the first regular dedicated pop music TV show in the Dutch language area. Dutch br", "duration": 228}, {"id": "9TfKUYngTLk", "thumbnail": "https://i.ytimg.com/vi/9TfKUYngTLk/default.jpg", "file": "https://www.youtube.com/watch?v=9TfKUYngTLk", "title": "Sparks - Now That I Own The BBC (Legend B. Mix)", "description": "Sparks - Now That I Own The BBC (Legend B. Mix)", "duration": 322}, {"id": "rnEbZ4T2XxA", "thumbnail": "https://i.ytimg.com/vi/rnEbZ4T2XxA/default.jpg", "file": "https://www.youtube.com/watch?v=rnEbZ4T2XxA", "title": "Sparks - With All My Might (Vocal/Extended Club Mix) 12  1984", "description": "Atlantic \u200e\u2013 DMD 753\n\nProducer \u2013 Ian Little\nWritten-By \u2013 Ron Mael, Russell Mael #DjSergioGilles #Musicaenvinilos", "duration": 396}, {"id": "Y_Fa_InZs_s", "thumbnail": "https://i.ytimg.com/vi/Y_Fa_InZs_s/default.jpg", "file": "https://www.youtube.com/watch?v=Y_Fa_InZs_s", "title": "Sparks - I Predict / Moustache - 45rpm Double Sider! 1982", "description": "Good double sider 45 from Spark\u0027s LP Angst in My Pants. My favorite Sparks LP,  to date is Indiscreet, produced by Tony Visconti :)", "duration": 384}, {"id": "JkdcX6PbZlI", "thumbnail": "https://i.ytimg.com/vi/JkdcX6PbZlI/default.jpg", "file": "https://www.youtube.com/watch?v=JkdcX6PbZlI", "title": "Sparks-when i kiss you (oliver lieb mix)", "description": "Old School 90", "duration": 466}, {"id": "na8oDCKp6AU", "thumbnail": "https://i.ytimg.com/vi/na8oDCKp6AU/default.jpg", "file": "https://www.youtube.com/watch?v=na8oDCKp6AU", "title": "Sparks - Dick Around", "description": "", "duration": 228}, {"id": "IvoJB5Y8880", "thumbnail": "https://i.ytimg.com/vi/IvoJB5Y8880/default.jpg", "file": "https://www.youtube.com/watch?v=IvoJB5Y8880", "title": "Madonna", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nMadonna \u00b7 Sparks\n\nInterior Design\n\n\u2117 1988 Lil\u0027 Beethoven\n\nReleased on: 1988-08-01\n\nAuto-generated by YouTube.", "duration": 279}, {"id": "WM74ngy9EIw", "thumbnail": "https://i.ytimg.com/vi/WM74ngy9EIw/default.jpg", "file": "https://www.youtube.com/watch?v=WM74ngy9EIw", "title": "Sparks - Funny Face (official video)", "description": "The official video for the single Funny Face from the 1981 album Whomp That Sucker.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow SPARKS on Instagram: https://www.in", "duration": 208}, {"id": "LZBYImQOyoY", "thumbnail": "https://i.ytimg.com/vi/LZBYImQOyoY/default.jpg", "file": "https://www.youtube.com/watch?v=LZBYImQOyoY", "title": "Sparks - Tips for Teens", "description": "SPARKS HAS AN OFFICIAL YOUTUBE CHANNEL NOW, FEATURING ALL THEIR VIDEOS! PLEASE CHECK IT OUT\nhttps://www.youtube.com/user/SparksOfficialVideo\n\nSparks - Tips for Teens (music video)\n\nFrom Whomp that Sucker (1981). \n\nSUPPORT THE ARTIST!\n\nwww.allsparks.com", "duration": 214}, {"id": "vgXYs1W5C1I", "thumbnail": "https://i.ytimg.com/vi/vgXYs1W5C1I/default.jpg", "file": "https://www.youtube.com/watch?v=vgXYs1W5C1I", "title": "Girl from Germany", "description": "Provided to YouTube by Rhino\n\nGirl from Germany \u00b7 Sparks\n\nA Woofer In Tweeter\u0027s Clothing\n\n\u2117 1973 Bearsville Records Inc.\n\nProducer: Thaddeus James Lowe\nComposer, Writer: Ron Mael\nWriter: Ronald D. Mael\nWriter: Russell Mael\n\nAuto-generated by YouTube.", "duration": 210}, {"id": "pK4BAioUwo8", "thumbnail": "https://i.ytimg.com/vi/pK4BAioUwo8/default.jpg", "file": "https://www.youtube.com/watch?v=pK4BAioUwo8", "title": "Sparks - Get Crazy", "description": "Colet\u00e2nea Rock\u0027n Roll Project.\nby rNeon \\,,/", "duration": 221}, {"id": "K_HSlNHNZuQ", "thumbnail": "https://i.ytimg.com/vi/K_HSlNHNZuQ/default.jpg", "file": "https://www.youtube.com/watch?v=K_HSlNHNZuQ", "title": "Sparks - When I Kiss You", "description": "Sparks play When I Kiss You on The White Room, 1995", "duration": 262}, {"id": "fddyw_gYjwM", "thumbnail": "https://i.ytimg.com/vi/fddyw_gYjwM/default.jpg", "file": "https://www.youtube.com/watch?v=fddyw_gYjwM", "title": "Sparks \u0027Wonder Girl\u0027", "description": "She was a wonder girl (some girl, that girl)\nShe was a wonder girl (some girl, that girl)\n\nIt was a grand old time we had\nShe was there and I was pretty glad about that too\nKnowing that she knew a thing or two\n\nShe was a wonder girl (some girl, that girl)", "duration": 144}, {"id": "OpDmF2zu0_I", "thumbnail": "https://i.ytimg.com/vi/OpDmF2zu0_I/default.jpg", "file": "https://www.youtube.com/watch?v=OpDmF2zu0_I", "title": "Sparks - Eaten By The Monster Of Love (1982)", "description": "Hi Guys!!  If you get a chance, check out my Facebook page!  Please like the page, I would\nso appreciate it!! THANK YOU SO MUCH!!     https://www.facebook.com/pages/BOSTONIAN-BOBS-PRESENTS-BACK-FROM-THE-80s/473248326038871", "duration": 189}, {"id": "6Y4W9yVA00c", "thumbnail": "https://i.ytimg.com/vi/6Y4W9yVA00c/default.jpg", "file": "https://www.youtube.com/watch?v=6Y4W9yVA00c", "title": "SPARKS NEVER TURN YOUR BACK ON MOTHER EARTH", "description": "SPARKS NEVER TURN YOUR BACK ON MOTHER EARTH", "duration": 150}, {"id": "Ls0xfyO4Cc0", "thumbnail": "https://i.ytimg.com/vi/Ls0xfyO4Cc0/default.jpg", "file": "https://www.youtube.com/watch?v=Ls0xfyO4Cc0", "title": "Hasta Manana, Monsieur", "description": "Provided to YouTube by Universal Music Group\n\nHasta Manana, Monsieur \u00b7 Sparks\n\nKimono My House\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Muff Winwood\nAssociated  Performer, Vocals: Ru", "duration": 232}, {"id": "AgGMU3puNJE", "thumbnail": "https://i.ytimg.com/vi/AgGMU3puNJE/default.jpg", "file": "https://www.youtube.com/watch?v=AgGMU3puNJE", "title": "Sparks - The Rhythm Thief (official video)", "description": "The official video for the single The Rhythm Thief from the 2002 album Lil\u0027 Beethoven. Directed by Kuntzel + Deygas.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow SP", "duration": 241}, {"id": "08DFrY4ig_c", "thumbnail": "https://i.ytimg.com/vi/08DFrY4ig_c/default.jpg", "file": "https://www.youtube.com/watch?v=08DFrY4ig_c", "title": "Sparks \u0027Amateur Hour\u0027", "description": "LYRICS-\n\nLawns grow plush in the hinterlands\nIt\u0027s the perfect little setting for the one night stands\nNow the drapes are drawn and the lights are out\nIt\u0027s the time to put in practice what you\u0027ve dreamed about\n\nShe can show you what you must do\nTo be more ", "duration": 223}, {"id": "CrcKasSeEfo", "thumbnail": "https://i.ytimg.com/vi/CrcKasSeEfo/default.jpg", "file": "https://www.youtube.com/watch?v=CrcKasSeEfo", "title": "Sparks Selections from The Seduction of Ingmar Bergman", "description": "November 6, 2013\nLincoln Hall, Chicago", "duration": 375}, {"id": "3ryeJ1vvqko", "thumbnail": "https://i.ytimg.com/vi/3ryeJ1vvqko/default.jpg", "file": "https://www.youtube.com/watch?v=3ryeJ1vvqko", "title": "Sparks \u0026 Faith No More  Something For The Girl With Everything", "description": "Sparks originally recorded Something For The Girl With Everything for their 1974 album, Propaganda. This version was recorded with Faith No More for the 1997 album, Plagiarism.", "duration": 204}, {"id": "kEKnBDHtj70", "thumbnail": "https://i.ytimg.com/vi/kEKnBDHtj70/default.jpg", "file": "https://www.youtube.com/watch?v=kEKnBDHtj70", "title": "Sparks - Pretending To Be Drunk (Extended Version-New Mix) 1984", "description": "\u05ea\u05d9\u05d0\u05d5\u05e8", "duration": 340}, {"id": "_oMFdj71ekQ", "thumbnail": "https://i.ytimg.com/vi/_oMFdj71ekQ/default.jpg", "file": "https://www.youtube.com/watch?v=_oMFdj71ekQ", "title": "Sparks - I Wish I Looked A Little Better", "description": "Sparks - I Wish I Looked A Little Better\n\u24e1\u24d4\u24e3\u24e1\u24de\u24dc\u24e4\u24e2\u24db\u00a9\u2466\u2460\n\u0442\u00f8d\u00f8s l\u00f8s D\u04d9\u0280\u04d9c\u043d\u00f8s \u0280\u04d9s\u04d9\u0280v\u03b1d\u00f8s Inc.\u00a9\n\u0134\u0127\u00f8\u014a \u2022 M\u00b2 \u2022 \u011e\u212e\u0281\u0281\u00a5 \u261e\u2122 \u00ae2012", "duration": 182}, {"id": "hHHTCV8JyWI", "thumbnail": "https://i.ytimg.com/vi/hHHTCV8JyWI/default.jpg", "file": "https://www.youtube.com/watch?v=hHHTCV8JyWI", "title": "Upstairs", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nUpstairs \u00b7 Sparks\n\nWhomp That Sucker\n\n\u2117 1981 Lil\u0027 Beethoven\n\nReleased on: 1981-01-01\n\nAuto-generated by YouTube.", "duration": 222}, {"id": "O3CA5S09KvM", "thumbnail": "https://i.ytimg.com/vi/O3CA5S09KvM/default.jpg", "file": "https://www.youtube.com/watch?v=O3CA5S09KvM", "title": "Pretending To Be Drunk", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nPretending To Be Drunk \u00b7 Sparks\n\nPulling Rabbits Out Of A Hat\n\n\u2117 1984 Lil\u0027 Beethoven\n\nReleased on: 1984-06-01\n\nAuto-generated by YouTube.", "duration": 221}, {"id": "_AK4Tfei7Fk", "thumbnail": "https://i.ytimg.com/vi/_AK4Tfei7Fk/default.jpg", "file": "https://www.youtube.com/watch?v=_AK4Tfei7Fk", "title": "Sparks - Beaver O\u0027Lindy - 45rpm Early Sparks!! 1973", "description": "Silly but fun Sparks tune from A Woofer In Tweeters Clothing. Sparks was also know as Halfnelson, First LP. Featuring brothers Ron and Russell Mael from Los Angeles. UK pressing", "duration": 228}, {"id": "QAzESJ62irI", "thumbnail": "https://i.ytimg.com/vi/QAzESJ62irI/default.jpg", "file": "https://www.youtube.com/watch?v=QAzESJ62irI", "title": "Sparks - This Town Ain\u0027t Big Enough For Both Of Us", "description": "Disco 28/09/74 - Ron Mael - Russell Mael - Ian Hampton - Trevor White - Dinky Diamond", "duration": 182}, {"id": "B3sxH9u-cX0", "thumbnail": "https://i.ytimg.com/vi/B3sxH9u-cX0/default.jpg", "file": "https://www.youtube.com/watch?v=B3sxH9u-cX0", "title": "SPARKS  - Check out time 11am", "description": "SPARKS new single release to support Indie Record Store Day 24/11/17.", "duration": 213}, {"id": "10KhRgMz9Wk", "thumbnail": "https://i.ytimg.com/vi/10KhRgMz9Wk/default.jpg", "file": "https://www.youtube.com/watch?v=10KhRgMz9Wk", "title": "Edith Piaf (Said It Better Than Me) (Jori Hulkkonen Remix 2)", "description": "Provided to YouTube by BMG Rights Management (UK) Limited\n\nEdith Piaf (Said It Better Than Me) (Jori Hulkkonen Remix 2) \u00b7 Sparks\n\nEdith Piaf (Said It Better Than Me)\n\n\u2117 2017 BMG Rights Management (UK) Limited\n\nMastering  Engineer: Bill Inglot\nGuitar: D", "duration": 348}, {"id": "T0lvV7x380A", "thumbnail": "https://i.ytimg.com/vi/T0lvV7x380A/default.jpg", "file": "https://www.youtube.com/watch?v=T0lvV7x380A", "title": "Sparks - I Like Girls", "description": "", "duration": 174}, {"id": "YacRIGByJbo", "thumbnail": "https://i.ytimg.com/vi/YacRIGByJbo/default.jpg", "file": "https://www.youtube.com/watch?v=YacRIGByJbo", "title": "Record Store Day Preview 2018 / Sparks 2LP red vinyl", "description": "SuperDeluxeEdition.com editor Paul Sinclair previews Universal Music\u0027s double red vinyl pressing of The Best and the Rest of the Island Years 74-78. This is a Record Store Day exclusive for 2018.", "duration": 74}, {"id": "KL33oPleRNo", "thumbnail": "https://i.ytimg.com/vi/KL33oPleRNo/default.jpg", "file": "https://www.youtube.com/watch?v=KL33oPleRNo", "title": "It\u0027s A Knock Off - Sparks Video", "description": "It\u0027s A Knock Off - Balls.  Sparks Video", "duration": 230}, {"id": "rfZ23F89p5c", "thumbnail": "https://i.ytimg.com/vi/rfZ23F89p5c/default.jpg", "file": "https://www.youtube.com/watch?v=rfZ23F89p5c", "title": "Sparks You\u0027ve Earned The Right To Be A Dick", "description": "Sparks You\u0027ve Earned The Right To Be A Dick\n\nPreviously unreleased track outside of Japan (physical Japan only CD) \u2018You\u2019ve Earned The Right To Be A Dick\u2019 is a track taken from the \u2018Hippopotamus\u2019 album sessions.\n\nLYRICS \nYou\u0027ve Earned the Right t", "duration": 221}, {"id": "GKUuS4OOlOw", "thumbnail": "https://i.ytimg.com/vi/GKUuS4OOlOw/default.jpg", "file": "https://www.youtube.com/watch?v=GKUuS4OOlOw", "title": "Sparks Christmas Without A Prayer (Unofficial)  Video", "description": "", "duration": 190}, {"id": "qptCAZaAObM", "thumbnail": "https://i.ytimg.com/vi/qptCAZaAObM/default.jpg", "file": "https://www.youtube.com/watch?v=qptCAZaAObM", "title": "Edith Piaf (Said It Better Than Me)", "description": "Provided to YouTube by BMG Rights Management (UK) Limited\n\nEdith Piaf (Said It Better Than Me) \u00b7 Sparks\n\nEdith Piaf (Said It Better Than Me)\n\n\u2117 2017 BMG Rights Management (UK) Ltd.\n\nEngineer: Bill Inglot\nMastering  Engineer: Bill Inglot\nGuitar: Dean Me", "duration": 273}, {"id": "eUn4kMEx_5c", "thumbnail": "https://i.ytimg.com/vi/eUn4kMEx_5c/default.jpg", "file": "https://www.youtube.com/watch?v=eUn4kMEx_5c", "title": "Sparks - When Do I Get To Sing My Way (Men Behind Club Mix 1994)", "description": "Sparks - When Do I Get To Sing My Way (Men Behind Club Mix)\n\nNo, no use in lecturing them, or in threatening them\nThey will just say who are you\nIs that a question or not, and you see that the plot\nIs predictable, not new\nBut you\u0027re still stunned at the", "duration": 329}, {"id": "H62a5TkohK0", "thumbnail": "https://i.ytimg.com/vi/H62a5TkohK0/default.jpg", "file": "https://www.youtube.com/watch?v=H62a5TkohK0", "title": "Sparks - Wonder girl ( Original Footage Hits-A-Gogo German TV 1972 Vinyl 33 Rpm Remastered )", "description": "", "duration": 142}, {"id": "HscXpYZcRB4", "thumbnail": "https://i.ytimg.com/vi/HscXpYZcRB4/default.jpg", "file": "https://www.youtube.com/watch?v=HscXpYZcRB4", "title": "Lets Go Surfing", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nLets Go Surfing \u00b7 Sparks\n\nGratuitous Sax \u0026 Senseless Violins\n\n\u2117 1994 Lil\u0027 Beethoven\n\nReleased on: 1994-11-01\n\nAuto-generated by YouTube.", "duration": 303}, {"id": "8Givls9BUhc", "thumbnail": "https://i.ytimg.com/vi/8Givls9BUhc/default.jpg", "file": "https://www.youtube.com/watch?v=8Givls9BUhc", "title": "Sparks - Please Don\u0027t Fuck Up My World (Official Lyric Video)", "description": "The official audio for \u0027Please Don\u0027t Fuck Up My World\u0027 by Sparks, from the new album \u0027A Steady Drip, Drip, Drip\u0027. Stream/Download from 15th May 2020. CD/Vinyl out July 3. Pre-order here: https://sparks.lnk.to/dripID\n\nFollow Sparks\nWebsite: http://allspark", "duration": 205}, {"id": "_ZZYU_gP-zI", "thumbnail": "https://i.ytimg.com/vi/_ZZYU_gP-zI/default.jpg", "file": "https://www.youtube.com/watch?v=_ZZYU_gP-zI", "title": "Sparks -  Live in Stockholm 2004  ( Part 2 - Bonus live Tracks - Sparks play Sparks )", "description": "From Sparks DVD Lil\u0027 Beethoven Live in Stockholm 2004 - Part Two Bonus live tracks - Sparks play Sparks .....Here is a link to Part 1 - Lil\u0027 Beethoven - The entire album live https://youtu.be/fEgpkmloOzY", "duration": 3946}, {"id": "SLooE6wtYCU", "thumbnail": "https://i.ytimg.com/vi/SLooE6wtYCU/default.jpg", "file": "https://www.youtube.com/watch?v=SLooE6wtYCU", "title": "I Want To Be Like Everybody Else", "description": "Provided to YouTube by Universal Music Group\n\nI Want To Be Like Everybody Else \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1976 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Rupert Holmes\nProducer, Associate  Producer", "duration": 176}, {"id": "T27SBd7FsHQ", "thumbnail": "https://i.ytimg.com/vi/T27SBd7FsHQ/default.jpg", "file": "https://www.youtube.com/watch?v=T27SBd7FsHQ", "title": "Sparks........Music That You Can Dance To", "description": "Sparks........Music That You Can Dance To........1986........video starts about 20 seconds into the song.  I took what video I had and redubbed the audio over it!", "duration": 257}, {"id": "JlGZN74iaZ4", "thumbnail": "https://i.ytimg.com/vi/JlGZN74iaZ4/default.jpg", "file": "https://www.youtube.com/watch?v=JlGZN74iaZ4", "title": "La Dolce Vita", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nLa Dolce Vita \u00b7 Sparks\n\nNo. 1 In Heaven\n\n\u2117 2019 Lil\u0027 Beethoven Records\n\nReleased on: 1979-03-02\n\nAuto-generated by YouTube.", "duration": 357}, {"id": "AVD5oJDuXTA", "thumbnail": "https://i.ytimg.com/vi/AVD5oJDuXTA/default.jpg", "file": "https://www.youtube.com/watch?v=AVD5oJDuXTA", "title": "Reinforcements", "description": "Provided to YouTube by Universal Music Group\n\nReinforcements \u00b7 Sparks\n\nPropaganda\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1974-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist: Ron Mael\nComposer  Lyricis", "duration": 234}, {"id": "ZTP0kckI0h0", "thumbnail": "https://i.ytimg.com/vi/ZTP0kckI0h0/default.jpg", "file": "https://www.youtube.com/watch?v=ZTP0kckI0h0", "title": "Rosebud", "description": "Provided to YouTube by Curb Records\n\nRosebud \u00b7 Sparks\n\nMusic That You Can Dance To\n\n\u2117 Curb Records, Inc.\n\nReleased on: 1986-07-01\n\nArtist: Sparks\n\nAuto-generated by YouTube.", "duration": 279}, {"id": "TrAE7M10qYM", "thumbnail": "https://i.ytimg.com/vi/TrAE7M10qYM/default.jpg", "file": "https://www.youtube.com/watch?v=TrAE7M10qYM", "title": "Sparks - When Do I Get To Sing My Way (Live in London)", "description": " ", "duration": 344}, {"id": "FBiVzLiTg3w", "thumbnail": "https://i.ytimg.com/vi/FBiVzLiTg3w/default.jpg", "file": "https://www.youtube.com/watch?v=FBiVzLiTg3w", "title": "Sparks - Dance Godammit (New Mix) 1983", "description": "\u05ea\u05d9\u05d0\u05d5\u05e8", "duration": 244}, {"id": "6T4eojz1S9k", "thumbnail": "https://i.ytimg.com/vi/6T4eojz1S9k/default.jpg", "file": "https://www.youtube.com/watch?v=6T4eojz1S9k", "title": "Sparks - The Calm Before the Opera", "description": "From Balls [Australia]", "duration": 189}, {"id": "3TDRAwALI-I", "thumbnail": "https://i.ytimg.com/vi/3TDRAwALI-I/default.jpg", "file": "https://www.youtube.com/watch?v=3TDRAwALI-I", "title": "Sparks - Progress", "description": "", "duration": 233}, {"id": "837eZOQVs-w", "thumbnail": "https://i.ytimg.com/vi/837eZOQVs-w/default.jpg", "file": "https://www.youtube.com/watch?v=837eZOQVs-w", "title": "Sparks - At Home At Work At Play", "description": "From Propaganda Released in November 1974\r\nLyrics: \r\nAt home, at work, at play\r\nI know you\u0027re unavailable from dusk to dawn\r\nOr if you were available you\u0027d bring along\r\nA lot of what could only be a hindrance to me\r\nI ain\u0027t a glutton for a lot of sweaty", "duration": 194}, {"id": "DrAOpcrhWA8", "thumbnail": "https://i.ytimg.com/vi/DrAOpcrhWA8/default.jpg", "file": "https://www.youtube.com/watch?v=DrAOpcrhWA8", "title": "Sparks - Now That I Own The BBC (Motiv 8 Extended Vocal Mix) =1996", "description": "", "duration": 363}, {"id": "ChaHtYdaUb4", "thumbnail": "https://i.ytimg.com/vi/ChaHtYdaUb4/default.jpg", "file": "https://www.youtube.com/watch?v=ChaHtYdaUb4", "title": "Sparks - Beaver O\u0027Lindy", "description": "From A Woofer In A Tweeter\u0027s Clothing\r\nProduced by James Lowe, 1972", "duration": 226}, {"id": "tf6gB0aoDxg", "thumbnail": "https://i.ytimg.com/vi/tf6gB0aoDxg/default.jpg", "file": "https://www.youtube.com/watch?v=tf6gB0aoDxg", "title": "Sparks- Ladies", "description": "Introducing Sparks", "duration": 186}, {"id": "R6saLZGBV8E", "thumbnail": "https://i.ytimg.com/vi/R6saLZGBV8E/default.jpg", "file": "https://www.youtube.com/watch?v=R6saLZGBV8E", "title": "Sparks When I kiss I hear Charlie Parker", "description": "gratuitous sax", "duration": 219}, {"id": "eD6byRAKXK4", "thumbnail": "https://i.ytimg.com/vi/eD6byRAKXK4/default.jpg", "file": "https://www.youtube.com/watch?v=eD6byRAKXK4", "title": "Sparks  -    Change", "description": "-uploaded in HD at http://www.TunesToTube.com", "duration": 325}, {"id": "M_r0FUscw3Y", "thumbnail": "https://i.ytimg.com/vi/M_r0FUscw3Y/default.jpg", "file": "https://www.youtube.com/watch?v=M_r0FUscw3Y", "title": "Sparks - This Is The Renaissance", "description": "From the album Exotic Creatures of the Deep.", "duration": 227}, {"id": "ZGd7DXAbTDQ", "thumbnail": "https://i.ytimg.com/vi/ZGd7DXAbTDQ/default.jpg", "file": "https://www.youtube.com/watch?v=ZGd7DXAbTDQ", "title": "Sparks - Madonna (French Version)", "description": "Versi\u00f3n en franc\u00e9s de la \u00e9pica canci\u00f3n Madonna del legendario dueto Sparks.", "duration": 280}, {"id": "eltSGbHrCT4", "thumbnail": "https://i.ytimg.com/vi/eltSGbHrCT4/default.jpg", "file": "https://www.youtube.com/watch?v=eltSGbHrCT4", "title": "Sparks - Good Morning (Live)", "description": "Two Hands One Mouth: Live In Europe, 2013", "duration": 231}, {"id": "AD-J0d1poz8", "thumbnail": "https://i.ytimg.com/vi/AD-J0d1poz8/default.jpg", "file": "https://www.youtube.com/watch?v=AD-J0d1poz8", "title": "No Limite da Loucura 1983 Malcolm Mcdowell Cantando Hot Shot", "description": "Hot Shot! (Tiro Quente)\n\nEu sou o futuro e adoro ouvir a multid\u00e3o rugir!\nO \u00fanico sobrevivente de 100 guerras de rock and roll!\nEu sou a lenda que brilha, eu sou uma esp\u00e9cie de institui\u00e7\u00e3o.\nN\u00e3o te encho de amor? Eu sou um milagre da evolu\u00e7\u00e3o!\n\nVoc", "duration": 285}, {"id": "oC0rzv1j8Zc", "thumbnail": "https://i.ytimg.com/vi/oC0rzv1j8Zc/default.jpg", "file": "https://www.youtube.com/watch?v=oC0rzv1j8Zc", "title": "Sparks - What The Hell Is It This Time? (Official Video)", "description": "The second single from the new Sparks album \u0027Hippopotamus\u0027. \nThe album is out now, get it here: https://sparks.lnk.to/hippopotamusID\nOrder special bundles: https://sparks.tmstor.es/\n\nDirected by Galen Johnson and Evan Johnson\n\nLive action director: Courtn", "duration": 243}, {"id": "3WXvOdJz5rg", "thumbnail": "https://i.ytimg.com/vi/3WXvOdJz5rg/default.jpg", "file": "https://www.youtube.com/watch?v=3WXvOdJz5rg", "title": "SPARKS with Jane Wiedlin   COOL PLACES   1983      HQ", "description": "Cool Places is a song recorded by American duo Sparks in collaboration with Go-Go\u0027s member Jane Wiedlin. The song was released as the lead single for Sparks\u2019s 1983 album In Outer Space. At the time Sparks were at their most popular in US, their two pr", "duration": 203}, {"id": "27R4U8fykuc", "thumbnail": "https://i.ytimg.com/vi/27R4U8fykuc/default.jpg", "file": "https://www.youtube.com/watch?v=27R4U8fykuc", "title": "Sparks - How To Get Your Ass Kicked", "description": "from Balls", "duration": 259}, {"id": "pKFiOCKhLfg", "thumbnail": "https://i.ytimg.com/vi/pKFiOCKhLfg/default.jpg", "file": "https://www.youtube.com/watch?v=pKFiOCKhLfg", "title": "Sparks - (When I Kiss You) I Hear Charlie Parker Playing [official video]", "description": "The official video for the single (When I Kiss You) I Hear Charlie Parker Playing from the 1994 album Gratuitous Sax \u0026 Senseless Violins directed by Sophie Muller.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitte", "duration": 230}, {"id": "iVO1wMeC_mk", "thumbnail": "https://i.ytimg.com/vi/iVO1wMeC_mk/default.jpg", "file": "https://www.youtube.com/watch?v=iVO1wMeC_mk", "title": "Sparks \u0027Biology 2\u0027", "description": "(Earle Mankey)\n\nHey Lisa, they\u0027re having a big party down at the Allele Pool tonight!\n\nOooh, let\u0027s do it!\n\nYou will put your good traits in\nYou will put your bad traits out\n\nDo the Homozygous as you shake them all about\n\nUnless you\u0027ve got your dominan", "duration": 191}, {"id": "UUxheK7soS4", "thumbnail": "https://i.ytimg.com/vi/UUxheK7soS4/default.jpg", "file": "https://www.youtube.com/watch?v=UUxheK7soS4", "title": "Eaten By The Monster Of Love", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nEaten By The Monster Of Love \u00b7 Sparks\n\nAngst In My Pants\n\n\u2117 1982 Lil\u0027 Beethoven\n\nReleased on: 1982-03-29\n\nAuto-generated by YouTube.", "duration": 180}, {"id": "m9Ckc_NcvTg", "thumbnail": "https://i.ytimg.com/vi/m9Ckc_NcvTg/default.jpg", "file": "https://www.youtube.com/watch?v=m9Ckc_NcvTg", "title": "SPARKS- Lil\u0027 Beethoven / Live in Stockholm(2002)", "description": " ", "duration": 374}, {"id": "WILj-tnz56s", "thumbnail": "https://i.ytimg.com/vi/WILj-tnz56s/default.jpg", "file": "https://www.youtube.com/watch?v=WILj-tnz56s", "title": "Sparks-A Woofer in Tweeter\u0027s Clothing [Full Album] 1972", "description": "1972", "duration": 2935}, {"id": "JqNcZQ7cVno", "thumbnail": "https://i.ytimg.com/vi/JqNcZQ7cVno/default.jpg", "file": "https://www.youtube.com/watch?v=JqNcZQ7cVno", "title": "Rock \u0027N\u0027 Roll People In A Disco World", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nRock \u0027N\u0027 Roll People In A Disco World \u00b7 Sparks\n\nTerminal Jive\n\n\u2117 1980 Lil\u0027 Beethoven\n\nReleased on: 1980-01-28\n\nAuto-generated by YouTube.", "duration": 288}, {"id": "RxdSiPfS_j8", "thumbnail": "https://i.ytimg.com/vi/RxdSiPfS_j8/default.jpg", "file": "https://www.youtube.com/watch?v=RxdSiPfS_j8", "title": "Sparks - When I Kiss You I Hear Charlie Parker Playing (Live in London)", "description": " ", "duration": 362}, {"id": "T6gwIgsHMis", "thumbnail": "https://i.ytimg.com/vi/T6gwIgsHMis/default.jpg", "file": "https://www.youtube.com/watch?v=T6gwIgsHMis", "title": "Les Rita Mitsouko \u0026 The Sparks  - Singing In The Shower (Clip Officiel)", "description": "Les Rita Mitsouko \u0026 The Sparks  - Singing In The Shower - r\u00e9alis\u00e9 par Tim Pope\n\nToute la discographie des Rita Mitsouko est remasteris\u00e9e.\n\nRed\u00e9couvrez l\u2019int\u00e9gralit\u00e9 de leur discographie : https://lesritamitsouko.lnk.to/discographie\n\nAlbums disponi", "duration": 261}, {"id": "iBQ6P9vrCNc", "thumbnail": "https://i.ytimg.com/vi/iBQ6P9vrCNc/default.jpg", "file": "https://www.youtube.com/watch?v=iBQ6P9vrCNc", "title": "Sparks - Kiss Me Quick [Extended Version/New Mix]", "description": "Sparks\nKiss Me Quick [Extended Version/New Mix]\nPretending To Be Drunk 12\u0027\u0027 [Atlantic 1984]", "duration": 341}, {"id": "BrMoM_r3oAE", "thumbnail": "https://i.ytimg.com/vi/BrMoM_r3oAE/default.jpg", "file": "https://www.youtube.com/watch?v=BrMoM_r3oAE", "title": "Sparks - Hasta Ma\u00f1ana Monsieur", "description": "From the album entitled Kimono My House 1974", "duration": 236}, {"id": "XAZVHAoWxog", "thumbnail": "https://i.ytimg.com/vi/XAZVHAoWxog/default.jpg", "file": "https://www.youtube.com/watch?v=XAZVHAoWxog", "title": "Suzie Safety", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nSuzie Safety \u00b7 Sparks\n\nWhomp That Sucker\n\n\u2117 1981 Lil\u0027 Beethoven\n\nReleased on: 1981-01-01\n\nAuto-generated by YouTube.", "duration": 239}, {"id": "VOMSwpe9lyI", "thumbnail": "https://i.ytimg.com/vi/VOMSwpe9lyI/default.jpg", "file": "https://www.youtube.com/watch?v=VOMSwpe9lyI", "title": "Sparks - A Big Surprise", "description": "from Introducing Sparks (1977) Ron \u0026 Russell Mael", "duration": 218}, {"id": "B-q52m2nJC8", "thumbnail": "https://i.ytimg.com/vi/B-q52m2nJC8/default.jpg", "file": "https://www.youtube.com/watch?v=B-q52m2nJC8", "title": "Sparks -   Hippopotamus", "description": "From the BBC6 Music concert live at The Glasgow O2 Academy 24/03/17", "duration": 251}, {"id": "ugfkOLp4KBM", "thumbnail": "https://i.ytimg.com/vi/ugfkOLp4KBM/default.jpg", "file": "https://www.youtube.com/watch?v=ugfkOLp4KBM", "title": "Edith Piaf (Said It Better Than Me) (Jori Hulkkonen Remix 1)", "description": "Provided to YouTube by BMG Rights Management (UK) Limited\n\nEdith Piaf (Said It Better Than Me) (Jori Hulkkonen Remix 1) \u00b7 Sparks\n\nEdith Piaf (Said It Better Than Me)\n\n\u2117 2017 BMG Rights Management (UK) Limited\n\nMastering  Engineer: Bill Inglot\nGuitar: D", "duration": 319}, {"id": "QhPq_YYKNhc", "thumbnail": "https://i.ytimg.com/vi/QhPq_YYKNhc/default.jpg", "file": "https://www.youtube.com/watch?v=QhPq_YYKNhc", "title": "Edith Piaf (Said It Better Than Me) (Whatever/Whatever Remix)", "description": "Provided to YouTube by BMG Rights Management (UK) Ltd\n\nEdith Piaf (Said It Better Than Me) (Whatever/Whatever Remix) \u00b7 Sparks \u00b7 Justin Strauss \u00b7 Bryan Mette\n\nEdith Piaf (Said It Better Than Me)\n\n\u2117 2017 BMG Rights Management (UK) Limited\n\nMastering  E", "duration": 503}, {"id": "cj0TkPEdWd0", "thumbnail": "https://i.ytimg.com/vi/cj0TkPEdWd0/default.jpg", "file": "https://www.youtube.com/watch?v=cj0TkPEdWd0", "title": "This Town Ain\u0027t Big Enough For Both Of Us", "description": "Provided to YouTube by Universal Music Group\n\nThis Town Ain\u0027t Big Enough For Both Of Us \u00b7 Sparks\n\nKimono My House\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Muff Winwood\nAssociated  Pe", "duration": 185}, {"id": "QKAZGsVU-Fc", "thumbnail": "https://i.ytimg.com/vi/QKAZGsVU-Fc/default.jpg", "file": "https://www.youtube.com/watch?v=QKAZGsVU-Fc", "title": "Sparks - Photoshop - June 13th 2008", "description": "Sparks Exotic Creatures of the Deep live performance June 13th 2008. The second to last track, Photoshop.\r\n\r\nI wanted to include my entire video footage but it exceeds the allowed length.", "duration": 258}, {"id": "FdQ4pLaPuYw", "thumbnail": "https://i.ytimg.com/vi/FdQ4pLaPuYw/default.jpg", "file": "https://www.youtube.com/watch?v=FdQ4pLaPuYw", "title": "Sparks - Christmas Without A Prayer (Official Video)", "description": "\u0027Christmas Without A Prayer,\u0027 the new single from Sparks.\nReleased December 4, 2015 on Lil\u0027 Beethoven Records.\n\nLyrics and music by Ron Mael and Russell Mael\n\nPublished by Borderline Attractive Music, administered by Wixen Music\n\nLike SPARKS on Facebook: ", "duration": 180}, {"id": "SXFofdNEwog", "thumbnail": "https://i.ytimg.com/vi/SXFofdNEwog/default.jpg", "file": "https://www.youtube.com/watch?v=SXFofdNEwog", "title": "Sparks at Lincoln Hall: Revenge of Two Hands One Mouth", "description": "From Russell and Ron\u0027s 11/7/13 show at Lincoln Hall in Chicago.", "duration": 229}, {"id": "vlXeg84CN-8", "thumbnail": "https://i.ytimg.com/vi/vlXeg84CN-8/default.jpg", "file": "https://www.youtube.com/watch?v=vlXeg84CN-8", "title": "Sparks - She\u0027s beautiful (So what?)", "description": "During the 21 x 21 Sparks Spectacular shows in London/Islington (2008) our two sons became great Sparks fans. Now they had this video idea for She\u0027s beautiful (So what?)... Thanks to Ron and Russel Mael for all your fine music!", "duration": 228}, {"id": "ogn4GWHPsWE", "thumbnail": "https://i.ytimg.com/vi/ogn4GWHPsWE/default.jpg", "file": "https://www.youtube.com/watch?v=ogn4GWHPsWE", "title": "Sparks - Scandinavian Design (Official Audio)", "description": "Taken from Sparks\u0027 latest album \u0027Hippopotamus\u0027, out now. \nGet it here: https://sparks.lnk.to/hippopotamusID. \nOrder special bundles: https://sparks.tmstor.es/\n\n\u00a9 BMG Rights Management Ltd (UK) 2017\n\nTour dates: http://www.allsparks.com/calendar\nWebsite: ", "duration": 251}, {"id": "A6bkW_srEIo", "thumbnail": "https://i.ytimg.com/vi/A6bkW_srEIo/default.jpg", "file": "https://www.youtube.com/watch?v=A6bkW_srEIo", "title": "Sparks - All You Ever Think About Is Sex", "description": "", "duration": 215}, {"id": "dZys5r6yi2o", "thumbnail": "https://i.ytimg.com/vi/dZys5r6yi2o/default.jpg", "file": "https://www.youtube.com/watch?v=dZys5r6yi2o", "title": "Sparks - Edith Piaf (Said It Better Than Me) (Official Audio)", "description": "From the new Sparks album \u0027Hippopotamus\u0027, out now. \nGet the album here: https://sparks.lnk.to/hippopotamusID\nOrder special bundles: https://sparks.tmstor.es\n\nTour Dates: http://allsparks.com/calendar/\n\nFollow Sparks:\nWebsite: http://allsparks.com/\nFaceboo", "duration": 273}, {"id": "C8dqCQ2MHfQ", "thumbnail": "https://i.ytimg.com/vi/C8dqCQ2MHfQ/default.jpg", "file": "https://www.youtube.com/watch?v=C8dqCQ2MHfQ", "title": "Sparks - When Do I Get To Sing \u0027My Way\u0027(official video)", "description": "The official video for the single When Do I Get To Sing \u0027My Way\u0027 from the 1994 album Gratuitous Sax \u0026 Senseless Violins directed by Sophie Muller.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitte", "duration": 246}, {"id": "8J9QMno-rms", "thumbnail": "https://i.ytimg.com/vi/8J9QMno-rms/default.jpg", "file": "https://www.youtube.com/watch?v=8J9QMno-rms", "title": "Sparks - Music That You Can Dance To (7 Version)", "description": "Synth Pop / Hi-NRG (USA, 1986) Single edit. Ripped a UK 7 vinyl", "duration": 222}, {"id": "NHBJYjseaSw", "thumbnail": "https://i.ytimg.com/vi/NHBJYjseaSw/default.jpg", "file": "https://www.youtube.com/watch?v=NHBJYjseaSw", "title": "B.C.", "description": "Provided to YouTube by Universal Music Group\n\nB.C. \u00b7 Sparks\n\nPropaganda\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1974-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist: Ron Mael\n\nAuto-generated by YouTube.", "duration": 132}, {"id": "RABCVQNV9uY", "thumbnail": "https://i.ytimg.com/vi/RABCVQNV9uY/default.jpg", "file": "https://www.youtube.com/watch?v=RABCVQNV9uY", "title": "Sparks - More Than A Sex Machine (Live in London)", "description": " ", "duration": 297}, {"id": "pPboAdbsDAk", "thumbnail": "https://i.ytimg.com/vi/pPboAdbsDAk/default.jpg", "file": "https://www.youtube.com/watch?v=pPboAdbsDAk", "title": "Fingertips", "description": "Provided to YouTube by Curb Records\n\nFingertips \u00b7 Sparks\n\nMusic That You Can Dance To\n\n\u2117 Curb Records, Inc.\n\nReleased on: 1986-07-01\n\nArtist: Sparks\n\nAuto-generated by YouTube.", "duration": 262}, {"id": "nQzhn7i4P28", "thumbnail": "https://i.ytimg.com/vi/nQzhn7i4P28/default.jpg", "file": "https://www.youtube.com/watch?v=nQzhn7i4P28", "title": "Sparks - Never turn your back on mother earth.wmv", "description": " ", "duration": 149}, {"id": "Tdl5t-l5-4E", "thumbnail": "https://i.ytimg.com/vi/Tdl5t-l5-4E/default.jpg", "file": "https://www.youtube.com/watch?v=Tdl5t-l5-4E", "title": "All You Ever Think About Is Sex", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nAll You Ever Think About Is Sex \u00b7 Sparks\n\nIn Outer Space\n\n\u2117 1983 Lil\u0027 Beethoven\n\nReleased on: 1983-04-01\n\nAuto-generated by YouTube.", "duration": 250}, {"id": "rbWPwqw-nqY", "thumbnail": "https://i.ytimg.com/vi/rbWPwqw-nqY/default.jpg", "file": "https://www.youtube.com/watch?v=rbWPwqw-nqY", "title": "Sparks - Now That I Own The BBC Interview", "description": "Ron \u0026 Russell Mael 1996", "duration": 145}, {"id": "75KDyFiZxVo", "thumbnail": "https://i.ytimg.com/vi/75KDyFiZxVo/default.jpg", "file": "https://www.youtube.com/watch?v=75KDyFiZxVo", "title": "Sparks Beat the Clock Extended Mix", "description": "12 inch Blue vinyl picture disc", "duration": 406}, {"id": "3yAGWHiOj18", "thumbnail": "https://i.ytimg.com/vi/3yAGWHiOj18/default.jpg", "file": "https://www.youtube.com/watch?v=3yAGWHiOj18", "title": "Sparks - Pulling rabbits out of a hat (Plagiarism)", "description": "\u0027Pulling rabbits out of a hat\u0027 by the Sparks. From the 1997 album \u0027Plagiarism\u0027", "duration": 216}, {"id": "k9p73NojlRc", "thumbnail": "https://i.ytimg.com/vi/k9p73NojlRc/default.jpg", "file": "https://www.youtube.com/watch?v=k9p73NojlRc", "title": "Sparks - Life With The Macbeths (Official Audio)", "description": "Taken from Sparks\u0027 latest album \u0027Hippopotamus\u0027, out now. \nGet it here: https://sparks.lnk.to/hippopotamusID. \nOrder special bundles: https://sparks.tmstor.es/\n\n\u00a9 BMG Rights Management Ltd (UK) 2017\n\nTour dates: http://www.allsparks.com/calendar\nWebsite: ", "duration": 253}, {"id": "soOomM5M0Jg", "thumbnail": "https://i.ytimg.com/vi/soOomM5M0Jg/default.jpg", "file": "https://www.youtube.com/watch?v=soOomM5M0Jg", "title": "Sparks - More Than A Sex Machine", "description": "I just got this album (Balls) and have been listening to it continually. It\u0027s very Eurodisco, especially this song. I imagine it being played in a club in Ibiza that caters to supermodel types who snort coke off of each others naughty parts and don\u0027t get ", "duration": 297}, {"id": "o6UWPYelrgE", "thumbnail": "https://i.ytimg.com/vi/o6UWPYelrgE/default.jpg", "file": "https://www.youtube.com/watch?v=o6UWPYelrgE", "title": "Sparks Live Hello Young Lovers Encore", "description": "Profile was the encore a b-side from Indiscreet i think lol", "duration": 107}, {"id": "jxIcDfcQRLw", "thumbnail": "https://i.ytimg.com/vi/jxIcDfcQRLw/default.jpg", "file": "https://www.youtube.com/watch?v=jxIcDfcQRLw", "title": "Sparks - (When I Kiss You) I Hear Charlie Parker Playing (Hollymund \u002795)", "description": "(When I Kiss You) I Hear Charlie Parker Playing. German tv 1995. Ron Mael - Russell Mael - Christi Haydon", "duration": 238}, {"id": "pqMc-xMd_zA", "thumbnail": "https://i.ytimg.com/vi/pqMc-xMd_zA/default.jpg", "file": "https://www.youtube.com/watch?v=pqMc-xMd_zA", "title": "Sparks - Scheherazade (Live in London)", "description": " ", "duration": 316}, {"id": "iA_kQHxJtj8", "thumbnail": "https://i.ytimg.com/vi/iA_kQHxJtj8/default.jpg", "file": "https://www.youtube.com/watch?v=iA_kQHxJtj8", "title": "Sparks - Moustache", "description": "Have you ever wondered what Ron would look like without the \u0027stache? If so, watch on.\r\n\r\nThis is like Andy Warhol directing a Schick ad.  I\u0027m probably not deep enough to get it. Oh well, it\u0027s 2 1/2 minutes of Ron, so what more can I ask for?\r\n\r\nAngst in ", "duration": 151}, {"id": "K6Q9SBt01so", "thumbnail": "https://i.ytimg.com/vi/K6Q9SBt01so/default.jpg", "file": "https://www.youtube.com/watch?v=K6Q9SBt01so", "title": "Sparks -  Probably Nothing (Official Audio)", "description": "Taken from Sparks\u0027 latest album \u0027Hippopotamus\u0027, out now. \nGet it here: https://sparks.lnk.to/hippopotamusID. \nOrder special bundles: https://sparks.tmstor.es/\n\n\u00a9 BMG Rights Management Ltd (UK) 2017\n\nTour dates: http://www.allsparks.com/calendar\nWebsite: ", "duration": 82}, {"id": "4sdkiNHAM74", "thumbnail": "https://i.ytimg.com/vi/4sdkiNHAM74/default.jpg", "file": "https://www.youtube.com/watch?v=4sdkiNHAM74", "title": "Sparks - Madonna (Spanish Version)", "description": "La mejor versi\u00f3n de esta genial canci\u00f3n. Disfruta tambi\u00e9n las versiones en franc\u00e9s y alem\u00e1n. :D", "duration": 280}, {"id": "ORYkqchWoJA", "thumbnail": "https://i.ytimg.com/vi/ORYkqchWoJA/default.jpg", "file": "https://www.youtube.com/watch?v=ORYkqchWoJA", "title": "Sparks - Looks Looks Looks (1975)", "description": "A single that peaked at number 26 in the UK for Sparks in October 1975.", "duration": 156}, {"id": "3T8zZPyoS34", "thumbnail": "https://i.ytimg.com/vi/3T8zZPyoS34/default.jpg", "file": "https://www.youtube.com/watch?v=3T8zZPyoS34", "title": "Sparks - When I Kiss You (I Hear Charlie Parker Playing) (Bernard Butlers Edit)", "description": "Sparks \u200e\u2013 When I Kiss You (I Hear Charlie Parker Playing)\nLabel:\nLogic Records \u200e\u2013 74321 26426-1, Logic Records \u200e\u2013 LOC 155, Logic Records \u200e\u2013 Loc 160\nFormat:\nVinyl, 12, 33 \u2153 RPM \nCountry:\nUK\nReleased:\n15 Feb 1995\nGenre:\nElectronic\nStyle:\n", "duration": 245}, {"id": "ej1GL9_vb3o", "thumbnail": "https://i.ytimg.com/vi/ej1GL9_vb3o/default.jpg", "file": "https://www.youtube.com/watch?v=ej1GL9_vb3o", "title": "Sparks - Looks Looks Looks", "description": "Looks Looks Looks performed on Supersonic", "duration": 164}, {"id": "1r9lSa_9TKg", "thumbnail": "https://i.ytimg.com/vi/1r9lSa_9TKg/default.jpg", "file": "https://www.youtube.com/watch?v=1r9lSa_9TKg", "title": "Sherlock Holmes", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nSherlock Holmes \u00b7 Sparks\n\nAngst In My Pants\n\n\u2117 1982 Lil\u0027 Beethoven\n\nReleased on: 1982-03-29\n\nAuto-generated by YouTube.", "duration": 218}, {"id": "J-9p8pNnFE0", "thumbnail": "https://i.ytimg.com/vi/J-9p8pNnFE0/default.jpg", "file": "https://www.youtube.com/watch?v=J-9p8pNnFE0", "title": "Sparks - Thanks But No Thanks", "description": "From Propaganda Released in November 1974\nLyrics: (Ron \u0026 Russel Mael)\nJust keep right on walking\nJust keep right on walking\n\nDont dilly-dally, come right home\nI dont see why I must go home\nWhen in the streets the niceties\nCome pouring out and over me\nIt", "duration": 263}, {"id": "dlHVJnP3SAM", "thumbnail": "https://i.ytimg.com/vi/dlHVJnP3SAM/default.jpg", "file": "https://www.youtube.com/watch?v=dlHVJnP3SAM", "title": "Sparks - The Seduction Of Ingmar Bergman - live performance at the Ford Amphitheatre, sizzle reel", "description": "A short sizzle reel of the premiere performance of Sparks\u0027 \u0027The Seduction Of Ingmar Bergman\u0027 at the Ford Amphitheatre on June 25th 2011 as part of the Los Angeles FIlm Festival. The cast includes Ron Mael, Russell Mael, Peter Franzen, Ann Magnusson and Gu", "duration": 194}, {"id": "74wafVgX-iA", "thumbnail": "https://i.ytimg.com/vi/74wafVgX-iA/default.jpg", "file": "https://www.youtube.com/watch?v=74wafVgX-iA", "title": "SPARKS Rosebud", "description": "From 21 x 21 Music That You Can Dance To", "duration": 291}, {"id": "QL7Xtv_8sHs", "thumbnail": "https://i.ytimg.com/vi/QL7Xtv_8sHs/default.jpg", "file": "https://www.youtube.com/watch?v=QL7Xtv_8sHs", "title": "Sparks- Gone With The Wind", "description": "Written by Russell! \n\nHence the Russell picture :3", "duration": 184}, {"id": "3Cq4SOSEWQ8", "thumbnail": "https://i.ytimg.com/vi/3Cq4SOSEWQ8/default.jpg", "file": "https://www.youtube.com/watch?v=3Cq4SOSEWQ8", "title": "Kiss Me Quick", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nKiss Me Quick \u00b7 Sparks\n\nPulling Rabbits Out Of A Hat\n\n\u2117 1984 Lil\u0027 Beethoven\n\nReleased on: 1984-06-01\n\nAuto-generated by YouTube.", "duration": 244}, {"id": "a2h_6q9B0Go", "thumbnail": "https://i.ytimg.com/vi/a2h_6q9B0Go/default.jpg", "file": "https://www.youtube.com/watch?v=a2h_6q9B0Go", "title": "I Married A Martian", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nI Married A Martian \u00b7 Sparks\n\nWhomp That Sucker\n\n\u2117 1981 Lil\u0027 Beethoven\n\nReleased on: 1981-01-01\n\nAuto-generated by YouTube.", "duration": 311}, {"id": "zG_AN9aXk1c", "thumbnail": "https://i.ytimg.com/vi/zG_AN9aXk1c/default.jpg", "file": "https://www.youtube.com/watch?v=zG_AN9aXk1c", "title": "When I Kiss You (I Hear Charlie Parker Playing)", "description": "Sparks - When I Kiss You (I Hear Charlie Parker Playing)", "duration": 227}, {"id": "MeUC-wo7LxI", "thumbnail": "https://i.ytimg.com/vi/MeUC-wo7LxI/default.jpg", "file": "https://www.youtube.com/watch?v=MeUC-wo7LxI", "title": "Beat The Clock", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nBeat The Clock \u00b7 Sparks\n\nNo.1 In Heaven\n\n\u2117 1979 Lil\u0027 Beethoven\n\nReleased on: 1979-03-01\n\nAuto-generated by YouTube.", "duration": 265}, {"id": "4Op1tcnSjX4", "thumbnail": "https://i.ytimg.com/vi/4Op1tcnSjX4/default.jpg", "file": "https://www.youtube.com/watch?v=4Op1tcnSjX4", "title": "Here In Heaven", "description": "Provided to YouTube by Universal Music Group\n\nHere In Heaven \u00b7 Sparks\n\nKimono My House\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2008-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist: Ron Mael\n\nAuto-genera", "duration": 168}, {"id": "LTJFDxtmaNU", "thumbnail": "https://i.ytimg.com/vi/LTJFDxtmaNU/default.jpg", "file": "https://www.youtube.com/watch?v=LTJFDxtmaNU", "title": "Sparks - Edith Piaf (Said It Better Than Me)- Lyrics", "description": "Enjoy the video!", "duration": 226}, {"id": "dol6uCfv_l4", "thumbnail": "https://i.ytimg.com/vi/dol6uCfv_l4/default.jpg", "file": "https://www.youtube.com/watch?v=dol6uCfv_l4", "title": "Sparks - So Important", "description": "SPARKS HAS AN OFFICIAL YOUTUBE CHANNEL NOW, FEATURING ALL THEIR VIDEOS! PLEASE CHECK IT OUT\nhttps://www.youtube.com/user/SparksOfficialVideo\n\nSparks - So important (music video). \n\nFrom Interior Design (1988).\n\nIn a perfect world, Sparks would be everybod", "duration": 275}, {"id": "mhnhCHumreE", "thumbnail": "https://i.ytimg.com/vi/mhnhCHumreE/default.jpg", "file": "https://www.youtube.com/watch?v=mhnhCHumreE", "title": "Confusion", "description": "Provided to YouTube by Universal Music Group\n\nConfusion \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1976 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Rupert Holmes\nProducer, Associate  Producer: Jeffrey Lesser\nStudio", "duration": 206}, {"id": "ky3VMiKkzys", "thumbnail": "https://i.ytimg.com/vi/ky3VMiKkzys/default.jpg", "file": "https://www.youtube.com/watch?v=ky3VMiKkzys", "title": "Sparks and Jane Wiedlin - Cool Places.mpg", "description": "Sparks with Jane Wiedlin , note the portrait of Divine in the back gtround", "duration": 212}, {"id": "ahqcr6Ksaak", "thumbnail": "https://i.ytimg.com/vi/ahqcr6Ksaak/default.jpg", "file": "https://www.youtube.com/watch?v=ahqcr6Ksaak", "title": "Sparks- Young Girls", "description": "I like their arms\nI like their legs\nI like their lips\nTheir widening hips\nTheir radios\nThey live at home\nThey don\u0027t have cars\nI have a home\nI have a car\nThey like that, they like that\n\nYoung girls haven\u0027t seen the whole night\nAnd they hold you, though it ", "duration": 293}, {"id": "v1TEjMFiXDI", "thumbnail": "https://i.ytimg.com/vi/v1TEjMFiXDI/default.jpg", "file": "https://www.youtube.com/watch?v=v1TEjMFiXDI", "title": "Sparks - Music That You Can Dance To (Club Version)", "description": "Descripci\u00f3n", "duration": 394}, {"id": "84v6wmxi67U", "thumbnail": "https://i.ytimg.com/vi/84v6wmxi67U/default.jpg", "file": "https://www.youtube.com/watch?v=84v6wmxi67U", "title": "Sparks - Funny Face", "description": "Ron \u0026 Russell Mael 1981", "duration": 196}, {"id": "PgldqmbTjr8", "thumbnail": "https://i.ytimg.com/vi/PgldqmbTjr8/default.jpg", "file": "https://www.youtube.com/watch?v=PgldqmbTjr8", "title": "Sparks - Thanks But No Thanks", "description": "Just keep right on walking\nJust keep right on walking\n\nDon\u0027t dilly-dally, come right home\nI don\u0027t see why I must go home\nWhen in the streets the niceties\nCome pouring out and over me\nIts three o\u0027clock and here they come\nSo many that my eyes are numb\nFamil", "duration": 255}, {"id": "lr2L0SHE1aQ", "thumbnail": "https://i.ytimg.com/vi/lr2L0SHE1aQ/default.jpg", "file": "https://www.youtube.com/watch?v=lr2L0SHE1aQ", "title": "Sparks- Music That You Can Dance To (CLUB VERSION)", "description": "1986 Curb / MCA Records.\r\nProducer -- Ron Mael And Russell Mael\r\nThey also brought us Beat The Clock.\r\nA Synth-Pop Classic!", "duration": 389}, {"id": "PFrFhwMQMXg", "thumbnail": "https://i.ytimg.com/vi/PFrFhwMQMXg/default.jpg", "file": "https://www.youtube.com/watch?v=PFrFhwMQMXg", "title": "Sparks - Perfume", "description": "Sparks - Perfume from the album Hello Young Lovers created by Shaw Petronio", "duration": 223}, {"id": "OxgWQCr8tFo", "thumbnail": "https://i.ytimg.com/vi/OxgWQCr8tFo/default.jpg", "file": "https://www.youtube.com/watch?v=OxgWQCr8tFo", "title": "\u0027Lectric Funk - Shangaied", "description": "By Musicland65", "duration": 452}, {"id": "J28tddMVp9c", "thumbnail": "https://i.ytimg.com/vi/J28tddMVp9c/default.jpg", "file": "https://www.youtube.com/watch?v=J28tddMVp9c", "title": "Sparks - Sparks In The Dark (Extended Club Mix) 1984", "description": "\u05ea\u05d9\u05d0\u05d5\u05e8", "duration": 236}, {"id": "gfwnl58sL-E", "thumbnail": "https://i.ytimg.com/vi/gfwnl58sL-E/default.jpg", "file": "https://www.youtube.com/watch?v=gfwnl58sL-E", "title": "Sparks - With all my might", "description": "SPARKS HAS AN OFFICIAL YOUTUBE CHANNEL NOW, FEATURING ALL THEIR VIDEOS! PLEASE CHECK IT OUT\nhttps://www.youtube.com/user/SparksOfficialVideo\n\nSparks - With all my Might (music video)\n\nSong from the album Pulling Rabbits Out of a Hat (1984). \n\n- not muted ", "duration": 222}, {"id": "dyHKDV5o4-4", "thumbnail": "https://i.ytimg.com/vi/dyHKDV5o4-4/default.jpg", "file": "https://www.youtube.com/watch?v=dyHKDV5o4-4", "title": "Sparks - Progress", "description": "Album: Pulling Rabbits Out Of A Hat (1984)\r\nSongwriter: Ron Mael", "duration": 285}, {"id": "4cX1Gc04-ls", "thumbnail": "https://i.ytimg.com/vi/4cX1Gc04-ls/default.jpg", "file": "https://www.youtube.com/watch?v=4cX1Gc04-ls", "title": "SPARKS Pretending To Be Drunk", "description": "From 21 x 21 Pulling Rabbits Out Of A Hat", "duration": 222}, {"id": "s3VrB53CCbo", "thumbnail": "https://i.ytimg.com/vi/s3VrB53CCbo/default.jpg", "file": "https://www.youtube.com/watch?v=s3VrB53CCbo", "title": "Sparks - Rock, Rock, Rock", "description": "something to accompany your nightmares\n\nLyrics:\n\nSoft passages (they get you into trouble)\nThey imply a lack of passion and commitment\n\nSoft passages (they get you into trouble)\nThey imply a lack of feeling and a fervor\n\nThey get you into trouble\nThey get", "duration": 311}, {"id": "avypBDJ68AQ", "thumbnail": "https://i.ytimg.com/vi/avypBDJ68AQ/default.jpg", "file": "https://www.youtube.com/watch?v=avypBDJ68AQ", "title": "Sparks - Get In The Swing", "description": "Sparks performing Get In The Swing on Supersonic.", "duration": 195}, {"id": "7OBwJnSkE3k", "thumbnail": "https://i.ytimg.com/vi/7OBwJnSkE3k/default.jpg", "file": "https://www.youtube.com/watch?v=7OBwJnSkE3k", "title": "SPARKS The Ghost of Liberace", "description": "From 21 x 21 Gratuitous Sax \u0026 Senseless Violins", "duration": 280}, {"id": "_0DmXChbwHk", "thumbnail": "https://i.ytimg.com/vi/_0DmXChbwHk/default.jpg", "file": "https://www.youtube.com/watch?v=_0DmXChbwHk", "title": "Sparks - Good Morning (New Single 2008)", "description": "UK BBC2 exclusive of Sparks forthcoming single from the new album \u0027Exotic creatures of the deep\u0027 (released 19th May 2008).", "duration": 228}, {"id": "1XAk9FBcmvQ", "thumbnail": "https://i.ytimg.com/vi/1XAk9FBcmvQ/default.jpg", "file": "https://www.youtube.com/watch?v=1XAk9FBcmvQ", "title": "Madonna [German Version]", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nMadonna [German Version] \u00b7 Sparks\n\nInterior Design\n\n\u2117 1988 Lil\u0027 Beethoven\n\nReleased on: 1988-08-01\n\nAuto-generated by YouTube.", "duration": 279}, {"id": "SfQg-VEB8oM", "thumbnail": "https://i.ytimg.com/vi/SfQg-VEB8oM/default.jpg", "file": "https://www.youtube.com/watch?v=SfQg-VEB8oM", "title": "Sparks - Big Boy", "description": "June 13th 2008. Sparks Spectacular", "duration": 198}, {"id": "zMW_ROS94Kk", "thumbnail": "https://i.ytimg.com/vi/zMW_ROS94Kk/default.jpg", "file": "https://www.youtube.com/watch?v=zMW_ROS94Kk", "title": "Lighten Up Morrissey", "description": "Sparks\u0027 promo video for \u0027Lighten Up Morrissey\u0027, an ode to Morrissey from their album \u0027Exotic Creatures Of The Deep\u0027.\r\n\r\nDirected By Shaw Petronio \u0026 Anders Weberg.", "duration": 213}, {"id": "ERtRg7Msigw", "thumbnail": "https://i.ytimg.com/vi/ERtRg7Msigw/default.jpg", "file": "https://www.youtube.com/watch?v=ERtRg7Msigw", "title": "Sparks - The Angels", "description": "I heard the angels call your name\r\nI heard the angels call your name\r\n\r\nThey feel ashamed\r\nThey feel ashamed\r\n\r\nBecause you look so fucking good\r\nI saw the angels glaring down\r\nI saw the angels glaring down\r\nThey feel inane\r\nThey feel in pain\r\nBecause you", "duration": 225}, {"id": "I_qsWK5ptTY", "thumbnail": "https://i.ytimg.com/vi/I_qsWK5ptTY/default.jpg", "file": "https://www.youtube.com/watch?v=I_qsWK5ptTY", "title": "I Predict", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nI Predict \u00b7 Sparks\n\nAngst In My Pants\n\n\u2117 1982 Lil\u0027 Beethoven\n\nReleased on: 1982-03-29\n\nAuto-generated by YouTube.", "duration": 174}, {"id": "laJh5Kauh4M", "thumbnail": "https://i.ytimg.com/vi/laJh5Kauh4M/default.jpg", "file": "https://www.youtube.com/watch?v=laJh5Kauh4M", "title": "Sparks \u0026 Jane Wiedlin - Cool Places", "description": "Jane and Russell were too cute together, weren\u0027t they? Those two should have had babies, they\u0027d be really adorable - and have really high voices. \r\n\r\nThis is some serious 80s. It\u0027s not for the faint of heart or the beginner. I\u0027m warning you, there could b", "duration": 197}, {"id": "xT46rlqCBW8", "thumbnail": "https://i.ytimg.com/vi/xT46rlqCBW8/default.jpg", "file": "https://www.youtube.com/watch?v=xT46rlqCBW8", "title": "The Seduction of Ingmar Bergman [English Version]", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nThe Seduction of Ingmar Bergman [English Version] \u00b7 Sparks\n\nThe Seduction of Ingmar Bergman\n\n\u2117 2009 Sparks\n\nReleased on: 2011-06-11\n\nAuto-generated by YouTube.", "duration": 3874}, {"id": "eRTRp0NgSkQ", "thumbnail": "https://i.ytimg.com/vi/eRTRp0NgSkQ/default.jpg", "file": "https://www.youtube.com/watch?v=eRTRp0NgSkQ", "title": "Noisy Boys", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nNoisy Boys \u00b7 Sparks\n\nTerminal Jive\n\n\u2117 1980 Lil\u0027 Beethoven\n\nReleased on: 1980-01-28\n\nAuto-generated by YouTube.", "duration": 237}, {"id": "cCAnpQ3jgTI", "thumbnail": "https://i.ytimg.com/vi/cCAnpQ3jgTI/default.jpg", "file": "https://www.youtube.com/watch?v=cCAnpQ3jgTI", "title": "Sparks Profile", "description": " ", "duration": 211}, {"id": "hf5yVTxhudA", "thumbnail": "https://i.ytimg.com/vi/hf5yVTxhudA/default.jpg", "file": "https://www.youtube.com/watch?v=hf5yVTxhudA", "title": "That\u0027s Not Nastassia", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nThat\u0027s Not Nastassia \u00b7 Sparks\n\nWhomp That Sucker\n\n\u2117 1981 Lil\u0027 Beethoven\n\nReleased on: 1981-01-01\n\nAuto-generated by YouTube.", "duration": 298}, {"id": "z0Z9Pl9Lvmg", "thumbnail": "https://i.ytimg.com/vi/z0Z9Pl9Lvmg/default.jpg", "file": "https://www.youtube.com/watch?v=z0Z9Pl9Lvmg", "title": "Sparks - I Like Girls (1976)", "description": "Big Beat 1976", "duration": 180}, {"id": "lxLQRxc1VFc", "thumbnail": "https://i.ytimg.com/vi/lxLQRxc1VFc/default.jpg", "file": "https://www.youtube.com/watch?v=lxLQRxc1VFc", "title": "Academy Award Performance", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nAcademy Award Performance \u00b7 Sparks\n\nNo.1 In Heaven\n\n\u2117 1979 Lil\u0027 Beethoven\n\nReleased on: 1979-03-01\n\nAuto-generated by YouTube.", "duration": 302}, {"id": "iofQGkUfASg", "thumbnail": "https://i.ytimg.com/vi/iofQGkUfASg/default.jpg", "file": "https://www.youtube.com/watch?v=iofQGkUfASg", "title": "Complaints", "description": "Provided to YouTube by Universal Music Group\n\nComplaints \u00b7 Sparks\n\nKimono My House\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2008-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist: Ron Mael\n\nAuto-generated ", "duration": 171}, {"id": "lvLjX5GaPK8", "thumbnail": "https://i.ytimg.com/vi/lvLjX5GaPK8/default.jpg", "file": "https://www.youtube.com/watch?v=lvLjX5GaPK8", "title": "Sparks - Edith Piaf (Said It Better Than Me)", "description": "Performed on Front Row BBC 2 (30/09/2017)", "duration": 304}, {"id": "o8Dt9qCNywg", "thumbnail": "https://i.ytimg.com/vi/o8Dt9qCNywg/default.jpg", "file": "https://www.youtube.com/watch?v=o8Dt9qCNywg", "title": "Sparks - Commercial Gratuitous Sax and Senseless Vioilns, Germany, 1995", "description": "Commercial Gratuitous Sax and Senseless Vioilns, Germany, 1995", "duration": 30}, {"id": "E18hYu5LbSU", "thumbnail": "https://i.ytimg.com/vi/E18hYu5LbSU/default.jpg", "file": "https://www.youtube.com/watch?v=E18hYu5LbSU", "title": "Screwed Up", "description": "Provided to YouTube by Universal Music Group\n\nScrewed Up \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1976 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Rupert Holmes\nProducer, Associate  Producer: Jeffrey Lesser\nStudi", "duration": 259}, {"id": "s0C6pxzx52I", "thumbnail": "https://i.ytimg.com/vi/s0C6pxzx52I/default.jpg", "file": "https://www.youtube.com/watch?v=s0C6pxzx52I", "title": "Sparks- Balls", "description": "Nothing too prosaic\nNothing too archaic\nHere\u0027s your wakeup call\nWe are provocation\nWe are instigation\nHere\u0027s your wakeup call, your second call\n\nBalls. All you need are,\nBalls. To succeed are\nBalls. All you need are\nBalls. All you need are,\nBalls. To succ", "duration": 264}, {"id": "WlqDMu3JkQo", "thumbnail": "https://i.ytimg.com/vi/WlqDMu3JkQo/default.jpg", "file": "https://www.youtube.com/watch?v=WlqDMu3JkQo", "title": "Sparks - La Dolce Vita", "description": "Promo video. From the album No. 1 In Heaven (1979) Ron Mael - Russell Mael - Giorgio Moroder", "duration": 223}, {"id": "xRe73-iEoM8", "thumbnail": "https://i.ytimg.com/vi/xRe73-iEoM8/default.jpg", "file": "https://www.youtube.com/watch?v=xRe73-iEoM8", "title": "Don\u0027t Leave Me Alone With Her", "description": "Provided to YouTube by Universal Music Group\n\nDon\u0027t Leave Me Alone With Her \u00b7 Sparks\n\nPropaganda\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1974-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist: Ron Mael\n\nA", "duration": 181}, {"id": "N9cDt6YbFmQ", "thumbnail": "https://i.ytimg.com/vi/N9cDt6YbFmQ/default.jpg", "file": "https://www.youtube.com/watch?v=N9cDt6YbFmQ", "title": "Sparks - Something For The Girl With Everything (in the studio + live)", "description": "Short clip of Sparks recording Something For The Girl With Everything + live performance. Ron Mael - Russell Mael - Ian Hampton - Trevor White - Dinky Diamond", "duration": 177}, {"id": "sZA69hYsgF8", "thumbnail": "https://i.ytimg.com/vi/sZA69hYsgF8/default.jpg", "file": "https://www.youtube.com/watch?v=sZA69hYsgF8", "title": "Armies Of The Night", "description": "Provided to YouTube by Curb Records\n\nArmies Of The Night \u00b7 Sparks\n\nMusic That You Can Dance To\n\n\u2117 Curb Records, Inc.\n\nReleased on: 1986-07-01\n\nArtist: Sparks\n\nAuto-generated by YouTube.", "duration": 319}, {"id": "M4u9YTs62bY", "thumbnail": "https://i.ytimg.com/vi/M4u9YTs62bY/default.jpg", "file": "https://www.youtube.com/watch?v=M4u9YTs62bY", "title": "\u0027Lectric Funk - Shanghaied (Remastered).", "description": "Early electronic Disco.", "duration": 273}, {"id": "5nAUk87v9No", "thumbnail": "https://i.ytimg.com/vi/5nAUk87v9No/default.jpg", "file": "https://www.youtube.com/watch?v=5nAUk87v9No", "title": "Gemma Ray sings Sparks (with Sparks) - How Do I Get To Carnegie Hall?", "description": "How Do I Get To Carnegie Hall? \n\nFeaturing Gemma Ray and Ron \u0026 Russell Mael.  Gemma looks to Sparks for the answer to that age-old question whilst tucked up in her wintery Berlin retreat. As she unlocks the door within, everything becomes clear: Stick ", "duration": 269}, {"id": "HfqEZWqzoIw", "thumbnail": "https://i.ytimg.com/vi/HfqEZWqzoIw/default.jpg", "file": "https://www.youtube.com/watch?v=HfqEZWqzoIw", "title": "Sparks - A Song That Sings Itself", "description": "Sparks song from the Pulling Rabbits Out Of A Hat album.\nPlease support Sparks by buying this song on itunes.\n\nI couldn\u0027t find the studio version of this song on youtube so had to upload. I will remove it if asked to do so by Sparks or their management", "duration": 268}, {"id": "XBkeUOYMUW0", "thumbnail": "https://i.ytimg.com/vi/XBkeUOYMUW0/default.jpg", "file": "https://www.youtube.com/watch?v=XBkeUOYMUW0", "title": "Sparks   A Big Surprise   1977", "description": " ", "duration": 216}, {"id": "JAWi41KiDdw", "thumbnail": "https://i.ytimg.com/vi/JAWi41KiDdw/default.jpg", "file": "https://www.youtube.com/watch?v=JAWi41KiDdw", "title": "Sparks-Metaphor", "description": "The Song Metaphor from Sparks and their Album Hello Young Lovers\r\n\r\nSongtext:\r\nA metaphor is a glorious thing,\r\nA diamond ring,\r\nThe first day of summer\r\nA metaphor is a breath of fresh air,\r\nA turn-on,\r\nAn aphrodisiac\r\n\r\nChicks dig, dig, d-i-g, dig, ", "duration": 244}, {"id": "AfA4FphZHbc", "thumbnail": "https://i.ytimg.com/vi/AfA4FphZHbc/default.jpg", "file": "https://www.youtube.com/watch?v=AfA4FphZHbc", "title": "Sparks - This Town Ain\u0027t Big Enough For Both Of Us (TOTP 1974)", "description": "Great TOTP performance from Ron \u0026 Russell Mael.This Town Ain\u0027t Big Enough For Both Of Us by Sparks was released in 1974 on Island Records.The song was written by Ron Mael and reached #2 in the UK charts.It taken from the album Kimono My House....*UMG ", "duration": 174}, {"id": "QfGrXOxZoaI", "thumbnail": "https://i.ytimg.com/vi/QfGrXOxZoaI/default.jpg", "file": "https://www.youtube.com/watch?v=QfGrXOxZoaI", "title": "The Ghost of Liberace (Sparks) Audio claimed by Merlin 1st of May 2019", "description": "Have always enjoyed the Mael brothers\u0027 real life cultural references - be it Jack Kirby\u0027s \u0027Forever People\u0027 in the 70s, media phenomenon Nastassja Kinski in the 80s or even Morrissey in the 00s, so here\u0027s another special one - from the 90s for completists;", "duration": 256}, {"id": "h6tbZa4Xwtw", "thumbnail": "https://i.ytimg.com/vi/h6tbZa4Xwtw/default.jpg", "file": "https://www.youtube.com/watch?v=h6tbZa4Xwtw", "title": "Sparks - When I Kiss You (Ravers Nature Mix)", "description": "When I Kiss You (I Hear Charlie Parker Playing) - The Remix Issue!\r\nLabel: Logic Records\r\nCatalog#: LOC 166, 74321 26772-2\r\nFormat: CD, Maxi-Single\r\nCountry: Germany\r\nReleased: 1995\r\nGenre: Electronic \r\nStyle: Hard Trance\r\nCredits: Mixed By, Engineer - Jo", "duration": 313}, {"id": "H0KqXnC9sv4", "thumbnail": "https://i.ytimg.com/vi/H0KqXnC9sv4/default.jpg", "file": "https://www.youtube.com/watch?v=H0KqXnC9sv4", "title": "Moustache", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nMoustache \u00b7 Sparks\n\nAngst In My Pants\n\n\u2117 1982 Lil\u0027 Beethoven\n\nReleased on: 1982-03-29\n\nAuto-generated by YouTube.", "duration": 213}, {"id": "8qF7qI06-O0", "thumbnail": "https://i.ytimg.com/vi/8qF7qI06-O0/default.jpg", "file": "https://www.youtube.com/watch?v=8qF7qI06-O0", "title": "Sparks - This town ain\u0027t big enough for the both of us (Plagiarism)", "description": "\u0027This town ain\u0027t big enough for the both of us\u0027 by the Sparks. From the 1997 album \u0027Plagiarism\u0027", "duration": 243}, {"id": "H_Q21n4FWD8", "thumbnail": "https://i.ytimg.com/vi/H_Q21n4FWD8/default.jpg", "file": "https://www.youtube.com/watch?v=H_Q21n4FWD8", "title": "The Seduction of Ingmar Bergman [Original Swedish Radio Broadcast Version]", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nThe Seduction of Ingmar Bergman [Original Swedish Radio Broadcast Version] \u00b7 Sparks\n\nThe Seduction of Ingmar Bergman\n\n\u2117 2009 Sparks\n\nReleased on: 2009-11-01\n\nAuto-generated by YouTube.", "duration": 3874}, {"id": "bht5XoUy10Y", "thumbnail": "https://i.ytimg.com/vi/bht5XoUy10Y/default.jpg", "file": "https://www.youtube.com/watch?v=bht5XoUy10Y", "title": "Stereo", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nStereo \u00b7 Sparks\n\nTerminal Jive\n\n\u2117 1980 Lil\u0027 Beethoven\n\nReleased on: 1980-01-28\n\nAuto-generated by YouTube.", "duration": 242}, {"id": "W91nbOGeLmk", "thumbnail": "https://i.ytimg.com/vi/W91nbOGeLmk/default.jpg", "file": "https://www.youtube.com/watch?v=W91nbOGeLmk", "title": "Funny Face", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nFunny Face \u00b7 Sparks\n\nWhomp That Sucker\n\n\u2117 1981 Lil\u0027 Beethoven\n\nReleased on: 1981-01-01\n\nAuto-generated by YouTube.", "duration": 209}, {"id": "axtrCpihPFc", "thumbnail": "https://i.ytimg.com/vi/axtrCpihPFc/default.jpg", "file": "https://www.youtube.com/watch?v=axtrCpihPFc", "title": "sparks - sports", "description": "Temon ochentero ;)...disfrutenlo....", "duration": 203}, {"id": "7wkqgpzYQrw", "thumbnail": "https://i.ytimg.com/vi/7wkqgpzYQrw/default.jpg", "file": "https://www.youtube.com/watch?v=7wkqgpzYQrw", "title": "Sparks - Occupation", "description": "From the album Introducing Sparks.", "duration": 316}, {"id": "sxciH9G_r8o", "thumbnail": "https://i.ytimg.com/vi/sxciH9G_r8o/default.jpg", "file": "https://www.youtube.com/watch?v=sxciH9G_r8o", "title": "Lost And Found", "description": "Provided to YouTube by Universal Music Group\n\nLost And Found \u00b7 Sparks\n\nKimono My House\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Muff Winwood\nAssociated  Performer, Vocals: Russell Ma", "duration": 200}, {"id": "jQUKFKm3hCg", "thumbnail": "https://i.ytimg.com/vi/jQUKFKm3hCg/default.jpg", "file": "https://www.youtube.com/watch?v=jQUKFKm3hCg", "title": "SPARKS England (Rare Single)", "description": "This is a delightful song released as a single in 1975 (I believe) with I Wanna Hold Your Hand. It appears as a bonus track on some CD editions of Indiscreet.", "duration": 197}, {"id": "JKsCZH3MGZI", "thumbnail": "https://i.ytimg.com/vi/JKsCZH3MGZI/default.jpg", "file": "https://www.youtube.com/watch?v=JKsCZH3MGZI", "title": "I Bought The Mississippi River", "description": "Provided to YouTube by Universal Music Group\n\nI Bought The Mississippi River \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1976 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Rupert Holmes\nProducer, Associate  Producer: ", "duration": 149}, {"id": "5xM2KtwJpjY", "thumbnail": "https://i.ytimg.com/vi/5xM2KtwJpjY/default.jpg", "file": "https://www.youtube.com/watch?v=5xM2KtwJpjY", "title": "Never Turn Your Back On Mother Earth", "description": "Provided to YouTube by Universal Music Group\n\nNever Turn Your Back On Mother Earth \u00b7 Sparks\n\nPropaganda\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Muff Winwood\nAssociated  Performer, K", "duration": 148}, {"id": "Oow3dzIjP_E", "thumbnail": "https://i.ytimg.com/vi/Oow3dzIjP_E/default.jpg", "file": "https://www.youtube.com/watch?v=Oow3dzIjP_E", "title": "Sparks- The Scene", "description": "Music That You Can Dance To", "duration": 372}, {"id": "mjXKBB7bLUI", "thumbnail": "https://i.ytimg.com/vi/mjXKBB7bLUI/default.jpg", "file": "https://www.youtube.com/watch?v=mjXKBB7bLUI", "title": "Sparks- A Big Surprise", "description": "Introducing Sparks", "duration": 221}, {"id": "uQgAuuleAk4", "thumbnail": "https://i.ytimg.com/vi/uQgAuuleAk4/default.jpg", "file": "https://www.youtube.com/watch?v=uQgAuuleAk4", "title": "When I Kiss You!   \u79c1\u306f\u30ad\u30b9\u3092\u3059\u308b\u3068\u304d\u306b     [Hysterie Mix] Sparks!", "description": "Sparks - When I Kiss You (I Hear Charlie Parker Playing)\n\nmore images\nSparks \u200e-- When I Kiss You (I Hear Charlie Parker Playing)\nLabel:\nLogic Records \u200e-- LOC 166, BMG \u200e-- 74321 26772-2, BMG \u200e-- 74321 26772- 2\nFormat:\nCD, Maxi-Single\nCountry:\nGerma", "duration": 354}, {"id": "CUBlZKGUpmQ", "thumbnail": "https://i.ytimg.com/vi/CUBlZKGUpmQ/default.jpg", "file": "https://www.youtube.com/watch?v=CUBlZKGUpmQ", "title": "\u0027Lectric Funk - Shanghaied", "description": "\u0027Lectric Funk - Shanghaied", "duration": 290}, {"id": "G7Bj45V4oOQ", "thumbnail": "https://i.ytimg.com/vi/G7Bj45V4oOQ/default.jpg", "file": "https://www.youtube.com/watch?v=G7Bj45V4oOQ", "title": "Sparks - Pulling rabbits out of a hat ( orchestral version )", "description": "The opening song from the  brilliantt 21 x 21 \u0027Plagiarism concert", "duration": 224}, {"id": "Uk5iJyABIaI", "thumbnail": "https://i.ytimg.com/vi/Uk5iJyABIaI/default.jpg", "file": "https://www.youtube.com/watch?v=Uk5iJyABIaI", "title": "ANGST IN MY PANTS (Sparks)", "description": "Sizzling \u002797 Plagiarism-style rerecording of this classic from \u002782 no real Sparks fan can truly do without;-)...\r\nEnjoy.\r\n\r\nJust for the full picture: This little plagiarism-style tribute trilogy concludes with \u0027Something for the Girl with Everything\u0027 on ", "duration": 308}, {"id": "cVh67jc-vts", "thumbnail": "https://i.ytimg.com/vi/cVh67jc-vts/default.jpg", "file": "https://www.youtube.com/watch?v=cVh67jc-vts", "title": "Waterproof", "description": "Provided to YouTube by The Orchard Enterprises\n\nWaterproof \u00b7 Sparks\n\nHello Young Lovers\n\n\u2117 2011 In The Red\n\nReleased on: 2006-03-07\n\nAuto-generated by YouTube.", "duration": 258}, {"id": "kbjuvcseBjE", "thumbnail": "https://i.ytimg.com/vi/kbjuvcseBjE/default.jpg", "file": "https://www.youtube.com/watch?v=kbjuvcseBjE", "title": "Sparks-Gratuitous Sax-When Do I get To Sign My Way", "description": "made by iMovie", "duration": 282}, {"id": "c2sg1sqrScc", "thumbnail": "https://i.ytimg.com/vi/c2sg1sqrScc/default.jpg", "file": "https://www.youtube.com/watch?v=c2sg1sqrScc", "title": "Nicotina", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nNicotina \u00b7 Sparks\n\nAngst In My Pants\n\n\u2117 1982 Lil\u0027 Beethoven\n\nReleased on: 1982-03-29\n\nAuto-generated by YouTube.", "duration": 210}, {"id": "FESZ0Y2AQ0w", "thumbnail": "https://i.ytimg.com/vi/FESZ0Y2AQ0w/default.jpg", "file": "https://www.youtube.com/watch?v=FESZ0Y2AQ0w", "title": "Sparks - A Big Surprise", "description": "German TV", "duration": 233}, {"id": "padZi2hwIYk", "thumbnail": "https://i.ytimg.com/vi/padZi2hwIYk/default.jpg", "file": "https://www.youtube.com/watch?v=padZi2hwIYk", "title": "Sparks - 1956 Cannes Film Festival", "description": "From The Seduction of Ingmar Bergman.", "duration": 117}, {"id": "-iYVFQZIlTI", "thumbnail": "https://i.ytimg.com/vi/-iYVFQZIlTI/default.jpg", "file": "https://www.youtube.com/watch?v=-iYVFQZIlTI", "title": "Sparks - Beat the clock (Plagiarism)", "description": "\u0027Beat the clock\u0027 by the Sparks. From the 1997 album \u0027Plagiarism\u0027", "duration": 271}, {"id": "hPBYdy0UF3w", "thumbnail": "https://i.ytimg.com/vi/hPBYdy0UF3w/default.jpg", "file": "https://www.youtube.com/watch?v=hPBYdy0UF3w", "title": "The Greatest Show On Earth", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nThe Greatest Show On Earth \u00b7 Sparks\n\nTerminal Jive\n\n\u2117 1980 Lil\u0027 Beethoven\n\nReleased on: 1980-01-28\n\nAuto-generated by YouTube.", "duration": 259}, {"id": "MYS27VKif7U", "thumbnail": "https://i.ytimg.com/vi/MYS27VKif7U/default.jpg", "file": "https://www.youtube.com/watch?v=MYS27VKif7U", "title": "Tips For Teens", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nTips For Teens \u00b7 Sparks\n\nWhomp That Sucker\n\n\u2117 1981 Lil\u0027 Beethoven\n\nReleased on: 1981-01-01\n\nAuto-generated by YouTube.", "duration": 213}, {"id": "UymqKMn9tlo", "thumbnail": "https://i.ytimg.com/vi/UymqKMn9tlo/default.jpg", "file": "https://www.youtube.com/watch?v=UymqKMn9tlo", "title": "In My Family", "description": "Provided to YouTube by Universal Music Group\n\nIn My Family \u00b7 Sparks\n\nKimono My House\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2008-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist: Russell Mael\nComposer  ", "duration": 228}, {"id": "72fCzNJbc3w", "thumbnail": "https://i.ytimg.com/vi/72fCzNJbc3w/default.jpg", "file": "https://www.youtube.com/watch?v=72fCzNJbc3w", "title": "Nothing To Do", "description": "Provided to YouTube by Universal Music Group\n\nNothing To Do \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1976 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Rupert Holmes\nProducer, Associate  Producer: Jeffrey Lesser\nSt", "duration": 188}, {"id": "hKj4a-vwV00", "thumbnail": "https://i.ytimg.com/vi/hKj4a-vwV00/default.jpg", "file": "https://www.youtube.com/watch?v=hKj4a-vwV00", "title": "Something For The Girl With Everything", "description": "Provided to YouTube by Universal Music Group\n\nSomething For The Girl With Everything \u00b7 Sparks\n\nPropaganda\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1974-01-01\n\nProducer: Muff Winwood\nAssociated  Performer,", "duration": 136}, {"id": "_pyFgiOdCsg", "thumbnail": "https://i.ytimg.com/vi/_pyFgiOdCsg/default.jpg", "file": "https://www.youtube.com/watch?v=_pyFgiOdCsg", "title": "Shopping Mall Of Love", "description": "Provided to YouTube by Curb Records\n\nShopping Mall Of Love \u00b7 Sparks\n\nMusic That You Can Dance To\n\n\u2117 Curb Records, Inc.\n\nReleased on: 1986-07-01\n\nArtist: Sparks\n\nAuto-generated by YouTube.", "duration": 195}, {"id": "1anZVk0j12U", "thumbnail": "https://i.ytimg.com/vi/1anZVk0j12U/default.jpg", "file": "https://www.youtube.com/watch?v=1anZVk0j12U", "title": "Sparks - Pulling rabbits out of a hat (orchestral version)", "description": "Awesome 1998 orchestral version of 1979 Sparks Pulling rabbits out of a hat, from Plagiarism album.\r\nI made a slideshow photo of our heroes to visual accompany the song. :)", "duration": 216}, {"id": "pRbCDQ3w_gQ", "thumbnail": "https://i.ytimg.com/vi/pRbCDQ3w_gQ/default.jpg", "file": "https://www.youtube.com/watch?v=pRbCDQ3w_gQ", "title": "Sparks - There\u0027s no such thing as Aliens", "description": "Sparks - There\u0027s no such thing as Aliens \nFrom the Sparks live DEEVEEDEE", "duration": 187}, {"id": "Zz_cSehT6ng", "thumbnail": "https://i.ytimg.com/vi/Zz_cSehT6ng/default.jpg", "file": "https://www.youtube.com/watch?v=Zz_cSehT6ng", "title": "Tarzen and Jane", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nTarzen and Jane \u00b7 Sparks\n\nAngst In My Pants\n\n\u2117 1982 Lil\u0027 Beethoven\n\nReleased on: 1982-03-29\n\nAuto-generated by YouTube.", "duration": 201}, {"id": "IBwcmJPSVKM", "thumbnail": "https://i.ytimg.com/vi/IBwcmJPSVKM/default.jpg", "file": "https://www.youtube.com/watch?v=IBwcmJPSVKM", "title": "Sparks - Limo Driver (Welcome to Hollywood)", "description": "Limo Driver -  Sparks Video\nfrom The Seduction Of Ingmar Bergman", "duration": 221}, {"id": "exgxxzKC5hE", "thumbnail": "https://i.ytimg.com/vi/exgxxzKC5hE/default.jpg", "file": "https://www.youtube.com/watch?v=exgxxzKC5hE", "title": "Where\u0027s My Girl", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nWhere\u0027s My Girl \u00b7 Sparks\n\nWhomp That Sucker\n\n\u2117 1981 Lil\u0027 Beethoven\n\nReleased on: 1981-01-01\n\nAuto-generated by YouTube.", "duration": 192}, {"id": "VC9GI5RvRDs", "thumbnail": "https://i.ytimg.com/vi/VC9GI5RvRDs/default.jpg", "file": "https://www.youtube.com/watch?v=VC9GI5RvRDs", "title": "Equator", "description": "Provided to YouTube by Universal Music Group\n\nEquator \u00b7 Sparks\n\nKimono My House\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 2008-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist: Ron Mael\n\nAuto-generated by ", "duration": 283}, {"id": "GQDDBJb1TAc", "thumbnail": "https://i.ytimg.com/vi/GQDDBJb1TAc/default.jpg", "file": "https://www.youtube.com/watch?v=GQDDBJb1TAc", "title": "I Like Girls", "description": "Provided to YouTube by Universal Music Group\n\nI Like Girls \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1976 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Rupert Holmes\nProducer, Associate  Producer: Jeffrey Lesser\nStu", "duration": 177}, {"id": "suE8MOIlkZQ", "thumbnail": "https://i.ytimg.com/vi/suE8MOIlkZQ/default.jpg", "file": "https://www.youtube.com/watch?v=suE8MOIlkZQ", "title": "Sparks - When Do I Get To Sing My Way", "description": "(Men Behind Club Mix)\n\u2788\u24ea\u0027s", "duration": 330}, {"id": "myaafXacb10", "thumbnail": "https://i.ytimg.com/vi/myaafXacb10/default.jpg", "file": "https://www.youtube.com/watch?v=myaafXacb10", "title": "Achoo", "description": "Provided to YouTube by Universal Music Group\n\nAchoo \u00b7 Sparks\n\nPropaganda\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1974-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist: Ron Mael\n\nAuto-generated by YouTube", "duration": 213}, {"id": "MNvAntvPPxI", "thumbnail": "https://i.ytimg.com/vi/MNvAntvPPxI/default.jpg", "file": "https://www.youtube.com/watch?v=MNvAntvPPxI", "title": "Modesty Plays (New Version)", "description": "Provided to YouTube by Curb Records\n\nModesty Plays (New Version) \u00b7 Sparks\n\nMusic That You Can Dance To\n\n\u2117 Curb Records, Inc.\n\nReleased on: 1986-07-01\n\nArtist: Sparks\n\nAuto-generated by YouTube.", "duration": 240}, {"id": "NP-EFPwhb8s", "thumbnail": "https://i.ytimg.com/vi/NP-EFPwhb8s/default.jpg", "file": "https://www.youtube.com/watch?v=NP-EFPwhb8s", "title": "Sparks - Pretending To Be Drunk", "description": "from the album Pulling Rabbits Out Of A Hat (1984). -- Russell Mael - Ron Mael - Les Bohem - David Kendrick - Bob Haag - John Thomas", "duration": 242}, {"id": "OTdR2NLEsPA", "thumbnail": "https://i.ytimg.com/vi/OTdR2NLEsPA/default.jpg", "file": "https://www.youtube.com/watch?v=OTdR2NLEsPA", "title": "Sextown U.S.A", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nSextown U.S.A \u00b7 Sparks\n\nAngst In My Pants\n\n\u2117 1982 Lil\u0027 Beethoven\n\nReleased on: 1982-03-29\n\nAuto-generated by YouTube.", "duration": 181}, {"id": "JFRwPOOerhc", "thumbnail": "https://i.ytimg.com/vi/JFRwPOOerhc/default.jpg", "file": "https://www.youtube.com/watch?v=JFRwPOOerhc", "title": "Sparks - \u0027\u0027Here He Is Now\u0027\u0027", "description": "", "duration": 78}, {"id": "ObXany9JXOo", "thumbnail": "https://i.ytimg.com/vi/ObXany9JXOo/default.jpg", "file": "https://www.youtube.com/watch?v=ObXany9JXOo", "title": "The Willys", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nThe Willys \u00b7 Sparks\n\nWhomp That Sucker\n\n\u2117 1981 Lil\u0027 Beethoven\n\nReleased on: 1981-01-01\n\nAuto-generated by YouTube.", "duration": 240}, {"id": "fWUguYBrhls", "thumbnail": "https://i.ytimg.com/vi/fWUguYBrhls/default.jpg", "file": "https://www.youtube.com/watch?v=fWUguYBrhls", "title": "Looks Aren\u0027t Everything", "description": "Provided to YouTube by Universal Music Group\n\nLooks Aren\u0027t Everything \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 2006 Universal Music Operations Limited\n\nReleased on: 2008-01-01\n\nProducer: Tony Visconti\nAssociated  Performer, Vocals: Russell", "duration": 207}, {"id": "0nVxTt3tZgE", "thumbnail": "https://i.ytimg.com/vi/0nVxTt3tZgE/default.jpg", "file": "https://www.youtube.com/watch?v=0nVxTt3tZgE", "title": "Sparks - Who Don\u0027t Like Kids", "description": "You got a cigar, here\u0027s a couple more because the offspring\nAre springing through swinging doors into a world\nOf Ain\u0027t he cute, he looks a lot like his father and\n\nHere comes another\nOf that proof that I\u0027m not just a vegetable, the little\nProof that I\u0027m", "duration": 217}, {"id": "LPTz3f65dlE", "thumbnail": "https://i.ytimg.com/vi/LPTz3f65dlE/default.jpg", "file": "https://www.youtube.com/watch?v=LPTz3f65dlE", "title": "Let\u0027s Get Funky", "description": "Provided to YouTube by Curb Records\n\nLet\u0027s Get Funky \u00b7 Sparks\n\nMusic That You Can Dance To\n\n\u2117 Curb Records, Inc.\n\nReleased on: 1986-07-01\n\nArtist: Sparks\n\nAuto-generated by YouTube.", "duration": 367}, {"id": "PeIzfSttwYA", "thumbnail": "https://i.ytimg.com/vi/PeIzfSttwYA/default.jpg", "file": "https://www.youtube.com/watch?v=PeIzfSttwYA", "title": "Sparks - Pretending To Be Drunk", "description": "(Part 2) from the album Pulling Rabbits Out Of A Hat (1984). -- Russell Mael - Ron Mael - David Kendrick - Bob Haag - John Thomas", "duration": 216}, {"id": "AB9uSoH_rLI", "thumbnail": "https://i.ytimg.com/vi/AB9uSoH_rLI/default.jpg", "file": "https://www.youtube.com/watch?v=AB9uSoH_rLI", "title": "The Decline and Fall of Me", "description": "Provided to YouTube by Absolute Marketing International Ltd\n\nThe Decline and Fall of Me \u00b7 Sparks\n\nAngst In My Pants\n\n\u2117 1982 Lil\u0027 Beethoven\n\nReleased on: 1982-03-29\n\nAuto-generated by YouTube.", "duration": 180}, {"id": "sofH9bOyCj4", "thumbnail": "https://i.ytimg.com/vi/sofH9bOyCj4/default.jpg", "file": "https://www.youtube.com/watch?v=sofH9bOyCj4", "title": "Sparks - \u0027Mr. Bergman, How Are You\u0027\u0027", "description": "From The Seduction of Ingmar Bergman.", "duration": 269}, {"id": "Km8L0eRLdjE", "thumbnail": "https://i.ytimg.com/vi/Km8L0eRLdjE/default.jpg", "file": "https://www.youtube.com/watch?v=Km8L0eRLdjE", "title": "White Woman", "description": "Provided to YouTube by Universal Music Group\n\nWhite Woman \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1976 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Rupert Holmes\nProducer, Associate  Producer: Jeffrey Lesser\nStud", "duration": 203}, {"id": "PX03l6REB5Q", "thumbnail": "https://i.ytimg.com/vi/PX03l6REB5Q/default.jpg", "file": "https://www.youtube.com/watch?v=PX03l6REB5Q", "title": "Bon Voyage", "description": "Provided to YouTube by Universal Music Group\n\nBon Voyage \u00b7 Sparks\n\nPropaganda\n\n\u2117 An Island Records recordng; \u2117 1974 Universal Music Operations Limited\n\nReleased on: 1974-01-01\n\nProducer: Muff Winwood\nComposer  Lyricist: Russell Mael\nComposer  Lyricis", "duration": 294}, {"id": "TKCYTVi2Nl0", "thumbnail": "https://i.ytimg.com/vi/TKCYTVi2Nl0/default.jpg", "file": "https://www.youtube.com/watch?v=TKCYTVi2Nl0", "title": "Sparks - Love Scenes", "description": "Pulling Rabbits Out of a Hat 1984", "duration": 246}, {"id": "wNmwrzmti4E", "thumbnail": "https://i.ytimg.com/vi/wNmwrzmti4E/default.jpg", "file": "https://www.youtube.com/watch?v=wNmwrzmti4E", "title": "Sparks- The Studio Commissary", "description": "The Seduction of Ingmar Bergman, 2009\nRon Mael \u0026 Russell Mael", "duration": 183}, {"id": "u2T4UCMsx0g", "thumbnail": "https://i.ytimg.com/vi/u2T4UCMsx0g/default.jpg", "file": "https://www.youtube.com/watch?v=u2T4UCMsx0g", "title": "I Want To Hold Your Hand", "description": "Provided to YouTube by Universal Music Group\n\nI Want To Hold Your Hand \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1975 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Jeffrey Lesser\nProducer: Rupert Holmes\nComposer  Ly", "duration": 175}, {"id": "AblPo35Ow3A", "thumbnail": "https://i.ytimg.com/vi/AblPo35Ow3A/default.jpg", "file": "https://www.youtube.com/watch?v=AblPo35Ow3A", "title": "Sparks in the Dark, pt. 2", "description": "By Sparks, brothers Ron and Russell Mael (audio).\r\nThis cover alone was worth the price of the whole vinyl album for me;-)", "duration": 172}, {"id": "1UbkDzp5LuY", "thumbnail": "https://i.ytimg.com/vi/1UbkDzp5LuY/default.jpg", "file": "https://www.youtube.com/watch?v=1UbkDzp5LuY", "title": "Sparks - Thank God It\u0027s Not Christmas", "description": "Kimono My House", "duration": 311}, {"id": "yVbfVyYnPM4", "thumbnail": "https://i.ytimg.com/vi/yVbfVyYnPM4/default.jpg", "file": "https://www.youtube.com/watch?v=yVbfVyYnPM4", "title": "Sparks -  Why do you take that tone with me", "description": "Why do you take that tone with me, degli Sparks, dall\u0027album del 2009 The Seduction of Ingmar Bergman", "duration": 171}, {"id": "W4XN8dsnBZk", "thumbnail": "https://i.ytimg.com/vi/W4XN8dsnBZk/default.jpg", "file": "https://www.youtube.com/watch?v=W4XN8dsnBZk", "title": "Everybody\u0027s Stupid", "description": "Provided to YouTube by Universal Music Group\n\nEverybody\u0027s Stupid \u00b7 Sparks\n\nBig Beat\n\n\u2117 An Island Records recordng; \u2117 1976 Universal Music Operations Limited\n\nReleased on: 2006-01-01\n\nProducer: Rupert Holmes\nProducer, Associate  Producer: Jeffrey Less", "duration": 220}, {"id": "h8__SPASbSg", "thumbnail": "https://i.ytimg.com/vi/h8__SPASbSg/default.jpg", "file": "https://www.youtube.com/watch?v=h8__SPASbSg", "title": "Kiss Me Quick - Sparks", "description": "Sparks Video - Kiss Me Quick.", "duration": 261}, {"id": "XZK2bQ_i2f8", "thumbnail": "https://i.ytimg.com/vi/XZK2bQ_i2f8/default.jpg", "file": "https://www.youtube.com/watch?v=XZK2bQ_i2f8", "title": "Autograph Hounds (SPARKS)", "description": "Autograph Hounds from the latest album by Sparks The Seduction of Ingmar Bergman,  2009.", "duration": 142}, {"id": "GsLnArTfmKw", "thumbnail": "https://i.ytimg.com/vi/GsLnArTfmKw/default.jpg", "file": "https://www.youtube.com/watch?v=GsLnArTfmKw", "title": "Sparks Escape Part 2", "description": "From The Seduction Of Ingmar Bergman", "duration": 347}, {"id": "fEgpkmloOzY", "thumbnail": "https://i.ytimg.com/vi/fEgpkmloOzY/default.jpg", "file": "https://www.youtube.com/watch?v=fEgpkmloOzY", "title": "Sparks Live in Stockholm 2004 ( Part 1 Lil\u0027 Beethoven complete album Live )", "description": "From Sparks DVD Lil\u0027 Beethoven Live in Stockholm 2004 - Part one Lil\u0027 Beethoven complete album performance.......Here is a link to Part 2 - Bonus Live Tracks - Sparks play Sparks https://youtu.be/_ZZYU_gP-zI", "duration": 2934}, {"id": "OcKGRLjcCP4", "thumbnail": "https://i.ytimg.com/vi/OcKGRLjcCP4/default.jpg", "file": "https://www.youtube.com/watch?v=OcKGRLjcCP4", "title": "The Seduction of Ingmar Bergman Sparks   Garbo sings", "description": " ", "duration": 229}, {"id": "JXKX5NaM7LY", "thumbnail": "https://i.ytimg.com/vi/JXKX5NaM7LY/default.jpg", "file": "https://www.youtube.com/watch?v=JXKX5NaM7LY", "title": "Sparks - When Do I Get To Sing \u0027My Way\u0027 (Vince Clarke Remix)", "description": "1994, enjoy ;o)", "duration": 328}, {"id": "Eb02rUFdzjg", "thumbnail": "https://i.ytimg.com/vi/Eb02rUFdzjg/default.jpg", "file": "https://www.youtube.com/watch?v=Eb02rUFdzjg", "title": "He\u0027s Home Sparks aka Ron and Russell Mael", "description": "He\u0027s Home from The seduction of Ingmar Bergman by Sparks - if you like this you\u0027ll love the album - I own all Sparks Albums - I don\u0027t own the copyright to this music or the pictures which I found on the internet already - I\u0027m a massive fan of Sparks -", "duration": 222}, {"id": "vq59ypwfIno", "thumbnail": "https://i.ytimg.com/vi/vq59ypwfIno/default.jpg", "file": "https://www.youtube.com/watch?v=vq59ypwfIno", "title": "Sparks - Never Turn Your Back On Mother Earth (Live in London)", "description": " ", "duration": 149}, {"id": "YpoXrL9WHvg", "thumbnail": "https://i.ytimg.com/vi/YpoXrL9WHvg/default.jpg", "file": "https://www.youtube.com/watch?v=YpoXrL9WHvg", "title": "Sparks \u2013 I Predict [Club Mix]", "description": "no rights reserved", "duration": 381}, {"id": "msro9PGsLmc", "thumbnail": "https://i.ytimg.com/vi/msro9PGsLmc/default.jpg", "file": "https://www.youtube.com/watch?v=msro9PGsLmc", "title": "Sparks - All You Ever Think About Is Sex (official video)", "description": "The official video for the single All You Ever Think About Is Sex from the 1983 album Sparks In Outer Space.\n\nLike SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow SPARKS on ", "duration": 212}, {"id": "o-yKXQMYHp8", "thumbnail": "https://i.ytimg.com/vi/o-yKXQMYHp8/default.jpg", "file": "https://www.youtube.com/watch?v=o-yKXQMYHp8", "title": "Sparks - Now That I Own The BBC (Motiv8 Extended Vocal Mix) (1996)", "description": "What was I thinking, what was I thinking\r\nWhat was I thinking\r\nWhat could I have been thinking\r\nIt\u0027s going one time, it\u0027s going two times\r\nSold to the gent\r\nWho wears the stunned expression\r\n\r\nAs I took it off their hands\r\nA five pound note was changing h", "duration": 363}, {"id": "A5ignFEZJok", "thumbnail": "https://i.ytimg.com/vi/A5ignFEZJok/default.jpg", "file": "https://www.youtube.com/watch?v=A5ignFEZJok", "title": "Sparks - Young Girls [HQ Audio]", "description": "From the album \u0027Terminal Jive\u0027 from 1979 and released as a single in 1980 (UK) on Virgin Records.", "duration": 290}, {"id": "VAHITlpf8AE", "thumbnail": "https://i.ytimg.com/vi/VAHITlpf8AE/default.jpg", "file": "https://www.youtube.com/watch?v=VAHITlpf8AE", "title": "Sparks - Do-Re-Mi (The Sound Of Music, Rodgers \u0026 Hammerstein)", "description": "From \u0027\u0027 A Woofer In Tweeter\u0027s Clothing \u0027\u0027\nLabel: Bearsville \u200e\u2013 K 45510\nFormat: Vinyl, Album, LP\nCountry: UK\nReleased: 1972\n\nTracklist\nA1 Girl From Germany\nA2 Beaver O\u0027Lindy\nA3 Nothing Is Sacred\nA4 Here Comes Bob\nA5 Moon Over Kentucky\nB1 Do-Re-Mi (Writ", "duration": 224}, {"id": "V07aNPZfPeU", "thumbnail": "https://i.ytimg.com/vi/V07aNPZfPeU/default.jpg", "file": "https://www.youtube.com/watch?v=V07aNPZfPeU", "title": "Sparks- Forever Young", "description": "Introducing Sparks", "duration": 206}, {"id": "ar3lV8SFBa4", "thumbnail": "https://i.ytimg.com/vi/ar3lV8SFBa4/default.jpg", "file": "https://www.youtube.com/watch?v=ar3lV8SFBa4", "title": "SPARKS   ACHOO", "description": " ", "duration": 216}, {"id": "e3Af4QsIxys", "thumbnail": "https://i.ytimg.com/vi/e3Af4QsIxys/default.jpg", "file": "https://www.youtube.com/watch?v=e3Af4QsIxys", "title": "Sparks - Get Crazy", "description": "Sparks \u00e9 uma banda dos anos 70 que tinha como l\u00edderes os irm\u00e3os Rom Mael nos teclados e Russell Mael no vocal.\r\nLembro quer esta m\u00fasica tocava muito nas boates e festas nos anos 80, ningu\u00e9m conhecia a banda mas quando escutavam a m\u00fasica todos acabav", "duration": 275}, {"id": "N5A_Gk8ENP4", "thumbnail": "https://i.ytimg.com/vi/N5A_Gk8ENP4/default.jpg", "file": "https://www.youtube.com/watch?v=N5A_Gk8ENP4", "title": "Sparks- Two Hands One Mouth", "description": "Great song from the Two Hands One Mouth tour :)", "duration": 323}, {"id": "aM2IK1z8KIA", "thumbnail": "https://i.ytimg.com/vi/aM2IK1z8KIA/default.jpg", "file": "https://www.youtube.com/watch?v=aM2IK1z8KIA", "title": "Sparks - Talent is an Asset", "description": "From Kimono my House (1974)", "duration": 196}, {"id": "-OFHRSGE44E", "thumbnail": "https://i.ytimg.com/vi/-OFHRSGE44E/default.jpg", "file": "https://www.youtube.com/watch?v=-OFHRSGE44E", "title": "Sparks - I Can\u0027t Believe That You Would Fall For All The Crap In This Song", "description": "Sparks live from the Basement I can\u0027t believe that you would fall for all the crap in this song from the album \u0027Exotic Creatures Of The Deep\u0027. This is the 21st studio album by the seminal genre-defying duo Sparks. With a career spanningover forty years ", "duration": 295}, {"id": "cFuZMICoOW0", "thumbnail": "https://i.ytimg.com/vi/cFuZMICoOW0/default.jpg", "file": "https://www.youtube.com/watch?v=cFuZMICoOW0", "title": "Sparks Two Hands One Mouth (preview)", "description": "Like SPARKS on Facebook: https://www.facebook.com/sparksofficial\nFollow SPARKS on Twitter: https://twitter.com/sparksofficial\nFollow SPARKS on Instagram: https://www.instagram.com/sparks_official\nVisit the official SPARKS website: https://www.allsparks.co", "duration": 34}, {"id": "pdCDuTIfihw", "thumbnail": "https://i.ytimg.com/vi/pdCDuTIfihw/default.jpg", "file": "https://www.youtube.com/watch?v=pdCDuTIfihw", "title": "Sparks - Girl From Germany", "description": "1972 A Woofer In Tweeter\u0027s Clothing", "duration": 211}, {"id": "TjzVtiRNvg4", "thumbnail": "https://i.ytimg.com/vi/TjzVtiRNvg4/default.jpg", "file": "https://www.youtube.com/watch?v=TjzVtiRNvg4", "title": "Sparks - Lost and found", "description": "A song I couldn\u0027t find uploaded on youtube. It is one of my favourite Sparks tracks and it is a b-side from kimono my house. I could have uploaded the bside cover, but the album cover simply rocks, enjoy.", "duration": 204}, {"id": "les7afKOZmA", "thumbnail": "https://i.ytimg.com/vi/les7afKOZmA/default.jpg", "file": "https://www.youtube.com/watch?v=les7afKOZmA", "title": "The Sparks - When do I get to sing My way (club mix)", "description": "The Sparks - When do I get to sing my way, Club mix by Men behind", "duration": 329}], "artist/view:images": null, "artist/view:artistID": 6271, "pageObject": {"id": "a6271", "objectType": "artist", "objectName": "Sparks", "objectId": 6271, "collection": [], "wantlist": [], "inventory": []}, "adsObject": {"ids": ["a6271"], "artist": "Sparks"}};
            }
        </script>
        <script>
            window.ds = typeof window.ds == "function" ? window.ds : function(){
                (ds.q = ds.q || []).push(arguments);
                return ds;
            };
        </script>

                
    </head>
    <body class="linux">
        <div id="main_wrapper">                            <div id="site_headers_super_wrap">
    <div id="site_header_wrap" >
        <div id="site_header" role="banner" aria-label="Discogs Header">
                                                                                        <a
                id="header_logo"
                href="/en"
                title="Go to Discogs.com homepage"
            >
                <img src="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/images/discogs-white.png?5" alt="" />
            </a>
            <form id="site_search" action="/search/" role="search" aria-label="Search Discogs">
                <input
                    id="search_q"
                    name="q"
                    type="text"
                    class="autocomplete ac_type_a_m_r_13 ac_submit init"
                    value=""
                    autocapitalize="off"
                    autocorrect="off"
                                            placeholder="Search artists, albums and more..."
                        aria-label="Search artists, albums and more..."
                                    />
                <button
                    type="submit"
                    id="do_site_search"
                    class="submit button"
                    name=""
                    value=""
                    aria-label="Search"
                >
                <i class="icon icon-search"></i>
                </button>
                <input type="hidden" class="advanced_search advanced_search_type" name="type" value="all"/>
            </form>
            <ul id="site_navigation" role="navigation" aria-label="Main Navigation">
                <li id="section_nav_explore" class="site_nav_group" data-id="explore">
                    <a href="/search/" class="nav_group_control">Explore<i class="icon icon-caret-down"></i>
                    </a>
                    <div class="site_nav_submenu site_nav_tray" id="site_nav_tray_explore">
                        <table>
    <tr>
        <td>
            <h4>Discover</h4>
            <ul>
                <li><a href="/search/?ev=em_rs">Explore All</a></li>
                <li><a href="/search/?type=release&sort=hot%2Cdesc&ev=em_tr">Trending Releases</a></li>
                <li><a href="/lists?ev=em_rl">List Explorer</a></li>
                <li><a href="/search/advanced?ev=em_as">Advanced Search</a></li>
                <li><a href="https://blog.discogs.com/en/tag/database-en/?utm_source=discogs&utm_medium=referral&utm_campaign=navigation_menu" target="_blank">Articles About Music</a></li>
            </ul>
        </td>
        <td>
            <h4>Contribute</h4>
            <ul>
                <li><a href="https://support.discogs.com/hc/articles/360004016474-Overview-of-Submission-Guidelines-for-Releases/?utm_source=discogs&utm_medium=referral&utm_campaign=navigation_menu" target="_blank">Submission Guidelines</a></li>
                <li><a href="/release/add?ev=em_sr" rel="nofollow">Submit a Release</a></li>
                <li><a href="https://support.discogs.com/hc/articles/360001567973/?utm_source=discogs&utm_medium=referral&utm_campaign=navigation_menu" target="_blank">How to Make a List</a>
                <li><a href="/leaderboard">Monthly Leaderboard</a></li>
                <li><a href="https://localization.discogs.com/?ev=em_bt" target="_blank">Help Translate Discogs</a></li>
            </ul>
        </td>
        <td>
            <div>
                <h4>Genres</h4>
                <ul>
                    <li><a href="/genre/rock?ev=em_rp">Rock</a></li>
                    <li><a href="/genre/electronic?ev=em_ep">Electronic</a></li>
                    <li><a href="/genre/hip+hop?ev=em_pp">Hip Hop</a></li>
                    <li><a href="/genre/folk%2C+world%2C+%26+country?ev=em_fwcp">Folk, World, & Country</a></li>
                    <li><a href="/genre/jazz?ev=em_jp">Jazz</a></li>
                </ul>
            </div>
        </td>
        <td>
            <div>
                <h4>Styles</h4>
                <ul>
                    <li><a href="/style/house?ev=em_hp">House</a></li>
                    <li><a href="/style/punk?ev=em_pup">Punk</a></li>
                    <li><a href="/style/soul?ev=em_vp">Soul</a></li>
                    <li><a href="https://blog.discogs.com/en/genres-and-styles-list/?utm_source=discogs&utm_medium=referral&utm_campaign=navigation_menu">Explore All Styles</a></li>
                    <li><a href="https://blog.discogs.com/regional-music-styles/">Regional Style Map</a></li>
                </ul>
            </div>
        </td>
    </tr>
</table>

                    </div>
                </li>
                <li id="section_nav_marketplace" class="site_nav_group" data-id="marketplace">
                    <a href="/sell/list" class="nav_group_control" aria-label="Toggle Marketplace Menu">
                        Marketplace<i class="icon icon-caret-down"></i>
                    </a>
                    <div class="site_nav_submenu site_nav_tray" id="site_nav_tray_marketplace">
                        <table>
    <tr>
        <td class="tray_formats">
            <h4>Format</h4>
            <ul>
                <li>
                    <a href="/sell/list?format=Vinyl">
                        Vinyl
                    </a>
                </li>
                <li>
                    <a href="/sell/list?format=CD">
                        CD
                    </a>
                </li>
                <li>
                    <a href="/sell/list?format=Cassette">
                        Cassette
                    </a>
                </li>
                <li>
                    <a href="/sell/list?format=DVD">
                        DVD
                    </a>
                </li>
                <li>
                    <a href="/sell/list?format=Box+Set">
                        Box Set
                    </a>
                </li>
            </ul>
        </td>
        <td class="tray_genres">
            <h4>Genre</h4>
            <ul>
                <li>
                    <a href="/sell/list?genre=Rock">
                        Rock
                    </a>
                </li>
                <li>
                    <a href="/sell/list?genre=Electronic">
                        Electronic
                    </a>
                </li>
                <li>
                    <a href="/sell/list?genre=Pop">
                        Pop
                    </a>
                </li>
                <li>
                    <a href="/sell/list?genre=Funk+%2F+Soul">
                        Funk / Soul
                    </a>
                </li>
                <li>
                    <a href="/sell/list?genre=Jazz">
                        Jazz
                    </a>
                </li>
            </ul>
        </td>
        <td class="tray_styles">
            <h4>Styles</h4>
            <ul>
                <li>
                    <a href="/sell/list?style=Pop+Rock">
                        Pop Rock
                    </a>
                </li>
                <li>
                    <a href="/sell/list?style=House">
                        House
                    </a>
                </li>
                <li>
                    <a href="/sell/list?style=Disco">
                        Disco
                    </a>
                </li>
                <li>
                    <a href="/sell/list?style=Synth-pop">
                        Synth-pop
                    </a>
                </li>
                <li>
                    <a href="/sell/list?style=Soul">
                        Soul
                    </a>
                </li>
            </ul>
        </td>

        <td>
            <h4>
                <a href="/sell/list">
                    Buy Music                </a>
            </h4>
            <ul>
                <li>
                    <a href="/sell/list">
                        All Items                    </a>
                </li>
                <li>
                    <a href="/sell/mywants">
                        Items I Want                    </a>
                </li>
                <li>
                    <a href="/sell/purchases">
                        Purchases                    </a>
                </li>
                <li>
                    <a href="/sell/cart/">
                        Cart                    </a>
                </li>
                <li>
                    <a href="/record-store-day-2021" target="_blank">
                        Record Stores                    </a>
                </li>
            </ul>
        <td>
            <h4>Sell Music</h4>
            <ul>
                <li>
                    <a href="/sell/">
                        List Item For Sale                    </a>
                </li>
                <li>
                    <a href="/sell/orders">
                        Orders                    </a>
                </li>
                <li>
                    <a href="/sell/manage">
                        Inventory                    </a>
                </li>
                <li>
                    <a href="/sell/billing">
                        Billing                    </a>
                </li>
                            </ul>
        </td>
    </tr>
</table>

                    </div>
                </li>
                <li id="section_nav_community" class="site_nav_group" data-id="community">
                    <a href="/group/" class="nav_group_control" aria-label="Toggle Community Menu">
                        Community<i class="icon icon-caret-down"></i>
                    </a>
                    <ul class="site_nav_submenu" id="site_nav_submenu_community">
                        <li>
                            <a href="/group/">
                                Groups                            </a>
                        </li>
                        <li>
                            <a href="/forum/">
                                Forum                            </a>
                        </li>
                        <li>
                            <a href="https://blog.discogs.com/en/">
                                Blog                            </a>
                        </li>
                        <li>
                            <a href="/users/friends">
                                Friends                            </a>
                        </li>
                        <li>
                            <a href="/help/doc/forums">
                                Community Guidelines                            </a>
                        </li>
                        <li>
                            <a href="https://support.discogs.com/hc/articles/360004016474-Overview-of-Submission-Guidelines-for-Releases">
                                Database Guidelines                            </a>
                        </li>
                        <li>
                            <a href="/events">
                                Events                            </a>
                        </li>
                        <li>
                            <a href="https://vinylhub.discogs.com?utm_source=discogs-top-nav&utm_medium=referral" target="_blank">
                                Record Shops                            </a>
                        </li>
                    </ul>
                </li>
            </ul>            <ul
                id="activity_menu"
                                                                                    class="activity_menu_columns_3"
                role="navigation"
                aria-label="Activity Menu"
            >
                                    <li>
                        <a class="button-green button" href="/users/create">
                            Register                        </a>
                    </li>
                    <li>
                                                                            
                        <a href="/login?return_to=%2Fartist%2F6271%3Ftype%3DReleases%26subtype%3DAlbums%26page%3D2%26sort%3Dyear%252Cdesc" id="log_in_link" class="nav_group_control">
                            Log In                        </a>
                    </li>
                            </ul>            <a href="#mobile_site_navigation_toggle" id="mobile_site_navigation_toggle" aria-label="Open Site Menu" class=""><i class="icon icon-bars"></i></a>
            <ul id="mobile_site_navigation">
                <li id="activity_menu_placeholder"></li>
                <li id="site_navigation_placeholder"></li>
            </ul>
        </div>    </div></div>
<div class="ac_div" id="ac_search_q"></div>


                        
<div class="flash_messages">
                        
                        
            <noscript>
                                <div class="alert-message alert-message-warning alert-message-top "
            id="alert-message-"
            data-alert-message-closable="false"
            data-alert-message-auto-close="false"
                                >
            <div class="alert-message-content float_fix ">
                <i class="icon icon-exclamation-triangle alert-message-icon"></i>
                                <span class="alert-message-text">
                                            <strong>Please enable Javascript to take full advantage of our site features.</strong>
                                    </span>
            </div>
        </div>
    
    </noscript>

    
</div>                                                                                                                                                <div id="page" class="aside_off_canvas">
                                <div class="ad_container ad_top" id='ad_top'></div>
        
                                                                                                    
                <div id="page_content" role="main">
        <div class="lr group">
        <div class="left">
            <div class="body">
                <div class="release_actions hide-desktop">
                        <span class="action_menu_toggler" aria-haspopup="true">
        <i class="icon icon-caret-down"></i>
    </span>
    <ul class="action_menu ui-dialog-arrow ui-dialog-arrow-top-right" role="menu">
                                <li class="menu-item">
                            <a href="/artist/6271-Sparks/history#latest" id="edit_link">
                                Edit Artist                            </a>
                        </li>
                    
    </ul>
                </div>

                            
                <div
        class="image_gallery image_gallery_large"
                    data-images='[{"id": "60910033","thumb": "https://img.discogs.com/qxF3NcFTHq1wA3M23NyC6KUOPt0=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1622749890-3111.jpeg.jpg","full": "https://img.discogs.com/3H9X7ZPmKNzzG97vqJhSQUMAOZc=/455x371/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622749890-3111.jpeg.jpg","width": "455","height": "371"},{"id": "60910030","thumb": "https://img.discogs.com/m6r1fkxjoSSeeMVmQeYLIsf7gXI=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1622749885-7153.jpeg.jpg","full": "https://img.discogs.com/hkaw1ayVyzzSssiEqoCSZjIlr0c=/600x488/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622749885-7153.jpeg.jpg","width": "600","height": "488"},{"id": "60910036","thumb": "https://img.discogs.com/BnjIdat7p5Wc9ZSSTcz3VhkKwH4=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1622749898-7774.jpeg.jpg","full": "https://img.discogs.com/-pylzfZ--XZCL7djHZOMRRgpaj4=/600x691/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622749898-7774.jpeg.jpg","width": "600","height": "691"},{"id": "60913471","thumb": "https://img.discogs.com/p6A-NOXvvw956i0I0Vgf4tWjWTs=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1622753462-7758.jpeg.jpg","full": "https://img.discogs.com/9ENxd_bXM9-zx9o74vnFKmHtpBA=/600x428/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622753462-7758.jpeg.jpg","width": "600","height": "428"},{"id": "60910159","thumb": "https://img.discogs.com/rNM75ssoZ5gLgmmRgpV5DTuOBhM=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1622750075-1329.jpeg.jpg","full": "https://img.discogs.com/RgwXWqfULntf9pOwHArOJPnFQCY=/396x396/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622750075-1329.jpeg.jpg","width": "396","height": "396"},{"id": "60914110","thumb": "https://img.discogs.com/gBp7PSsdC1dWbILC5kfELs75eug=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1622753911-8841.jpeg.jpg","full": "https://img.discogs.com/Fw6caYeBwU77pNqUe55sIq-jU0Y=/600x845/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622753911-8841.jpeg.jpg","width": "600","height": "845"},{"id": "60914155","thumb": "https://img.discogs.com/n8tQttjEatPMMtVyE2h2CJs9-c8=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1622753957-3738.jpeg.jpg","full": "https://img.discogs.com/zYXdK5JpFBWOZMiQA1i3aDhk39o=/500x507/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622753957-3738.jpeg.jpg","width": "500","height": "507"},{"id": "60914161","thumb": "https://img.discogs.com/H9e26S5NFZtXmXZmxcEKPue4G6w=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1622753971-1849.jpeg.jpg","full": "https://img.discogs.com/0XTSjHAexq0QlZTRPw-0DR1bqm8=/600x355/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622753971-1849.jpeg.jpg","width": "600","height": "355"},{"id": "60915277","thumb": "https://img.discogs.com/36SvAZwLLNWzTHJM4dXdpARB4g4=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1622755229-1167.jpeg.jpg","full": "https://img.discogs.com/Yh6nOGAKSvYXORox2IqqZ_PJ-z8=/600x429/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1622755229-1167.jpeg.jpg","width": "600","height": "429"},{"id": "486625","thumb": "https://img.discogs.com/gwwpk66_UItB8VqRST8PJKpjy3Q=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1129098309.jpeg.jpg","full": "https://img.discogs.com/0T2TiTjp-3K_9XE4Olc1ht-9LEQ=/495x495/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1129098309.jpeg.jpg","width": "495","height": "495"},{"id": "71823","thumb": "https://img.discogs.com/OUNSlqXnx9_6GBtB_V8F9hQiLuY=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-001.jpg.jpg","full": "https://img.discogs.com/v1l3z3pkI90BHyNGy8-UNh2zu10=/300x393/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-001.jpg.jpg","width": "300","height": "393"},{"id": "770930","thumb": "https://img.discogs.com/7k99wfjbh16GdFi-ixv_jq7cSq8=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1152100795.jpeg.jpg","full": "https://img.discogs.com/J-JLWGDtkXU-baq9bj98LIzIfl0=/600x450/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1152100795.jpeg.jpg","width": "600","height": "450"},{"id": "834820","thumb": "https://img.discogs.com/KFtUtLiWmxQhtkcZCJWYY2RZCTI=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1156139245.jpeg.jpg","full": "https://img.discogs.com/BqN3otB3qCWBgwUlafTKcRp-QUo=/420x300/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1156139245.jpeg.jpg","width": "420","height": "300"},{"id": "4200398","thumb": "https://img.discogs.com/jfYfDh7PYgjUQ7hSb1xwR40Wd90=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1286717315.jpeg.jpg","full": "https://img.discogs.com/EHJYYRJvNXT37b3MKM6qHhspDNs=/600x844/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1286717315.jpeg.jpg","width": "600","height": "844"},{"id": "35731092","thumb": "https://img.discogs.com/jNzV1Aw_wibewZQnqmTkUMlj8b8=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1534748475-3223.jpeg.jpg","full": "https://img.discogs.com/f5bH2hVMjgXeUj9KT3jRyL3wUQA=/600x600/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-6271-1534748475-3223.jpeg.jpg","width": "600","height": "600"}]'
                        >
                                        <a        href="/artist/6271-Sparks/images"        class="thumbnail_link
            thumbnail_size_large
            thumbnail_orientation_nocrop
            
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                            <img src="https://img.discogs.com/qxF3NcFTHq1wA3M23NyC6KUOPt0=/fit-in/300x300/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/A-6271-1622749890-3111.jpeg.jpg"
                alt="Sparks on Discogs" />
                    </span>
    </a>

                        <p class="image_gallery_more">
                <a href="/artist/6271-Sparks/images">
                    More Images                </a>
              </p>
                    
    </div>
        <script type="text/template" id="image_gallery_modal_tpl">
        <div id="image_gallery_modal">
            <div class="image_gallery_actions">
                <button class="image_zoom button button-small hide_mobile">
                    <span class="image_zoom_in"><i class="icon icon-search-plus"></i> Zoom In</a></span>
                    <span class="image_zoom_out"><i class="icon icon-search-minus"></i> Zoom Out</a></span>
                </button>
                <button class="image_copy_permalink button button-small hide_mobile"><i class="icon icon-chain"></i> Permalink</button>
                <input class="image_copy_permalink_text" type="text">
                <a href="/artist/6271-Sparks/images/update" class="images_edit button button-small"><i class="icon icon-pencil-square-o"></i> Edit Images</a>
                <a class="image_gallery_close hide_mobile"><i class="icon icon-times"></i></a>
            </div>
            <a class="image_gallery_nav image_gallery_prev hide_mobile"><i class="icon icon-chevron-left"></i></a>
            <a class="image_gallery_nav image_gallery_next hide_mobile"><i class="icon icon-chevron-right"></i></a>
            <div
                class="image_gallery_slide_wrapper"
                style="width: <%= 100 * images.length %>%"
            >
                <% _.each(images, function(image, index) { %>
                    <div
                        data-id="<%= image.id %>"
                        class="image_gallery_slide<% if (index === 0) { %> current<% } %>"
                        style="width: <%= (100 / images.length).toFixed(4) %>%">
                        <img
                            class="preview"
                            src="<%= image.thumb %>"
                            data-src="<%= image.full %>"
                            style="height: 100%; max-width: <%= image.width %>px; max-height: <%= image.height %>px;"
                        >
                    </div>
                <% }) %>
            </div>
            <div class="image_gallery_thumbs hide_mobile">
                <% _.each(images, function(image) { %>
                    <a href="#" data-id="<%= image.id %>" class="image_gallery_thumb">
                        <img src="<%= image.thumb %>">
                    </a>
                <% }) %>
            </div>
            <a href="/artist/6271-Sparks/images/update" class="images_edit button last"><i class="icon icon-pencil-square-o"></i> Edit Images</a>
        </div>
    </script>



                <div class="profile"><h1 class="hide_mobile">Sparks</h1>

    <div class="head">Profile:</div>
    <div class="content">
        <div class="readmore" id="profile">
            Brothers Ron and Russell Mael from Los Angeles, USA have been making diverse music since 1969 under various incarnations of Sparks. In 1979 they ditched the guitars and keyboards of glam geek rock and started working with Italian producer Giorgio Moroder, beginning a love affair with electronic music. Since then they have worked with a variety of people including Finitribe, Les Rita Mitsouko, Erasure, Faith No More and Franz Ferdinand.
                    </div>
    </div>

    <div class="head">Sites:</div>
    <div class="content"><a href="http://www.allsparks.com/" rel="nofollow">allsparks.com</a>, <a href="http://en.wikipedia.org/wiki/Sparks_%28band%29" rel="nofollow">Wikipedia</a>, <a href="https://www.facebook.com/sparksofficial" rel="nofollow">Facebook</a>, <a href="https://twitter.com/sparksofficial" rel="nofollow">Twitter</a>, <a href="https://www.instagram.com/sparks_official/" rel="nofollow">instagram.com</a>, <a href="https://www.youtube.com/user/SparksOfficialVideo/featured" rel="nofollow">YouTube</a>, <a href="http://graphikdesigns.free.fr/halfnelson.html" rel="nofollow">graphikdesigns.free.fr</a>, <a href="https://www.sparkives.com/" rel="nofollow">sparkives.com</a></div>

    
    <div class="head">Aliases:</div>
    <div class="content">
                
                <a href="/artist/1288076-Halfnelson">Halfnelson</a>, 
                <a href="/artist/7016600-Lil-Beethoven">Lil' Beethoven</a>    </div>

    
            <div class="head">Members:</div>
        <div class="content">
            <div class="readmore">
                                
                    <a href="/artist/534164-Adrian-Fisher"><s>Adrian Fisher</s></a>, 
                    <a href="/artist/378727-Bob-Haag"><s>Bob Haag</s></a>, 
                    <a href="/artist/2966103-Christi-Haydon"><s>Christi Haydon</s></a>, 
                    <a href="/artist/278604-David-Kendrick"><s>David Kendrick</s></a>, 
                    <a href="/artist/258985-Dean-Menta">Dean Menta</a>, 
                    <a href="/artist/534165-Dinky-Diamond"><s>Dinky Diamond</s></a>, 
                    <a href="/artist/266053-Earle-Mankey"><s>Earle Mankey</s></a>, 
                    <a href="/artist/794079-Harley-Feinstein"><s>Harley Feinstein</s></a>, 
                    <a href="/artist/549576-Hilly-Michaels"><s>Hilly Michaels</s></a>, 
                    <a href="/artist/683363-Ian-Hampton"><s>Ian Hampton</s></a>, 
                    <a href="/artist/670615-Jim-Goodwin-2"><s>Jim Goodwin (2)</s></a>, 
                    <a href="/artist/324181-Jim-Mankey"><s>Jim Mankey</s></a>, 
                    <a href="/artist/378728-Leslie-Bohem"><s>Leslie Bohem</s></a>, 
                    <a href="/artist/102955-Martin-Gordon"><s>Martin Gordon</s></a>, 
                    <a href="/artist/133319-Ron-Mael">Ron Mael</a>, 
                    <a href="/artist/133320-Russell-Mael">Russell Mael</a>, 
                    <a href="/artist/511094-Sal-Maida"><s>Sal Maida</s></a>, 
                    <a href="/artist/101275-Tammy-Glover">Tammy Glover</a>, 
                    <a href="/artist/683364-Trevor-White-2"><s>Trevor White (2)</s></a>            </div>
        </div>
    
    


                                        <div class="head">Variations:</div>
                    <div class="content">

                        <div class="filter_anv_wrap">
                                                        <span class="anv_selected">Viewing All</span>
                                                        |

                                                        <a href="/artist/6271-Sparks?noanv=1">Sparks</a>
                            
                                                    </div>

                        <div id="anvs" class="readmore">
                                                        
                                                                                    
                            
                                                                                    
                            
                                                                                    
                            
                                                                                    
                                                        <a href="/artist/6271-Sparks?anv=Les+Sparks&filter_anv=1">Les Sparks</a>, <a href="/artist/6271-Sparks?anv=The+Sparks&filter_anv=1">The Sparks</a>, <a href="/artist/6271-Sparks?anv=%D0%A1%D0%BF%D0%B0%D1%80%D0%BA%D1%81&filter_anv=1">Спаркс</a>, <a href="/artist/6271-Sparks?anv=%E3%82%B9%E3%83%91%E3%83%BC%E3%82%AF%E3%82%B9&filter_anv=1">スパークス</a>
                        </div>

                    </div> <!-- /content -->

                    
                </div> <!-- end profile -->

            </div> <!-- end body -->
        </div> <!-- end left -->

        <div class="right">

            <div class="section hide_mobile">

                        <span class="copy_shortcut needs_tooltip" data-title="Select Artist Code">
        <img src="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/images/favicon.ico" />
        <span class="copy_shortcut_code">[a6271]</span>
    </span>

                <h3>
                    Artist                </h3>

                <div class="section_content">

                    <ul class="list_no_style" id="listitems">
                        <li>
                            <a href="/artist/6271-Sparks/history#latest" id="edit_link">
                                Edit Artist                            </a>
                        <li>
                    </ul>

                                                                <br />
                                <a class="share_link " data-text="Sparks" data-url="http://www.discogs.com/artist/6271-Sparks" data-dialog-title="Share">
        <i class="icon icon-share-square-o"></i>
        Share</a>

                    
                </div> <!-- end section_content -->

            </div> <!-- end section -->

            <div class="hide_mobile">
                
                


<div class="section marketplace_box_links">
    <h3>
        Marketplace                <span class="marketplace_for_sale_count">
        <a href="/sell/list?artist_id=6271&ev=ab"><strong>15,557 For Sale</strong></a></span>
    </h3>

    <div class="section_content marketplace_box_buttons_count_1">


                        <a href="/sell/list?artist_id=6271&ev=ab" class="buy_release_button button button-blue">
                                                    Vinyl and CD
                            </a>
            
    
    </div>
</div>
            </div>

                    </div> <!-- /right -->
    </div> <!-- /lr -->

                    <div class="responsive_wrap tabs-wrap float_fix">
                    <ul class="tab_menu">
                        <li class="menu-item  first current last">    <a href="/artist/6271-Sparks"
                >                <span class="link_text">Discography</span>
    
    </a></li>
    
        </ul>
    
    </div>


    <div id="discography_wrapper" class="aside_nav_wrap">

        <div class="discography_nav off_canvas_nav">

            <div class="hide_mobile">
                    <div class="search aside_search_form clearfix">
        <form class="artist_search_form">
            <input type="text" class="artist_search_query " placeholder="Search" value="" />
            <button class="button"><i class="icon icon-search"></i></button>
        </form>
    </div>

            </div>

                
                    <ul class="facets_nav">
            <li>
                <h3 class="facets_header">
                    <a
                        href="/artist/6271-Sparks?type=Releases&filter_anv=0"
                        class="credit_type default"
                        data-credit-type="Releases"
                        data-credit-subtype="All"
                        data-credit-document-title="Sparks Discography at Discogs: All - Releases"
                    >
                        <span class="facet_count">179</span>
                        Releases
                    </a>
                </h3>
            </li>
                                                                                                                                <li>
                    <a
                        href="/artist/6271-Sparks?type=Releases&subtype=Albums&filter_anv=0"
                        class="credit_type selected"
                        data-credit-type="Releases"
                        data-credit-subtype="Albums"
                        data-credit-document-title="Sparks Discography at Discogs: Albums - Releases"
                    >
                        <span class="facet_count">36</span>
                        Albums
                        <span class="facet-bar" style="width: 20.11173184357542%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Releases&subtype=Singles-EPs&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Releases"
                        data-credit-subtype="Singles-EPs"
                        data-credit-document-title="Sparks Discography at Discogs: Singles-EPs - Releases"
                    >
                        <span class="facet_count">88</span>
                        Singles & EPs
                        <span class="facet-bar" style="width: 49.162011173184354%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Releases&subtype=Compilations&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Releases"
                        data-credit-subtype="Compilations"
                        data-credit-document-title="Sparks Discography at Discogs: Compilations - Releases"
                    >
                        <span class="facet_count">40</span>
                        Compilations
                        <span class="facet-bar" style="width: 22.3463687150838%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Releases&subtype=Videos&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Releases"
                        data-credit-subtype="Videos"
                        data-credit-document-title="Sparks Discography at Discogs: Videos - Releases"
                    >
                        <span class="facet_count">5</span>
                        Videos
                        <span class="facet-bar" style="width: 2.793296089385475%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Releases&subtype=Miscellaneous&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Releases"
                        data-credit-subtype="Miscellaneous"
                        data-credit-document-title="Sparks Discography at Discogs: Miscellaneous - Releases"
                    >
                        <span class="facet_count">10</span>
                        Miscellaneous
                        <span class="facet-bar" style="width: 5.58659217877095%;"></span>
                    </a>
                    </li>
                                    </ul>
                    <ul class="facets_nav">
            <li>
                <h3 class="facets_header">
                    <a
                        href="/artist/6271-Sparks?type=Appearances&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="All"
                        data-credit-document-title="Sparks Discography at Discogs: All - Appearances"
                    >
                        <span class="facet_count">741</span>
                        Appearances
                    </a>
                </h3>
            </li>
                                                                                                                                <li>
                    <a
                        href="/artist/6271-Sparks?type=Appearances&subtype=Albums&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Albums"
                        data-credit-document-title="Sparks Discography at Discogs: Albums - Appearances"
                    >
                        <span class="facet_count">51</span>
                        Albums
                        <span class="facet-bar" style="width: 6.882591093117409%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Appearances&subtype=Singles-EPs&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Singles-EPs"
                        data-credit-document-title="Sparks Discography at Discogs: Singles-EPs - Appearances"
                    >
                        <span class="facet_count">28</span>
                        Singles & EPs
                        <span class="facet-bar" style="width: 3.7786774628879893%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Appearances&subtype=Compilations&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Compilations"
                        data-credit-document-title="Sparks Discography at Discogs: Compilations - Appearances"
                    >
                        <span class="facet_count">565</span>
                        Compilations
                        <span class="facet-bar" style="width: 76.24831309041835%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Appearances&subtype=Mixes&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Mixes"
                        data-credit-document-title="Sparks Discography at Discogs: Mixes - Appearances"
                    >
                        <span class="facet_count">55</span>
                        Mixes
                        <span class="facet-bar" style="width: 7.422402159244265%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Appearances&subtype=Videos&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Videos"
                        data-credit-document-title="Sparks Discography at Discogs: Videos - Appearances"
                    >
                        <span class="facet_count">41</span>
                        Videos
                        <span class="facet-bar" style="width: 5.53306342780027%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Appearances&subtype=Miscellaneous&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Appearances"
                        data-credit-subtype="Miscellaneous"
                        data-credit-document-title="Sparks Discography at Discogs: Miscellaneous - Appearances"
                    >
                        <span class="facet_count">1</span>
                        Miscellaneous
                        <span class="facet-bar" style="width: 0.1349527665317139%;"></span>
                    </a>
                    </li>
                                    </ul>
                    <ul class="facets_nav">
            <li>
                <h3 class="facets_header">
                    <a
                        href="/artist/6271-Sparks?type=Unofficial&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="All"
                        data-credit-document-title="Sparks Discography at Discogs: All - Unofficial"
                    >
                        <span class="facet_count">71</span>
                        Unofficial
                    </a>
                </h3>
            </li>
                                                                                                                                <li>
                    <a
                        href="/artist/6271-Sparks?type=Unofficial&subtype=Albums&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="Albums"
                        data-credit-document-title="Sparks Discography at Discogs: Albums - Unofficial"
                    >
                        <span class="facet_count">37</span>
                        Albums
                        <span class="facet-bar" style="width: 52.112676056338024%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Unofficial&subtype=Singles-EPs&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="Singles-EPs"
                        data-credit-document-title="Sparks Discography at Discogs: Singles-EPs - Unofficial"
                    >
                        <span class="facet_count">2</span>
                        Singles & EPs
                        <span class="facet-bar" style="width: 2.8169014084507045%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Unofficial&subtype=Compilations&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="Compilations"
                        data-credit-document-title="Sparks Discography at Discogs: Compilations - Unofficial"
                    >
                        <span class="facet_count">29</span>
                        Compilations
                        <span class="facet-bar" style="width: 40.845070422535215%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Unofficial&subtype=Videos&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="Videos"
                        data-credit-document-title="Sparks Discography at Discogs: Videos - Unofficial"
                    >
                        <span class="facet_count">2</span>
                        Videos
                        <span class="facet-bar" style="width: 2.8169014084507045%;"></span>
                    </a>
                    </li>
                                                                                                                    <li>
                    <a
                        href="/artist/6271-Sparks?type=Unofficial&subtype=Miscellaneous&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Unofficial"
                        data-credit-subtype="Miscellaneous"
                        data-credit-document-title="Sparks Discography at Discogs: Miscellaneous - Unofficial"
                    >
                        <span class="facet_count">1</span>
                        Miscellaneous
                        <span class="facet-bar" style="width: 1.4084507042253522%;"></span>
                    </a>
                    </li>
                                    </ul>
                    <ul class="facets_nav">
            <li>
                <h3 class="facets_header">
                    <a
                        href="/artist/6271-Sparks?type=Credits&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="All"
                        data-credit-document-title="Sparks Discography at Discogs: All - Credits"
                    >
                        <span class="facet_count">52</span>
                        Credits
                    </a>
                </h3>
            </li>
                                                                                                            <li>
                    <a
                        href="/artist/6271-Sparks?type=Credits&subtype=Remix&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Remix"
                        data-credit-document-title="Sparks Discography at Discogs: Remix - Credits"
                    >
                        <span class="facet_count">6</span>
                        Remix
                        <span class="facet-bar" style="width: 11.538461538461538%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/6271-Sparks?type=Credits&subtype=Vocals&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Vocals"
                        data-credit-document-title="Sparks Discography at Discogs: Vocals - Credits"
                    >
                        <span class="facet_count">4</span>
                        Vocals
                        <span class="facet-bar" style="width: 7.6923076923076925%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/6271-Sparks?type=Credits&subtype=Instruments-Performance&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Instruments-Performance"
                        data-credit-document-title="Sparks Discography at Discogs: Instruments-Performance - Credits"
                    >
                        <span class="facet_count">9</span>
                        Instruments & Performance
                        <span class="facet-bar" style="width: 17.307692307692307%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/6271-Sparks?type=Credits&subtype=Writing-Arrangement&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Writing-Arrangement"
                        data-credit-document-title="Sparks Discography at Discogs: Writing-Arrangement - Credits"
                    >
                        <span class="facet_count">13</span>
                        Writing & Arrangement
                        <span class="facet-bar" style="width: 25.0%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/6271-Sparks?type=Credits&subtype=Featuring-Presenting&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Featuring-Presenting"
                        data-credit-document-title="Sparks Discography at Discogs: Featuring-Presenting - Credits"
                    >
                        <span class="facet_count">10</span>
                        Featuring & Presenting
                        <span class="facet-bar" style="width: 19.230769230769234%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/6271-Sparks?type=Credits&subtype=Production&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Production"
                        data-credit-document-title="Sparks Discography at Discogs: Production - Credits"
                    >
                        <span class="facet_count">6</span>
                        Production
                        <span class="facet-bar" style="width: 11.538461538461538%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/6271-Sparks?type=Credits&subtype=Technical&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Technical"
                        data-credit-document-title="Sparks Discography at Discogs: Technical - Credits"
                    >
                        <span class="facet_count">3</span>
                        Technical
                        <span class="facet-bar" style="width: 5.769230769230769%;"></span>                    </a>
                    </li>
                                                                                                <li>
                    <a
                        href="/artist/6271-Sparks?type=Credits&subtype=Management&filter_anv=0"
                        class="credit_type"
                        data-credit-type="Credits"
                        data-credit-subtype="Management"
                        data-credit-document-title="Sparks Discography at Discogs: Management - Credits"
                    >
                        <span class="facet_count">1</span>
                        Management
                        <span class="facet-bar" style="width: 1.9230769230769231%;"></span>                    </a>
                    </li>
                                    </ul>
    
            <ul class="facets_nav">
            <li>
                <h3 class="facets_header">
                    <a
                        href="/artist/6271-Sparks?recent=true"
                        class="credit_type recent "
                        data-credit-type="Recent Releases"
                        data-credit-subtype="All"
                        data-credit-document-title="Sparks Discography at Discogs: All - Recent Releases"
                    >
                        <span class="facet_count">14</span>
                        Recent Releases                    </a>
                </h3>
            </li>
        </ul>
    


            <ul class="artist_actions list_no_style">
                <li>
                    <a title="Add Release" href="/release/add?from_artist=Sparks" class="button"><i class="icon icon-plus"></i> Add Release</a>

                </li>
                            </ul>

            <div class="data_quality">
                <strong>Data Quality</strong>
                <a href="/help/doc/voting-guidelines"><i class="icon icon-question-circle"></i></a>
                <ul class="list_no_style data_quality_list">
                    
                                                                                <li class="correct" title="10%">
                    <span class="quality_label quality_label_correct">Correct</span>
                    <div class="data_quality_meter">
                        <span class="data_quality correct" style="width: 9.7%"></span>
                                            </div>
                    </li>
                                        
                                        
                                                                                <li class="nminc" title="0%">
                    <span class="quality_label quality_label_nminc">Changes</span>
                    <div class="data_quality_meter">
                        <span class="data_quality nminc" style="width: 0.2%"></span>
                                                <span class="data_quality_note">minor</span>
                                            </div>
                    </li>
                                        
                                                                                <li class="new" title="62%">
                    <span class="quality_label quality_label_new">New</span>
                    <div class="data_quality_meter">
                        <span class="data_quality new" style="width: 62.2%"></span>
                                            </div>
                    </li>
                                        
                                                                                <li class="edit" title="28%">
                    <span class="quality_label quality_label_edit">Updated</span>
                    <div class="data_quality_meter">
                        <span class="data_quality edit" style="width: 27.8%"></span>
                                            </div>
                    </li>
                                                        </ul>
            </div>

            <ul class="facets_nav">
                <li>
                    <a href="/artist/6271-Sparks/submissions">2368 submissions pending</a>
                </li>
            </ul>
        </div>

        <div id="releases" class="content_with_off_canvas">
            <div id="pjax_container" data-pjax-timeout="30000">
                
 
<div class="hide-desktop">
        <div class="search aside_search_form clearfix">
        <form class="artist_search_form">
            <input type="text" class="artist_search_query search_table_field" placeholder="Search" value="" />
            <button class="button"><i class="icon icon-search"></i></button>
        </form>
    </div>

</div>

        
    <div class="pagination top ">
        <form
            action="/artist/6271"
            method="get"
            data-persist-filters="True"
            data-section="artist"
        >
                            <strong class="pagination_total">
        26 &ndash; 36 of 36    </strong>

                                    <div class="responsive_wrap hide_mobile">
                    <ul class="pagination_page_links">
        <li>
                            <a href="/artist/6271?type=Releases&subtype=Albums&page=1&sort=year%2Cdesc" class="pagination_previous"><i class="icon icon-chevron-left"></i>Prev</a>
                    </li>
                <li>
                            <span>
                    Next<i class="icon icon-chevron-right"></i></span>
                    </li>
            </ul>

            </div>
                        <div class="pagination_controls ">
                                            
    <span id="layout_buttons" class="icon_button_group" data-section="artist"><a class="inset_button needs_tooltip"  data-placement="top" data-size="big" title="Large Covers" href="/artist/6271?type=Releases&amp;subtype=Albums&amp;page=2&amp;sort=year%2Cdesc&amp;layout=big">
                <i class="icon icon-th-large"></i>
            </a><a class="inset_button needs_tooltip"  data-placement="top" data-size="med" title="Text With Covers" href="#" disabled="disabled">
                <i class="icon icon-list"></i>
            </a><a class="inset_button needs_tooltip"  data-placement="top" data-size="sm" title="Text Only" href="/artist/6271?type=Releases&amp;subtype=Albums&amp;page=2&amp;sort=year%2Cdesc&amp;layout=sm">
                <i class="icon icon-align-justify"></i>
            </a></span>

                
                                        
                    <label for="sort_top" class="sort_top">Sort</label>
        <select name="sort" id="sort_top">
            
            <option value="title,asc">Title, A-Z</option><option value="title,desc">Title, Z-A</option><option value="label,asc">Label, A-Z</option><option value="label,desc">Label, Z-A</option><option value="year,asc">Year, 0-9</option><option value="year,desc" selected="selected">Year, 9-0</option>    
        </select>
        <br class="hide-desktop">
        

                                                            <label class="hide_mobile" for="limit_top">Show</label>
    <select class="hide_mobile" name="limit" id="limit_top">
        
            <option value="25" selected="selected">25</option><option value="50">50</option><option value="100">100</option><option value="250">250</option><option value="500">500</option>    
    </select>

                                <noscript><button type="submit">Refresh</button></noscript>
            </div>
                                                                                                                                                    <input type="hidden" name="type" value="Releases" />
                                    <input type="hidden" name="subtype" value="Albums" />
                                    </form>
    </div>


        
                <table class="cards table_responsive layout_normal" id="artist">
                                                                                                                                                                                            <tr
        class="card r_tr r15010846 main release edit
            shortcut_navigable
            "
                                                data-id="r15010846"
    data-object-id="15010846"
    data-object-type="release"
                                                
        id="r15010846"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited"></span></div></td>

                <td class="catno_first"><span>RL 22-5</span></td>

                <td class="image">            
    
                <a        href="/Sparks-Foghat-Kimono-My-House-Rock-and-Roll-Outlaws/release/15010846"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/q1jp5fFmLmcPKKzySaOwCRZ5Rvc=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-15010846-1585478693-5067.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - Kimono My House / Rock and Roll Outlaws album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a> / <a href="/artist/265836-Foghat">Foghat</a></td>

                <td class="title" data-followable="a:visible:not(.credits a):not(.artist_in_title a)">
                                                <span class="credits">
                                            </span>
                                        <span class="artist_in_title">
                    <a href="/artist/6271-Sparks">Sparks</a> / <a href="/artist/265836-Foghat">Foghat</a> -
                </span>
                                    <a href="/Sparks-Foghat-Kimono-My-House-Rock-and-Roll-Outlaws/release/15010846">Kimono My House / Rock and Roll Outlaws</a>
        &lrm;<span class="format">(LP, Transcription)</span>
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/258814-Afrts">Afrts</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>RL 22-5</span></td>

                <td class="country has_header" data-header="Country: "><span>US</span></td>

                <td class="year has_header" data-header="Year: ">1979</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check r15010846"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/15010846">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
            
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m478556 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/478556/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
    data-object-id="478556"
    data-object-type="master release"
                data-group-url="/master/478556/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
                                        
        id="m478556"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>TECI-26546</span></td>

                <td class="image">            
    
                <a        href="/Sparks-Introducing-Sparks/master/478556"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/JNh9cXBu6Q1RbNDfoSiSFybP0gU=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-743553-1154284076.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - Introducing Sparks album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Sparks-Introducing-Sparks/master/478556">Introducing Sparks</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            20
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/3072-CBS">CBS</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>TECI-26546</span></td>

                <td class="country has_header" data-header="Country: "><span>Japan</span></td>

                <td class="year has_header" data-header="Year: ">1977</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m478556"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/478556">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            20
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m87048 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/87048/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
    data-object-id="87048"
    data-object-type="master release"
                data-group-url="/master/87048/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
                                        
        id="m87048"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>4735909</span></td>

                <td class="image">            
    
                <a        href="/Sparks-Big-Beat/master/87048"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/ArurXhdoB3stT_3cuHrL6LSHaYw=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-887699-1460301283-3679.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - Big Beat album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Sparks-Big-Beat/master/87048">Big Beat</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            26
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/8377-Island-Records">Island Records</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>4735909</span></td>

                <td class="country has_header" data-header="Country: "><span>UK</span></td>

                <td class="year has_header" data-header="Year: ">1976</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m87048"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/87048">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            26
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr r12981270 main release new
            shortcut_navigable
            "
                                                data-id="r12981270"
    data-object-id="12981270"
    data-object-type="release"
                                                
        id="r12981270"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="New Submission"></span></div></td>

                <td class="catno_first"><span>XSM 160902/3</span></td>

                <td class="image">            
    
                <a        href="/Sparks-Live-Bootleg/release/12981270"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/OIAD1JSrZBM0qOoqLZoKznymibY=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-12981270-1545836955-7620.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - Live Bootleg album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a></td>

                <td class="title" data-followable="a:visible:not(.credits a):not(.artist_in_title a)">
                                                <span class="credits">
                                            </span>
                                                <a href="/Sparks-Live-Bootleg/release/12981270">Live Bootleg</a>
        &lrm;<span class="format">(Acetate, LP)</span>
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/1866-Columbia">Columbia</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>XSM 160902/3</span></td>

                <td class="country has_header" data-header="Country: "><span>US</span></td>

                <td class="year has_header" data-header="Year: ">1976</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check r12981270"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/12981270">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
            
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m87057 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/87057/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
    data-object-id="87057"
    data-object-type="master release"
                data-group-url="/master/87057/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
                                        
        id="m87057"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>984 341 1</span></td>

                <td class="image">            
    
                <a        href="/Sparks-Indiscreet/master/87057"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/DsgJBEi9NCFkNTVflfkAhA9e9ww=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-743546-1479565731-2350.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - Indiscreet album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Sparks-Indiscreet/master/87057">Indiscreet</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            38
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/8377-Island-Records">Island Records</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>984 341 1</span></td>

                <td class="country has_header" data-header="Country: "><span>Europe</span></td>

                <td class="year has_header" data-header="Year: ">1975</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m87057"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/87057">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            38
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m87068 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/87068/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
    data-object-id="87068"
    data-object-type="master release"
                data-group-url="/master/87068/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
                                        
        id="m87068"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>4735905</span></td>

                <td class="image">            
    
                <a        href="/Sparks-Propaganda/master/87068"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/pJAghslTqQc6inlIS3Lvt0tHBjQ=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-327546-1355839183-8669.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - Propaganda album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Sparks-Propaganda/master/87068">Propaganda</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            49
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/8377-Island-Records">Island Records</a>, <a href="https://www.discogs.com/label/8377-Island-Records">Island Records</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>4735905</span></td>

                <td class="country has_header" data-header="Country: "><span>UK</span></td>

                <td class="year has_header" data-header="Year: ">1974</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m87068"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/87068">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            49
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m87047 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/87047/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
    data-object-id="87047"
    data-object-type="master release"
                data-group-url="/master/87047/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
                                        
        id="m87047"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>4735903</span></td>

                <td class="image">            
    
                <a        href="/Sparks-Kimono-My-House/master/87047"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/3QOBNxHpJMFFPrO1jhFajYcZsac=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-2225866-1610272003-3051.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - Kimono My House album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Sparks-Kimono-My-House/master/87047">Kimono My House</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            79
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/8377-Island-Records">Island Records</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>4735903</span></td>

                <td class="country has_header" data-header="Country: "><span>Europe</span></td>

                <td class="year has_header" data-header="Year: ">1974</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m87047"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/87047">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            79
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr r12723446 main release change
            shortcut_navigable
            "
                                                data-id="r12723446"
    data-object-id="12723446"
    data-object-type="release"
                                                
        id="r12723446"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Needs Changes"></span></div></td>

                <td class="catno_first"><span># 27 3a</span></td>

                <td class="image">            
    
                <a        href="/Sparks-The-Dick-Clark-Music-Machine-Show-27/release/12723446"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/pc5eTIMvFpISnU7z2YX2QhBYdj4=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-12723446-1545839704-1606.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - The Dick Clark Music Machine Show #27 album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a></td>

                <td class="title" data-followable="a:visible:not(.credits a):not(.artist_in_title a)">
                                                <span class="credits">
                                            </span>
                                                <a href="/Sparks-The-Dick-Clark-Music-Machine-Show-27/release/12723446">The Dick Clark Music Machine Show #27</a>
        &lrm;<span class="format">(LP, Promo)</span>
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/1541796-The-Dick-Clark-Music-Machine">The Dick Clark Music Machine</a></td>

                <td class="catno has_header" data-header="Cat #: "><span># 27 3a</span></td>

                <td class="country has_header" data-header="Country: "><span>US</span></td>

                <td class="year has_header" data-header="Year: ">1974</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check r12723446"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/12723446">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
            
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr r14864650 main release edit
            shortcut_navigable
            "
                                                data-id="r14864650"
    data-object-id="14864650"
    data-object-type="release"
                                                
        id="r14864650"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited"></span></div></td>

                <td class="catno_first"><span>RL - 38-5</span></td>

                <td class="image">            
    
                <a        href="/Sparks-Mick-Ronson-Propaganda-Play-Dont-Worry/release/14864650"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/Fm5DUMvGexfpc6NHrr-2XTNolfI=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-14864650-1583066546-6795.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - Propaganda / Play Don&#39;t Worry album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a> / <a href="/artist/179207-Mick-Ronson">Mick Ronson</a></td>

                <td class="title" data-followable="a:visible:not(.credits a):not(.artist_in_title a)">
                                                <span class="credits">
                                            </span>
                                        <span class="artist_in_title">
                    <a href="/artist/6271-Sparks">Sparks</a> / <a href="/artist/179207-Mick-Ronson">Mick Ronson</a> -
                </span>
                                    <a href="/Sparks-Mick-Ronson-Propaganda-Play-Dont-Worry/release/14864650">Propaganda / Play Don&#39;t Worry</a>
        &lrm;<span class="format">(LP, Transcription)</span>
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/258814-Afrts">Afrts</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>RL - 38-5</span></td>

                <td class="country has_header" data-header="Country: "><span>US</span></td>

                <td class="year has_header" data-header="Year: ">1974</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check r14864650"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/14864650">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
            
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m87042 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/87042/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
    data-object-id="87042"
    data-object-type="master release"
                data-group-url="/master/87042/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
                                        
        id="m87042"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>8122-79905-0</span></td>

                <td class="image">            
    
                <a        href="/Sparks-A-Woofer-In-Tweeters-Clothing/master/87042"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_landscape
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/crdWasq-PmE5JWBVfpdvLFYKGkw=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-1149887-1457711859-3252.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - A Woofer In Tweeter&#39;s Clothing album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Sparks-A-Woofer-In-Tweeters-Clothing/master/87042">A Woofer In Tweeter&#39;s Clothing</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            28
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/11929-Bearsville">Bearsville</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>8122-79905-0</span></td>

                <td class="country has_header" data-header="Country: "><span>UK</span></td>

                <td class="year has_header" data-header="Year: ">1972</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m87042"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/87042">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            28
                                        versions                    </button>
    
        </td>
    </tr>

    
                                                                                                                                                                            <tr
        class="card r_tr m92474 main master edit new
            shortcut_navigable
            "
                                                data-id="/master/92474/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
    data-object-id="92474"
    data-object-type="master release"
                data-group-url="/master/92474/versions/artist/6271?noanv=False&sort=year&sort_order=desc"
                                        
        id="m92474"
    >
                <td class="status hide_mobile"><div class="tooltip_wrapper"><span class="needs_tooltip" data-title="Recently Edited / New Submission"></span></div></td>

                <td class="catno_first"><span>MOCCD13845, 8718627230442</span></td>

                <td class="image">            
    
                <a        href="/Sparks-Sparks/master/92474"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/xCiIGT-ck_jAOw8K4jlzJv2ctPU=/100x100/filters:strip_icc():format(jpeg):mode_rgb():quality(40)/discogs-images/R-11733054-1522157894-9273.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sparks - Halfnelson album art" />

                    </span>
    </a>
    </td>

                <td class="artist"><a href="/artist/6271-Sparks">Sparks</a></td>

                <td class="title" data-followable=".mr_toggler">
                                                <span class="credits">
                                            </span>
                                                <a href="/Sparks-Sparks/master/92474">Halfnelson</a>
                    <span class="format">(Album)</span>
                                <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            15
                                        versions                    </button>
    
    
        </td>

                <td class="label has_header" data-header="Label: "><a href="https://www.discogs.com/label/11929-Bearsville">Bearsville</a></td>

                <td class="catno has_header" data-header="Cat #: "><span>MOCCD13845, 8718627230442</span></td>

                <td class="country has_header" data-header="Country: "><span>Europe</span></td>

                <td class="year has_header" data-header="Year: ">1971</td>

                <td class="mr_checkbox hide_mobile"><span class="r_check m92474"></span></td>

                
                <td class="actions">
                    </td>

                <td class="sell_this_version">
            <strong>
                    <a href="/sell/post/92474">Sell This Version</a>
                </strong>        </td>

        <td class="mr_toggler_mobile hide-desktop">
                            <button class="mr_toggler button button-white button-short">
            <i class="icon icon-caret-left"></i>
            15
                                        versions                    </button>
    
        </td>
    </tr>

    
            </table>

    

        
    <div class="pagination bottom ">
        <form
            action="/artist/6271"
            method="get"
            
            data-section="general"
        >
                            <strong class="pagination_total">
        26 &ndash; 36 of 36    </strong>

                                    <div class="responsive_wrap ">
                    <ul class="pagination_page_links">
        <li>
                            <a href="/artist/6271?type=Releases&subtype=Albums&page=1&sort=year%2Cdesc" class="pagination_previous"><i class="icon icon-chevron-left"></i>Prev</a>
                    </li>
                                    <li class="hide_mobile">
                                                                        <a href="/artist/6271?type=Releases&subtype=Albums&page=1&sort=year%2Cdesc">1</a>
                                                            </li>
                            <li class="hide_mobile">
                                                                        <span><strong>2</strong></span>
                                                            </li>
                            <li>
                            <span>
                    Next<i class="icon icon-chevron-right"></i></span>
                    </li>
            </ul>

            </div>
                        <div class="pagination_controls multiple_filters">
                
                                                            <label class="hide_mobile" for="limit_bottom">Show</label>
    <select class="hide_mobile" name="limit" id="limit_bottom">
        
            <option value="25" selected="selected">25</option><option value="50">50</option><option value="100">100</option><option value="250">250</option><option value="500">500</option>    
    </select>

                                <noscript><button type="submit">Refresh</button></noscript>
            </div>
                                                                                    <input type="hidden" name="type" value="Releases" />
                                    <input type="hidden" name="subtype" value="Albums" />
                                    <input type="hidden" name="sort" value="year,desc" />
                                    </form>
    </div>
            </div>
        </div>
    </div>

    
    <div class="lr">
        <div class="left">
            
    

                                                                    <div
        class="section reviews toggle_section    toggle_section_remember"
        data-toggle-section-id="reviews"
        id="reviews"
    >
        <h3 class="toggle_section_control float_fix" data-for=".reviews">
                            Reviews            <a href="/reviews?artist=Sparks">
            Show All 19 Reviews        </a>
    
        </h3>
        <div class="section_content toggle_section_content">
                        <p>
            <a href="#add-new-review" class="button" id="add_new_review">Add Review</a>
        </p>
                                        <div class="review
        row_with_actions
        
        has_replies
        has_thumbnail
        
        "
        data-cid="1525298"
                        id="comment1525298"
        >
                                    
                    
        <a        href="/user/Sk8r_Dad"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/qgUPPXZeHgK-GWMNWgpun3cH0t0=/100x100/filters:strip_icc():format(jpeg):quality(40)/discogs-avatars/U-1706730-1593248962.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Sk8r_Dad" />

                    </span>
    </a>

                <div class="review_comment_column">
            <h4>
                                    <a href="/user/Sk8r_Dad" class="user">Sk8r_Dad</a>
                            </h4>
            <small class="date">
                July 4, 2020
            </small>
            <div class="row_actions_dropdown">
                    <span class="action_menu_toggler" aria-haspopup="true">
        <i class="icon icon-caret-down"></i>
    </span>
    <ul class="action_menu ui-dialog-arrow ui-dialog-arrow-top-right" role="menu">
                                                <li class="menu-item"><a class="review_action2" href="/reviews/report/1525298">
                        <i class="icon icon-ban"></i>
                        Report</a></li>
                                                       
    </ul>
            </div>

            
            <div class="width_limit">
                                                                <div class="review_comment">
                    The only band I know who could compile a ‘Best Of Sparks’ of songs from 2000 onwards which would be as good or better than a ‘Best Of Sparks’ from the 70s or 80s or 90s. 
                </div>
            </div>
        </div>
        <div class="button_space row_actions">
                        <a class="review_action1 review_action1-reply">
                    <i class="icon icon-reply"></i>
                    Reply</a>
                                    <a class="review_action1" href="/reviews?artist=Sparks#c1525298">
                    <i class="icon icon-eye"></i>&nbsp;See 1 reply</a>
                                        <a id="rvnotify_1525298" class="review_action2 review_action2-notify">
                    <i class="icon icon-envelope"></i> Notify me</a>
                        <span id="c1525298" class="review_content">
                <span class="tags" id="tags_rv1525298" >
                                                                <a href="#" class="review_tag">
            <i class="icon icon-tag"></i> 2 Helpful
        </a>
    
                </span>
            </span>
        </div>
    </div>

                            <div class="review
        row_with_actions
        
        
        has_thumbnail
        
        "
        data-cid="1330102"
                        id="comment1330102"
        >
                                    
                    
        <a        href="/user/lorenzog"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://secure.gravatar.com/avatar/e0346649c61ea4633a5d30becdcfb8eb?s=100&r=pg&d=mm" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="lorenzog" />

                    </span>
    </a>

                <div class="review_comment_column">
            <h4>
                                    <a href="/user/lorenzog" class="user">lorenzog</a>
                            </h4>
            <small class="date">
                November 4, 2019
            </small>
            <div class="row_actions_dropdown">
                    <span class="action_menu_toggler" aria-haspopup="true">
        <i class="icon icon-caret-down"></i>
    </span>
    <ul class="action_menu ui-dialog-arrow ui-dialog-arrow-top-right" role="menu">
                                                <li class="menu-item"><a class="review_action2" href="/reviews/report/1330102">
                        <i class="icon icon-ban"></i>
                        Report</a></li>
                                                       
    </ul>
            </div>

            
            <div class="width_limit">
                                                                <div class="review_comment">
                    Am I the only one who's got the first version labels (Halfnelson) with the second version sleeve (Sparks) ? Or maybe it's a previous owner blend ?
                </div>
            </div>
        </div>
        <div class="button_space row_actions">
                        <a class="review_action1 review_action1-reply">
                    <i class="icon icon-reply"></i>
                    Reply</a>
                                                    <a id="rvnotify_1330102" class="review_action2 review_action2-notify">
                    <i class="icon icon-envelope"></i> Notify me</a>
                        <span id="c1330102" class="review_content">
                <span class="tags" id="tags_rv1330102" >
                                                                <a href="#" class="review_tag">
            <i class="icon icon-tag"></i> Helpful
        </a>
    
                </span>
            </span>
        </div>
    </div>

                            <div class="review
        row_with_actions
        
        has_replies
        has_thumbnail
        
        "
        data-cid="696202"
                        id="comment696202"
        >
                                    
                    
        <a        href="/user/Rich.C"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/VDVaEl2d_z72zsGPOHgRzwCYHOY=/100x100/filters:strip_icc():format(jpeg):quality(40)/discogs-avatars/U-699849-1562080478.jpeg.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="Rich.C" />

                    </span>
    </a>

                <div class="review_comment_column">
            <h4>
                                    <a href="/user/Rich.C" class="user">Rich.C</a>
                            </h4>
            <small class="date">
                January 26, 2017
            </small>
            <div class="row_actions_dropdown">
                    <span class="action_menu_toggler" aria-haspopup="true">
        <i class="icon icon-caret-down"></i>
    </span>
    <ul class="action_menu ui-dialog-arrow ui-dialog-arrow-top-right" role="menu">
                                                <li class="menu-item"><a class="review_action2" href="/reviews/report/696202">
                        <i class="icon icon-ban"></i>
                        Report</a></li>
                                                       
    </ul>
            </div>

            
            <div class="width_limit">
                                                                <div class="review_comment">
                    Sparks were doomed to obscurity from the beginning. Like Oscar Wilde and the turn-of-the-century decadents and dandies who inspired the Mael brothers, scandal both brought them fame and prevented the public from taking them seriously. Vocalist Russell Mael played the rock star with all the flamboyance of a peacock, while songwriter and keyboardist Ron Mael contrasted his brother's excesses with his ascetic scowl and Hitler mustache. The latter's favourite ploy has always been exposing people squirming in insecurity behind screens of wealth, vanity, professionalism and mediocrity. &quot;This Town Ain't Big Enough for Both of Us&quot; (1974) is a classic case in point, and one of the few Sparks songs to crack the charts. &quot;Number One Song in Heaven&quot; (1976) also gained them a rare bit of exposure. <br>..It's easily one of the most bizarre songs ever to be a Disco hit -- a celestial stairway of rapturous melodies heavily greased with irony and black humor...and for many recent listeners people will remember it from the ending to Alan Partridges Alpha Papa!! Though in the 1980s and beyond the Maels tended to settle for Disco chintz over rock 'n' roll substance, their music still retains the stinging wit that gives it savor and makes Sparks absolutely unique ;)
                </div>
            </div>
        </div>
        <div class="button_space row_actions">
                        <a class="review_action1 review_action1-reply">
                    <i class="icon icon-reply"></i>
                    Reply</a>
                                    <a class="review_action1" href="/reviews?artist=Sparks#c696202">
                    <i class="icon icon-eye"></i>&nbsp;See 7 replies</a>
                                        <a id="rvnotify_696202" class="review_action2 review_action2-notify">
                    <i class="icon icon-envelope"></i> Notify me</a>
                        <span id="c696202" class="review_content">
                <span class="tags" id="tags_rv696202" >
                                                                <a href="#" class="review_tag">
            <i class="icon icon-tag"></i> 6 Helpful
        </a>
    
                </span>
            </span>
        </div>
    </div>

                            <div class="review
        row_with_actions
        
        has_replies
        has_thumbnail
        
        "
        data-cid="660003"
                        id="comment660003"
        >
                                    
                    
        <a        href="/user/nagyphilip"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://secure.gravatar.com/avatar/22515173043626e036ba8cd62a585459?s=100&r=pg&d=mm" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="nagyphilip" />

                    </span>
    </a>

                <div class="review_comment_column">
            <h4>
                                    <a href="/user/nagyphilip" class="user">nagyphilip</a>
                            </h4>
            <small class="date">
                November 20, 2016
            </small>
            <div class="row_actions_dropdown">
                    <span class="action_menu_toggler" aria-haspopup="true">
        <i class="icon icon-caret-down"></i>
    </span>
    <ul class="action_menu ui-dialog-arrow ui-dialog-arrow-top-right" role="menu">
                                                <li class="menu-item"><a class="review_action2" href="/reviews/report/660003">
                        <i class="icon icon-ban"></i>
                        Report</a></li>
                                                       
    </ul>
            </div>

            
            <div class="width_limit">
                                                                <div class="review_comment">
                    I agree with the comments below! No one, i say NO ONE writes as genius, clever lyrics like Ronald Mael. No way. Highly underrated cult band.<br>Kimono My House, such a great album. But their whole seventies work is pretty perfect, except for Introducing. Also check Propaganda and Indiscreet!
                </div>
            </div>
        </div>
        <div class="button_space row_actions">
                        <a class="review_action1 review_action1-reply">
                    <i class="icon icon-reply"></i>
                    Reply</a>
                                    <a class="review_action1" href="/reviews?artist=Sparks#c660003">
                    <i class="icon icon-eye"></i>&nbsp;See 1 reply</a>
                                        <a id="rvnotify_660003" class="review_action2 review_action2-notify">
                    <i class="icon icon-envelope"></i> Notify me</a>
                        <span id="c660003" class="review_content">
                <span class="tags" id="tags_rv660003" >
                                                                <a href="#" class="review_tag">
            <i class="icon icon-tag"></i> 3 Helpful
        </a>
    
                </span>
            </span>
        </div>
    </div>

                            <div class="review
        row_with_actions
        
        has_replies
        has_thumbnail
        
        "
        data-cid="595504"
                        id="comment595504"
        >
                                    
                    
        <a        href="/user/musand"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://secure.gravatar.com/avatar/be63b24dee13de7a7f943bac8c84a9d6?s=100&r=pg&d=mm" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="musand" />

                    </span>
    </a>

                <div class="review_comment_column">
            <h4>
                                    <a href="/user/musand" class="user">musand</a>
                            </h4>
            <small class="date">
                July 11, 2016
            </small>
            <div class="row_actions_dropdown">
                    <span class="action_menu_toggler" aria-haspopup="true">
        <i class="icon icon-caret-down"></i>
    </span>
    <ul class="action_menu ui-dialog-arrow ui-dialog-arrow-top-right" role="menu">
                                                <li class="menu-item"><a class="review_action2" href="/reviews/report/595504">
                        <i class="icon icon-ban"></i>
                        Report</a></li>
                                                       
    </ul>
            </div>

            
            <div class="width_limit">
                                                                <div class="review_comment">
                    Sparks are MUCH more influential than most people are aware of.<br>They have influenced (maybe not correct english word?) many groups and artists such as for ex. Queen, Depeche Mode, Morrissey (he has even said that &quot;Kimono My House&quot; was the reason he started in music), Björk, Ramones, Erasure, Kurt Cobain, Franz Ferdinand, Al Yankovic to name a few..and have had a big impact on different music styles.
                </div>
            </div>
        </div>
        <div class="button_space row_actions">
                        <a class="review_action1 review_action1-reply">
                    <i class="icon icon-reply"></i>
                    Reply</a>
                                    <a class="review_action1" href="/reviews?artist=Sparks#c595504">
                    <i class="icon icon-eye"></i>&nbsp;See 1 reply</a>
                                        <a id="rvnotify_595504" class="review_action2 review_action2-notify">
                    <i class="icon icon-envelope"></i> Notify me</a>
                        <span id="c595504" class="review_content">
                <span class="tags" id="tags_rv595504" >
                                                                <a href="#" class="review_tag">
            <i class="icon icon-tag"></i> 5 Helpful
        </a>
    
                </span>
            </span>
        </div>
    </div>

                            <div class="review
        row_with_actions
        
        has_replies
        has_thumbnail
        
        "
        data-cid="374467"
                        id="comment374467"
        >
                                    
                    
        <a        href="/user/tonumaa"        class="thumbnail_link
            thumbnail_size_small
            thumbnail_orientation_portrait
            thumbnail-lazyload
        "
    >
        <span class="thumbnail_border"></span>
        <span class="thumbnail_center">
                                <img data-src="https://img.discogs.com/goz39WbngmncsNqEGAKlwqua1h4=/100x100/filters:strip_icc():format(jpeg):quality(40)/discogs-avatars/U-85013-1451436107.png.jpg" src="data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7"
        alt="tonumaa" />

                    </span>
    </a>

                <div class="review_comment_column">
            <h4>
                                    <a href="/user/tonumaa" class="user">tonumaa</a>
                            </h4>
            <small class="date">
                January 18, 2015
            </small>
            <div class="row_actions_dropdown">
                    <span class="action_menu_toggler" aria-haspopup="true">
        <i class="icon icon-caret-down"></i>
    </span>
    <ul class="action_menu ui-dialog-arrow ui-dialog-arrow-top-right" role="menu">
                                                <li class="menu-item"><a class="review_action2" href="/reviews/report/374467">
                        <i class="icon icon-ban"></i>
                        Report</a></li>
                                                       
    </ul>
            </div>

            
            <div class="width_limit">
                                                                <div class="review_comment">
                    Sparks rule, Ron &amp; Russell are the best thing since Beatles
                </div>
            </div>
        </div>
        <div class="button_space row_actions">
                        <a class="review_action1 review_action1-reply">
                    <i class="icon icon-reply"></i>
                    Reply</a>
                                    <a class="review_action1" href="/reviews?artist=Sparks#c374467">
                    <i class="icon icon-eye"></i>&nbsp;See 3 replies</a>
                                        <a id="rvnotify_374467" class="review_action2 review_action2-notify">
                    <i class="icon icon-envelope"></i> Notify me</a>
                        <span id="c374467" class="review_content">
                <span class="tags" id="tags_rv374467" >
                                                                <a href="#" class="review_tag">
            <i class="icon icon-tag"></i> 9 Helpful
        </a>
    
                </span>
            </span>
        </div>
    </div>

            
        </div>
    </div>
                                                                                        <div
        class="section list toggle_section  toggle_section_show_controls  toggle_section_remember"
        data-toggle-section-id="list"
        id="list"
    >
        <h3 class="toggle_section_control float_fix" data-for=".list">
            <i class="icon icon-chevron-down"></i>
                <i class="icon icon-chevron-up"></i>                    Lists                    
    <a
        class="add_to_list"
        data-list-add-url="/artist/6271-Sparks/lists/add"
        data-list-add-pos="bottom"
        href="#"
    >
        Add to List    </a>

            
        </h3>
        <div class="section_content toggle_section_content">
                    <div id="lists" class="section_content toggle_section_content">
                                                                                    <div>
                            <a href="/lists/Band-Names-This-Bands-Name-Was-Another-Bands-Song/225902">Band Names: This Band's Name Was Another Band's Song</a>
                            by <a href="/user/soulchap" class="user">soulchap</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Folks-Ive-Seen-Live/153410">Folks I've Seen Live</a>
                            by <a href="/user/rexjwb" class="user">rexjwb</a>
                        </div>
                                                                                <div>
                            <a href="/lists/New-Wave-1976-1980/570858">New Wave 1976-1980</a>
                            by <a href="/user/A.Lion" class="user">A.Lion</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Seen-live/789334">Seen live</a>
                            by <a href="/user/Gaasehud" class="user">Gaasehud</a>
                        </div>
                                                                                <div>
                            <a href="/lists/%E5%9F%BA%E6%9C%AC%E3%83%AA%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AE%E3%82%A2%E3%83%BC%E3%83%86%E3%82%A3%E3%82%B9%E3%83%88%E4%B8%80%E8%A6%A7/763855">基本リスト用のアーティスト一覧</a>
                            by <a href="/user/3313project" class="user">3313project</a>
                        </div>
                                                                                <div>
                            <a href="/lists/%E5%9F%BA%E6%9C%AC%E3%83%AA%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AE%E3%82%A2%E3%83%BC%E3%83%86%E3%82%A3%E3%82%B9%E3%83%88%E4%B8%80%E8%A6%A7/779158">基本リスト用のアーティスト一覧</a>
                            by <a href="/user/arapstock" class="user">arapstock</a>
                        </div>
                                                                                <div>
                            <a href="/lists/The-Live-Experience/23954">The Live Experience</a>
                            by <a href="/user/cthulhu303" class="user">cthulhu303</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Live-Concerts/351890">Live Concerts</a>
                            by <a href="/user/postpunkmonk" class="user">postpunkmonk</a>
                        </div>
                                                                                <div>
                            <a href="/lists/albumsartists-to-look-for/763093">albums/artists to look for</a>
                            by <a href="/user/VoldeChuck" class="user">VoldeChuck</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Concerts-Ive-Seen/499104">Concerts, I've Seen</a>
                            by <a href="/user/ILoveRockAndRoll" class="user">ILoveRockAndRoll</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Artists-Ive-seen-live/166309">Artists I've seen live</a>
                            by <a href="/user/gawmus" class="user">gawmus</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Artists-worth-giving-a-damn-about/553451">Artists worth giving a damn about.</a>
                            by <a href="/user/Madison-chan" class="user">Madison-chan</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Artists-I-Follow/558041">Artists I Follow</a>
                            by <a href="/user/Tombo1970" class="user">Tombo1970</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/40594">Favorite Artists</a>
                            by <a href="/user/data_boy" class="user">data_boy</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Bands-Ive-Seen/621118">Bands I've Seen</a>
                            by <a href="/user/Donsmad1903" class="user">Donsmad1903</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Flashazos-MuyMuy/533656">Flashazos MuyMuy</a>
                            by <a href="/user/sanjuanconmiedo" class="user">sanjuanconmiedo</a>
                        </div>
                                                                                <div>
                            <a href="/lists/My-100-Best-Live-Gigs/381132">My 100 Best Live Gigs</a>
                            by <a href="/user/expensivebeingpunk" class="user">expensivebeingpunk</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/479264">Favorite Artists</a>
                            by <a href="/user/GruenerTee" class="user">GruenerTee</a>
                        </div>
                                                                                <div>
                            <a href="/lists/bands-wot-i-seen/566585">bands wot i seen</a>
                            by <a href="/user/saul.hanson" class="user">saul.hanson</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Eaten-alive/224032">Eaten alive</a>
                            by <a href="/user/jeroenschwartz" class="user">jeroenschwartz</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Artists-Ive-Seen-Live/170517">Artists I've Seen "Live"</a>
                            by <a href="/user/Uffel" class="user">Uffel</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favourite-Artists/257205">Favourite Artists</a>
                            by <a href="/user/JockoHomo" class="user">JockoHomo</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Artists/218929">Artists</a>
                            by <a href="/user/psychicteevee" class="user">psychicteevee</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Top-40-Favourite-Glam-Rock-Artists-of-the-70s/477405">Top 40 Favourite Glam Rock Artists of the 70s</a>
                            by <a href="/user/BAHAMABOY" class="user">BAHAMABOY</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Bands-Ive-seen-live/419369">Bands I've seen live</a>
                            by <a href="/user/Sirpant" class="user">Sirpant</a>
                        </div>
                                                                                <div>
                            <a href="/lists/BEST-GROUPS/205201">BEST GROUPS</a>
                            by <a href="/user/poneromusikologist" class="user">poneromusikologist</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Artists-in-My-LP-Collection/169912">Artists in My LP Collection</a>
                            by <a href="/user/sillypenta" class="user">sillypenta</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/95310">Favorite Artists</a>
                            by <a href="/user/MetalBeatRecords" class="user">MetalBeatRecords</a>
                        </div>
                                                                                <div>
                            <a href="/lists/BandsArtists-I-Have-Seen-Live/262866">Bands/Artists I Have Seen Live</a>
                            by <a href="/user/MetalBeatRecords" class="user">MetalBeatRecords</a>
                        </div>
                                                                                <div>
                            <a href="/lists/80s-Mega-Collection/282243">80's Mega Collection</a>
                            by <a href="/user/eeeben" class="user">eeeben</a>
                        </div>
                                                                                <div>
                            <a href="/lists/my-favorite-bands/128212">my favorite bands</a>
                            by <a href="/user/giovanni64" class="user">giovanni64</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/92928">Favorite Artists</a>
                            by <a href="/user/LeDiskosaur" class="user">LeDiskosaur</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/51778">Favorite Artists</a>
                            by <a href="/user/satyrnik" class="user">satyrnik</a>
                        </div>
                                                                                <div>
                            <a href="/lists/my-favorites/161435">my favorites</a>
                            by <a href="/user/probioticsoundsystem" class="user">probioticsoundsystem</a>
                        </div>
                                                                                <div>
                            <a href="/lists/My-Top-Artists/174534">My Top Artists</a>
                            by <a href="/user/dubstepmaker3000" class="user">dubstepmaker3000</a>
                        </div>
                                                                                <div>
                            <a href="/lists/favorites/161717">favorites</a>
                            by <a href="/user/jk7070" class="user">jk7070</a>
                        </div>
                                                                                <div>
                            <a href="/lists/seen-live/161436">seen live</a>
                            by <a href="/user/probioticsoundsystem" class="user">probioticsoundsystem</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favourite-Artists/155420">Favourite Artists</a>
                            by <a href="/user/biancapagana" class="user">biancapagana</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/86179">Favorite Artists</a>
                            by <a href="/user/sternklang" class="user">sternklang</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favourite-Artists/151953">Favourite Artists</a>
                            by <a href="/user/MsMoog" class="user">MsMoog</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/58108">Favorite Artists</a>
                            by <a href="/user/JPR" class="user">JPR</a>
                        </div>
                                                                                <div>
                            <a href="/lists/Favorite-Artists/50160">Favorite Artists</a>
                            by <a href="/user/strangemusic" class="user">strangemusic</a>
                        </div>
                                                                    </div>
        <a href="/lists" target="_blank" class="more_lists_link">
            View More Lists &rarr;
        </a>
    
        </div>
    </div>

        </div>
        <div class="right">
            <div class="section">
                <div class="section_content">
                                <div class="ad_container ad_right" id='ad_right'></div>
        
                </div>
            </div>
                                                                                                                            <div
        class="section video toggle_section  toggle_section_show_controls  toggle_section_remember"
        data-toggle-section-id="video"
        id="video"
    >
        <h3 class="toggle_section_control float_fix" data-for=".video">
            <i class="icon icon-chevron-down"></i>
                <i class="icon icon-chevron-up"></i>                        Videos                            (121)
                                        <a href="/artist/6271-Sparks/videos/update">
                    Edit                </a>
                    
        </h3>
        <div class="section_content toggle_section_content">
                                            <div id="youtube_player_wrapper">
        <div
            id="youtube_player_placeholder"
            data-video-ids="zzKOVQEk5BA,2hOCNtEvx5M,g3f9rbOEmps,tBtkSVJlwAc,iU4pwcQjE4c,O-iw3yyLApQ,JNX8YSTLzD0,7OygMu9SS68,Z45lcOv9EM0,JoMCip83GZ4,Y-bNZDHSFhU,TVTH7OsNbhs,rvWAMmtLZNY,7olmplFhkas,RzMFWFwbktk,1BCSacXbV6g,_34IS79hxDQ,6X7t9fz8RSw,3YBmS5oaNwU,mTdc8mb5XUk,UNHgXpHR-XU,eUJ_ifjKopM,xaXYwdS_V2Q,6Hm4L4Tq-MI,weu3KnAhxhU,WNKIba_yZJo,1b9fU99KFHA,FrzJKBBeRbI,96d1cqM12eo,IJr61z44m6c,NIzleISU5jw,P6I6yr7WDeg,5NNeZuB4qjg,GJMUkLTBXEk,W8T8WMgwQlQ,V9DoxHSpXcI,a08OHx6Z6kM,KSs63V-RmPk,p8YRg1rBZSg,V0jWKaRcraE,6uUKLsi_c7Q,WnVOOpaDK8Y,ojVPOEYR6Mo,_j2CJN8rmBE,haf5s0b--zw,v5jtqCo43WM,0FymsV3Ja1s,SjcmyUWOIfg,vjU1fXY0DcU,C3CIDPuxwrY,dLxPIOxgkM0,eVxnnyvpqr0,di3mNRymKZg,5MQCIneS3Cg,4ar-LRd7DX8,-n3Ni8XxZmQ,ya3hRBWx_kY,b1LGxyH20Ek,2tA0N8Yz01k,tTiLKCYSyyM,TH5USLpPa_0,PciM6nY7kaM,GFOZ4kgayhA,AoIU7O030VE,JQCPsjjPvzI,Pdi5Se1xE2Q,mf-ZXj0qNrk,tbZXJTSvy3g,0uiOmU-ttJI,0w58EcuZ0yQ,BI9gOtRMogY,T_RA3XvUqz4,FwUViOpzm6I,n3PhpBVCtO4,ODK8U7KxCj0,930MziBILtQ,9cHDuwLL__Q,gAhMG-2mxXQ,tPSFpaCQEvA,203jsu0SFO0,IQUXMD_qkYE,XTe5aClA3QE,_yF9VcS64Zk,MpHIdxjYfcI,qTOlgmsiSag,OGxPqS3z_vw,4ARV51t_6g4,OC-2dxOMU2I,2j-01_uoUvo,9H5uCSimxQg,hBTukdqwoLc,jjbKSg97-SI,VgRIgLdqEls,aqTeFfWy7V0,hUYo5S6z49g,hngryNMHSYk,W9loFpbEVxo,wJt2C0p8x-g,s6P-TghK_3s,6DA95FFBJNs,zf6y7p2iauE,nkvxIeV1fQ8,3b3jMrkZgCE,5Kom9iVq6t8,qMMJbzQ02cI,PNgD96Svr-o,8k9cJjp_j3s,3C5LngDvkLY,MliHp87iFwg,-UwmrlU23MU,0OSNv5uOHSI,PX6c_7upnwc,raRxYGKTrfk,9YPAqlI0eQE,OfbpAPSqI1I,XaHi6VK1K2c,rKG6o3nRK_0,peHgxI1ZG1w,0iYo2eL7-Gs,4dNcSYeQNBc,XvLSZRQqbLI"
            style="100%; 330px;"
        >
        </div>
        <div id="youtube_extender"></div>
    </div>

                    
        </div>
    </div>
    

        </div>
    </div>

    <div id="mr_panel" style="display:none;">

    <div id="mr_panel_control">
        <h3 class="mr_panel_head">
            <span id="mr_panel_title">Master Release</span>
            <small> - <a href="/help/doc/submission-guidelines-master-release" target="_blank">[Help]</a></small>
        </h3>

        <div class="mr_panel_control_sec">
            <small><b>Release Notes:</b> <i>(optional)</i></small><br/>
            <textarea name="mr_notes" id="mr_notes" rows="3" cols="30"></textarea>
        </div>

        <div class="mr_panel_control_sec">
            <small>Submission Notes: <i>(optional)</i></small><br/>
            <textarea name="sub_notes" id="sub_notes" rows="1" cols="30"></textarea>
        </div>

        <div class="mr_panel_control_sec">
            <button id="mr_save_button" class="button button-green">Save</button>
            <button id="mr_cancel_button" class="button">Cancel</button>
        </div>

    </div>

    <div id="mr_panel_list">
        <h3 class="mr_panel_head">Contained Releases:</h3>
        <div id="mr_panel_inner"></div>
    </div>

</div>

<script type="text/html" class="underscore_template" id="edit_master_table_template">
    <table class="table_block discography">
        <% _.each(versions, function(version) { %>
            <%= ds.require('templates').editMasterRow(version) %>
        <% }) %>
    </table>
</script>

<script type="text/html" class="underscore_template" id="edit_master_row_template">
    <tr>
        <td><input type="radio" name="mr_main" class="r_radio r<%- id %>" /></td>
        <% if (typeof html !== 'undefined') { %>
            <%= html %>
        <% } else { %>
            <td></td>             <td><a href="<%- url %>"><%- title %></a> (<%= format_html %>)</td>
            <td><%= label_html %></td>
            <td><%- year %></td>
        <% } %>
    </tr>
</script>

</div>
                                                    
            </div>                                                    <div class="sticky_footer">
                <button id="move"><i class="icon icon-close"></i></button>
                <div class="ad_container ad_bottom" id='ad_bottom'></div>
            </div>
        
                            <div id="push_footer"></div>
                    </div>                            
<div id="site_footer_wrap">
    <div id="site_footer" role="navigation" aria-label="Footer Navigation"><div class="banner_ad pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links">
        </div>
        <ul id="site_footer_list">
            <li>
                <h5>Discogs</h5>
                <ul>
                    <li>
                        <a href="/about">
                            About Us</a>
                    </li>
                    <li>
                        <a href="https://blog.discogs.com/en/">
                            Blog</a>
                    </li>
                    <li>
                        <a href="/app">
                            App</a>
                    </li>
                    <li>
                        <a href="/careers">
                            Careers</a>
                    </li>
                    <li>
                        <a href="/developers">
                            API</a>
                    </li>
                    <li>
                        <a href="https://blog.discogs.com/en/tag/engineering-en/">
                            Change Log</a>
                    </li>
                </ul>
            </li>
            <li>
                <h5>Help Is Here</h5>
                <ul>
                    <li>
                        <a href="https://support.discogs.com">
                            Help &amp; Support</a>
                    </li>
                    <li>
                        <a href="/forum/">
                            Forum</a>
                    </li>
                    <li>
                        <a class="show_keyboard_shortcuts" href="#show_keyboard_shortcuts">
                            Keyboard Shortcuts                        </a>
                    </li>
                    <li>
                        <a href="https://support.discogs.com/hc/articles/360004016474-Overview-of-Submission-Guidelines-for-Releases">Database Guidelines</a>
                    </li>
                    <li>
                        <a href="/shipping">Discogs Shipping</a>
                    </li>
                </ul>
            </li>
            <li>
                <h5>Join In</h5>
                <ul>
                    <li>
                        <a href="/getstarted/">
                            Get Started</a>
                    </li>
                                            <li>
                            <a href="/users/create">
                                Sign Up</a>
                        </li>
                                        <li>
                        <a href="/help/doc/contributing">
                            Contribute</a>
                    </li>
                    <li>
                        <a href="/release/add">
                            Add Release</a>
                    </li>
                    <li>
                        <a href="/stats/contributors">
                            Contributor List</a>
                    </li>
                    <li>
                        <a href="https://support.discogs.com/hc/articles/360001585814-How-Can-I-Help-Translate-Discogs-">
                            Help Translate</a>
                    </li>
                    <li>
                        <a href="/events">
                            Discogs Events                        </a>
                    </li>
                    <li>
                        <a href="/record-store-day-2021">
                            Record Stores                        </a>
                    </li>
                    <li>
                        <a href="/cdn-cgi/l/email-protection#f083919c9583b0949983939f9783de939f9d">
                            Advertise With Us</a>
                    </li>
                </ul>
            </li>
            <li>
                <h5>Follow Us</h5>
                <ul>
                    <li>
                        <a href="https://www.facebook.com/discogs">
                            <i class="icon icon-facebook-square"></i>Facebook
                        </a>
                    </li>
                    <li>
                        <a href="https://twitter.com/discogs">
                            <i class="icon icon-twitter"></i>Twitter
                        </a>
                    </li>
                    <li>
                        <a href="https://www.instagram.com/discogs/">
                            <i class="icon icon-instagram"></i>Instagram
                        </a>
                    </li>
                    <li>
                        <a href="http://www.mixcloud.com/discogs/">
                            <i class="icon icon-mixcloud"></i>Mixcloud
                        </a>
                    </li>
                    <li>
                        <a href="https://soundcloud.com/discogs">
                            <i class="icon icon-soundcloud"></i>Soundcloud
                        </a>
                    </li>
                    <li>
                        <a href="https://nl.pinterest.com/officialdiscogs/boards/">
                            <i class="icon icon-pinterest"></i>Pinterest
                        </a>
                    </li>
                </ul>
            </li>        </ul>    </div>    <div id="site_footer_legal">
        <div><img src="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/images/discogs-white.png?5" alt="" />
            <span id="copyright">
                &copy; 2021 Discogs&reg;
            </span>
            <button id="ot-sdk-btn" class="ot-sdk-show-settings"> Cookie Settings</button>
            <a id="cookie_link" href="/help/doc/cookie-policy">Cookie Policy</a>
            <a id="terms_link" href="/help/doc/terms-of-service">Terms of Service</a>
            <a id="privacy_link" href="/help/doc/privacy-policy">Privacy Policy</a>
            <a href="https://support.discogs.com/hc/articles/360039846494-California-Privacy-Notice">California Privacy Notice</a>
            <a href="https://support.discogs.com/hc/en-us/articles/360017786278-Accessibility-Statement" target="_blank">Accessibility Statement</a>
                        <span id="language_container">
                <a id="i18n_link" href="#select-language" data-code="en" data-name="English">
                    <i class="icon icon-globe"></i>
                    English
                    <i class="icon icon-caret-down"></i>
                </a>
                    <select id="i18n_select">        <option id="language_de_field" name="language_code" class="language" value="de" > Deutsch </option>
    <option id="language_en_field" name="language_code" class="language" value="en" selected> English </option>
    <option id="language_es_field" name="language_code" class="language" value="es" > Español </option>
    <option id="language_fr_field" name="language_code" class="language" value="fr" > Français </option>
    <option id="language_it_field" name="language_code" class="language" value="it" > Italiano </option>
    <option id="language_ja_field" name="language_code" class="language" value="ja" > 日本語 </option>
    <option id="language_ko_field" name="language_code" class="language" value="ko" > 한국어 </option>
    <option id="language_pt_BR_field" name="language_code" class="language" value="pt_BR" > Português (Brasil) </option>
    <option id="language_ru_field" name="language_code" class="language" value="ru" > Русский </option>
</select>
 
            </span><a id="footer_menu_link">
                <i class='icon icon-chevron-down'></i>
                <i class='icon icon-chevron-up'></i>
            </a>
        </div>
    </div>
</div>
<div id="act"></div>        
        
                <script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type='text/javascript'>
!function(){"use strict";function a(a){return"function"==typeof a||"object"==typeof a&&null!==a}function b(a){return"function"==typeof a}function c(a){return"object"==typeof a&&null!==a}function g(){}function n(){return function(){process.nextTick(s)}}function o(){var a=0,b=new l(s),c=document.createTextNode("");return b.observe(c,{characterData:!0}),function(){c.data=a=++a%2}}function p(){var a=new MessageChannel;return a.port1.onmessage=s,function(){a.port2.postMessage(0)}}function q(){return function(){setTimeout(s,1)}}function s(){for(var a=0;i>a;a+=2){var b=r[a],c=r[a+1];b(c),r[a]=void 0,r[a+1]=void 0}i=0}function u(){}function z(){return new TypeError("You cannot resolve a promise with itself")}function A(){return new TypeError("A promises callback cannot return that same promise.")}function B(a){try{return a.then}catch(b){return y.error=b,y}}function C(a,b,c,d){try{a.call(b,c,d)}catch(e){return e}}function D(a,b,c){j(function(a){var d=!1,e=C(c,b,function(c){d||(d=!0,b!==c?G(a,c):I(a,c))},function(b){d||(d=!0,J(a,b))},"Settle: "+(a._label||" unknown promise"));!d&&e&&(d=!0,J(a,e))},a)}function E(a,b){b._state===w?I(a,b._result):a._state===x?J(a,b._result):K(b,void 0,function(b){G(a,b)},function(b){J(a,b)})}function F(a,c){if(c.constructor===a.constructor)E(a,c);else{var d=B(c);d===y?J(a,y.error):void 0===d?I(a,c):b(d)?D(a,c,d):I(a,c)}}function G(b,c){b===c?J(b,z()):a(c)?F(b,c):I(b,c)}function H(a){a._onerror&&a._onerror(a._result),L(a)}function I(a,b){a._state===v&&(a._result=b,a._state=w,0===a._subscribers.length||j(L,a))}function J(a,b){a._state===v&&(a._state=x,a._result=b,j(H,a))}function K(a,b,c,d){var e=a._subscribers,f=e.length;a._onerror=null,e[f]=b,e[f+w]=c,e[f+x]=d,0===f&&a._state&&j(L,a)}function L(a){var b=a._subscribers,c=a._state;if(0!==b.length){for(var d,e,f=a._result,g=0;g<b.length;g+=3)d=b[g],e=b[g+c],d?P(c,d,e,f):e(f);a._subscribers.length=0}}function M(){this.error=null}function O(a,b){try{return a(b)}catch(c){return N.error=c,N}}function P(a,c,d,e){var g,h,i,j,f=b(d);if(f){if(g=O(d,e),g===N?(j=!0,h=g.error,g=null):i=!0,c===g)return J(c,A()),void 0}else g=e,i=!0;c._state!==v||(f&&i?G(c,g):j?J(c,h):a===w?I(c,g):a===x&&J(c,g))}function Q(a,b){try{b(function(b){G(a,b)},function(b){J(a,b)})}catch(c){J(a,c)}}function S(a,b,c,d){this._instanceConstructor=a,this.promise=new a(u,d),this._abortOnReject=c,this._validateInput(b)?(this._input=b,this.length=b.length,this._remaining=b.length,this._init(),0===this.length?I(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&I(this.promise,this._result))):J(this.promise,this._validationError())}function Z(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function $(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function ab(a,c){this._id=Y++,this._label=c,this._state=void 0,this._result=void 0,this._subscribers=[],u!==a&&(b(a)||Z(),this instanceof ab||$(),Q(this,a))}var d;d=Array.isArray?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)};var e=d;Date.now||function(){return(new Date).getTime()},Object.create||function(a){if(arguments.length>1)throw new Error("Second argument not supported");if("object"!=typeof a)throw new TypeError("Argument must be an object");return g.prototype=a,new g};var t,i=0,j=function(a,b){r[i]=a,r[i+1]=b,i+=2,2===i&&t()},k="undefined"!=typeof window?window:{},l=k.MutationObserver||k.WebKitMutationObserver,m="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,r=new Array(1e3);t="undefined"!=typeof process&&"[object process]"==={}.toString.call(process)?n():l?o():m?p():q();var v=void 0,w=1,x=2,y=new M,N=new M;S.prototype._validateInput=function(a){return e(a)},S.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},S.prototype._init=function(){this._result=new Array(this.length)};var T=S;S.prototype._enumerate=function(){for(var a=this.length,b=this.promise,c=this._input,d=0;b._state===v&&a>d;d++)this._eachEntry(c[d],d)},S.prototype._eachEntry=function(a,b){var d=this._instanceConstructor;c(a)?a.constructor===d&&a._state!==v?(a._onerror=null,this._settledAt(a._state,b,a._result)):this._willSettleAt(d.resolve(a),b):(this._remaining--,this._result[b]=this._makeResult(w,b,a))},S.prototype._settledAt=function(a,b,c){var d=this.promise;d._state===v&&(this._remaining--,this._abortOnReject&&a===x?J(d,c):this._result[b]=this._makeResult(a,b,c)),0===this._remaining&&I(d,this._result)},S.prototype._makeResult=function(a,b,c){return c},S.prototype._willSettleAt=function(a,b){var c=this;K(a,void 0,function(a){c._settledAt(w,b,a)},function(a){c._settledAt(x,b,a)})};var U=function(a,b){return new T(this,a,!0,b).promise},V=function(a,b){function g(a){G(d,a)}function h(a){J(d,a)}var c=this,d=new c(u,b);if(!e(a))return J(d,new TypeError("You must pass an array to race.")),d;for(var f=a.length,i=0;d._state===v&&f>i;i++)K(c.resolve(a[i]),void 0,g,h);return d},W=function(a,b){var c=this;if(a&&"object"==typeof a&&a.constructor===c)return a;var d=new c(u,b);return G(d,a),d},X=function(a,b){var c=this,d=new c(u,b);return J(d,a),d},Y=0,_=ab;ab.all=U,ab.race=V,ab.resolve=W,ab.reject=X,ab.prototype={constructor:ab,then:function(a,b,c){var d=this,e=d._state;if(e===w&&!a||e===x&&!b)return this;d._onerror=null;var f=new this.constructor(u,c),g=d._result;if(e){var h=arguments[e-1];j(function(){P(e,f,h,g)})}else K(d,f,a,b);return f},"catch":function(a,b){return this.then(null,a,b)}};var bb=function(){var a;a="undefined"!=typeof global?global:"undefined"!=typeof window&&window.document?window:self;var c="Promise"in a&&"resolve"in a.Promise&&"reject"in a.Promise&&"all"in a.Promise&&"race"in a.Promise&&function(){var c;return new a.Promise(function(a){c=a}),b(c)}();c||(a.Promise=_)},cb={Promise:_,polyfill:bb};"function"==typeof define&&define.amd?define(function(){return cb}):"undefined"!=typeof module&&module.exports?module.exports=cb:"undefined"!=typeof this&&(this.ES6Promise=cb)}.call(this);

ES6Promise.polyfill();
</script>


<!--[if lte IE 9]>    <script src="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/dst/javascripts/vendor.js"></script>
    <script src="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/dst/javascripts/discogs.js"></script>
    <script src="https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/dst/javascripts/sections/artist.js"></script>
<script>ds.require('app')</script>
<script>ds.require('googleTagServices');</script><![endif]-->
<!--[if gt IE 9]><!-->
<script>
(function(scripts){

    var i = -1, l = scripts.length - 1;
    var startTime = new Date().getTime();
    var _scripts  = [];
    var loads     = [];
    var j;

    var head = document.head || document.getElementsByTagName('head')[0];

    function log(){
        window.console && console.log && console.log.apply(console, arguments);
    }

    function makeScript(src){
        var element  = document.createElement('script');
        var isVendor = !!src.match(/javascripts\/(vendor|react-bundle)/);
        var isSync   = !!(src.match('javascripts/define.js') || src.match('discogs.js') || src.match('moment-lib.js'));
        var isAsync  = !(isVendor || isSync);
        var load     = new Promise(function(resolve){
            element.onload = function(){ resolve(src); };
            element.src = src;
            element.setAttribute('defer', 'defer');
            if (isAsync) {
                element.setAttribute('async', 'async');
            }
        });
        _scripts.push({ element: element, load: load, isAsync: isAsync });
    }

    for (j = 0; j <= l; j++) {
        makeScript(scripts[j]);
    }

    for (j = 0; j <= l; j++) {
        loads.push(_scripts[j].load);
    }

    Promise.all(loads).then(function(urls){
                var app = ds.require('app');
            });

    function loadNext(){
        i++;
        var script = _scripts[i];
        if (script) {
            head.appendChild(script.element);
            if (script.isAsync) {
                loadNext();
            } else {
                script.load.then(loadNext);
            }
        }
    }

    loadNext();

})(["https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/dst/javascripts/vendor.js", "https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/dst/javascripts/discogs.js", "https://s.discogs.com/99b2be0afb5f3a6c170161a706d0264aee9fc6f2/dst/javascripts/sections/artist.js"]);
</script>
<!--<![endif]-->
<script>
ds(function(require){
    require("imageGallery");
    require("copyShortcut");
    require("share");
    require("pagination");
    require("toggleSection");
});

</script>


                
                            </body>
</html>
  recorded_at: Fri, 16 Jul 2021 16:21:54 GMT
recorded_with: VCR 6.0.0
