---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlists?channelId=UCGJdzJQ3R1BpahSvcFq23HA&key=<GOOGLE_API_KEY>&maxResults=5&pageToken=CAUQAA&part=id,snippet,contentDetails
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.1.2p20
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.googleapis.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 17 Oct 2022 11:26:49 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 17 Oct 2022 11:26:49 GMT
recorded_with: VCR 6.1.0
