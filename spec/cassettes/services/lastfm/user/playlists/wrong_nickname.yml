---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/user/wejlhg239gh23/playlists
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.2.2p53
      Cookie:
      - lfmanon=0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/user/wejlhg239gh23/playlists
      Etag:
      - W/"008e00dc82a242ddcc55d344de726e14"
      X-Frame-Options:
      - DENY
      Content-Language:
      - en
      Set-Cookie:
      - X-UA-Country-Code=BY; max-age=60; secure; same-site=strict; Path=/
      - X-UA-Device-Type=desktop; max-age=60; secure; same-site=strict; Path=/
      - lfmanon=1; Path=/
      - lpfrmo=0; Domain=last.fm; expires=Fri, 04 Aug 2023 14:02:13 GMT; Max-Age=60;
        Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjgwZGUzZTBkLWVhY2EtNDdjZC1iNzIwLTAyZmU1MTUzMTU3MSJ9:1qRvMf:pkAI5RV3ZWIUQuwum3hQ1cTmX3gNTJF1K0s0NIH1Ie8;
        Domain=.last.fm; expires=Sat, 03 Aug 2024 14:01:13 GMT; HttpOnly; Max-Age=31536000;
        Path=/; SameSite=Lax; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Fri, 04 Aug 2023 14:01:13 GMT
      X-Served-By:
      - cache-fra-etou8220031-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1691157674.795671,VS0,VE177
      Vary:
      - Accept-Encoding, Accept-Language, Cookie
      X-Lfm-Upstream:
      - "/user/wejlhg239gh23/playlists"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 04 Aug 2023 14:01:14 GMT
recorded_with: VCR 6.2.0
