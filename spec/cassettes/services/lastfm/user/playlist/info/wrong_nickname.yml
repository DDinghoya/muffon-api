---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/user/wejlhg239gh23/playlists/12688634
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.2.2p53
      Cookie:
      - lfmanon=0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/user/wejlhg239gh23/playlists/12688634
      Etag:
      - W/"6eab0611edbfa7a44fd63e2db77ab1bb"
      X-Frame-Options:
      - DENY
      Content-Language:
      - en
      Set-Cookie:
      - X-UA-Country-Code=BY; max-age=60; secure; same-site=strict; Path=/
      - X-UA-Device-Type=desktop; max-age=60; secure; same-site=strict; Path=/
      - lfmanon=1; Path=/
      - lpfrmo=0; Domain=last.fm; expires=Fri, 04 Aug 2023 13:48:25 GMT; Max-Age=60;
        Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6ImZiYzg0MTJkLWJjMDgtNGI2OS04MWI3LTc4Yzc2ZGQxNjVhYSJ9:1qRv9J:RzqTc3AWKe6SHxuoszyaz6tY8y-Dvh2FZhlxXA7TeAg;
        Domain=.last.fm; expires=Sat, 03 Aug 2024 13:47:25 GMT; HttpOnly; Max-Age=31536000;
        Path=/; SameSite=Lax; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Fri, 04 Aug 2023 13:47:26 GMT
      X-Served-By:
      - cache-fra-eddf8230020-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1691156846.795253,VS0,VE248
      Vary:
      - Accept-Encoding, Accept-Language, Cookie
      X-Lfm-Upstream:
      - "/user/wejlhg239gh23/playlists/12688634"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 04 Aug 2023 13:47:26 GMT
recorded_with: VCR 6.2.0
