---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/music/wejlhg239gh23/+similar?page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.2.0p0
      Cookie:
      - lfmanon=0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/music/wejlhg239gh23/+similar?page=1
      Etag:
      - W/"21a7fb1805b1f04dbaf9f9b8ec6ef372"
      X-Frame-Options:
      - SAMEORIGIN
      Content-Language:
      - en
      Set-Cookie:
      - X-UA-Country-Code=BY; max-age=60; secure; same-site=strict; Path=/
      - X-UA-Device-Type=desktop; max-age=60; secure; same-site=strict; Path=/
      - lfmanon=1; Path=/
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjFhZWM3OTI1LWUyMWMtNGJhMy05YWRiLTA4ZDllNzBhNDQ0YiJ9:1pG3eF:P1wjQrHPzhFQ9n0hz0LgFTnU-yQ;
        Domain=.last.fm; expires=Fri, 12 Jan 2024 19:54:03 GMT; HttpOnly; Max-Age=31536000;
        Path=/; SameSite=Lax; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 12 Jan 2023 19:54:04 GMT
      X-Served-By:
      - cache-hhn-etou8220078-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1673553244.828400,VS0,VE182
      Vary:
      - Accept-Encoding, Accept-Language, Cookie
      X-Lfm-Upstream:
      - "/music/wejlhg239gh23/+similar?page=1"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 12 Jan 2023 19:54:04 GMT
recorded_with: VCR 6.1.0
