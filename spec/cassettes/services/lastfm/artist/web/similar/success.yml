---
http_interactions:
- request:
    method: post
    uri: http://server10.kproxy.com/doproxy.jsp
    body:
      encoding: UTF-8
      string: page=https%3A%2F%2Fwww.last.fm%2Fmusic%2Fnorma%2Bloy%2F%2Bsimilar
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.2.2p53
      Content-Length:
      - '65'
      Content-Type:
      - application/x-www-form-urlencoded
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - server10.kproxy.com
  response:
    status:
      code: 200
      message: ''
    headers:
      Set-Cookie:
      - JSESSIONID=4FFAA15161FD2B2D0E5CF8DFB69A2BD8; Path=/; HttpOnly
      Expires:
      - '0'
      Content-Type:
      - text/html;charset=ISO-8859-1
      Content-Length:
      - '1095'
      Date:
      - Sat, 13 May 2023 10:20:14 GMT
    body:
      encoding: UTF-8
      string: "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<html>\r\n\r\n<head>\r\n<meta
        name=\"KEYWORDS\" content=\"KProxy;KProxy.com;Anonimizer;Software;Advertise;Save
        money;increase traffic;Hosting;Anonymous navigation;Proxy;Web Proxy;Free;SSL;HTTPS;\">\r\n\r\n<meta
        http-equiv=\"refresh\" content=\"2;url=http://server10.kproxy.com/servlet/redirect.srv/srl/sbbkw/sjkl/p2/music/norma+loy/+similar\">\r\n\r\n<title>Loading.........</title>\r\n<link
        rel='stylesheet' href='estilos/ie4.css'>\r\n\r\n<meta http-equiv=\"X-UA-Compatible\"
        content=\"IE=edge,chrome=1\"> \r\n<meta name=\"viewport\" content=\"width=device-width,
        initial-scale=1.0\"> \r\n\r\n\r\n\r\n</head>\r\n\r\n\r\n\r\n<body>\r\n\r\n\r\n<div
        id=\"container\">\r\n\r\n\r\n  <div>\r\n  \t\r\n  \t<div id=\"logo\">\r\n
        \ \t\t<img src=\"images/kproxy_logo.png\"> \r\n  \t</div>\r\n  \t\r\n  \t<div
        id=\"surfbar\">\r\n  \t\r\n<center>\r\n\r\n\t<p class=titulo>Loading.........</p><br>\r\n\t<font
        class=text><br>Your request is loading now. Wait a moment, please.<br></font>\r\n\r\n\r\n</center>\r\n\r\n\t</div>\r\n
        \ </div>\r\n</div>\r\n\r\n\r\n</body>\r\n\r\n\r\n</html>\r\n\r\n\r\n\r\n\r\n\r\n"
  recorded_at: Sat, 13 May 2023 10:20:15 GMT
- request:
    method: get
    uri: http://server10.kproxy.com/servlet/redirect.srv/srl/sbbkw/sjkl/p2/music/norma+loy/+similar?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.2.2p53
      Cookie:
      - KP_DAT2__=NkI1KDVtPSMjI3A1eHw5a1ZMXyw4bEpEOEtzLjdMeGQ3VSMjI1sqSTd4O240VFJbUiEgQ3w1KC9vcjgzKg==;
        lfmanon=0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - server10.kproxy.com
  response:
    status:
      code: 301
      message: ''
    headers:
      Server:
      - nginx
      Location:
      - http://server10.kproxy.com/servlet/redirect.srv/srl/sbbkw/sjkl/p2/music/Norma+Loy/+similar?page=2
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/music/norma+loy/+similar?page=2
      X-Frame-Options:
      - DENY
      Content-Language:
      - en
      Set-Cookie:
      - X-UA-Country-Code=CA;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;max-age=60;same-site=strict;
      - X-UA-Device-Type=desktop;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;max-age=60;same-site=strict;
      - corrections_redirect="%7B%22for_url%22%3A%20%22/music/Norma%2BLoy/%2Bsimilar%3Fpage%3D2%22%2C%20%22incorrect_resource%22%3A%20%7B%22type%22%3A%20%22artist%22%2C%20%22props%22%3A%20%7B%22url%22%3A%20%22/music/Norma%2BLoy/%2Bsimilar%22%2C%20%22name%22%3A%20%22Norma%20Loy%22%7D%7D%7D";path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;expires=Sat,
        13 May 2023 10:20:25 GMT;Max-Age=10;
      - lfmanon=1;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;
      - not_first_visit=1;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjM3OTgxZTQwLTZkYmMtNDBhMy04NjRjLTc4NzBkZWRiOGMxOCJ9:1pxmMJ:dZ_SzdJcWta_ruZJBTKUQAwfe9Ifs0Met9htjXfbfq4;path=/servlet/redirect.srv/srl/sbbkw/;expires=Sun,
        12 May 2024 10:20:15 GMT;HttpOnly;Max-Age=31536000;SameSite=Lax;
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Sat, 13 May 2023 10:20:15 GMT
      X-Served-By:
      - prod-lfm-web-667649c4ff-x429c, cache-yul12834-YUL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1683973215.380539,VS0,VE113
      Vary:
      - Accept-Language, Cookie
      X-Lfm-Upstream:
      - "/music/norma+loy/+similar?page=2"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Content-Type:
      - text/html;charset=utf-8
      Content-Length:
      - '0'
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 13 May 2023 10:20:15 GMT
- request:
    method: get
    uri: http://server10.kproxy.com/servlet/redirect.srv/srl/sbbkw/sjkl/p2/music/Norma+Loy/+similar?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.2.2p53
      Cookie:
      - KP_DAT2__=NkI1KDVtPSMjI3A1eHw5a1ZMXyw4bEpEOEtzLjdMeGQ3VSMjI1sqSTd4O240VFJbUiEgQ3w1KC9vcjgzKg==;
        X-UA-Country-Code=CA; X-UA-Device-Type=desktop; corrections_redirect=%7B%22for_url%22%3A%20%22/music/Norma%2BLoy/%2Bsimilar%3Fpage%3D2%22%2C%20%22incorrect_resource%22%3A%20%7B%22type%22%3A%20%22artist%22%2C%20%22props%22%3A%20%7B%22url%22%3A%20%22/music/Norma%2BLoy/%2Bsimilar%22%2C%20%22name%22%3A%20%22Norma%20Loy%22%7D%7D%7D;
        lfmanon=1; lfmanon=0; not_first_visit=1; sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjM3OTgxZTQwLTZkYmMtNDBhMy04NjRjLTc4NzBkZWRiOGMxOCJ9:1pxmMJ:dZ_SzdJcWta_ruZJBTKUQAwfe9Ifs0Met9htjXfbfq4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - server10.kproxy.com
  response:
    status:
      code: 200
      message: ''
    headers:
      Server:
      - nginx
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/music/Norma+Loy/+similar?page=2
      Etag:
      - '"fc3b5aa3de3bd2abbf35e972b0acacdb"'
      X-Frame-Options:
      - DENY
      Content-Language:
      - en
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Sat, 13 May 2023 10:20:15 GMT
      Age:
      - '4'
      X-Served-By:
      - prod-lfm-web-667649c4ff-pvgl5, cache-yul12834-YUL
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1683973216.800039,VS0,VE1
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '1'
      Set-Cookie:
      - X-UA-Country-Code=CA;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;max-age=60;same-site=strict;
      - X-UA-Device-Type=desktop;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;max-age=60;same-site=strict;
      - lfmanon=1;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;
      - not_first_visit=1;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;
      Vary:
      - Accept-Language, Accept-Encoding
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Content-Type:
      - text/html;charset=utf-8
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 13 May 2023 10:20:16 GMT
recorded_with: VCR 6.1.0
