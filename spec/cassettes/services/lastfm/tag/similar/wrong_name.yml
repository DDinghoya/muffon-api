---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/tag/wejlhg239gh23?page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.1.2p20
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/tag/wejlhg239gh23?page=1
      Etag:
      - W/"395f04a376f2eb8a2e2601a53d0f092b"
      X-Frame-Options:
      - SAMEORIGIN
      Content-Language:
      - en
      Set-Cookie:
      - X-UA-Country-Code=BY; max-age=60; secure; same-site=strict; Path=/
      - X-UA-Device-Type=desktop; max-age=60; secure; same-site=strict; Path=/
      - lfmanon=1; Path=/
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjBiNzFjZGQ5LTQ2MWItNDEyOS1hZjIwLTJkYjIzOWU1ZTFkYyJ9:1nnfXd:jYKeUSbJ4b5MlFfy1eRI2_RnCtw;
        Domain=.last.fm; expires=Mon, 08-May-2023 11:57:37 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Sun, 08 May 2022 11:57:37 GMT
      X-Served-By:
      - cache-fra19175-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1652011058.571883,VS0,VE239
      Vary:
      - Accept-Encoding, Accept-Language, Cookie
      X-Lfm-Upstream:
      - "/tag/wejlhg239gh23?page=1"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 08 May 2022 11:57:37 GMT
recorded_with: VCR 6.1.0
