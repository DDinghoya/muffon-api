---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/tag/pop/tracks?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.1p64
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/tag/pop/tracks?page=2
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - csrftoken=hi8nNtgApKfCBnUE2FFwTgfhSFbfZp723PkE4Zz8DY4SxUCBs6UxxDSrxum9B6Pf;
        expires=Thu, 26-May-2022 09:06:27 GMT; Max-Age=31449600; Path=/; Secure
      - lfmanon=1; Path=/
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjA4ZmYwZWJiLWFhYzAtNDRhZS04OTU5LTcyY2I1ODZlYTFiYiJ9:1lmByF:L8AgauVsWJ-UnuTi0MapEq5BkV8;
        Domain=.last.fm; expires=Fri, 27-May-2022 09:06:27 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 27 May 2021 09:06:27 GMT
      X-Served-By:
      - prod-lfm-web-b9c9647b4-ctqcq, cache-hhn4052-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622106387.246532,VS0,VE474
      Vary:
      - Accept-Encoding, Cookie
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        





<!doctype html>
<html
    lang="en"
    class="
        no-js
        playbar-masthead-release-shim
        youtube-provider-not-ready
    "
>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge"><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"UwYPV15QGwYFXFlXDgU=",licenseKey:"0ed0ce50b0",applicationID:"5588594"};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var i=e[n]={exports:{}};t[n][0].call(i.exports,function(e){var i=t[n][1][e];return r(i||e)},i,i.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var i=0;i<n.length;i++)r(n[i]);return r}({1:[function(t,e,n){function r(t){try{s.console&&console.log(t)}catch(e){}}var i,o=t("ee"),a=t(25),s={};try{i=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(s.console=!0,i.indexOf("dev")!==-1&&(s.dev=!0),i.indexOf("nr_dev")!==-1&&(s.nrDev=!0))}catch(c){}s.nrDev&&o.on("internal-error",function(t){r(t.stack)}),s.dev&&o.on("fn-err",function(t,e,n){r(n.stack)}),s.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(s,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,s){try{p?p-=1:i(s||new UncaughtException(t,e,n),!0)}catch(f){try{o("ierr",[f,c.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function i(t,e){var n=e?null:c.now();o("err",[t,n])}var o=t("handle"),a=t(26),s=t("ee"),c=t("loader"),f=t("gos"),u=window.onerror,d=!1,l="nr@seenError";if(!c.disabled){var p=0;c.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(h){"stack"in h&&(t(9),t(8),"addEventListener"in window&&t(5),c.xhrWrappable&&t(10),d=!0)}s.on("fn-start",function(t,e,n){d&&(p+=1)}),s.on("fn-err",function(t,e,n){d&&!n[l]&&(f(n,l,function(){return!0}),this.thrown=!0,i(n))}),s.on("fn-end",function(){d&&!this.thrown&&p>0&&(p-=1)}),s.on("internal-error",function(t){o("ierr",[t,c.now(),!0])})}},{}],3:[function(t,e,n){var r=t("loader");r.disabled||(r.features.ins=!0)},{}],4:[function(t,e,n){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var i=t("ee"),o=t("handle"),a=t(9),s=t(8),c="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",l="resource",p="-start",h="-end",m="fn"+p,w="fn"+h,v="bstTimer",g="pushState",y=t("loader");if(!y.disabled){y.features.stn=!0,t(7),"addEventListener"in window&&t(5);var x=NREUM.o.EV;i.on(m,function(t,e){var n=t[0];n instanceof x&&(this.bstStart=y.now())}),i.on(w,function(t,e){var n=t[0];n instanceof x&&o("bst",[n,e,this.bstStart,y.now()])}),a.on(m,function(t,e,n){this.bstStart=y.now(),this.bstType=n}),a.on(w,function(t,e){o(v,[e,this.bstStart,y.now(),this.bstType])}),s.on(m,function(){this.bstStart=y.now()}),s.on(w,function(t,e){o(v,[e,this.bstStart,y.now(),"requestAnimationFrame"])}),i.on(g+p,function(t){this.time=y.now(),this.startPath=location.pathname+location.hash}),i.on(g+h,function(t){o("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+c]?window.performance[f](u,function(t){o(d,[window.performance.getEntriesByType(l)]),window.performance["c"+c]()},!1):window.performance[f]("webkit"+u,function(t){o(d,[window.performance.getEntriesByType(l)]),window.performance["webkitC"+c]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}}},{}],5:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&i(e)}function i(t){s.inPlace(t,[u,d],"-",o)}function o(t,e){return t[1]}var a=t("ee").get("events"),s=t("wrap-function")(a,!0),c=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(i(window),i(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=c(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?s(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],6:[function(t,e,n){function r(t,e,n){var r=t[e];"function"==typeof r&&(t[e]=function(){var t=o(arguments),e={};i.emit(n+"before-start",[t],e);var a;e[m]&&e[m].dt&&(a=e[m].dt);var s=r.apply(this,t);return i.emit(n+"start",[t,a],s),s.then(function(t){return i.emit(n+"end",[null,t],s),t},function(t){throw i.emit(n+"end",[t],s),t})})}var i=t("ee").get("fetch"),o=t(26),a=t(25);e.exports=i;var s=window,c="fetch-",f=c+"body-",u=["arrayBuffer","blob","json","text","formData"],d=s.Request,l=s.Response,p=s.fetch,h="prototype",m="nr@context";d&&l&&p&&(a(u,function(t,e){r(d[h],e,f),r(l[h],e,f)}),r(s,"fetch",c),i.on(c+"end",function(t,e){var n=this;if(e){var r=e.headers.get("content-length");null!==r&&(n.rxSize=r),i.emit(c+"done",[null,e],n)}else i.emit(c+"done",[t],n)}))},{}],7:[function(t,e,n){var r=t("ee").get("history"),i=t("wrap-function")(r);e.exports=r;var o=window.history&&window.history.constructor&&window.history.constructor.prototype,a=window.history;o&&o.pushState&&o.replaceState&&(a=o),i.inPlace(a,["pushState","replaceState"],"-")},{}],8:[function(t,e,n){var r=t("ee").get("raf"),i=t("wrap-function")(r),o="equestAnimationFrame";e.exports=r,i.inPlace(window,["r"+o,"mozR"+o,"webkitR"+o,"msR"+o],"raf-"),r.on("raf-start",function(t){t[0]=i(t[0],"fn-")})},{}],9:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function i(t,e,n){this.method=n,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,n)}var o=t("ee").get("timer"),a=t("wrap-function")(o),s="setTimeout",c="setInterval",f="clearTimeout",u="-start",d="-";e.exports=o,a.inPlace(window,[s,"setImmediate"],s+d),a.inPlace(window,[c],c+d),a.inPlace(window,[f,"clearImmediate"],f+d),o.on(c+u,r),o.on(s+u,i)},{}],10:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",s)}function i(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,g,"fn-",s)}function o(t){y.push(t),h&&(b?b.then(a):w?w(a):(E=-E,R.data=E))}function a(){for(var t=0;t<y.length;t++)r([],y[t]);y.length&&(y=[])}function s(t,e){return e}function c(t,e){for(var n in t)e[n]=t[n];return e}t(5);var f=t("ee"),u=f.get("xhr"),d=t("wrap-function")(u),l=NREUM.o,p=l.XHR,h=l.MO,m=l.PR,w=l.SI,v="readystatechange",g=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],y=[];e.exports=u;var x=window.XMLHttpRequest=function(t){var e=new p(t);try{u.emit("new-xhr",[e],e),e.addEventListener(v,i,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(c(p,x),x.prototype=p.prototype,d.inPlace(x.prototype,["open","send"],"-xhr-",s),u.on("send-xhr-start",function(t,e){r(t,e),o(e)}),u.on("open-xhr-start",r),h){var b=m&&m.resolve();if(!w&&!m){var E=1,R=document.createTextNode(E);new h(a).observe(R,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===v||a()})},{}],11:[function(t,e,n){function r(t){if(!s(t))return null;var e=window.NREUM;if(!e.loader_config)return null;var n=(e.loader_config.accountID||"").toString()||null,r=(e.loader_config.agentID||"").toString()||null,f=(e.loader_config.trustKey||"").toString()||null;if(!n||!r)return null;var h=p.generateSpanId(),m=p.generateTraceId(),w=Date.now(),v={spanId:h,traceId:m,timestamp:w};return(t.sameOrigin||c(t)&&l())&&(v.traceContextParentHeader=i(h,m),v.traceContextStateHeader=o(h,w,n,r,f)),(t.sameOrigin&&!u()||!t.sameOrigin&&c(t)&&d())&&(v.newrelicHeader=a(h,m,w,n,r,f)),v}function i(t,e){return"00-"+e+"-"+t+"-01"}function o(t,e,n,r,i){var o=0,a="",s=1,c="",f="";return i+"@nr="+o+"-"+s+"-"+n+"-"+r+"-"+t+"-"+a+"-"+c+"-"+f+"-"+e}function a(t,e,n,r,i,o){var a="btoa"in window&&"function"==typeof window.btoa;if(!a)return null;var s={v:[0,1],d:{ty:"Browser",ac:r,ap:i,id:t,tr:e,ti:n}};return o&&r!==o&&(s.d.tk=o),btoa(JSON.stringify(s))}function s(t){return f()&&c(t)}function c(t){var e=!1,n={};if("init"in NREUM&&"distributed_tracing"in NREUM.init&&(n=NREUM.init.distributed_tracing),t.sameOrigin)e=!0;else if(n.allowed_origins instanceof Array)for(var r=0;r<n.allowed_origins.length;r++){var i=h(n.allowed_origins[r]);if(t.hostname===i.hostname&&t.protocol===i.protocol&&t.port===i.port){e=!0;break}}return e}function f(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.enabled}function u(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.exclude_newrelic_header}function d(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&NREUM.init.distributed_tracing.cors_use_newrelic_header!==!1}function l(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.cors_use_tracecontext_headers}var p=t(22),h=t(13);e.exports={generateTracePayload:r,shouldGenerateTrace:s}},{}],12:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<l;r++)t.removeEventListener(d[r],this.listener,!1);e.aborted||(n.duration=a.now()-this.startTime,this.loadCaptureCalled||4!==t.readyState?null==e.status&&(e.status=0):o(this,t),n.cbTime=this.cbTime,u.emit("xhr-done",[t],t),s("xhr",[e,n,this.startTime]))}}function i(t,e){var n=c(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.parsedOrigin=c(e),t.sameOrigin=t.parsedOrigin.sameOrigin}function o(t,e){t.params.status=e.status;var n=w(e,t.lastSize);if(n&&(t.metrics.rxSize=n),t.sameOrigin){var r=e.getResponseHeader("X-NewRelic-App-Data");r&&(t.params.cat=r.split(", ").pop())}t.loadCaptureCalled=!0}var a=t("loader");if(a.xhrWrappable&&!a.disabled){var s=t("handle"),c=t(13),f=t(11).generateTracePayload,u=t("ee"),d=["load","error","abort","timeout"],l=d.length,p=t("id"),h=t(18),m=t(17),w=t(14),v=window.XMLHttpRequest;a.features.xhr=!0,t(10),t(6),u.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,e.loadCaptureCalled=!1,e.params=this.params||{},e.metrics=this.metrics||{},t.addEventListener("load",function(n){o(e,t)},!1),h&&(h>34||h<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),u.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),u.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid);var n=f(this.parsedOrigin);if(n){var r=!1;n.newrelicHeader&&(e.setRequestHeader("newrelic",n.newrelicHeader),r=!0),n.traceContextParentHeader&&(e.setRequestHeader("traceparent",n.traceContextParentHeader),n.traceContextStateHeader&&e.setRequestHeader("tracestate",n.traceContextStateHeader),r=!0),r&&(this.dt=n)}}),u.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],i=this;if(n&&r){var o=m(r);o&&(n.txSize=o)}this.startTime=a.now(),this.listener=function(t){try{"abort"!==t.type||i.loadCaptureCalled||(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}};for(var s=0;s<l;s++)e.addEventListener(d[s],this.listener,!1)}),u.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),u.on("xhr-load-added",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),u.on("xhr-load-removed",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),u.on("addEventListener-end",function(t,e){e instanceof v&&"load"===t[0]&&u.emit("xhr-load-added",[t[1],t[2]],e)}),u.on("removeEventListener-end",function(t,e){e instanceof v&&"load"===t[0]&&u.emit("xhr-load-removed",[t[1],t[2]],e)}),u.on("fn-start",function(t,e,n){e instanceof v&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),u.on("fn-end",function(t,e){this.xhrCbStart&&u.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,e],e)}),u.on("fetch-before-start",function(t){function e(t,e){var n=!1;return e.newrelicHeader&&(t.set("newrelic",e.newrelicHeader),n=!0),e.traceContextParentHeader&&(t.set("traceparent",e.traceContextParentHeader),e.traceContextStateHeader&&t.set("tracestate",e.traceContextStateHeader),n=!0),n}var n,r=t[1]||{};"string"==typeof t[0]?n=t[0]:t[0]&&t[0].url?n=t[0].url:window.URL&&t[0]&&t[0]instanceof URL&&(n=t[0].href),n&&(this.parsedOrigin=c(n),this.sameOrigin=this.parsedOrigin.sameOrigin);var i=f(this.parsedOrigin);if(i&&(i.newrelicHeader||i.traceContextParentHeader))if("string"==typeof t[0]||window.URL&&t[0]&&t[0]instanceof URL){var o={};for(var a in r)o[a]=r[a];o.headers=new Headers(r.headers||{}),e(o.headers,i)&&(this.dt=i),t.length>1?t[1]=o:t.push(o)}else t[0]&&t[0].headers&&e(t[0].headers,i)&&(this.dt=i)})}},{}],13:[function(t,e,n){var r={};e.exports=function(t){if(t in r)return r[t];var e=document.createElement("a"),n=window.location,i={};e.href=t,i.port=e.port;var o=e.href.split("://");!i.port&&o[1]&&(i.port=o[1].split("/")[0].split("@").pop().split(":")[1]),i.port&&"0"!==i.port||(i.port="https"===o[0]?"443":"80"),i.hostname=e.hostname||n.hostname,i.pathname=e.pathname,i.protocol=o[0],"/"!==i.pathname.charAt(0)&&(i.pathname="/"+i.pathname);var a=!e.protocol||":"===e.protocol||e.protocol===n.protocol,s=e.hostname===document.domain&&e.port===n.port;return i.sameOrigin=a&&(!e.hostname||s),"/"===i.pathname&&(r[t]=i),i}},{}],14:[function(t,e,n){function r(t,e){var n=t.responseType;return"json"===n&&null!==e?e:"arraybuffer"===n||"blob"===n||"json"===n?i(t.response):"text"===n||""===n||void 0===n?i(t.responseText):void 0}var i=t(17);e.exports=r},{}],15:[function(t,e,n){function r(){}function i(t,e,n){return function(){return o(t,[f.now()].concat(s(arguments)),e?null:this,n),e?void 0:this}}var o=t("handle"),a=t(25),s=t(26),c=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],l="api-",p=l+"ixn-";a(d,function(t,e){u[e]=i(l+e,!0,"api")}),u.addPageAction=i(l+"addPageAction",!0),u.setCurrentRouteName=i(l+"routeName",!0),e.exports=newrelic,u.interaction=function(){return(new r).get()};var h=r.prototype={createTracer:function(t,e){var n={},r=this,i="function"==typeof e;return o(p+"tracer",[f.now(),t,n],r),function(){if(c.emit((i?"":"no-")+"fn-start",[f.now(),r,i],n),i)try{return e.apply(this,arguments)}catch(t){throw c.emit("fn-err",[arguments,this,t],n),t}finally{c.emit("fn-end",[f.now()],n)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){h[e]=i(p+e)}),newrelic.noticeError=function(t,e){"string"==typeof t&&(t=new Error(t)),o("err",[t,f.now(),!1,e])}},{}],16:[function(t,e,n){function r(t){if(NREUM.init){for(var e=NREUM.init,n=t.split("."),r=0;r<n.length-1;r++)if(e=e[n[r]],"object"!=typeof e)return;return e=e[n[n.length-1]]}}e.exports={getConfiguration:r}},{}],17:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],18:[function(t,e,n){var r=0,i=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);i&&(r=+i[1]),e.exports=r},{}],19:[function(t,e,n){function r(){return s.exists&&performance.now?Math.round(performance.now()):(o=Math.max((new Date).getTime(),o))-a}function i(){return o}var o=(new Date).getTime(),a=o,s=t(27);e.exports=r,e.exports.offset=a,e.exports.getLastTimestamp=i},{}],20:[function(t,e,n){function r(t){return!(!t||!t.protocol||"file:"===t.protocol)}e.exports=r},{}],21:[function(t,e,n){function r(t,e){var n=t.getEntries();n.forEach(function(t){"first-paint"===t.name?d("timing",["fp",Math.floor(t.startTime)]):"first-contentful-paint"===t.name&&d("timing",["fcp",Math.floor(t.startTime)])})}function i(t,e){var n=t.getEntries();n.length>0&&d("lcp",[n[n.length-1]])}function o(t){t.getEntries().forEach(function(t){t.hadRecentInput||d("cls",[t])})}function a(t){if(t instanceof h&&!w){var e=Math.round(t.timeStamp),n={type:t.type};e<=l.now()?n.fid=l.now()-e:e>l.offset&&e<=Date.now()?(e-=l.offset,n.fid=l.now()-e):e=l.now(),w=!0,d("timing",["fi",e,n])}}function s(t){d("pageHide",[l.now(),t])}if(!("init"in NREUM&&"page_view_timing"in NREUM.init&&"enabled"in NREUM.init.page_view_timing&&NREUM.init.page_view_timing.enabled===!1)){var c,f,u,d=t("handle"),l=t("loader"),p=t(24),h=NREUM.o.EV;if("PerformanceObserver"in window&&"function"==typeof window.PerformanceObserver){c=new PerformanceObserver(r);try{c.observe({entryTypes:["paint"]})}catch(m){}f=new PerformanceObserver(i);try{f.observe({entryTypes:["largest-contentful-paint"]})}catch(m){}u=new PerformanceObserver(o);try{u.observe({type:"layout-shift",buffered:!0})}catch(m){}}if("addEventListener"in document){var w=!1,v=["click","keydown","mousedown","pointerdown","touchstart"];v.forEach(function(t){document.addEventListener(t,a,!1)})}p(s)}},{}],22:[function(t,e,n){function r(){function t(){return e?15&e[n++]:16*Math.random()|0}var e=null,n=0,r=window.crypto||window.msCrypto;r&&r.getRandomValues&&(e=r.getRandomValues(new Uint8Array(31)));for(var i,o="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",a="",s=0;s<o.length;s++)i=o[s],"x"===i?a+=t().toString(16):"y"===i?(i=3&t()|8,a+=i.toString(16)):a+=i;return a}function i(){return a(16)}function o(){return a(32)}function a(t){function e(){return n?15&n[r++]:16*Math.random()|0}var n=null,r=0,i=window.crypto||window.msCrypto;i&&i.getRandomValues&&Uint8Array&&(n=i.getRandomValues(new Uint8Array(31)));for(var o=[],a=0;a<t;a++)o.push(e().toString(16));return o.join("")}e.exports={generateUuid:r,generateSpanId:i,generateTraceId:o}},{}],23:[function(t,e,n){function r(t,e){if(!i)return!1;if(t!==i)return!1;if(!e)return!0;if(!o)return!1;for(var n=o.split("."),r=e.split("."),a=0;a<r.length;a++)if(r[a]!==n[a])return!1;return!0}var i=null,o=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var s=navigator.userAgent,c=s.match(a);c&&s.indexOf("Chrome")===-1&&s.indexOf("Chromium")===-1&&(i="Safari",o=c[1])}e.exports={agent:i,version:o,match:r}},{}],24:[function(t,e,n){function r(t){function e(){t(a&&document[a]?document[a]:document[i]?"hidden":"visible")}"addEventListener"in document&&o&&document.addEventListener(o,e,!1)}e.exports=r;var i,o,a;"undefined"!=typeof document.hidden?(i="hidden",o="visibilitychange",a="visibilityState"):"undefined"!=typeof document.msHidden?(i="msHidden",o="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(i="webkitHidden",o="webkitvisibilitychange",a="webkitVisibilityState")},{}],25:[function(t,e,n){function r(t,e){var n=[],r="",o=0;for(r in t)i.call(t,r)&&(n[o]=e(r,t[r]),o+=1);return n}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],26:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,i=n-e||0,o=Array(i<0?0:i);++r<i;)o[r]=t[e+r];return o}e.exports=r},{}],27:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(t,e,n){function r(){}function i(t){function e(t){return t&&t instanceof r?t:t?f(t,c,a):a()}function n(n,r,i,o,a){if(a!==!1&&(a=!0),!p.aborted||o){t&&a&&t(n,r,i);for(var s=e(i),c=m(n),f=c.length,u=0;u<f;u++)c[u].apply(s,r);var l=d[y[n]];return l&&l.push([x,n,r,s]),s}}function o(t,e){g[t]=m(t).concat(e)}function h(t,e){var n=g[t];if(n)for(var r=0;r<n.length;r++)n[r]===e&&n.splice(r,1)}function m(t){return g[t]||[]}function w(t){return l[t]=l[t]||i(n)}function v(t,e){p.aborted||u(t,function(t,n){e=e||"feature",y[n]=e,e in d||(d[e]=[])})}var g={},y={},x={on:o,addEventListener:o,removeEventListener:h,emit:n,get:w,listeners:m,context:e,buffer:v,abort:s,aborted:!1};return x}function o(t){return f(t,c,a)}function a(){return new r}function s(){(d.api||d.feature)&&(p.aborted=!0,d=p.backlog={})}var c="nr@context",f=t("gos"),u=t(25),d={},l={},p=e.exports=i();e.exports.getOrSetContext=o,p.backlog=d},{}],gos:[function(t,e,n){function r(t,e,n){if(i.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(o){}return t[e]=r,r}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){i.buffer([t],r),i.emit(t,e,n)}var i=t("ee").get("handle");e.exports=r,r.ee=i},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,o,function(){return i++})}var i=1,o="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!S++){var t=O.info=NREUM.info,e=m.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return f.abort();c(E,function(e,n){t[e]||(t[e]=n)});var n=a();s("mark",["onload",n+O.offset],null,"api"),s("timing",["load",n]);var r=m.createElement("script");0===t.agent.indexOf("http://")||0===t.agent.indexOf("https://")?r.src=t.agent:r.src=p+"://"+t.agent,e.parentNode.insertBefore(r,e)}}function i(){"complete"===m.readyState&&o()}function o(){s("mark",["domContent",a()+O.offset],null,"api")}var a=t(19),s=t("handle"),c=t(25),f=t("ee"),u=t(23),d=t(20),l=t(16),p=l.getConfiguration("ssl")===!1?"http":"https",h=window,m=h.document,w="addEventListener",v="attachEvent",g=h.XMLHttpRequest,y=g&&g.prototype,x=!d(h.location);NREUM.o={ST:setTimeout,SI:h.setImmediate,CT:clearTimeout,XHR:g,REQ:h.Request,EV:h.Event,PR:h.Promise,MO:h.MutationObserver};var b=""+location,E={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1209.min.js"},R=g&&y&&y[w]&&!/CriOS/.test(navigator.userAgent),O=e.exports={offset:a.getLastTimestamp(),now:a,origin:b,features:{},xhrWrappable:R,userAgent:u,disabled:x};if(!x){t(15),t(21),m[w]?(m[w]("DOMContentLoaded",o,!1),h[w]("load",r,!1)):(m[v]("onreadystatechange",i),h[v]("onload",r)),s("mark",["firstbyte",a.getLastTimestamp()],null,"api");var S=0}},{}],"wrap-function":[function(t,e,n){function r(t,e){function n(e,n,r,c,f){function nrWrapper(){var o,a,u,l;try{a=this,o=d(arguments),u="function"==typeof r?r(o,a):r||{}}catch(p){i([p,"",[o,a,c],u],t)}s(n+"start",[o,a,c],u,f);try{return l=e.apply(a,o)}catch(h){throw s(n+"err",[o,a,h],u,f),h}finally{s(n+"end",[o,a,l],u,f)}}return a(e)?e:(n||(n=""),nrWrapper[l]=e,o(e,nrWrapper,t),nrWrapper)}function r(t,e,r,i,o){r||(r="");var s,c,f,u="-"===r.charAt(0);for(f=0;f<e.length;f++)c=e[f],s=t[c],a(s)||(t[c]=n(s,u?c+r:r,i,c,o))}function s(n,r,o,a){if(!h||e){var s=h;h=!0;try{t.emit(n,r,o,e,a)}catch(c){i([c,n,r,o],t)}h=s}}return t||(t=u),n.inPlace=r,n.flag=l,n}function i(t,e){e||(e=u);try{e.emit("internal-error",t)}catch(n){}}function o(t,e,n){if(Object.defineProperty&&Object.keys)try{var r=Object.keys(t);return r.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(o){i([o],n)}for(var a in t)p.call(t,a)&&(e[a]=t[a]);return e}function a(t){return!(t&&t instanceof Function&&t.apply&&!t[l])}function s(t,e){var n=e(t);return n[l]=t,o(t,n,u),n}function c(t,e,n){var r=t[e];t[e]=s(r,n)}function f(){for(var t=arguments.length,e=new Array(t),n=0;n<t;++n)e[n]=arguments[n];return e}var u=t("ee"),d=t(26),l="nr@original",p=Object.prototype.hasOwnProperty,h=!1;e.exports=r,e.exports.wrapFunction=s,e.exports.wrapInPlace=c,e.exports.argsToArray=f},{}]},{},["loader",2,12,4,3]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam-cell.nr-data.net","errorBeacon":"bam-cell.nr-data.net","licenseKey":"0ed0ce50b0","applicationID":"5588594","transactionName":"Y1BRbUUFWkMEWxYMV1oadUxZB0BZClZNCV5ZG0RcVUpDRxIWAxVIRxtHWFBKQlkATxFfbEZUUFJEN0FSFVkFABZTUEc=","queueTime":0,"applicationTime":364,"agent":""}</script>
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title aria-live="assertive">Top pop tracks | Last.fm</title>

        
    <link rel="canonical" href="https://www.last.fm/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="en" href="https://www.last.fm/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="de" href="https://www.last.fm/de/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="es" href="https://www.last.fm/es/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="fr" href="https://www.last.fm/fr/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="it" href="https://www.last.fm/it/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ja" href="https://www.last.fm/ja/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pl" href="https://www.last.fm/pl/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pt" href="https://www.last.fm/pt/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ru" href="https://www.last.fm/ru/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="sv" href="https://www.last.fm/sv/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="tr" href="https://www.last.fm/tr/tag/pop/tracks" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="zh" href="https://www.last.fm/zh/tag/pop/tracks" data-replaceable-head-tag />
    
    <link rel="alternate" hreflang="x-default" href="https://www.last.fm/tag/pop/tracks" data-replaceable-head-tag />


        
            
                
                
                
    <meta name="description" content="Browse the top pop tracks to find new music and discover artists. Listen online to pop music for free at Last.fm." data-replaceable-head-tag>

    <meta property="og:title"           content="Top pop tracks | Last.fm" data-replaceable-head-tag>
    <meta property="og:description"     content="Browse the top pop tracks to find new music and discover artists. Listen online to pop music for free at Last.fm." data-replaceable-head-tag>
    <meta property="og:type"            content="website" data-replaceable-head-tag>
    <meta property="og:site_name"       content="Last.fm" data-replaceable-head-tag>
    <meta property="og:url"             content="https://www.last.fm/tag/pop/tracks?page=2" data-replaceable-head-tag />
    <meta property="og:image"           content="https://www.last.fm/static/images/lastfm_logo_facebook.15d8133be114.png" data-replaceable-head-tag>
    <meta property="og:image:width"     content="1200" data-replaceable-head-tag>
    <meta property="og:image:height"    content="630" data-replaceable-head-tag>

    <meta name="twitter:title"          content="Top pop tracks | Last.fm" data-replaceable-head-tag>
    <meta name="twitter:description"    content="Browse the top pop tracks to find new music and discover artists. Listen online to pop music for free at Last.fm." data-replaceable-head-tag>
    <meta name="twitter:image"          content="https://www.last.fm/static/images/lastfm_avatar_twitter.52a5d69a85ac.png" data-replaceable-head-tag>
    <meta name="twitter:card"           content="summary" data-replaceable-head-tag>
    <meta name="twitter:site"           content="@lastfm" data-replaceable-head-tag>

    <link rel="apple-music-app-icon" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />
    <link rel="apple-touch-icon-precomposed" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />
    <link rel="apple-touch-icon" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />

    

            
        

        

        <script>(function(e) { e.className = e.className.replace(/\bno-js\b/,'js'); })(document.documentElement)</script>

        

        
            
<script
    id="initial-tealium-data"
    data-tealium-data="{&#34;siteSection&#34;: &#34;tag&#34;, &#34;pageType&#34;: &#34;tag_tracks&#34;, &#34;pageName&#34;: &#34;tag/tracks&#34;, &#34;nativeEventTracking&#34;: true, &#34;userState&#34;: &#34;not authenticated&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;ipGeo&#34;: &#34;BY&#34;, &#34;pageViewGuid&#34;: &#34;10468d45-7554-4059-b336-fdde1649d97f&#34;}"
    data-tealium-environment="prod"
></script>
<script>
    var initialTealiumElement = document.getElementById('initial-tealium-data');
    window.utag_data = JSON.parse(initialTealiumElement.getAttribute('data-tealium-data'));
</script>
        

        <link rel="icon" href="/static/images/favicon.702b239b6194.ico">

        <link rel="stylesheet" href="/static/styles/build/anhv1-defaults-ad56300e54.ad56300e54ce.css" data-stylesheet-name="defaults" charset="utf-8">

        
            <link rel="stylesheet" href="/static/styles/build/app-reduced-e9b8152b05.7a00a1d3bb8d.css" data-stylesheet-name="app" charset="utf-8">
        

        
    
        <link rel="stylesheet" href="/static/styles/build/tag-b99b5b0564.f7fb55b650d8.css" data-stylesheet-name="page-specific" charset="utf-8">
    


        <script
            src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js"
            
                data-domain-script="d9f750da-0271-4142-9b0e-43d9a3b334d1"
            
        ></script>

        
            
    
    
        <script async data-main="/static/js-build/init.a67647a84587" src="/static/js-build/lib/require/require.53bc64c729e9.js"></script>
    

        

        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
    </head>
    <body
        class="
            
    two-column-layout

            anhv1
            namespace--tag_tracks
            
        "
        data-require="ads/page-ads,ads/searchlinks,player/playlink-handler,dev/grid-overlay,dev/toggle-version,dev/debug-log,dev/debug-image-analysis,dev/js-log,dev/ads-toggle,components/link-block,components/ajax-form,core/media-size-events-v2"
        data-player-supported="true"
        data-country-code="BY"
        data-initial-view-guid="10468d45-7554-4059-b336-fdde1649d97f"data-cbsi-player-config="/static/config/video-player.015786d691c2.xml"data-sensitive-path-regex="^/(../)?(googlec3ea1b252774e1ab\.html|account_deleted|inbox|join|login|lostpassword(/confirm)?|staff|subscribe|support(?!/images|/shouts|/shout)|settings/(account|website|subscription|password|lostpassword)|user/.+?/support)(/.*)?/?$"
        data-facebook-placement-id="195612451022080_220502155199776"
        data-google-maps-api-key="AIzaSyBX6-IE3lz4PpJUSBVIo_dPb0BAyMgi-VE"
        
            data-onetrust-prod
        
    >
        <div
            data-require="components/loading-indicator"
            data-loading-indicator-copy="Loading…"
        ></div>
        <div
            data-require="components/open-modal,components/submit-to-modal,components/show-alert"
            data-show-alert-ok-copy="Okay"
        ></div>
        

    
        <div class="top-bar">
            
                
                    
    <section
        data-require="player/controls,player/status,player/tracking"
        data-player-status-ad-playing="Ad playing"
        data-player-status-inactive="&nbsp;"
        data-player-status-loading-spotify="Connecting Spotify…"
        data-player-status-spotify-auth-error="Could not authenticate with Spotify."

        data-player-error-cannot-play-item="Cannot play that item."
        data-player-error-track-unavailable="Track unavailable."
        data-player-modal-title="Play video"

        

        class="
            player-bar
            inactive
        "
        aria-label="audio player"
        aria-disabled="true"
    >
        <div class="player-bar-inner-wrap">
            <a class="player-bar-artwork js-artwork">
                <img class="" src="/static/images/defaults/player_default_album.430223706b14.png" alt="" loading="lazy"/>
            </a>

            <span class="
                player-bar-source
                player-bar-source--spotify
            ">Playing via Spotify</span>

            <span class="
                player-bar-source
                player-bar-source--youtube
            ">Playing via YouTube</span>

            <div class="source-info">
                <button
                    class="player-bar-playback-options-button"
                    data-disclose-hover
                    aria-controls="player-bar-playback-options"
                >
                    Playback options
                </button>
                <div
                    id="player-bar-playback-options"
                    class="
                        player-bar-playback-options-wrap
                        disclose-hide
                    "
                >
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-spotify
                    ">
                        <li class="dropdown-menu-non-interactive-item-dark">
                            <span class="player-bar-listening-on-heading">Listening on…</span>
                            <span class="
                                player-bar-listening-on
                                js-player-bar-listening-on
                            "></span>
                        </li>
                        <li><button class="
                            dropdown-menu-item-dark
                            js-switch-device
                            player-bar-playback-options-switch-device
                        ">Switch Spotify device</button></li>
                        <li><a
                            class="
                                js-source
                                dropdown-menu-item-dark
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open in Spotify Web Player</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="https://secure.last.fm/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-youtube
                    ">
                        <li><a
                            class="
                                dropdown-menu-item-dark
                                js-source
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open on YouTube website</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="https://secure.last.fm/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                </div>
            </div>

            

            <div class="player-bar-controls">

                <ul aria-label="controls" class="media-controls">
                    <li>
                        <button
                            disabled
                            class="
                                js-previous
                                player-bar-btn
                                player-bar-btn--previous
                            "
                            data-analytics-action="PlaybarBackTrack"
                        >
                            Previous
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-play-pause
                                player-bar-btn
                                player-bar-btn--play
                            "
                            data-string-pause="Pause"
                            data-analytics-action="PlaybarResumeTrack"
                            data-analytics-action-pause="PlaybarPauseTrack"
                        >
                            Play
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-next
                                player-bar-btn
                                player-bar-btn--next
                            "
                            data-analytics-action="PlaybarSkipTrack"
                        >
                            Next
                        </button>
                    </li>
                    
                </ul>

                <a class="
                        player-bar-skiplink
                        player-bar-skiplink--youtube
                    "
                    href="#youtube-video"
                >Skip to YouTube video</a>

            </div>

            <div class="player-bar-now-playing">
                <div class="player-bar-now-playing-inner-wrap">
                    <p
                        class="player-bar-track js-player-status"
                        aria-label="now playing"
                        aria-live="polite"
                        aria-atomic="true"
                    >
                        Loading player…
                    </p>

                    <p class="player-bar-error js-player-error player-bar-status--hide">
                        <span class="player-bar-error-message js-player-error-message"></span>
                    </p>
                </div>
            </div>
        </div>

        
        <div class="player-bar-progress-wrap">
            <div
                class="player-bar-progress"
                aria-label="progress"
                role="timer"
            >
                <div
                    class="
                        js-progress-slug
                        player-bar-progress-slug
                    "
                >
                    <span
                        class="
                            js-progress-remaining
                            player-bar-progress-remaining
                        "
                        aria-label="remaining"
                    ></span>
                </div>
            </div>
        </div>

        <div data-require="player/scrobble-client"></div>
    </section>

                    
    <div
        class="
            masthead-popup
            masthead-popup--spotify-scrobbling
            masthead-popup--hidden
        "
        data-require="components/spotify-scrobbling-prompt,components/alert-dismissable,components/spotify-scrobbling-banner"
        data-spotify-scobbling-success-modal="/socialmodal/spotify-scrobbling-success"
        data-spotify-scobbling-fail-modal="/socialmodal/spotify-scrobbling-fail"
    >
        <div class="masthead-popup-inner">
            <h3>Scrobble from Spotify?</h3>
            <p>Connect your Spotify account to your Last.fm account and scrobble everything you listen to, from any Spotify app on any device or platform.</p>
            <p>
                <a
                    class="btn-primary js-setup-spotify-scrobbling"
                    href="/settings/applications"
                >
                    Connect to Spotify
                </a>
            </p>
            <a
                href="/nagbar/dismiss/spotify-scrobbling-prompt?period=permanent"
                class="masthead-popup-close js-alert-dismissable-close"
                data-close-ajax
            >
                Dismiss
            </a>
        </div>
    </div>

                
            
        </div>
    

    <div id="content" class="main-content" role="main" aria-live="polite">
        
    

    <div id="tlmdata" hidden class="hidden"
         data-tealium-data='{&#34;siteSection&#34;: &#34;tag&#34;, &#34;pageType&#34;: &#34;tag_tracks&#34;, &#34;pageName&#34;: &#34;tag/tracks&#34;, &#34;nativeEventTracking&#34;: true, &#34;userState&#34;: &#34;not authenticated&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;ipGeo&#34;: &#34;BY&#34;}'>
     </div>

        <div
            
                
            
            
            >
            
    <div
        data-require="components/disclose-base,components/disclose-autoclose-v2,components/disclose-dropdown-v2,components/disclose-dropdown-location-picker-v2,components/disclose-collapsing-nav-v2,components/disclose-artwork,components/disclose-remove,components/disclose-search,components/disclose-hover-v3,components/disclose-select,components/disclose-lazy-buylinks,components/focus-controls,components/prevent-resubmit-v2,components/edit-scrobble,components/toggle-buttons,components/click-proxy,components/bookmark-notification"
    ></div>

    
        

    <nav class="masthead"><div class="masthead-inner-wrap"><div class="masthead-logo"><span class="masthead-logo-loading"></span><a href="/"> Last.fm</a></div><a
        class="masthead-search-toggle" href="/search" data-disclose-search aria-controls="masthead-search">Search</a><form
        class=" masthead-search-form disclose-hide disclose-hide--js-only " id="masthead-search" action="/search" method="get"><div class="masthead-search-inner-wrap"><label for="masthead-search-field" class="sr-only">Search</label><input
                id="masthead-search-field" class="masthead-search-field" type="text" name="q" placeholder="Search for music…" /><button class="masthead-search-submit" type="submit">Search</button></div></form><div class="visible-xs"><button
                        class=" masthead-hamburger-toggle " data-disclose-autoclose aria-controls="masthead-nav">Toggle navigation</button><ul
                        class=" masthead-nav disclose-hide disclose-hide--js-only " aria-label="Primary navigation" id="masthead-nav"><li class="masthead-nav-item masthead-nav-pro"><a
                class="masthead-nav-control masthead-pro-text" href="/pro" data-analytics-label="subscribe" data-analytics-action="UserMenuClick">Upgrade to Pro</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/charts" data-analytics-action="NavigationLink" data-analytics-label="charts">Charts</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li>
    
        
            <li class="masthead-nav-item">
                <a
                    class="masthead-nav-control"
                    href="/pro"
                    data-analytics-label="subscribe"
                    data-analytics-action="UserMenuClick"
                >Subscribe</a>
            </li>
        
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="/join"
                data-analytics-action="SignUpClick"
            >Join</a>
        </li>
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="https://secure.last.fm/login"
            >Login</a>
        </li>
    
</ul></div><div
                    class=" navlist navlist--more masthead-nav hidden-xs " data-require="components/primary-nav" data-more-string="More…"><ul
                        class="js-navlist-items navlist-items" aria-label="Primary navigation"><li class="masthead-nav-item masthead-nav-pro"><a
                class="masthead-nav-control masthead-pro-text" href="/pro" data-analytics-label="subscribe" data-analytics-action="UserMenuClick">Upgrade to Pro</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/charts" data-analytics-action="NavigationLink" data-analytics-label="charts">Charts</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li></ul></div><ul
            class=" site-auth site-auth--anon hidden-xs ">
    <li class="site-auth-item"><a
                class="site-auth-control" href="/join" data-analytics-action="SignUpClick">Join</a></li><li class="site-auth-item"><a
                class="site-auth-control" href="https://secure.last.fm/login">Login</a></li>
</ul></div></nav>

    

    

    

    

    

    
    


    
    


    
    


    

    

    
    <div
        class="nag-bar nag-bar--plybar-masthead-release-warning "
        
        
        role="status"
    >
        <div class="container">
            
            <p class="nag-bar-message ">
                
        A new version of Last.fm is available, to keep everything running smoothly, please <a href="javascript:window.location.reload()">reload</a> the site.
    
            </p>
        </div>
    </div>


    

    

    
    

    
        
    


    
    




    
    

    <header class="
        header
        
        
            header--sub-page
        
        
            header--tag
        
        
    ">
        
            <div
                class="
                    header-background
                    header-background--has-image
                "
                style="background-image: url(https://lastfm.freetls.fastly.net/i/u/ar0/3f40f573a1f0d2ab3484f51257e77125.jpg);"
            ></div>
        

        
    
    <div
        class="
            recommended-next-page-container
            recommended-next-page-container--desktop-expanded
            recommended-next-page-container--mobile-hidden
        "
        data-require="components/recommended-next-page">
        
    
    <div class="js-link-block recommended-next-page recommended-next-page--tag">
        <img src="https://lastfm.freetls.fastly.net/i/u/avatar70s/dc3c775e076d40cac0124c80b258365c.jpg" class="recommended-next-page-image" alt="" loading="lazy"/>
        <div class="recommended-next-page-details">
            <h4 class="recommended-next-page-title">
                Recommended next
            </h4>
            
                <a href="/tag/indie" class="link-block-target recommended-next-page-name-unified">indie</a>
                <a href="/tag/indie" class="link-block-target recommended-next-page-name">indie</a>
            
        </div>
        <span class="recommended-next-button"></span>
        <a
            class="js-link-block-cover-link recommended-next-page-cover-link"
            href="/tag/indie"
            tabindex="-1"
            aria-hidden="true"
            data-analytics-action="RecommendedNextClick"
            ></a>
    </div>
    

    </div>
    


        <div class="container">
            <div class="header-inner-wrap">
                
                <div class="header-info">
                    
    <div class="header-info-primary header-info-primary--with-columns">
        
    
        
    
    <section class="share-mobile">
        <button
            aria-controls="share-8f041488-00f1-4836-91f0-982ae62a088c"
            aria-expanded="false"
            data-disclose-dropdown
            data-dropdown-layout-at="center bottom+5"
            class="
                disclose-trigger
                share-button
            "
            data-analytics-action="ShareShowOptions"
        >
            Share…
        </button>

        <div
            id="share-8f041488-00f1-4836-91f0-982ae62a088c"
            class="
                disclose-hide
                disclose-hide--js-only
                share-block
            "
        >
            
            
    <h2 class="share-heading">
        
            Share this tag:
        
    </h2>

            
    
    
    

    <ul class="share-options">
        <li class="share-option ">
            <a
                href="https://www.facebook.com/sharer/sharer.php?ref=facebooklink&amp;u=https://www.last.fm/tag/pop/tracks?page=2"
                data-analytics-social="2"
                target="_blank"
            >
                <img src="/static/images/icons/facebook.e0cc15e8e1d2.svg" alt="Facebook"></a>
            </a>
        </li>
        <li class="share-option ">
            <a
                href="https://twitter.com/intent/tweet?url=https://www.last.fm/tag/pop/tracks?page=2&amp;lang=en&amp;text=Check+out+pop"
                data-analytics-social="8"
                target="_blank"
            >
                <img src="/static/images/icons/twitter.841d4ebdbe86.svg" alt="Twitter"></a>
            </a>
        </li>
    </ul>

        
        </div>
    </section>

    


        <div class="header-info-primary-col1">
            <div class="header-title-column-ellipsis-wrap">
                <h1 class="header-title"><a href="/tag/pop">Pop music</a></h1>
            </div>

            
    
        
    <nav
        class="
            
                navlist
            
            secondary-nav
            
                navlist--more
            
            
        "
        aria-label="Secondary navigation"
        
            data-require="components/collapsing-nav-v2"
            data-more-string="More…"
        
    >
        <ul class="navlist-items js-navlist-items">
            <li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--overview
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/pop"
                            
                        >
                            Overview
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--artists
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/pop/artists"
                            
                        >
                            Artists
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--albums
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/pop/albums"
                            
                        >
                            Albums
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--tracks
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                                    secondary-nav-item-link--active
                                
                            "
                            href="/tag/pop/tracks"
                            
                        >
                            Tracks
                            
                                <span class="sr-only">(current section)</span>
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--wiki
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/pop/wiki"
                            
                        >
                            Wiki
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--shoutbox
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/pop/shoutbox"
                            
                        >
                            Shouts
                            
                        </a></li>
        </ul>
    </nav>

    

        </div>
    </div>

                </div>
            </div>
        </div>
    </header>



    
    <div id="mantle_skin" class="adaptive-skin-container">
        <div class="adaptive-skin-wrapper">
            <div id="adSkinLeft" class="adaptive-skin-left"></div>
            <div id="adSkinRight" class="adaptive-skin-right"></div>
        </div>
        
    
        
        
        
    


        

        
    <div class="content-top">
        <div class="content-top-inner-wrap">
            
                
    
        
        
            <div id="leader_plus_top" data-ad="leader_plus_top" class="leader_plus_top lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;leader_plus_top&#34;, &#34;sizes&#34;: [[728, 90], [970, 66], [970, 250], [728, 91]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
    

                
                    
    
        
        
            <div id="mobile_pos_1" data-ad="mobile_pos_1" class="mobile_pos_1 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_1&#34;, &#34;sizes&#34;: [[300, 250], [320, 50]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;1&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mobile_pos_1">
                Don't want to see ads? <a href="/pro" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Upgrade Now</a>
            </p>
        
    

                
            

            <div class="container content-top-lower">
                
                    


                

                

                
                    
                        <h1 class="content-top-header">
                            
    Pop Tracks

                        </h1>
                    
                

                

                
            </div>
        </div>
    </div>


        
    <div class="container page-content">
        
    <div class="row">
        <div class="col-main">
            
                <section id="top-tracks-section">
                    
    

    
    
    
    
    
    
    
    

    <table
        
        class="
            chartlist
            
            
                chartlist--with-index
                chartlist--with-index--length-3
            
            
                chartlist--with-play
            
            
                chartlist--with-mobile-play
            
            
            
            
                chartlist--with-loved
            
            
                chartlist--with-artist
            
            
            
                chartlist--with-more
            
            
            
            
            
            
            
            
                chartlist--with-buylinks
            
            
            
            
        "
    >
        <thead class="sr-only">
            <tr>
                

                
                    
                    <th>Rank</th>
                

                

                
                    
                    <th>Play</th>
                

                

                

                
                    
                    <th>Loved</th>
                

                <th>
                    
                    
                        Track name
                    
                </th>

                
                    
                    <th>Artist name </th>
                

                

                
                    
                    <th>Buy</th>
                

                
                    
                    <th>Options</th>
                

                

                

                

                

                

                

                

                

                

                
            </tr>
        </thead>
        <tbody data-playlisting-add-entries>
            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                51
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=qi7Yh16dA0w"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="qi7Yh16dA0w"
    data-youtube-url="https://www.youtube.com/watch?v=qi7Yh16dA0w"

    data-track-name="Love Song"
    data-track-url="/music/Sara+Bareilles/_/Love+Song"
    
        data-artist-name="Sara Bareilles"
        data-artist-url="/music/Sara+Bareilles"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="4440aefefb152a15cae3e9531310bd84"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="4440aefefb152a15cae3e9531310bd84"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Sara+Bareilles/_/Love+Song"
            
            
                title="Love Song"
            
                class=""
            
        >Love Song</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Sara+Bareilles"
            
            
                title="Sara Bareilles"
            
        >Sara Bareilles</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-a82f2aa6-ce5c-4779-bab5-825af72c4481"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Sara+Bareilles/_/Love+Song/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-a82f2aa6-ce5c-4779-bab5-825af72c4481"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-9e60120e-dfa6-47c8-b2e6-f87725397cc9"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Sara+Bareilles/_/Love+Song/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-9e60120e-dfa6-47c8-b2e6-f87725397cc9"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="4440aefefb152a15cae3e9531310bd84"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                52
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=XS088Opj9o0"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="XS088Opj9o0"
    data-youtube-url="https://www.youtube.com/watch?v=XS088Opj9o0"

    data-track-name="Frozen"
    data-track-url="/music/Madonna/_/Frozen"
    
        data-artist-name="Madonna"
        data-artist-url="/music/Madonna"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="7e63d6b4358fcf5167e87084655017fe"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="7e63d6b4358fcf5167e87084655017fe"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Madonna/_/Frozen"
            
            
                title="Frozen"
            
                class=""
            
        >Frozen</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Madonna"
            
            
                title="Madonna"
            
        >Madonna</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-76ccccf3-fd74-4bfa-a9e6-0b967dfeffea"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Madonna/_/Frozen/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-76ccccf3-fd74-4bfa-a9e6-0b967dfeffea"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-2c11494d-f7dd-4040-8309-8e47721a2bb7"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Madonna/_/Frozen/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-2c11494d-f7dd-4040-8309-8e47721a2bb7"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="7e63d6b4358fcf5167e87084655017fe"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                53
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=3gOHvDP_vCs"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="3gOHvDP_vCs"
    data-youtube-url="https://www.youtube.com/watch?v=3gOHvDP_vCs"

    data-track-name="SexyBack"
    data-track-url="/music/Justin+Timberlake/_/SexyBack"
    
        data-artist-name="Justin Timberlake"
        data-artist-url="/music/Justin+Timberlake"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="a694f1667b2ff35a7da59c60c9aa86e9"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="a694f1667b2ff35a7da59c60c9aa86e9"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Justin+Timberlake/_/SexyBack"
            
            
                title="SexyBack"
            
                class=""
            
        >SexyBack</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Justin+Timberlake"
            
            
                title="Justin Timberlake"
            
        >Justin Timberlake</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-d4d14383-6e66-4301-9e09-f2166b5c9d36"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Justin+Timberlake/_/SexyBack/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-d4d14383-6e66-4301-9e09-f2166b5c9d36"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-470153b9-49a1-41cb-89da-c8863f731af8"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Justin+Timberlake/_/SexyBack/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-470153b9-49a1-41cb-89da-c8863f731af8"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="a694f1667b2ff35a7da59c60c9aa86e9"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                54
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=uSD4vsh1zDA"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="uSD4vsh1zDA"
    data-youtube-url="https://www.youtube.com/watch?v=uSD4vsh1zDA"

    data-track-name="I Gotta Feeling"
    data-track-url="/music/Black+Eyed+Peas/_/I+Gotta+Feeling"
    
        data-artist-name="Black Eyed Peas"
        data-artist-url="/music/Black+Eyed+Peas"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="5beaaa5e5251566706b76c57d5183352"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="5beaaa5e5251566706b76c57d5183352"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Black+Eyed+Peas/_/I+Gotta+Feeling"
            
            
                title="I Gotta Feeling"
            
                class=""
            
        >I Gotta Feeling</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Black+Eyed+Peas"
            
            
                title="Black Eyed Peas"
            
        >Black Eyed Peas</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-196acdba-7e42-41f0-8687-1e1d18f2f88d"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Black+Eyed+Peas/_/I+Gotta+Feeling/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-196acdba-7e42-41f0-8687-1e1d18f2f88d"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-2083ec56-a181-4c53-ad15-090113b072ff"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Black+Eyed+Peas/_/I+Gotta+Feeling/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-2083ec56-a181-4c53-ad15-090113b072ff"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="5beaaa5e5251566706b76c57d5183352"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                55
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=c-3vPxKdj6o"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="c-3vPxKdj6o"
    data-youtube-url="https://www.youtube.com/watch?v=c-3vPxKdj6o"

    data-track-name="Breakaway"
    data-track-url="/music/Kelly+Clarkson/_/Breakaway"
    
        data-artist-name="Kelly Clarkson"
        data-artist-url="/music/Kelly+Clarkson"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="adfd5f6a82f5748073c6a0fc2101d36c"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="adfd5f6a82f5748073c6a0fc2101d36c"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Kelly+Clarkson/_/Breakaway"
            
            
                title="Breakaway"
            
                class=""
            
        >Breakaway</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Kelly+Clarkson"
            
            
                title="Kelly Clarkson"
            
        >Kelly Clarkson</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-27b7048d-4783-4a31-9867-85ae727d9f39"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Kelly+Clarkson/_/Breakaway/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-27b7048d-4783-4a31-9867-85ae727d9f39"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-53f8247b-7862-4ca4-8d54-913431177964"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Kelly+Clarkson/_/Breakaway/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-53f8247b-7862-4ca4-8d54-913431177964"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="adfd5f6a82f5748073c6a0fc2101d36c"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                56
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=9AEoUa0Hlso"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="9AEoUa0Hlso"
    data-youtube-url="https://www.youtube.com/watch?v=9AEoUa0Hlso"

    data-track-name="Suddenly I See"
    data-track-url="/music/KT+Tunstall/_/Suddenly+I+See"
    
        data-artist-name="KT Tunstall"
        data-artist-url="/music/KT+Tunstall"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="748a674938e08a74fa2ef0f80c242614"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="748a674938e08a74fa2ef0f80c242614"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/KT+Tunstall/_/Suddenly+I+See"
            
            
                title="Suddenly I See"
            
                class=""
            
        >Suddenly I See</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/KT+Tunstall"
            
            
                title="KT Tunstall"
            
        >KT Tunstall</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-107f385b-4a9c-4d48-a3fa-1ef3deaae502"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/KT+Tunstall/_/Suddenly+I+See/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-107f385b-4a9c-4d48-a3fa-1ef3deaae502"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-b856edb3-6b12-4be1-924f-cafacaf74e50"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/KT+Tunstall/_/Suddenly+I+See/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-b856edb3-6b12-4be1-924f-cafacaf74e50"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="748a674938e08a74fa2ef0f80c242614"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                57
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=8x7Ta89QLo4"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="8x7Ta89QLo4"
    data-youtube-url="https://www.youtube.com/watch?v=8x7Ta89QLo4"

    data-track-name="Ain&#39;t No Other Man"
    data-track-url="/music/Christina+Aguilera/_/Ain%27t+No+Other+Man"
    
        data-artist-name="Christina Aguilera"
        data-artist-url="/music/Christina+Aguilera"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="65ee061c7712132da1da3240e365d57c"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="65ee061c7712132da1da3240e365d57c"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Christina+Aguilera/_/Ain%27t+No+Other+Man"
            
            
                title="Ain&#39;t No Other Man"
            
                class=""
            
        >Ain&#39;t No Other Man</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Christina+Aguilera"
            
            
                title="Christina Aguilera"
            
        >Christina Aguilera</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-6e342215-89d8-48e3-8364-d5f3b5dc128c"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Christina+Aguilera/_/Ain%27t+No+Other+Man/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-6e342215-89d8-48e3-8364-d5f3b5dc128c"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-33d90223-4bbc-405d-9cf0-6d58626ed8e8"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Christina+Aguilera/_/Ain%27t+No+Other+Man/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-33d90223-4bbc-405d-9cf0-6d58626ed8e8"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="65ee061c7712132da1da3240e365d57c"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                58
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=R7UrFYvl5TE"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="R7UrFYvl5TE"
    data-youtube-url="https://www.youtube.com/watch?v=R7UrFYvl5TE"

    data-track-name="Since U Been Gone"
    data-track-url="/music/Kelly+Clarkson/_/Since+U+Been+Gone"
    
        data-artist-name="Kelly Clarkson"
        data-artist-url="/music/Kelly+Clarkson"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="bcb157bdcabf3e06fc05d9d1bef341f8"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="bcb157bdcabf3e06fc05d9d1bef341f8"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Kelly+Clarkson/_/Since+U+Been+Gone"
            
            
                title="Since U Been Gone"
            
                class=""
            
        >Since U Been Gone</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Kelly+Clarkson"
            
            
                title="Kelly Clarkson"
            
        >Kelly Clarkson</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-0497eae7-d87f-4489-9409-29db3b0275e9"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Kelly+Clarkson/_/Since+U+Been+Gone/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-0497eae7-d87f-4489-9409-29db3b0275e9"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-bb34ebcc-62cd-4d38-ab5f-b633697cf57e"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Kelly+Clarkson/_/Since+U+Been+Gone/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-bb34ebcc-62cd-4d38-ab5f-b633697cf57e"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="bcb157bdcabf3e06fc05d9d1bef341f8"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                59
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=eAfyFTzZDMM"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="eAfyFTzZDMM"
    data-youtube-url="https://www.youtube.com/watch?v=eAfyFTzZDMM"

    data-track-name="Beautiful"
    data-track-url="/music/Christina+Aguilera/_/Beautiful"
    
        data-artist-name="Christina Aguilera"
        data-artist-url="/music/Christina+Aguilera"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="8cea77cd54bdb6d06ebe737ead41de7b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="8cea77cd54bdb6d06ebe737ead41de7b"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Christina+Aguilera/_/Beautiful"
            
            
                title="Beautiful"
            
                class=""
            
        >Beautiful</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Christina+Aguilera"
            
            
                title="Christina Aguilera"
            
        >Christina Aguilera</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-b9d6eb57-a3b4-4220-aaff-d3e831842a9b"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Christina+Aguilera/_/Beautiful/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-b9d6eb57-a3b4-4220-aaff-d3e831842a9b"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-9baed5dd-8e0b-4931-abda-b2e47461ddce"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Christina+Aguilera/_/Beautiful/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-9baed5dd-8e0b-4931-abda-b2e47461ddce"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="8cea77cd54bdb6d06ebe737ead41de7b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                60
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=dsUXAEzaC3Q"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="dsUXAEzaC3Q"
    data-youtube-url="https://www.youtube.com/watch?v=dsUXAEzaC3Q"

    data-track-name="Bad"
    data-track-url="/music/Michael+Jackson/_/Bad"
    
        data-artist-name="Michael Jackson"
        data-artist-url="/music/Michael+Jackson"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="dc39685e091c1fd82838bfe61f9b195b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="dc39685e091c1fd82838bfe61f9b195b"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Michael+Jackson/_/Bad"
            
            
                title="Bad"
            
                class=""
            
        >Bad</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Michael+Jackson"
            
            
                title="Michael Jackson"
            
        >Michael Jackson</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-785652b0-ce95-4a6d-97af-7ac378e09025"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Michael+Jackson/_/Bad/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-785652b0-ce95-4a6d-97af-7ac378e09025"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-90601ac5-9318-445f-85ca-8ea0bccd9677"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Michael+Jackson/_/Bad/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-90601ac5-9318-445f-85ca-8ea0bccd9677"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="dc39685e091c1fd82838bfe61f9b195b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                61
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=weRHyjj34ZE"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="weRHyjj34ZE"
    data-youtube-url="https://www.youtube.com/watch?v=weRHyjj34ZE"

    data-track-name="Whenever, Wherever"
    data-track-url="/music/Shakira/_/Whenever,+Wherever"
    
        data-artist-name="Shakira"
        data-artist-url="/music/Shakira"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="ec004f9ae78da8fdf70da106e627fd1b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="ec004f9ae78da8fdf70da106e627fd1b"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Shakira/_/Whenever,+Wherever"
            
            
                title="Whenever, Wherever"
            
                class=""
            
        >Whenever, Wherever</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Shakira"
            
            
                title="Shakira"
            
        >Shakira</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-5d742ac7-74e3-48bc-ac6c-504018db85d0"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Shakira/_/Whenever,+Wherever/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-5d742ac7-74e3-48bc-ac6c-504018db85d0"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-6c77c4c0-cd0f-4bf1-a965-24641c8fddf4"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Shakira/_/Whenever,+Wherever/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-6c77c4c0-cd0f-4bf1-a965-24641c8fddf4"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="ec004f9ae78da8fdf70da106e627fd1b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                62
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=kIDWgqDBNXA"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="kIDWgqDBNXA"
    data-youtube-url="https://www.youtube.com/watch?v=kIDWgqDBNXA"

    data-track-name="Genie in a Bottle"
    data-track-url="/music/Christina+Aguilera/_/Genie+in+a+Bottle"
    
        data-artist-name="Christina Aguilera"
        data-artist-url="/music/Christina+Aguilera"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="51202ebd5469ec5b1c208ec7a93e6726"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="51202ebd5469ec5b1c208ec7a93e6726"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Christina+Aguilera/_/Genie+in+a+Bottle"
            
            
                title="Genie in a Bottle"
            
                class=""
            
        >Genie in a Bottle</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Christina+Aguilera"
            
            
                title="Christina Aguilera"
            
        >Christina Aguilera</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-44321881-7c18-4c57-b41d-5d5e4fa81f0c"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Christina+Aguilera/_/Genie+in+a+Bottle/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-44321881-7c18-4c57-b41d-5d5e4fa81f0c"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-e2ffc8c9-95aa-4173-b8a0-145771336a0f"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Christina+Aguilera/_/Genie+in+a+Bottle/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-e2ffc8c9-95aa-4173-b8a0-145771336a0f"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="51202ebd5469ec5b1c208ec7a93e6726"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                63
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=-ScjucUV8v0"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="-ScjucUV8v0"
    data-youtube-url="https://www.youtube.com/watch?v=-ScjucUV8v0"

    data-track-name="Candyman"
    data-track-url="/music/Christina+Aguilera/_/Candyman"
    
        data-artist-name="Christina Aguilera"
        data-artist-url="/music/Christina+Aguilera"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="12567c32c41027286ae746faa0d551b3"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="12567c32c41027286ae746faa0d551b3"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Christina+Aguilera/_/Candyman"
            
            
                title="Candyman"
            
                class=""
            
        >Candyman</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Christina+Aguilera"
            
            
                title="Christina Aguilera"
            
        >Christina Aguilera</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-07d294d4-e5ab-4a81-884d-a0419a416eee"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Christina+Aguilera/_/Candyman/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-07d294d4-e5ab-4a81-884d-a0419a416eee"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-a6713f04-15d5-4a2a-8812-cdb02e288003"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Christina+Aguilera/_/Candyman/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-a6713f04-15d5-4a2a-8812-cdb02e288003"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="12567c32c41027286ae746faa0d551b3"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                64
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=B5OPMI13qng"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="B5OPMI13qng"
    data-youtube-url="https://www.youtube.com/watch?v=B5OPMI13qng"

    data-track-name="Sorry"
    data-track-url="/music/Madonna/_/Sorry"
    
        data-artist-name="Madonna"
        data-artist-url="/music/Madonna"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="09406b842fea362f9e573a8a1639920b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="09406b842fea362f9e573a8a1639920b"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Madonna/_/Sorry"
            
            
                title="Sorry"
            
                class=""
            
        >Sorry</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Madonna"
            
            
                title="Madonna"
            
        >Madonna</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-462b66ba-bb39-43e4-8dbf-95614bb4dcc9"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Madonna/_/Sorry/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-462b66ba-bb39-43e4-8dbf-95614bb4dcc9"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-aab35aab-5dfe-465a-a523-c7eb2de975a1"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Madonna/_/Sorry/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-aab35aab-5dfe-465a-a523-c7eb2de975a1"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="09406b842fea362f9e573a8a1639920b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                65
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=4pBo-GL9SRg"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="4pBo-GL9SRg"
    data-youtube-url="https://www.youtube.com/watch?v=4pBo-GL9SRg"

    data-track-name="All Good Things (Come to an End)"
    data-track-url="/music/Nelly+Furtado/_/All+Good+Things+(Come+to+an+End)"
    
        data-artist-name="Nelly Furtado"
        data-artist-url="/music/Nelly+Furtado"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="83fc23bbee9de7465a3d42a737e9d934"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="83fc23bbee9de7465a3d42a737e9d934"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Nelly+Furtado/_/All+Good+Things+(Come+to+an+End)"
            
            
                title="All Good Things (Come to an End)"
            
                class=""
            
        >All Good Things (Come to an End)</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Nelly+Furtado"
            
            
                title="Nelly Furtado"
            
        >Nelly Furtado</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-bbce38ea-12c9-4dc5-bc08-e136ca96ca29"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Nelly+Furtado/_/All+Good+Things+(Come+to+an+End)/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-bbce38ea-12c9-4dc5-bc08-e136ca96ca29"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-516d5714-c5fe-4e11-8a52-cbac1014eec8"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Nelly+Furtado/_/All+Good+Things+(Come+to+an+End)/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-516d5714-c5fe-4e11-8a52-cbac1014eec8"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="83fc23bbee9de7465a3d42a737e9d934"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                66
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=2EwViQxSJJQ"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="2EwViQxSJJQ"
    data-youtube-url="https://www.youtube.com/watch?v=2EwViQxSJJQ"

    data-track-name="Irreplaceable"
    data-track-url="/music/Beyonc%C3%A9/_/Irreplaceable"
    
        data-artist-name="Beyoncé"
        data-artist-url="/music/Beyonc%C3%A9"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="06768b683c03eb7fd407999ff41cab12"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="06768b683c03eb7fd407999ff41cab12"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beyonc%C3%A9/_/Irreplaceable"
            
            
                title="Irreplaceable"
            
                class=""
            
        >Irreplaceable</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beyonc%C3%A9"
            
            
                title="Beyoncé"
            
        >Beyoncé</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-4668da80-df54-45de-a686-8a1bce862ac8"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beyonc%C3%A9/_/Irreplaceable/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-4668da80-df54-45de-a686-8a1bce862ac8"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-c01294da-88a7-4259-a64b-ef5cfc9d1a65"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beyonc%C3%A9/_/Irreplaceable/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-c01294da-88a7-4259-a64b-ef5cfc9d1a65"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="06768b683c03eb7fd407999ff41cab12"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                67
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=bnVUHWCynig"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="bnVUHWCynig"
    data-youtube-url="https://www.youtube.com/watch?v=bnVUHWCynig"

    data-track-name="Halo"
    data-track-url="/music/Beyonc%C3%A9/_/Halo"
    
        data-artist-name="Beyoncé"
        data-artist-url="/music/Beyonc%C3%A9"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="346c92916ca63be5f9e6e02741c6bd99"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="346c92916ca63be5f9e6e02741c6bd99"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Beyonc%C3%A9/_/Halo"
            
            
                title="Halo"
            
                class=""
            
        >Halo</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Beyonc%C3%A9"
            
            
                title="Beyoncé"
            
        >Beyoncé</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-26d25a53-4622-40ce-ac6a-e9ea7f40f479"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beyonc%C3%A9/_/Halo/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-26d25a53-4622-40ce-ac6a-e9ea7f40f479"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-73334289-5646-446d-8b23-dc08c6e9cc9d"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Beyonc%C3%A9/_/Halo/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-73334289-5646-446d-8b23-dc08c6e9cc9d"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="346c92916ca63be5f9e6e02741c6bd99"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                68
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=P-WP6POdTgY"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="P-WP6POdTgY"
    data-youtube-url="https://www.youtube.com/watch?v=P-WP6POdTgY"

    data-track-name="Heaven Is a Place on Earth"
    data-track-url="/music/Belinda+Carlisle/_/Heaven+Is+a+Place+on+Earth"
    
        data-artist-name="Belinda Carlisle"
        data-artist-url="/music/Belinda+Carlisle"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="eff8a2add8ac3a2af44fed6d1d46e238"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="eff8a2add8ac3a2af44fed6d1d46e238"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Belinda+Carlisle/_/Heaven+Is+a+Place+on+Earth"
            
            
                title="Heaven Is a Place on Earth"
            
                class=""
            
        >Heaven Is a Place on Earth</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Belinda+Carlisle"
            
            
                title="Belinda Carlisle"
            
        >Belinda Carlisle</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-e0977d4e-22c3-4109-ba88-a969da1be09a"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Belinda+Carlisle/_/Heaven+Is+a+Place+on+Earth/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-e0977d4e-22c3-4109-ba88-a969da1be09a"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-9add2b69-1b27-432c-b550-399327d5b3b0"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Belinda+Carlisle/_/Heaven+Is+a+Place+on+Earth/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-9add2b69-1b27-432c-b550-399327d5b3b0"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="eff8a2add8ac3a2af44fed6d1d46e238"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                69
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=wwCykGDEp7M"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="wwCykGDEp7M"
    data-youtube-url="https://www.youtube.com/watch?v=wwCykGDEp7M"

    data-track-name="Hurt"
    data-track-url="/music/Christina+Aguilera/_/Hurt"
    
        data-artist-name="Christina Aguilera"
        data-artist-url="/music/Christina+Aguilera"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="4036844cf7ec8f0d1cdbaa36ea4c4b1c"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="4036844cf7ec8f0d1cdbaa36ea4c4b1c"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Christina+Aguilera/_/Hurt"
            
            
                title="Hurt"
            
                class=""
            
        >Hurt</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Christina+Aguilera"
            
            
                title="Christina Aguilera"
            
        >Christina Aguilera</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-6751e4c2-a8f1-4602-a0e9-f80d2f4c200c"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Christina+Aguilera/_/Hurt/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-6751e4c2-a8f1-4602-a0e9-f80d2f4c200c"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-6147bdd9-b487-4e35-9401-8b7226bb8639"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Christina+Aguilera/_/Hurt/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-6147bdd9-b487-4e35-9401-8b7226bb8639"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="4036844cf7ec8f0d1cdbaa36ea4c4b1c"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                70
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=yipoOY56MbM"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="yipoOY56MbM"
    data-youtube-url="https://www.youtube.com/watch?v=yipoOY56MbM"

    data-track-name="Behind These Hazel Eyes"
    data-track-url="/music/Kelly+Clarkson/_/Behind+These+Hazel+Eyes"
    
        data-artist-name="Kelly Clarkson"
        data-artist-url="/music/Kelly+Clarkson"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="44d2c4f62c28d9e8bb87c97ec6f13263"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="44d2c4f62c28d9e8bb87c97ec6f13263"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Kelly+Clarkson/_/Behind+These+Hazel+Eyes"
            
            
                title="Behind These Hazel Eyes"
            
                class=""
            
        >Behind These Hazel Eyes</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Kelly+Clarkson"
            
            
                title="Kelly Clarkson"
            
        >Kelly Clarkson</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-4c7bc3b5-fba7-4805-a8ed-08b03590a483"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Kelly+Clarkson/_/Behind+These+Hazel+Eyes/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-4c7bc3b5-fba7-4805-a8ed-08b03590a483"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-01d9c0d7-5f96-4326-adca-aaa0017d6cd6"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Kelly+Clarkson/_/Behind+These+Hazel+Eyes/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-01d9c0d7-5f96-4326-adca-aaa0017d6cd6"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="44d2c4f62c28d9e8bb87c97ec6f13263"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                71
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=qvuyYj5ROmk"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="qvuyYj5ROmk"
    data-youtube-url="https://www.youtube.com/watch?v=qvuyYj5ROmk"

    data-track-name="Sweet About Me"
    data-track-url="/music/Gabriella+Cilmi/_/Sweet+About+Me"
    
        data-artist-name="Gabriella Cilmi"
        data-artist-url="/music/Gabriella+Cilmi"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="cf25d07c431781a83855fa9680e3721f"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="cf25d07c431781a83855fa9680e3721f"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Gabriella+Cilmi/_/Sweet+About+Me"
            
            
                title="Sweet About Me"
            
                class=""
            
        >Sweet About Me</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Gabriella+Cilmi"
            
            
                title="Gabriella Cilmi"
            
        >Gabriella Cilmi</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-3a35baf5-2790-434f-90d5-bfc0dabe9b81"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Gabriella+Cilmi/_/Sweet+About+Me/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-3a35baf5-2790-434f-90d5-bfc0dabe9b81"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-173f9d8e-7010-4425-8a6f-b9e397686050"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Gabriella+Cilmi/_/Sweet+About+Me/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-173f9d8e-7010-4425-8a6f-b9e397686050"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="cf25d07c431781a83855fa9680e3721f"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                72
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=Cwkej79U3ek"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="Cwkej79U3ek"
    data-youtube-url="https://www.youtube.com/watch?v=Cwkej79U3ek"

    data-track-name="A Thousand Miles"
    data-track-url="/music/Vanessa+Carlton/_/A+Thousand+Miles"
    
        data-artist-name="Vanessa Carlton"
        data-artist-url="/music/Vanessa+Carlton"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="5f738220f4128b447e7fd830ad90fd4f"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="5f738220f4128b447e7fd830ad90fd4f"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Vanessa+Carlton/_/A+Thousand+Miles"
            
            
                title="A Thousand Miles"
            
                class=""
            
        >A Thousand Miles</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Vanessa+Carlton"
            
            
                title="Vanessa Carlton"
            
        >Vanessa Carlton</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-04a1d659-50ae-4021-8c58-6450b19ea7ec"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Vanessa+Carlton/_/A+Thousand+Miles/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-04a1d659-50ae-4021-8c58-6450b19ea7ec"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-02cdf2c2-a222-4582-9228-1bd5d4c7f3bc"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Vanessa+Carlton/_/A+Thousand+Miles/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-02cdf2c2-a222-4582-9228-1bd5d4c7f3bc"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="5f738220f4128b447e7fd830ad90fd4f"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                73
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=HzZ_urpj4As"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="HzZ_urpj4As"
    data-youtube-url="https://www.youtube.com/watch?v=HzZ_urpj4As"

    data-track-name="The Way You Make Me Feel"
    data-track-url="/music/Michael+Jackson/_/The+Way+You+Make+Me+Feel"
    
        data-artist-name="Michael Jackson"
        data-artist-url="/music/Michael+Jackson"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="57a718882a3c5093878b79ee4a2091d6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="57a718882a3c5093878b79ee4a2091d6"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Michael+Jackson/_/The+Way+You+Make+Me+Feel"
            
            
                title="The Way You Make Me Feel"
            
                class=""
            
        >The Way You Make Me Feel</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Michael+Jackson"
            
            
                title="Michael Jackson"
            
        >Michael Jackson</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-f45edf8d-d83f-4d87-a62d-19d167bb4798"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Michael+Jackson/_/The+Way+You+Make+Me+Feel/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-f45edf8d-d83f-4d87-a62d-19d167bb4798"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-e9ae4b63-f08e-4202-ac93-9ee1ffa83e3a"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Michael+Jackson/_/The+Way+You+Make+Me+Feel/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-e9ae4b63-f08e-4202-ac93-9ee1ffa83e3a"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="57a718882a3c5093878b79ee4a2091d6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                74
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=v1c2OfAzDTI"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="v1c2OfAzDTI"
    data-youtube-url="https://www.youtube.com/watch?v=v1c2OfAzDTI"

    data-track-name="That&#39;s Not My Name"
    data-track-url="/music/The+Ting+Tings/_/That%27s+Not+My+Name"
    
        data-artist-name="The Ting Tings"
        data-artist-url="/music/The+Ting+Tings"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="73d44bff33c8fdc07bffbc84e5f19c55"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="73d44bff33c8fdc07bffbc84e5f19c55"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/The+Ting+Tings/_/That%27s+Not+My+Name"
            
            
                title="That&#39;s Not My Name"
            
                class=""
            
        >That&#39;s Not My Name</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/The+Ting+Tings"
            
            
                title="The Ting Tings"
            
        >The Ting Tings</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-731e0097-3de5-4816-9365-a2eb30ba80b6"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/The+Ting+Tings/_/That%27s+Not+My+Name/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-731e0097-3de5-4816-9365-a2eb30ba80b6"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-bdc6098d-6bf5-43b7-aa23-fc1403061980"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/The+Ting+Tings/_/That%27s+Not+My+Name/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-bdc6098d-6bf5-43b7-aa23-fc1403061980"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="73d44bff33c8fdc07bffbc84e5f19c55"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                75
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=unfzfe8f9NI"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="unfzfe8f9NI"
    data-youtube-url="https://www.youtube.com/watch?v=unfzfe8f9NI"

    data-track-name="Mamma Mia"
    data-track-url="/music/ABBA/_/Mamma+Mia"
    
        data-artist-name="ABBA"
        data-artist-url="/music/ABBA"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="dbb71ce6c5a863c10f8bb80c0519f23b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="dbb71ce6c5a863c10f8bb80c0519f23b"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/ABBA/_/Mamma+Mia"
            
            
                title="Mamma Mia"
            
                class=""
            
        >Mamma Mia</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/ABBA"
            
            
                title="ABBA"
            
        >ABBA</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-df9e4818-9ab8-429b-a51b-b42b9b7d3ff0"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/ABBA/_/Mamma+Mia/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-df9e4818-9ab8-429b-a51b-b42b9b7d3ff0"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-8f438e72-7d58-45da-b267-fbd83bd9ad99"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/ABBA/_/Mamma+Mia/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-8f438e72-7d58-45da-b267-fbd83bd9ad99"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="dbb71ce6c5a863c10f8bb80c0519f23b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                76
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=rp4UwPZfRis"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="rp4UwPZfRis"
    data-youtube-url="https://www.youtube.com/watch?v=rp4UwPZfRis"

    data-track-name="Unfaithful"
    data-track-url="/music/Rihanna/_/Unfaithful"
    
        data-artist-name="Rihanna"
        data-artist-url="/music/Rihanna"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="c58f4db2dd22b667b54caa7638b7afd3"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="c58f4db2dd22b667b54caa7638b7afd3"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Rihanna/_/Unfaithful"
            
            
                title="Unfaithful"
            
                class=""
            
        >Unfaithful</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Rihanna"
            
            
                title="Rihanna"
            
        >Rihanna</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-57b3d452-c847-4f5b-9e27-dbd952320f56"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Rihanna/_/Unfaithful/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-57b3d452-c847-4f5b-9e27-dbd952320f56"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-c31a95c0-fd14-42c3-bd56-6c566b9199b8"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Rihanna/_/Unfaithful/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-c31a95c0-fd14-42c3-bd56-6c566b9199b8"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="c58f4db2dd22b667b54caa7638b7afd3"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                77
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=PivWY9wn5ps"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="PivWY9wn5ps"
    data-youtube-url="https://www.youtube.com/watch?v=PivWY9wn5ps"

    data-track-name="Man in the Mirror"
    data-track-url="/music/Michael+Jackson/_/Man+in+the+Mirror"
    
        data-artist-name="Michael Jackson"
        data-artist-url="/music/Michael+Jackson"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="4a3c99781d1e0f1783509f11398659ee"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="4a3c99781d1e0f1783509f11398659ee"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Michael+Jackson/_/Man+in+the+Mirror"
            
            
                title="Man in the Mirror"
            
                class=""
            
        >Man in the Mirror</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Michael+Jackson"
            
            
                title="Michael Jackson"
            
        >Michael Jackson</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-5c188551-f7d4-4eed-90af-8ccbee712fa8"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Michael+Jackson/_/Man+in+the+Mirror/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-5c188551-f7d4-4eed-90af-8ccbee712fa8"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-4114bc4c-e764-4e28-a013-0e9d5e8033ea"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Michael+Jackson/_/Man+in+the+Mirror/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-4114bc4c-e764-4e28-a013-0e9d5e8033ea"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="4a3c99781d1e0f1783509f11398659ee"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                78
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=booKP974B0k"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="booKP974B0k"
    data-youtube-url="https://www.youtube.com/watch?v=booKP974B0k"

    data-track-name="She Wolf"
    data-track-url="/music/Shakira/_/She+Wolf"
    
        data-artist-name="Shakira"
        data-artist-url="/music/Shakira"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="facc53228d204a9e0a1554262647ec9b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="facc53228d204a9e0a1554262647ec9b"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Shakira/_/She+Wolf"
            
            
                title="She Wolf"
            
                class=""
            
        >She Wolf</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Shakira"
            
            
                title="Shakira"
            
        >Shakira</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-e6014c3b-5d39-4eb7-bf29-2ca8f21e821e"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Shakira/_/She+Wolf/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-e6014c3b-5d39-4eb7-bf29-2ca8f21e821e"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-07efb807-a02c-46d9-b2f4-05a55b6dbf65"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Shakira/_/She+Wolf/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-07efb807-a02c-46d9-b2f4-05a55b6dbf65"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="facc53228d204a9e0a1554262647ec9b"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                79
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=aGCdLKXNF3w"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="aGCdLKXNF3w"
    data-youtube-url="https://www.youtube.com/watch?v=aGCdLKXNF3w"

    data-track-name="Everybody Wants to Rule the World"
    data-track-url="/music/Tears+for+Fears/_/Everybody+Wants+to+Rule+the+World"
    
        data-artist-name="Tears for Fears"
        data-artist-url="/music/Tears+for+Fears"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e625c9d933827e1a22ef224166b744bf"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="e625c9d933827e1a22ef224166b744bf"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Tears+for+Fears/_/Everybody+Wants+to+Rule+the+World"
            
            
                title="Everybody Wants to Rule the World"
            
                class=""
            
        >Everybody Wants to Rule the World</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Tears+for+Fears"
            
            
                title="Tears for Fears"
            
        >Tears for Fears</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-bdc61e97-a1b1-485b-bcb6-b8f0c2ad9473"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Tears+for+Fears/_/Everybody+Wants+to+Rule+the+World/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-bdc61e97-a1b1-485b-bcb6-b8f0c2ad9473"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-466b0898-576e-437a-934e-4a02c048c20b"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Tears+for+Fears/_/Everybody+Wants+to+Rule+the+World/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-466b0898-576e-437a-934e-4a02c048c20b"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e625c9d933827e1a22ef224166b744bf"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                80
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=nZXRV4MezEw"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="nZXRV4MezEw"
    data-youtube-url="https://www.youtube.com/watch?v=nZXRV4MezEw"

    data-track-name="Believe"
    data-track-url="/music/Cher/_/Believe"
    
        data-artist-name="Cher"
        data-artist-url="/music/Cher"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="4f97d0cbc5fc3c7c019ea27abfb6a607"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="4f97d0cbc5fc3c7c019ea27abfb6a607"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Cher/_/Believe"
            
            
                title="Believe"
            
                class=""
            
        >Believe</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Cher"
            
            
                title="Cher"
            
        >Cher</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-5228bb41-8c2a-49ae-89e1-74feeb6fb0d9"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cher/_/Believe/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-5228bb41-8c2a-49ae-89e1-74feeb6fb0d9"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-3bf57f14-bc07-4ac4-a088-4e2580bfdcdf"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Cher/_/Believe/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-3bf57f14-bc07-4ac4-a088-4e2580bfdcdf"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="4f97d0cbc5fc3c7c019ea27abfb6a607"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                81
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=qSxyffSB7wA"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="qSxyffSB7wA"
    data-youtube-url="https://www.youtube.com/watch?v=qSxyffSB7wA"

    data-track-name="Better in Time"
    data-track-url="/music/Leona+Lewis/_/Better+in+Time"
    
        data-artist-name="Leona Lewis"
        data-artist-url="/music/Leona+Lewis"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="54a090996f08457170c1e1875cce48e9"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="54a090996f08457170c1e1875cce48e9"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Leona+Lewis/_/Better+in+Time"
            
            
                title="Better in Time"
            
                class=""
            
        >Better in Time</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Leona+Lewis"
            
            
                title="Leona Lewis"
            
        >Leona Lewis</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-9f66fe0e-0901-4320-bb86-31003fcde288"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Leona+Lewis/_/Better+in+Time/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-9f66fe0e-0901-4320-bb86-31003fcde288"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-5fd25701-f9c5-4084-8fc8-b575cb7af650"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Leona+Lewis/_/Better+in+Time/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-5fd25701-f9c5-4084-8fc8-b575cb7af650"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="54a090996f08457170c1e1875cce48e9"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                82
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=iy4mXZN1Zzk"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="iy4mXZN1Zzk"
    data-youtube-url="https://www.youtube.com/watch?v=iy4mXZN1Zzk"

    data-track-name="Feel"
    data-track-url="/music/Robbie+Williams/_/Feel"
    
        data-artist-name="Robbie Williams"
        data-artist-url="/music/Robbie+Williams"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e91b0c24cf99abc370754bffbf2edd9a"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="e91b0c24cf99abc370754bffbf2edd9a"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Robbie+Williams/_/Feel"
            
            
                title="Feel"
            
                class=""
            
        >Feel</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Robbie+Williams"
            
            
                title="Robbie Williams"
            
        >Robbie Williams</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-0735afc0-babf-41d2-a30c-c431161ed994"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Robbie+Williams/_/Feel/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-0735afc0-babf-41d2-a30c-c431161ed994"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-2d1a0bda-f73c-4202-ba44-948b9538901e"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Robbie+Williams/_/Feel/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-2d1a0bda-f73c-4202-ba44-948b9538901e"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="e91b0c24cf99abc370754bffbf2edd9a"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                83
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=YkADj0TPrJA"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="YkADj0TPrJA"
    data-youtube-url="https://www.youtube.com/watch?v=YkADj0TPrJA"

    data-track-name="In the Air Tonight"
    data-track-url="/music/Phil+Collins/_/In+the+Air+Tonight"
    
        data-artist-name="Phil Collins"
        data-artist-url="/music/Phil+Collins"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="28a261eca5be46168945863e188ac122"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="28a261eca5be46168945863e188ac122"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Phil+Collins/_/In+the+Air+Tonight"
            
            
                title="In the Air Tonight"
            
                class=""
            
        >In the Air Tonight</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Phil+Collins"
            
            
                title="Phil Collins"
            
        >Phil Collins</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-8a2117f2-2fcd-4ce8-bdd1-8a816723e26c"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Phil+Collins/_/In+the+Air+Tonight/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-8a2117f2-2fcd-4ce8-bdd1-8a816723e26c"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-10b59a7a-058b-4158-a4fd-7156128551d7"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Phil+Collins/_/In+the+Air+Tonight/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-10b59a7a-058b-4158-a4fd-7156128551d7"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="28a261eca5be46168945863e188ac122"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                84
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=q-wGMlSuX_c"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="q-wGMlSuX_c"
    data-youtube-url="https://www.youtube.com/watch?v=q-wGMlSuX_c"

    data-track-name="The Fear"
    data-track-url="/music/Lily+Allen/_/The+Fear"
    
        data-artist-name="Lily Allen"
        data-artist-url="/music/Lily+Allen"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="da1fbfd530d8620c18634d8752761cf1"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="da1fbfd530d8620c18634d8752761cf1"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Lily+Allen/_/The+Fear"
            
            
                title="The Fear"
            
                class=""
            
        >The Fear</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Lily+Allen"
            
            
                title="Lily Allen"
            
        >Lily Allen</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-f402c5ed-b1fc-4487-9e25-01e599ff1681"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Lily+Allen/_/The+Fear/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-f402c5ed-b1fc-4487-9e25-01e599ff1681"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-81bf4ff6-1f56-4815-b06a-7a473c8bf061"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Lily+Allen/_/The+Fear/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-81bf4ff6-1f56-4815-b06a-7a473c8bf061"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="da1fbfd530d8620c18634d8752761cf1"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                85
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=PIb6AZdTr-A"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="PIb6AZdTr-A"
    data-youtube-url="https://www.youtube.com/watch?v=PIb6AZdTr-A"

    data-track-name="Girls Just Want to Have Fun"
    data-track-url="/music/Cyndi+Lauper/_/Girls+Just+Want+to+Have+Fun"
    
        data-artist-name="Cyndi Lauper"
        data-artist-url="/music/Cyndi+Lauper"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="b32809d073eb76946a6cf01cbb971605"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="b32809d073eb76946a6cf01cbb971605"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Cyndi+Lauper/_/Girls+Just+Want+to+Have+Fun"
            
            
                title="Girls Just Want to Have Fun"
            
                class=""
            
        >Girls Just Want to Have Fun</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Cyndi+Lauper"
            
            
                title="Cyndi Lauper"
            
        >Cyndi Lauper</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-4512c131-77d3-4879-80e5-fd8192793a41"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cyndi+Lauper/_/Girls+Just+Want+to+Have+Fun/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-4512c131-77d3-4879-80e5-fd8192793a41"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-7eb94364-d069-4b54-8349-03f757169fee"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Cyndi+Lauper/_/Girls+Just+Want+to+Have+Fun/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-7eb94364-d069-4b54-8349-03f757169fee"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="b32809d073eb76946a6cf01cbb971605"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                86
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=rYEDA3JcQqw"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="rYEDA3JcQqw"
    data-youtube-url="https://www.youtube.com/watch?v=rYEDA3JcQqw"

    data-track-name="Rolling in the Deep"
    data-track-url="/music/Adele/_/Rolling+in+the+Deep"
    
        data-artist-name="Adele"
        data-artist-url="/music/Adele"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="2bd768703436b1720cdd71f8af90d5da"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="2bd768703436b1720cdd71f8af90d5da"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Adele/_/Rolling+in+the+Deep"
            
            
                title="Rolling in the Deep"
            
                class=""
            
        >Rolling in the Deep</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Adele"
            
            
                title="Adele"
            
        >Adele</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-4b38815d-a775-4600-9463-3993470812e3"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Adele/_/Rolling+in+the+Deep/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-4b38815d-a775-4600-9463-3993470812e3"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-b5051a1c-95b1-4bf1-b749-99b9f8b26b1b"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Adele/_/Rolling+in+the+Deep/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-b5051a1c-95b1-4bf1-b749-99b9f8b26b1b"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="2bd768703436b1720cdd71f8af90d5da"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                87
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=AWGqoCNbsvM"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="AWGqoCNbsvM"
    data-youtube-url="https://www.youtube.com/watch?v=AWGqoCNbsvM"

    data-track-name="Bubbly"
    data-track-url="/music/Colbie+Caillat/_/Bubbly"
    
        data-artist-name="Colbie Caillat"
        data-artist-url="/music/Colbie+Caillat"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="8eda0d8fa08f8058ba9137bc445c6026"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="8eda0d8fa08f8058ba9137bc445c6026"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Colbie+Caillat/_/Bubbly"
            
            
                title="Bubbly"
            
                class=""
            
        >Bubbly</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Colbie+Caillat"
            
            
                title="Colbie Caillat"
            
        >Colbie Caillat</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-0fe4c146-daf3-4446-aa1b-972909451021"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Colbie+Caillat/_/Bubbly/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-0fe4c146-daf3-4446-aa1b-972909451021"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-8a86a866-8073-45d5-9188-1c7441b53e2f"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Colbie+Caillat/_/Bubbly/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-8a86a866-8073-45d5-9188-1c7441b53e2f"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="8eda0d8fa08f8058ba9137bc445c6026"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                88
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=5NPBIwQyPWE"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="5NPBIwQyPWE"
    data-youtube-url="https://www.youtube.com/watch?v=5NPBIwQyPWE"

    data-track-name="Complicated"
    data-track-url="/music/Avril+Lavigne/_/Complicated"
    
        data-artist-name="Avril Lavigne"
        data-artist-url="/music/Avril+Lavigne"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="323e51ea76a01d98a21208574ed63ea6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="323e51ea76a01d98a21208574ed63ea6"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Avril+Lavigne/_/Complicated"
            
            
                title="Complicated"
            
                class=""
            
        >Complicated</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Avril+Lavigne"
            
            
                title="Avril Lavigne"
            
        >Avril Lavigne</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-4e86a83c-0093-4639-8a94-638e8d0ac008"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Avril+Lavigne/_/Complicated/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-4e86a83c-0093-4639-8a94-638e8d0ac008"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-63219c9b-156a-4e12-9d7f-0058bae0ac3d"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Avril+Lavigne/_/Complicated/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-63219c9b-156a-4e12-9d7f-0058bae0ac3d"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="323e51ea76a01d98a21208574ed63ea6"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                89
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=psuRGfAaju4"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="psuRGfAaju4"
    data-youtube-url="https://www.youtube.com/watch?v=psuRGfAaju4"

    data-track-name="Fireflies"
    data-track-url="/music/Owl+City/_/Fireflies"
    
        data-artist-name="Owl City"
        data-artist-url="/music/Owl+City"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="95e045a58d84ece2fe43f2bd39ebe698"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="95e045a58d84ece2fe43f2bd39ebe698"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Owl+City/_/Fireflies"
            
            
                title="Fireflies"
            
                class=""
            
        >Fireflies</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Owl+City"
            
            
                title="Owl City"
            
        >Owl City</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-7c4dd995-3b77-49e8-b27b-fac9a72e4586"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Owl+City/_/Fireflies/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-7c4dd995-3b77-49e8-b27b-fac9a72e4586"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-2ea2ef9b-e95b-4b6b-9faf-13fff2b89742"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Owl+City/_/Fireflies/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-2ea2ef9b-e95b-4b6b-9faf-13fff2b89742"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="95e045a58d84ece2fe43f2bd39ebe698"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                90
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=elueA2rofoo"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="elueA2rofoo"
    data-youtube-url="https://www.youtube.com/watch?v=elueA2rofoo"

    data-track-name="Gimme More"
    data-track-url="/music/Britney+Spears/_/Gimme+More"
    
        data-artist-name="Britney Spears"
        data-artist-url="/music/Britney+Spears"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="29159e7f5fa74697076ed110a451ce4a"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="29159e7f5fa74697076ed110a451ce4a"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Britney+Spears/_/Gimme+More"
            
            
                title="Gimme More"
            
                class=""
            
        >Gimme More</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Britney+Spears"
            
            
                title="Britney Spears"
            
        >Britney Spears</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-27895154-8238-4e2b-86f5-15d2dd9e2a68"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Britney+Spears/_/Gimme+More/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-27895154-8238-4e2b-86f5-15d2dd9e2a68"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-a0ff2bd1-2c0a-44f7-923c-8ba9e568b42b"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Britney+Spears/_/Gimme+More/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-a0ff2bd1-2c0a-44f7-923c-8ba9e568b42b"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="29159e7f5fa74697076ed110a451ce4a"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                91
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=PstrAfoMKlc"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="PstrAfoMKlc"
    data-youtube-url="https://www.youtube.com/watch?v=PstrAfoMKlc"

    data-track-name="Fighter"
    data-track-url="/music/Christina+Aguilera/_/Fighter"
    
        data-artist-name="Christina Aguilera"
        data-artist-url="/music/Christina+Aguilera"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="7a9ca1d5ae013d49372d4c4d3feb6916"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="7a9ca1d5ae013d49372d4c4d3feb6916"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Christina+Aguilera/_/Fighter"
            
            
                title="Fighter"
            
                class=""
            
        >Fighter</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Christina+Aguilera"
            
            
                title="Christina Aguilera"
            
        >Christina Aguilera</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-29111b0b-72ea-44be-bdce-17cdbdcd4201"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Christina+Aguilera/_/Fighter/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-29111b0b-72ea-44be-bdce-17cdbdcd4201"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-80e6353e-e871-4456-afe7-55ce54a45a05"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Christina+Aguilera/_/Fighter/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-80e6353e-e871-4456-afe7-55ce54a45a05"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="7a9ca1d5ae013d49372d4c4d3feb6916"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                92
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=-crgQGdpZR0"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="-crgQGdpZR0"
    data-youtube-url="https://www.youtube.com/watch?v=-crgQGdpZR0"

    data-track-name="Take a Chance on Me"
    data-track-url="/music/ABBA/_/Take+a+Chance+on+Me"
    
        data-artist-name="ABBA"
        data-artist-url="/music/ABBA"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="b41d8975671633b21c881086f20619af"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="b41d8975671633b21c881086f20619af"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/ABBA/_/Take+a+Chance+on+Me"
            
            
                title="Take a Chance on Me"
            
                class=""
            
        >Take a Chance on Me</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/ABBA"
            
            
                title="ABBA"
            
        >ABBA</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-0f9cc8b0-ce0b-4754-a803-0b30005f87ac"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/ABBA/_/Take+a+Chance+on+Me/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-0f9cc8b0-ce0b-4754-a803-0b30005f87ac"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-df46564d-5441-4a43-bb1c-45c2b40b0daa"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/ABBA/_/Take+a+Chance+on+Me/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-df46564d-5441-4a43-bb1c-45c2b40b0daa"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="b41d8975671633b21c881086f20619af"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                93
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=wmYT79tPvLg"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="wmYT79tPvLg"
    data-youtube-url="https://www.youtube.com/watch?v=wmYT79tPvLg"

    data-track-name="LDN"
    data-track-url="/music/Lily+Allen/_/LDN"
    
        data-artist-name="Lily Allen"
        data-artist-url="/music/Lily+Allen"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="9fd132d865c273f7e7b2a523ef5192f0"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="9fd132d865c273f7e7b2a523ef5192f0"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Lily+Allen/_/LDN"
            
            
                title="LDN"
            
                class=""
            
        >LDN</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Lily+Allen"
            
            
                title="Lily Allen"
            
        >Lily Allen</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-39c220f9-4878-4cf6-9759-fef71bb60c83"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Lily+Allen/_/LDN/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-39c220f9-4878-4cf6-9759-fef71bb60c83"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-3077f57f-a3b0-4050-b9e8-012e320c9e6f"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Lily+Allen/_/LDN/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-3077f57f-a3b0-4050-b9e8-012e320c9e6f"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="9fd132d865c273f7e7b2a523ef5192f0"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                94
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=Bg59q4puhmg"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="Bg59q4puhmg"
    data-youtube-url="https://www.youtube.com/watch?v=Bg59q4puhmg"

    data-track-name="Girlfriend"
    data-track-url="/music/Avril+Lavigne/_/Girlfriend"
    
        data-artist-name="Avril Lavigne"
        data-artist-url="/music/Avril+Lavigne"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="ae6b411e0e5b3d6d4d77d7de925b2108"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="ae6b411e0e5b3d6d4d77d7de925b2108"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Avril+Lavigne/_/Girlfriend"
            
            
                title="Girlfriend"
            
                class=""
            
        >Girlfriend</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Avril+Lavigne"
            
            
                title="Avril Lavigne"
            
        >Avril Lavigne</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-6cb85e29-af1d-4e0d-810d-62af8f4f3c07"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Avril+Lavigne/_/Girlfriend/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-6cb85e29-af1d-4e0d-810d-62af8f4f3c07"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-ba7c5411-5461-498f-876b-abb9a2cd1e5b"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Avril+Lavigne/_/Girlfriend/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-ba7c5411-5461-498f-876b-abb9a2cd1e5b"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="ae6b411e0e5b3d6d4d77d7de925b2108"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                95
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=6p-lDYPR2P8"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="6p-lDYPR2P8"
    data-youtube-url="https://www.youtube.com/watch?v=6p-lDYPR2P8"

    data-track-name="Material Girl"
    data-track-url="/music/Madonna/_/Material+Girl"
    
        data-artist-name="Madonna"
        data-artist-url="/music/Madonna"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="3a8faa4d1ba0b5dbfdc4502f3cc10397"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="3a8faa4d1ba0b5dbfdc4502f3cc10397"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Madonna/_/Material+Girl"
            
            
                title="Material Girl"
            
                class=""
            
        >Material Girl</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Madonna"
            
            
                title="Madonna"
            
        >Madonna</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-1d1ec319-9a64-4376-8e49-ecf877c121bb"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Madonna/_/Material+Girl/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-1d1ec319-9a64-4376-8e49-ecf877c121bb"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-0a4f7160-db4a-4feb-86e9-1abf4e4c1b8d"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Madonna/_/Material+Girl/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-0a4f7160-db4a-4feb-86e9-1abf4e4c1b8d"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="3a8faa4d1ba0b5dbfdc4502f3cc10397"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                96
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=1mB0tP1I-14"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="1mB0tP1I-14"
    data-youtube-url="https://www.youtube.com/watch?v=1mB0tP1I-14"

    data-track-name="LoveGame"
    data-track-url="/music/Lady+Gaga/_/LoveGame"
    
        data-artist-name="Lady Gaga"
        data-artist-url="/music/Lady+Gaga"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="959f29f039d36f551ecb684488301860"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="959f29f039d36f551ecb684488301860"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Lady+Gaga/_/LoveGame"
            
            
                title="LoveGame"
            
                class=""
            
        >LoveGame</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Lady+Gaga"
            
            
                title="Lady Gaga"
            
        >Lady Gaga</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-74e24652-db23-4d49-b2fe-4cc01688e7a1"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Lady+Gaga/_/LoveGame/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-74e24652-db23-4d49-b2fe-4cc01688e7a1"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-2d388ccd-26b1-459e-ac80-1c43248b28a1"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Lady+Gaga/_/LoveGame/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-2d388ccd-26b1-459e-ac80-1c43248b28a1"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="959f29f039d36f551ecb684488301860"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                97
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="dQw4w9WgXcQ"
    data-youtube-url="https://www.youtube.com/watch?v=dQw4w9WgXcQ"

    data-track-name="Never Gonna Give You Up"
    data-track-url="/music/Rick+Astley/_/Never+Gonna+Give+You+Up"
    
        data-artist-name="Rick Astley"
        data-artist-url="/music/Rick+Astley"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="3b772252408a558336583b34f892e403"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="3b772252408a558336583b34f892e403"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Rick+Astley/_/Never+Gonna+Give+You+Up"
            
            
                title="Never Gonna Give You Up"
            
                class=""
            
        >Never Gonna Give You Up</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Rick+Astley"
            
            
                title="Rick Astley"
            
        >Rick Astley</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-d4761a4f-4685-4d30-bfe8-a3a8682e894a"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Rick+Astley/_/Never+Gonna+Give+You+Up/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-d4761a4f-4685-4d30-bfe8-a3a8682e894a"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-fb2d3212-7e9f-47e5-b60b-654db9e41b70"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Rick+Astley/_/Never+Gonna+Give+You+Up/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-fb2d3212-7e9f-47e5-b60b-654db9e41b70"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="3b772252408a558336583b34f892e403"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                98
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=u4FF6MpcsRw"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="u4FF6MpcsRw"
    data-youtube-url="https://www.youtube.com/watch?v=u4FF6MpcsRw"

    data-track-name="Piece of Me"
    data-track-url="/music/Britney+Spears/_/Piece+of+Me"
    
        data-artist-name="Britney Spears"
        data-artist-url="/music/Britney+Spears"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="b72e069ff26e7851cd7c0b14c99d35dd"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="b72e069ff26e7851cd7c0b14c99d35dd"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Britney+Spears/_/Piece+of+Me"
            
            
                title="Piece of Me"
            
                class=""
            
        >Piece of Me</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Britney+Spears"
            
            
                title="Britney Spears"
            
        >Britney Spears</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-aa233539-5498-4aa8-8f51-b1367830f81c"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Britney+Spears/_/Piece+of+Me/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-aa233539-5498-4aa8-8f51-b1367830f81c"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-b7278682-717e-4bec-89fe-c13437727d4d"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Britney+Spears/_/Piece+of+Me/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-b7278682-717e-4bec-89fe-c13437727d4d"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="b72e069ff26e7851cd7c0b14c99d35dd"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                99
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=d73tiBBzvFM"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="d73tiBBzvFM"
    data-youtube-url="https://www.youtube.com/watch?v=d73tiBBzvFM"

    data-track-name="All That She Wants"
    data-track-url="/music/Ace+of+Base/_/All+That+She+Wants"
    
        data-artist-name="Ace of Base"
        data-artist-url="/music/Ace+of+Base"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="06dc319ef72fd7e3eeffb3f88ea42735"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="06dc319ef72fd7e3eeffb3f88ea42735"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Ace+of+Base/_/All+That+She+Wants"
            
            
                title="All That She Wants"
            
                class=""
            
        >All That She Wants</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Ace+of+Base"
            
            
                title="Ace of Base"
            
        >Ace of Base</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-f7846bd6-2f7c-4562-a308-aa9c324bf721"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Ace+of+Base/_/All+That+She+Wants/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-f7846bd6-2f7c-4562-a308-aa9c324bf721"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-b32873a7-2573-447d-a9b3-b4dda84daf7b"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Ace+of+Base/_/All+That+She+Wants/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-b32873a7-2573-447d-a9b3-b4dda84daf7b"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="06dc319ef72fd7e3eeffb3f88ea42735"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
                

    
    
    
    
    
    

    

    
    

    
        
    

    

    
    

    

    

    

    

    <tr
        class="
            chartlist-row
            
            
                chartlist-row--with-artist
            
            
                chartlist-row--with-buylinks
            
            
            
                js-focus-controls-container
            
            
            
            
        "

        data-scrobble-row
        data-playlist-row
        data-ajax-form-state

        
            
                itemprop="track"
            
            itemscope itemtype="http://schema.org/MusicRecording"
        

        

        

        
    >
        

        

        
            <td class="chartlist-index">
                100
            </td>
        

        

        
            <td class="chartlist-play">
                
    
        
    

    
        
        
            
            <a
                
    class="
        chartlist-play-button
        
            js-playlink
        
    "
    href="https://www.youtube.com/watch?v=qeMFqkcPYcg"
    target="_blank"

    data-playlink-affiliate="youtube"
    data-youtube-id="qeMFqkcPYcg"
    data-youtube-url="https://www.youtube.com/watch?v=qeMFqkcPYcg"

    data-track-name="Sweet Dreams (Are Made of This)"
    data-track-url="/music/Eurythmics/_/Sweet+Dreams+(Are+Made+of+This)"
    
        data-artist-name="Eurythmics"
        data-artist-url="/music/Eurythmics"
    
    title="Play on YouTube"
    
    data-analytics-action="PlayTrackOnPage"
    data-analytics-label="youtube"

    


                
            >
                
                    Play track
                
            </a>
        
    

            </td>
        

        

        

        
            <td class="chartlist-loved">
                
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="ad56d81dfc91205299d75bd1268c82af"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button chartlist-love-button"
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

            </td>
        

        <td
            class="chartlist-name"
            
                itemprop="name"
            

            
                
    
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="ad56d81dfc91205299d75bd1268c82af"
        
    
    data-toggle-button-current-state="unloved"

    

            
        >
            
            
            <a
            href="/music/Eurythmics/_/Sweet+Dreams+(Are+Made+of+This)"
            
            
                title="Sweet Dreams (Are Made of This)"
            
                class=""
            
        >Sweet Dreams (Are Made of This)</a>
        </td>

        
            <td
                class="chartlist-artist"
                
                    itemprop="byArtist"
                    itemscope itemtype="http://schema.org/MusicGroup"
                
            >
                
                    <a
            href="/music/Eurythmics"
            
            
                title="Eurythmics"
            
        >Eurythmics</a>
                
                
            </td>
        

        

        
            <td
                
                    class="chartlist-buylinks focus-control"
                
            >
                <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-89eda2be-8bbf-4554-a8aa-b8974a1ce589"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Eurythmics/_/Sweet+Dreams+(Are+Made+of+This)/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-89eda2be-8bbf-4554-a8aa-b8974a1ce589"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
            </td>
        

        
            <td class="chartlist-more focus-control">
                
    
        
        
        
        
        
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-f6928983-181e-4473-a470-3ce69ba8718e"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Eurythmics/_/Sweet+Dreams+(Are+Made+of+This)/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-f6928983-181e-4473-a470-3ce69ba8718e"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    

                    

                    
                        <li class="visible-xs">
                            
    
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="ad56d81dfc91205299d75bd1268c82af"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;Love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;Unlove this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <a
                class="toggle-button 
                                    dropdown-menu-clickable-item
                                    chartlist-more-menu-love
                                "
                href="https://secure.last.fm/login?next=/tag/pop/tracks"
                data-open-modal="/join/modal?action=love"
                >
                Love this track
            </a>
        
    </div>

    

                        </li>
                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Ftag%2Fpop%2Ftracks"
    
    
    href="https://secure.last.fm/login?next=/tag/pop/tracks"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

            </td>
        

        

        

        

        

        

        

        

        

        

    </tr>

            
        </tbody>
    </table>


                </section>
            
            
    
        

        

        <nav class="pagination">
            <h2 class="sr-only">Pagination</h2>

            <ul class="pagination-list">
                
                    <li class="pagination-previous">
                        <a href="?page=1">Previous</a>
                    </li>
                
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=1">1</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                            aria-current="page"
                        
                    >
                        
                            
                               <span>2</span>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=3">3</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=4">4</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                                pagination-page--hide-mobile
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=5">5</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                                pagination-page--hide-mobile
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=6">6</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                                pagination-page--ellipsis
                            
                        "
                        
                    >
                        
                            <span>…</span>
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=20">20</a>
                            
                        
                    </li>
                
                
                    <li class="pagination-next" data-pagination-next-link>
                        <a href="?page=3">Next</a>
                    </li>
                
            </ul>
        </nav>
    

        </div>
        <div class="col-sidebar">
            
    

    

    
    


    

    
    
        
        
            <div id="mpu_plus_top" data-ad="mpu_plus_top" class="mpu_plus_top lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;mpu_plus_top&#34;, &#34;sizes&#34;: [[300, 250], [300, 600]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mpu">
                Don't want to see ads? <a href="/pro" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Upgrade Now</a>
            </p>
        
    


    

    
        
    
        <div
            class="
                tonefuze
                
                    tonefuze--desktop
                    hidden-xs
                
                
            "
            data-require="ads/tonefuze"

            
                id="tonefuze-desktop-f71af5a7-ae59-4925-8776-cde43c1e2367"
                data-tonefuze-id="100000054"
            

            
                
                data-tonefuze-artist="Drake"
            
        ></div>
    

    

    
        
    
        <div
            class="
                tonefuze
                
                    tonefuze--mobile
                    visible-xs
                
                
            "
            data-require="ads/tonefuze"

            
                id="tonefuze-mobile-7c488b12-09a0-4b9b-a5d2-2babd49dd4d0"
                data-tonefuze-id="100000055"
            

            
                
                data-tonefuze-artist="Kendrick Lamar"
            
        ></div>
    

    

    
    
        <section class="share-desktop">
            
    <h2 class="share-heading">
        
            Share this tag:
        
    </h2>

            
    
    
    

    <ul class="share-options">
        <li class="share-option ">
            <a
                href="https://www.facebook.com/sharer/sharer.php?ref=facebooklink&amp;u=https://www.last.fm/tag/pop/tracks?page=2"
                data-analytics-social="2"
                target="_blank"
            >
                <img src="/static/images/icons/facebook.e0cc15e8e1d2.svg" alt="Facebook"></a>
            </a>
        </li>
        <li class="share-option ">
            <a
                href="https://twitter.com/intent/tweet?url=https://www.last.fm/tag/pop/tracks?page=2&amp;lang=en&amp;text=Check+out+pop"
                data-analytics-social="8"
                target="_blank"
            >
                <img src="/static/images/icons/twitter.841d4ebdbe86.svg" alt="Twitter"></a>
            </a>
        </li>
    </ul>

        </section>
    


    

        
    

        
    
        
        
            <div id="mobile_pos_4" data-ad="mobile_pos_4" class="mobile_pos_4 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_4&#34;, &#34;sizes&#34;: [[300, 250], [320, 50]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;4&#34;}}'></div>
        
        
    

        
    

        
    <div class="related-ads">
            <div
                
                    data-searchlinks-desktop
                
            ></div>
        </div>


    

    
    
    
        
        
            <div id="mpu_bottom" data-ad="mpu_bottom" class="mpu_bottom lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;mpu_bottom&#34;, &#34;sizes&#34;: [[300, 250]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}}'></div>
        
        
    


        </div>
    </div>

    </div>


        


        
    <div class="container">
        
    
        
        
            <div id="leader_bottom" data-ad="leader_bottom" class="leader_bottom lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;leader_bottom&#34;, &#34;sizes&#34;: [[728, 90], [970, 66], [728, 92]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}}'></div>
        
        
    

    </div>


        
            <div class="container page-content visible-xs">
                
    <div class="related-ads">
            <div
                
                    data-searchlinks-mobile
                
            ></div>
        </div>

            </div>
        
    </div>

    <div id="qa-page-load"></div>

    
    
        
            
    
    
    
    <div
        class="lazy-features-footer"
        data-require="components/lazy-load-v3"
        data-lazy-load-content="/features/partial/footer"
        data-lazy-load-when-on-screen
        data-lazy-load-inverted-bg
    ></div>

        
    


    
    <footer class="footer" itemscope itemtype="http://schema.org/Organization">
        <link itemprop="url" href="https://www.last.fm">

        <div class="footer-top">
            <div class="container">
                <div class="footer-top-row">
                    <div class="footer-top-col">
                        <h2 class="footer-heading">Company</h2>
                        <ul class="footer-links">
                            <li><a href="/about">About Last.fm</a></li>
                            <li><a href="/about/contact">Contact Us</a></li>
                            <li><a href="/about/jobs">Jobs</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Help</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Track My Music</a></li>
                            
                                <li><a href="https://support.last.fm/" target="_BLANK">Community Support</a></li>
                            
                            <li><a href="/help/guidelines">Community Guidelines</a></li>
                            
                                <li><a href="/help/faq" target="_BLANK">Help</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Goodies</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Download Scrobbler</a></li>
                            <li><a href="/api">Developer API</a></li>
                            <li><a href="/music/+free-music-downloads">Free Music Downloads</a></li>
                            <li><a href="https://store.last.fm">Merchandise</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Account</h2>
                        <ul class="footer-links">
                            
                                <li><a href="/join">Join</a></li>
                                <li><a href="https://secure.last.fm/login">Login</a></li>
                                <li><a href="/pro">Subscribe</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Follow Us</h2>
                        <ul class="footer-links">
                            <li><a itemprop="sameAs" target="_blank" href="https://www.facebook.com/lastfm">Facebook</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://twitter.com/lastfm">Twitter</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.instagram.com/last_fm">Instagram</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.youtube.com/user/lastfm">YouTube</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-xs-12 col-sm-9">
                        <ul id="language-selector">
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                            footer-language--active
                                        
                                    "
                                >
                                    
                                        <strong>English</strong><span class="sr-only">current language</span>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="de" />
                                            <button class="mimic-link" name="de" type="submit">Deutsch</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="es" />
                                            <button class="mimic-link" name="es" type="submit">Español</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="fr" />
                                            <button class="mimic-link" name="fr" type="submit">Français</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="it" />
                                            <button class="mimic-link" name="it" type="submit">Italiano</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="ja" />
                                            <button class="mimic-link" name="ja" type="submit">日本語</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="pl" />
                                            <button class="mimic-link" name="pl" type="submit">Polski</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="pt" />
                                            <button class="mimic-link" name="pt" type="submit">Português</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="ru" />
                                            <button class="mimic-link" name="ru" type="submit">Русский</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="sv" />
                                            <button class="mimic-link" name="sv" type="submit">Svenska</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="tr" />
                                            <button class="mimic-link" name="tr" type="submit">Türkçe</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='wAfVtihxrAUor21gwEZmppataknyVgvEi7rcKOA5FOJEnzJdW5en3MNDP9ysxXdR' />
                                            <input type="hidden" name="language" value="zh" />
                                            <button class="mimic-link" name="zh" type="submit">简体中文</button>
                                        </form>
                                    
                                </li>
                            
                        </ul>
                        
                        <p class="footer-timezone">
                            
                                Time zone: <strong>Europe/Minsk</strong>
                            
                        </p>

                        <div class="footer-legal">
                            <ul>
                                <li class="footer-legal-item"><a rel="nofollow" href="http://www.cbsinteractive.com/">CBS Interactive</a> © 2021 <span itemprop="name">Last.fm</span> Ltd. All rights reserved</li>
                                <li class="footer-legal-item"><a href="/legal/terms">Terms of Use</a></li>
                                <li class="footer-legal-item"><a href="/legal/privacy">Privacy Policy</a></li>
                                <li class="footer-legal-item"><a href="/legal">Legal Policies</a></li>
                                
                                    <li class="footer-legal-item"><a href="https://ca.privacy.cbs">California Privacy/Info We Collect</a></li>
                                    <li class="footer-legal-item"><a href="https://ca.privacy.cbs/donotsell">Do Not Sell My Personal Information</a></li>
                                
                                <li class="footer-legal-item"><a target="_blank" href="https://uk-viacomcbs.icims.com/jobs/intro">Jobs at ViacomCBS</a></li>
                                <li class="footer-legal-item"><a rel="nofollow" href="http://www.last.fm">Last.fm Music</a></li>
                            </ul>
                            
                        </div>
                    </div>


                    <div class="logo col-xs-12 col-sm-3">
                        <p>Audioscrobbler</p>
                        <img src="/static/images/footer_logo@2x.49ca51948b0a.png"
                             width="37"
                             height="20"
                             alt="Last.fm 'as' logo"
                             loading="lazy"
                        >
                    </div>
                </div>
            </div>
        </div>
    </footer>


    <section class="debug-log">
    <h2 class="debug-log-heading">API Calls</h2>
    
</section>


        </div>
        
    
        <div id="data-ads"
            data-ads-beacon
            data-ads-targeting='{&#34;geo&#34;: &#34;BY&#34;, &#34;lang&#34;: &#34;en&#34;, &#34;beta&#34;: &#34;yes&#34;, &#34;ptype&#34;: &#34;tag_tracks&#34;, &#34;tag&#34;: &#34;pop,femalevocalists,rock,dance,80s,electronic,indie&#34;}'
            data-ads-unitname='/8264/row-lastfm/tag/tracks'
            data-ads-unitname-mobile='/8264/maw-lastfm/tag/tracks'
            data-ads-zone='/tag/tracks'
            data-ads-env='prod'
        ></div>
    

    </div>

    
        <div
            data-require="player/providers/spotify/spotify-provider"
            data-spotify-auth-modal="/player/modal/spotify"
            data-spotify-premium-modal="/player/modal/spotify-premium"
            data-spotify-inactive-modal="/player/modal/spotify-inactive"
            data-spotify-initial-device-modal="/player/modal/spotify-initial-device-detection"
        ></div>

        <div
            data-require="player/providers/youtube/youtube-provider"
            class="video-player"
            aria-hidden="true"
            id="youtube-video"
        >
            <div class="video-player-inner-wrap">
                <div class="video-player-embed js-player"></div>
                <button class="
                    video-player-close
                    js-close-player
                ">Close</button>
            </div>
        </div>
    


        
            
        
        
            
    
        
        
            <div id="intromercial" data-ad="intromercial" class="intromercial lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;intromercial&#34;, &#34;out_of_page&#34;: true}'></div>
        
        
    

            
    
        
        
            <div id="mobile_intromercial" data-ad="mobile_intromercial" class="mobile_intromercial lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_intromercial&#34;, &#34;is_mobile&#34;: true, &#34;out_of_page&#34;: true}'></div>
        
        
    

        
        
            
        

        <script class="js-modal-template" type="text/template">
            <div class="modal-dialog" role="dialog" aria-labelledby="modal-label">
                <div class="modal-content" data-require="stats/base-v3">
                    <div class="modal-actions">
                        
                        <button class="modal-dismiss js-close sr-only">Close</button>
                    </div>
                    <div js-modal-body class="modal-body">
                    </div>
                </div>
            </div>
        </script>

        <script>
            var immediateUseBidBarrelFunctions = ['auction', 'initialize', 'setTargeting', 'destroySlots', 'setConfig', 'on', 'setLazyLoad'];
            (function(a){
                var w=window,b='BidBarrel',q='queue';w[b]=w[b]?w[b]:{};w[b][q]=w[b][q]?w[b][q]:[];
                a.forEach(function(z){w[b][z]=w[b][z]||function(){var c=arguments;w[b][q].push(function(r){w[b][z].apply(w[b],c);r()})}});
            })(immediateUseBidBarrelFunctions);
        </script><script id="bb-lib" async src="https://at.cbsi.com/lib/dist/prod/bidbarrel-lastfm.min.js"></script>
        
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--adfree
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Browse ad-free</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageAdfree"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageAdfree"
            ></a>
        </section>
    </div></div>

            </script>
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--support
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Show your support</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageSupport"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageSupport"
            ></a>
        </section>
    </div></div>

            </script>
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--benefits
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Get exclusive benefits</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageBenefits"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageBenefits"
            ></a>
        </section>
    </div></div>

            </script>
        

        <script>
            window.lfmDomReadyCallback && window.lfmDomReadyCallback();
            window.lfmDomReady = true;
        </script>
        
            <link
                href="/static/styles/build/app-68f3a962fd.345be2f4907b.css"
                rel="preload"
                as="style"
                charset="utf-8"
                data-require="shim/rel-preload"
                media="(min-width: 768px)" 
            >
        
    </body>
</html>
  recorded_at: Thu, 27 May 2021 09:06:28 GMT
recorded_with: VCR 6.0.0
