---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/tag/dream+pop/artists?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.3p157
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/tag/dream+pop/artists?page=2
      Etag:
      - W/"f22737785147b77447d82e820e0fbfc9"
      X-Frame-Options:
      - SAMEORIGIN
      Content-Language:
      - en
      Set-Cookie:
      - lfmanon=1; Path=/
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjQ2MGUzNzViLTE4NzAtNDU1ZC1hNzY1LWY3NjM2N2VkZmM1OSJ9:1n00if:wz_uaghE4ondHr1-5PowLp-OGm0;
        Domain=.last.fm; expires=Thu, 22-Dec-2022 12:27:45 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 22 Dec 2021 12:27:45 GMT
      X-Served-By:
      - prod-lfm-web-7d6578766-v9jt2, cache-hhn4039-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1640176065.806507,VS0,VE285
      Vary:
      - Accept-Encoding, Accept-Language, Cookie
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 22 Dec 2021 12:27:45 GMT
recorded_with: VCR 6.0.0
