---
http_interactions:
- request:
    method: get
    uri: https://rateyourmusic.com/search?page=2&searchterm=a&searchtype=a
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.1p64
      Cookie:
      - sec_bs=<RATEYOURMUSIC_SEC_BS>; sec_id=<RATEYOURMUSIC_SEC_ID>; sec_ts=<RATEYOURMUSIC_SEC_TS>;
        ulv=fB/B8JcwZPMGZXIXFDHsoktqP8HROq4c6gMvUJe8zG0E3RnjFP8T/NMdi23miMPH1620222166070929
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - rateyourmusic.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 14 Jun 2021 05:14:13 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Keep-Alive:
      - timeout=60
      Set-Cookie:
      - is_logged_in=1; Expires=Tue, 01-Jan-2030 01:00:00 GMT; Path=/; HttpOnly;
      - sec_bs=b9729997d1f2a1c1688df7697ec4abcc; Expires=Mon, 14-Jun-2021 12:36:33
        GMT; Path=/; secure; HttpOnly;
      - sec_id=e42cb2c17587b83bc2d95e2e02cb0776; Expires=Mon, 14-Jun-2021 12:36:33
        GMT; Path=/; secure; HttpOnly;
      - sec_ts=1623672693; Expires=Mon, 14-Jun-2021 12:36:33 GMT; Path=/; secure;
        HttpOnly;
      Mime-Version:
      - '1.0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIiBpZD0icGFnZV9zZWFyY2giIGNsYXNzPSJyeW0gcGFnZV9zZWFyY2ggc2NvcGVfbXVzaWMiPgo8aGVhZD4KCiAgICAgIAo8bGluayByZWw9InByZWNvbm5lY3QiIGhyZWY9Ii8vZS5zbm1jLmlvIiAvPgo8bGluayByZWw9InByZWNvbm5lY3QiIGhyZWY9Ii8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tIiAvPgo8bGluayByZWw9ImRucy1wcmVmZXRjaCIgaHJlZj0iLy9pYi5hZG54cy5jb20iIC8+CjxsaW5rIHJlbD0iZG5zLXByZWZldGNoIiBocmVmPSIvL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldCIgLz4KPGxpbmsgcmVsPSJkbnMtcHJlZmV0Y2giIGhyZWY9Ii8vdHBjLmdvb2dsZXN5bmRpY2F0aW9uLmNvbSIgLz4KPGxpbmsgcmVsPSJkbnMtcHJlZmV0Y2giIGhyZWY9Ii8vcGFnZWFkMi5nb29nbGVzeW5kaWNhdGlvbi5jb20iIC8+CjxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPXllcyIgLz4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiIC8+CjxsaW5rIHJlbD0iaWNvbiIgaHJlZj0iLy9lLnNubWMuaW8vMi41L2ltZy9zb25lbWljLnBuZyIgdHlwZT0iaW1hZ2UvcG5nIiAvPgo8dGl0bGU+U2VhcmNoIC0gUmF0ZSBZb3VyIE11c2ljPC90aXRsZT4KICAgICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlJhdGUgWW91ciBNdXNpYyBpcyBhbiBvbmxpbmUgY29tbXVuaXR5IG9mIHBlb3BsZSB3aG8gbG92ZSBtdXNpYy4gQ2F0YWxvZywgcmF0ZSwgdGFnLCBhbmQgcmV2aWV3IHlvdXIgbXVzaWMuIExpc3QgYW5kIHJldmlldyB0aGUgY29uY2VydHMgeW91J3ZlIGF0dGVuZGVkLCBhbmQgdHJhY2sgdXBjb21pbmcgc2hvd3MuICAgV2hlbiB5b3UgcmF0ZSB5b3VyIG11c2ljLCB0aGUgc2l0ZSdzIG11c2ljL3NvY2lhbCByZWNvbW1lbmRlciBjYW4gcmVjb21tZW5kIHNpbWlsYXIgbXVzaWMgYW5kIHVzZXJzIHdpdGggc2ltaWxhciBtdXNpYyB0YXN0ZS4iIC8+CiAgICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJyYXRlIHlvdXIgbXVzaWMsIHNvbmVtaWMsIHJhdGUgbXVzaWMsIHJhdGUgYWxidW1zLCBtdXNpYyBjYXRhbG9nLCBtdXNpYyBjYXRhbG9ndWUsIHNvY2lhbCBzb2Z0d2FyZSwgYWxidW0gcmV2aWV3cywgbXVzaWMgbGlzdHMsIGNvbW11bml0eSwgbXVzaWMgcmVjb21tZW5kYXRpb25zLCBjb25jZXJ0IGxpc3RpbmdzLCByZWNvcmQgbGFiZWxzLCB2ZW51ZXMsIHNob3dzIiAvPgogICAgICAgICA8bWV0YSBuYW1lPSJyb2JvdHMiIGNvbnRlbnQ9Im1heC1pbWFnZS1wcmV2aWV3OmxhcmdlIiAvPgogICAgICA8c2NyaXB0PiB3aW5kb3cucnltX2Rpc3RfdmVyc2lvbiA9ICc3MGRlNjdlZi1kMzUwLTQyZDAtOTg1YS00MWVlZjRhMWNjZDgnOzwvc2NyaXB0PiAKICAgICAgPHNjcmlwdD4KICAgICAgICAgcnltaW5pdCA9IHdpbmRvdy5yeW1pbml0IHx8IFtdOwoKICAgICAgICAgZnVuY3Rpb24gcnltUSggYSApIHsKICAgICAgICAgICAgaWYgKCAhcnltaW5pdCApIHsKICAgICAgICAgICAgICAgYSgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICByeW1pbml0LnB1c2goYSk7CiAgICAgICAgICAgIH0KICAgICAgICAgfQogICAgICAgIGlmICggJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICkgewogICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTmFtZSArPSAnIHRvdWNoJzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTmFtZSArPSAnIG5vVG91Y2gnOwogICAgICAgIH0KCiAgICAgIDwvc2NyaXB0PgogICAgICA8c3R5bGUgaWQ9ImJhc2UiPiosKjo6YmVmb3JlLCo6OmFmdGVye21hcmdpbjowO3BhZGRpbmc6MDtib3gtc2l6aW5nOmJvcmRlci1ib3h9aHRtbHtmb250LXNpemU6NjIuNSV9Ym9keXtmb250LWZhbWlseToiUHJveGltYU5vdmEiLEhlbHZldGljYSxWZXJkYW5hLEFyaWFsLFNhbnMtU2VyaWY7Zm9udC1zaXplOjEycHh9aDEsaDIsaDMsaDQsaDV7Zm9udC13ZWlnaHQ6bm9ybWFsO21hcmdpbjowO21hcmdpbi1ib3R0b206LjI1ZW19aDF7Zm9udC1zaXplOjIuNWVtO2ZvbnQtd2VpZ2h0OmJvbGR9aDJ7Zm9udC1zaXplOjIuMmVtfWgze2ZvbnQtc2l6ZToxLjllbX1oNHtmb250LXNpemU6MS42ZW19aDV7Zm9udC1zaXplOjEuNWVtfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDo0OGVtKXtoMXtmb250LXNpemU6MmVtO2ZvbnQtd2VpZ2h0OmJvbGR9aDJ7Zm9udC1zaXplOjEuOWVtfWgze2ZvbnQtc2l6ZToxLjhlbX1oNHtmb250LXNpemU6MS43ZW19aDV7Zm9udC1zaXplOjEuNWVtfX1we2xpbmUtaGVpZ2h0OjEuNmVtO21hcmdpbi1ib3R0b206MWVtfWJsb2NrcXVvdGV7bWFyZ2luOjAgMS41ZW19dGFibGV7d2lkdGg6MTAwJTtib3JkZXItY29sbGFwc2U6Y29sbGFwc2V9dGR7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO3BhZGRpbmc6NXB4fXRye2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZX0uYW5jaG9ye3Njcm9sbC1tYXJnaW4tdG9wOjNlbX1hLmFydGlzdCxhLmdhbWUsYS53b3JrLm1ham9yLGEudXNlcixhLmZpbG0sYS5maWxtX2FydGlzdHtmb250LXdlaWdodDpib2xkfWltZy5sYXp5bG9hZDpub3QoW3NyY10pe3Zpc2liaWxpdHk6aGlkZGVufWltZy5jb3Zlcnt3aWR0aDoyLjhlbTtoZWlnaHQ6Mi44ZW07ZmxvYXQ6bGVmdDtvYmplY3QtZml0OmNvdmVyO2JvcmRlci1yYWRpdXM6NHB4O21hcmdpbi1yaWdodDouNzVlbX1pbWcuc2l6ZV8ye3dpZHRoOjJlbTtoZWlnaHQ6MmVtfWltZy5pbWFnZV9yZWxlYXNle3dpZHRoOjIuOGVtO2hlaWdodDoyLjhlbTtmbG9hdDpsZWZ0O29iamVjdC1maXQ6Y292ZXI7Ym9yZGVyLXJhZGl1czo0cHg7bWFyZ2luLXJpZ2h0Oi43NWVtO292ZXJmbG93OmhpZGRlbn1pbnB1dCxzZWxlY3QsdGV4dGFyZWEsLmlucHV0X2F1dG9fcmVzaXplX2ZyYW1lLC5pbnB1dF9hdXRvX3Jlc2l6ZV9mcmFtZTo6YWZ0ZXJ7Zm9udC1zaXplOjE2cHg7Zm9udC13ZWlnaHQ6bm9ybWFsO3BhZGRpbmc6LjE1ZW07Ym9yZGVyLXJhZGl1czozcHg7YmFja2dyb3VuZDp2YXIoLS1tb25vLWYpO2NvbG9yOnZhcigtLW1vbm8tMyk7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1tb25vLWEpO2ZvbnQtZmFtaWx5OiJQcm94aW1hIE5vdmEiLFZlcmRhbmEsQXJpYWwsc2Fucy1zZXJpZn10ZXh0YXJlYXt3aWR0aDoxMDAlfWlucHV0OmRpc2FibGVkLHNlbGVjdDpkaXNhYmxlZCx0ZXh0YXJlYTpkaXNhYmxlZHtjb2xvcjp2YXIoLS1tb25vLTgpO2JhY2tncm91bmQ6dmFyKC0tbW9uby1lKX1zZWxlY3R7bWluLXdpZHRoOjhlbX1sYWJlbHtmb250LXdlaWdodDpib2xkfS5vdmVybGF5X2ludmlzaWJsZXtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjEpO3otaW5kZXg6NDU7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7ZGlzcGxheTpub25lfS5jb250ZW50X3dyYXBwZXJfb3V0ZXJ7eGJhY2tncm91bmQ6dmFyKC0tbW9uby1mMik7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtc2l6ZTpjb3ZlciFpbXBvcnRhbnQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIgY2VudGVyIWltcG9ydGFudH0ucHJlY29udGVudHstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEsMSwxKTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTEwMHZoO2xlZnQ6MDtoZWlnaHQ6MTAwdmg7YmFja2dyb3VuZC1zaXplOmNvdmVyIWltcG9ydGFudDt3aWR0aDoxMDAlO3otaW5kZXg6LTF9I2NvbnRlbnRfY292ZXJ7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDo3MDAwO2JhY2tncm91bmQ6cmdiYSgwLDAsMTUsLjYpO2Rpc3BsYXk6bm9uZX0jY29udGVudF90b3RhbF9jb3Zlcntwb3NpdGlvbjpmaXhlZDogdG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7ei1pbmRleDo1MDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjEpfWJvZHkuaGFzX2JhY2tncm91bmRfaW1hZ2UgI2NvbnRlbnRfd3JhcHBlcntiYWNrZ3JvdW5kOnJnYmEoNDksNDksNDksLjIpO21hcmdpbjowIGF1dG87bWF4LXdpZHRoOjEzMi41ZW07cGFkZGluZy1sZWZ0OjJweDtwYWRkaW5nLXJpZ2h0OjJweH0jY29udGVudF9jb3Zlcnt6LWluZGV4OjkwMH0jY29udGVudHtwYWRkaW5nOjNlbTtmb250LXNpemU6MS4yNWVtO2xpbmUtaGVpZ2h0OjEuMztiYWNrZ3JvdW5kOnZhcigtLW1vbm8tZik7bWluLWhlaWdodDpjYWxjKDEwMHZoKTttYXgtd2lkdGg6MTA2ZW07bWFyZ2luOjAgYXV0bzttYXJnaW4tdG9wOjRyZW19aHRtbC5zaXplX21vZGVfc21hbGxlciAjY29udGVudHtmb250LXNpemU6MS4xNWVtO2xpbmUtaGVpZ2h0OjEuMjU7bWF4LXdpZHRoOjExNWVtfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDo0OGVtKXsjY29udGVudHttYXJnaW4tdG9wOjA7cGFkZGluZzouNWVtfX0uc21hbGxncmF5LGEuc21hbGxncmF5e2ZvbnQtc2l6ZTouOWVtfS5lcnJvcntwYWRkaW5nOi41ZW0gMS41ZW07bWFyZ2luLWJvdHRvbToxZW19LmNvZGV7Zm9udC1mYW1pbHk6IkNvdXJpZXIgbmV3Iixtb25vc3BhY2U7Ym9yZGVyLWxlZnQ6NXB4IHNvbGlkO3BhZGRpbmc6MWVtfS5ub3Rle2JvcmRlcjoxcHggc29saWQ7cGFkZGluZzoxZW0gMmVtfS53YXJuaW5ne3BhZGRpbmc6MWVtIDJlbTttYXJnaW4tYm90dG9tOjFlbX0ud2FybmluZyBwe21hcmdpbjowfS5ub3RpY2V7cGFkZGluZzoxZW0gMmVtO2NvbG9yOnZhcigtLW1vbm8tOCk7Zm9udC1zaXplOi45ZW07bWFyZ2luLWJvdHRvbToxZW19Lm5vdGljZSBwe21hcmdpbjowfS5jbGVhciwuY2xlYXJmaXh7Y2xlYXI6Ym90aH0uY29tbWFfc2VwYXJhdGVkOmFmdGVye2NvbnRlbnQ6IiwgIn0uY29tbWFfc2VwYXJhdGVkOmxhc3QtY2hpbGQ6YWZ0ZXJ7Y29udGVudDoiIn0uc2hvdy1mb3Itc21hbGwtdGFibGUtcm93e2Rpc3BsYXk6bm9uZX0uc2hvdy1mb3Itc21hbGwtaW5saW5le2Rpc3BsYXk6bm9uZX0uaGlkZS1mb3Itc21hbGwtYmxvY2t7ZGlzcGxheTpub25lfS5oaWRlLWZvci1zbWFsbC1pbmxpbmV7ZGlzcGxheTpub25lfS5zaG93LWZvci1zbWFsbHtkaXNwbGF5Om5vbmV9LmhpZGUtZm9yLXNtYWxse2Rpc3BsYXk6bm9uZX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDQ4LjA2M2VtKXsuaGlkZS1mb3Itc21hbGwtYmxvY2t7ZGlzcGxheTpibG9ja30uaGlkZS1mb3Itc21hbGx7ZGlzcGxheTppbmhlcml0fS5oaWRlLWZvci1zbWFsbC1pbmxpbmV7ZGlzcGxheTppbmxpbmV9dHIuaGlkZS1mb3Itc21hbGx7ZGlzcGxheTp0YWJsZS1yb3d9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDhlbSl7LnNob3ctZm9yLXNtYWxse2Rpc3BsYXk6aW5oZXJpdCFpbXBvcnRhbnR9LnNob3ctZm9yLXNtYWxsLWlubGluZXtkaXNwbGF5OmlubGluZSFpbXBvcnRhbnR9LnNob3ctZm9yLXNtYWxsLXRhYmxlLXJvd3tkaXNwbGF5OnRhYmxlLXJvd319CkBmb250LWZhY2V7Zm9udC1mYW1pbHk6IlByb3hpbWFOb3ZhIjtzcmM6dXJsKGh0dHBzOi8vZS5zbm1jLmlvLzMuMC9mb250L1Byb3hpbWEtTm92YS9SZWd1bGFyLndvZmYyP2QpIGZvcm1hdCgid29mZjIiKSx1cmwoaHR0cHM6Ly9lLnNubWMuaW8vMy4wL2ZvbnQvUHJveGltYS1Ob3ZhL1JlZ3VsYXIud29mZj9kKSBmb3JtYXQoIndvZmYiKTtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC1kaXNwbGF5OnN3YXB9QGZvbnQtZmFjZXtmb250LWZhbWlseToiUHJveGltYU5vdmEiO3NyYzp1cmwoaHR0cHM6Ly9lLnNubWMuaW8vMy4wL2ZvbnQvUHJveGltYS1Ob3ZhL0JvbGQud29mZjI/ZCkgZm9ybWF0KCJ3b2ZmMiIpLHVybChodHRwczovL2Uuc25tYy5pby8zLjAvZm9udC9Qcm94aW1hLU5vdmEvQm9sZC53b2ZmP2QpIGZvcm1hdCgid29mZiIpO2ZvbnQtd2VpZ2h0OjcwMDtmb250LWRpc3BsYXk6c3dhcDtmb250LXN0eWxlOm5vcm1hbH1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OiJGb250IEF3ZXNvbWUgNSBGcmVlIjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo0MDA7Zm9udC1kaXNwbGF5OnN3YXA7c3JjOnVybChodHRwczovL2Uuc25tYy5pby8zLjAvZm9udC9mYS0yMDIxLTAzLTAyL2ZhLXJlZ3VsYXItNDAwLndvZmYyP2IpIGZvcm1hdCgid29mZjIiKSx1cmwoaHR0cHM6Ly9lLnNubWMuaW8vMy4wL2ZvbnQvZmEtMjAyMS0wMy0wMi9mYS1yZWd1bGFyLTQwMC53b2ZmP2IpIGZvcm1hdCgid29mZiIpfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6IkZvbnQgQXdlc29tZSA1IEJyYW5kcyI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtZGlzcGxheTpzd2FwO3NyYzp1cmwoaHR0cHM6Ly9lLnNubWMuaW8vMy4wL2ZvbnQvZmEtMjAyMS0wMy0wMi9mYS1icmFuZHMtNDAwLndvZmYyP2IpIGZvcm1hdCgid29mZjIiKSx1cmwoaHR0cHM6Ly9lLnNubWMuaW8vMy4wL2ZvbnQvZmEtMjAyMS0wMy0wMi9mYS1icmFuZHMtNDAwLndvZmY/YikgZm9ybWF0KCJ3b2ZmIil9QGZvbnQtZmFjZXtmb250LWZhbWlseToiRm9udCBBd2Vzb21lIDUgRnJlZSI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6OTAwO2ZvbnQtZGlzcGxheTpzd2FwO3NyYzp1cmwoaHR0cHM6Ly9lLnNubWMuaW8vMy4wL2ZvbnQvZmEtMjAyMS0wMy0wMi9mYS1zb2xpZC05MDAud29mZjI/YikgZm9ybWF0KCJ3b2ZmMiIpLHVybChodHRwczovL2Uuc25tYy5pby8zLjAvZm9udC9mYS0yMDIxLTAzLTAyL2ZhLXNvbGlkLTkwMC53b2ZmP2IpIGZvcm1hdCgid29mZiIpfQo8L3N0eWxlPjxzY3JpcHQgaWQ9ImJhc2Vfc2NyaXB0Ij53aW5kb3cucnltX2Rpc3QgPSAnLy9lLnNubWMuaW8nOwp2YXIgbj0oZSx0LHMpPT5uZXcgUHJvbWlzZSgoZCxyKT0+e3ZhciBsPW89Pnt0cnl7YShzLm5leHQobykpfWNhdGNoKGkpe3IoaSl9fSxjPW89Pnt0cnl7YShzLnRocm93KG8pKX1jYXRjaChpKXtyKGkpfX0sYT1vPT5vLmRvbmU/ZChvLnZhbHVlKTpQcm9taXNlLnJlc29sdmUoby52YWx1ZSkudGhlbihsLGMpO2EoKHM9cy5hcHBseShlLHQpKS5uZXh0KCkpfSk7d2luZG93LlJZTXRlbXBsYXRlPXdpbmRvdy5SWU10ZW1wbGF0ZXx8e307ZnVuY3Rpb24gZW5zdXJlVGVtcGxhdGVMb2FkZWQoZSl7cmV0dXJuIG4odGhpcyxudWxsLGZ1bmN0aW9uKigpe2lmKGNvbnNvbGUubG9nKCJlbnN1cmVUZW1wbGF0ZUxvYWRlZDogIitlKSxSWU10ZW1wbGF0ZVtlXSlyZXR1cm47bGV0IHQ9W107cmV0dXJuIHlpZWxkIGltcG9ydCgod2luZG93LnJ5bV9kaXN0fHwiLy9lLnNubWMuaW8iKSsiL2Rpc3QvdGVtcGxhdGUvIitlKyIuanM/dj0iK3dpbmRvdy5yeW1fZGlzdF92ZXJzaW9uKS50aGVuKGQ9Pntjb25zb2xlLmxvZygiZGVwZW5kZW5jaWVzOiAiK2QuY29tcGlsZWRUZW1wbGF0ZS5kZXBlbmRlbmNpZXMpLHQ9ZC5jb21waWxlZFRlbXBsYXRlLmRlcGVuZGVuY2llcy5tYXAocj0+ZW5zdXJlVGVtcGxhdGVMb2FkZWQocikpLHdpbmRvdy5SWU10ZW1wbGF0ZVtlXT1kLmNvbXBpbGVkVGVtcGxhdGUudGVtcGxhdGV9KSxjb25zb2xlLmxvZygicHJvbWlzZSBhcnJheSBoYXMgIit0Lmxlbmd0aCksUHJvbWlzZS5hbGwodCl9KX1mdW5jdGlvbiByZW5kZXJUZW1wbGF0ZShlLHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBuKHRoaXMsbnVsbCxmdW5jdGlvbiooKXtyZXR1cm4gd2luZG93LlJZTXRlbXBsYXRlPXdpbmRvdy5SWU10ZW1wbGF0ZXx8e30sUllNdGVtcGxhdGVbZV18fChjb25zb2xlLmxvZygiY2FsbGluZyBlbnN1cmVUZW1wbGF0ZUxvYWRlZDogIitlKSx5aWVsZCBlbnN1cmVUZW1wbGF0ZUxvYWRlZChlKSxjb25zb2xlLmxvZygiY2FsbGluZyByZW5kZXI6ICIrZSkpLFJZTXRlbXBsYXRlW2VdLnJlbmRlcih0LFJZTXRlbXBsYXRlKX0pfSgpfWZ1bmN0aW9uIGFwcGx5TGF6eUxvYWRCZWhhdmlvcihlLHQpe2UuY2xhc3NMaXN0LnJlbW92ZSgibGF6eWxvYWQiKSxlLmNsYXNzTGlzdC5hZGQoImxhenlsb2FkLWNvbXBsZXRlIiksZS5kYXRhc2V0LnNyY3NldCYmKGUuc3Jjc2V0PWUuZGF0YXNldC5zcmNzZXQsZGVsZXRlIGUuZGF0YXNldC5zcmNzZXQpLHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvPjEmJmUuZGF0YXNldC5ia2cyeD8oZS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9YHVybCgnJHtlLmRhdGFzZXQuYmtnMnh9JylgLGRlbGV0ZSBlLmRhdGFzZXQuYmtnMngsZGVsZXRlIGUuZGF0YXNldC5ia2cpOmUuZGF0YXNldC5ia2cmJihlLnN0eWxlLmJhY2tncm91bmRJbWFnZT1gdXJsKCcke2UuZGF0YXNldC5ia2d9JylgLGRlbGV0ZSBlLmRhdGFzZXQuYmtnKSxlLmRhdGFzZXQuc3JjJiYoZS5zcmM9ZS5kYXRhc2V0LnNyYyxkZWxldGUgZS5kYXRhc2V0LnNyYyksZS5kYXRhc2V0LnN1Z2dlc3Rpb25zJiYoY29uc29sZS5sb2coImxvYWRpbmcgc3VnZ2VzdGlvbnMiKSxSWU1zdWdnZXN0aW9ucy5sb2FkKCQoZSkpKSwhdCYmZS5kYXRhc2V0LmFkY29kZSYmYWRWaXNpYmlsaXR5Q2hhbmdlZChlLmRhdGFzZXQuYWRjb2RlKX13aW5kb3cucmVmcmVzaExhenlMb2FkTGlzdD1mdW5jdGlvbigpe2NvbnN0IGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLmxhenlsb2FkIik7Zm9yKGxldCBzPTA7czxlLmxlbmd0aDtzKyspdHlwZW9mIHdpbmRvdy5sYXp5bG9hZE9ic2VydmVyIT0idW5kZWZpbmVkIj93aW5kb3cubGF6eWxvYWRPYnNlcnZlci5vYnNlcnZlKGVbc10pOmFwcGx5TGF6eUxvYWRCZWhhdmlvcihlW3NdLCEwKTtjb25zdCB0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIi5sYXp5bG9hZC1hZCIpO2ZvcihsZXQgcz0wO3M8dC5sZW5ndGg7cysrKXR5cGVvZiB3aW5kb3cubGF6eWxvYWRPYnNlcnZlckFkcyE9InVuZGVmaW5lZCI/d2luZG93Lmxhenlsb2FkT2JzZXJ2ZXJBZHMub2JzZXJ2ZSh0W3NdKTphcHBseUxhenlMb2FkQmVoYXZpb3IodFtzXSwhMCl9LHJ5bVEoZnVuY3Rpb24oKXt0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIhPSJ1bmRlZmluZWQiJiYod2luZG93Lmxhenlsb2FkT2JzZXJ2ZXI9bmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGU9Pntmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKylpZihlW3RdLmlzSW50ZXJzZWN0aW5nKXtjb25zdCBzPWVbdF0udGFyZ2V0O2xhenlsb2FkT2JzZXJ2ZXIudW5vYnNlcnZlKHMpLGFwcGx5TGF6eUxvYWRCZWhhdmlvcihzLCExKX19LHtyb290TWFyZ2luOiIzMDBweCA1MHB4IDMwMHB4IDUwcHgifSksd2luZG93Lmxhenlsb2FkT2JzZXJ2ZXJBZHM9bmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGU9Pntmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKylpZihlW3RdLmlzSW50ZXJzZWN0aW5nKXtjb25zdCBzPWVbdF0udGFyZ2V0O2xhenlsb2FkT2JzZXJ2ZXJBZHMudW5vYnNlcnZlKHMpLGFwcGx5TGF6eUxvYWRCZWhhdmlvcihzLCExKX19LHtyb290TWFyZ2luOiIxMHB4IDBweCAxMHB4IDBweCJ9KSl9KSxyeW1RKGZ1bmN0aW9uKCl7cmVmcmVzaExhenlMb2FkTGlzdCgpfSk7Cjwvc2NyaXB0PjxsaW5rIGlkPSJjc3MtYnVuZGxlIiByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii8vZS5zbm1jLmlvL2Rpc3QvY3NzL2J1bmRsZS5jc3M/dj03MGRlNjdlZi1kMzUwLTQyZDAtOTg1YS00MWVlZjRhMWNjZDgiIHR5cGU9InRleHQvY3NzIiAvPjxsaW5rIGlkPSJjc3MtcGFnZS1zZWFyY2giIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9lLnNubWMuaW8vZGlzdC9jc3MvcGFnZS9zZWFyY2guY3NzP3Y9NzBkZTY3ZWYtZDM1MC00MmQwLTk4NWEtNDFlZWY0YTFjY2Q4IiB0eXBlPSJ0ZXh0L2NzcyIgLz4KCiAgICAgICAgICAgICAgIDxzdHlsZT4KCiAgICAgICAgICAgICAgICAgIC51aV9mdW5kcmFpc2VyX2xldHRlcl9kYXRlIHsKICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjpyaWdodDsKICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbToxZW07CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIC51aV9mdW5kcmFpc2VyX2xldHRlciB7CiAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgdmFyKC0tbW9uby1mKSwgdmFyKC0tbW9uby1mOCkpOwogICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OjFweCAxcHggNXB4IHJnYmEoMCwwLDAsMC4yKTsKICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzoyZW0gNGVtOwogICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6MS4xZW07CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIC51aV9mdW5kcmFpc2VyX2xldHRlcl9idXR0b25fc3VidGV4dCB7CiAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTowLjhlbTsKICAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6bm9ybWFsOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAudWlfZnVuZHJhaXNlcl9sZXR0ZXJfYnV0dG9uIHsKICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OjMuNWVtOwogICAgICAgICAgICAgICAgICAgICB3aWR0aDo0NSU7CiAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OjEuMjsKICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OjIlOwogICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOjFlbTsKICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6bGVmdDsKICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTpmbGV4OwogICAgICAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjpjb2x1bW47CiAgICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOmNlbnRlcjsKICAgICAgICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OmNlbnRlcjsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgLnVpX2Z1bmRyYWlzZXJfbGV0dGVyX2J1dHRvbl9zdWJzY3JpYmUsIC51aV9mdW5kcmFpc2VyX2xldHRlcl9idXR0b25fc3Vic2NyaWJlOmhvdmVyIHsKICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tZ2VuLWJsdWUtZGFyayk7CiAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1tb25vLWFicy1mKTsKICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAgIC51aV9mdW5kcmFpc2VyX2xldHRlcl9idXR0b25fZG9uYXRlIHsKCiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIC51aV9mdW5kcmFpc2VyX2Jhcl9vdXRsaW5lIHsKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOjFweCBzb2xpZCB2YXIoLS1tb25vLWQ4KTsKICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OjFlbTsKICAgICAgICAgICAgICAgICAgICAgd2lkdGg6MTAwJTsKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czoxZW07CiAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OmhpZGRlbjsKICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDp2YXIoLS1tb25vLWY4KTsKICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIC51aV9mdW5kcmFpc2VyX2Jhcl9mcmFtZSB7CiAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6NiU7CiAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206MmVtOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAudWlfZnVuZHJhaXNlcl9iYXJfaW5uZXIgewogICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTsKICAgICAgICAgICAgICAgICAgICAgdG9wOjA7CiAgICAgICAgICAgICAgICAgICAgIGxlZnQ6MDsKICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OjFlbTsKICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDpjcmltc29uOwoKICAgICAgICAgICAgICAgICAgICAgd2lkdGg6NTAlCiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIC51aV9mdW5kcmFpc2VyX2Jhcl9sZWdlbmQgewogICAgICAgICAgICAgICAgICAgICB3aWR0aDoxMDAlOwogICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6M2VtOwogICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOjAuMmVtOwogICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6MC44ZW07CiAgICAgICAgICAgICAgICAgICAgIGNvbG9yOnZhcigtLW1vbm8tNSk7CiAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAudWlfZnVuZHJhaXNlcl9iYXJfbGVnZW5kX2l0ZW0gewogICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTsKICAgICAgICAgICAgICAgICAgICAgdG9wOjA7CiAgICAgICAgICAgICAgICAgICAgIHotaW5kZXg6MTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgLnVpX2Z1bmRyYWlzZXJfYmFyX2xlZ2VuZF9zdGFydCB7CiAgICAgICAgICAgICAgICAgICAgIGxlZnQ6MDsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgLnVpX2Z1bmRyYWlzZXJfYmFyX2xlZ2VuZF9mdW5kcmFpc2VyX2dvYWwgewogICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6MzcuMzIlOwogICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjpyaWdodDsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgLnVpX2Z1bmRyYWlzZXJfYmFyX2xlZ2VuZF9sb25ndGVybV9nb2FsIHsKICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6MDsKICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjpyaWdodDsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgLnVpX2Z1bmRyYWlzZXJfYmFyX2dvYWxfZGl2aWRlciB7CiAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOmFic29sdXRlOwogICAgICAgICAgICAgICAgICAgICB0b3A6MDsKICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OjM3LjMyJTsKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDoxZW07CiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDoxcHg7CiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOnZhcigtLW1vbm8tOCkgICAgICAgICAKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgLnVpX2Z1bmRyYWlzZXJfbGV0dGVyX2NvbnRlbnRzIHsKICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDozZW07CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIC51aV9mdW5kcmFpc2VyX2xldHRlcl9jb250ZW50cyBwIHsKICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6MS41OwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAudWlfZnVuZHJhaXNlcl9jdXJyZW50IHsKICAgICAgICAgICAgICAgICAgICAgeGZsb2F0OnJpZ2h0OwogICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6MC44ZW07CiAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OjEuMjsKICAgICAgICAgICAgICAgICAgICAgY29sb3I6dmFyKC0tbW9uby02KTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjQ4ZW0pIHsKCgogICAgICAgICAgICAgICAgICAgICAudWlfZnVuZHJhaXNlcl9sZXR0ZXIgewogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOjJlbSAxLjVlbTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgLnVpX2Z1bmRyYWlzZXJfbGV0dGVyX2NvbnRlbnRzIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDowOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAKICAgICAgICAgICAgIC51aV9mdW5kcmFpc2VyX2Jhcl9pbm5lciAgeyB3aWR0aDogMTQuOCU7IGJhY2tncm91bmQ6IGNyaW1zb247IH0gPC9zdHlsZT48c2NyaXB0PgogICAgICAgICAgdmFyIHRzID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7CgogICAgICAgICAgdmFyIGN4PSc2ZThhZmMwNGY1MTg0YWEwMDE3N2UyZGI3YjY5YjRhMSc7CiAgICAgICAgIHJ5bVEoZnVuY3Rpb24oKSB7ICQoImJvZHkiKS5vbigibW91c2Vtb3ZlIHRvdWNoZW5kIixmdW5jdGlvbihuKXskKCJib2R5Iikub2ZmKCJtb3VzZW1vdmUgdG91Y2hlbmQiKTt2YXIgbyx0PSEhd2luZG93Lm9wciYmISFvcHIuYWRkb25zfHwhIXdpbmRvdy5vcGVyYXx8bmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCIgT1BSLyIpPj0wLGU9InVuZGVmaW5lZCIhPXR5cGVvZiBJbnN0YWxsVHJpZ2dlcixpPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3aW5kb3cuSFRNTEVsZW1lbnQpLmluZGV4T2YoIkNvbnN0cnVjdG9yIik+MCxyPSEhZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGQ9IXImJiEhd2luZG93LlN0eWxlTWVkaWEsYT0hIXdpbmRvdy5jaHJvbWUmJiEhd2luZG93LmNocm9tZS53ZWJzdG9yZSxjPShhfHx0KSYmISF3aW5kb3cuQ1NTLHM9ITE7bmF2aWdhdG9yLndlYmRyaXZlcjthJiZ3aW5kb3cuY2hyb21lO3RyeXtuYXZpZ2F0b3IucGVybWlzc2lvbnMucXVlcnkoe25hbWU6Im5vdGlmaWNhdGlvbnMifSkudGhlbihmdW5jdGlvbihuKXsiZGVuaWVkIj09PU5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uJiYicHJvbXB0Ij09PW4uc3RhdGUmJiEwfSl9Y2F0Y2gobil7bz1ufXRyeXtudWxsWzBdKCl9Y2F0Y2gobil7bz1ufW8uc3RhY2suaW5kZXhPZigicGhhbnRvbWpzIik+LTEmJihzPSEwKTt2YXIgdT13aW5kb3cub3V0ZXJIZWlnaHQsdz13aW5kb3cuaW5uZXJIZWlnaHQsbT13aW5kb3cub3V0ZXJXaWR0aCxoPXdpbmRvdy5pbm5lcldpZHRoLHA9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lmhhc0F0dHJpYnV0ZSgid2ViZHJpdmVyIiksdj1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaGFzQXR0cmlidXRlKCJob2xhX2V4dF9pbmplY3QiKSxsPSEhKCJvbnRvdWNoc3RhcnQiaW4gd2luZG93KXx8Im9udG91Y2hzdGFydCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsZj1uYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSxnPW5hdmlnYXRvci5hcHBDb2RlTmFtZSx5PW5hdmlnYXRvci5wbHVnaW5zLGI9bmV3IEFycmF5O2Zvcih2YXIgeCBpbiB5KXt2YXIgaj15W3hdO2lmKGopZm9yKHZhciBDIGluIGope3ZhciBPPWpbQ107TyYmTy5kZXNjcmlwdGlvbiYmYi5wdXNoKE8uZGVzY3JpcHRpb24uc3Vic3RyKDAsMTIpKX19dmFyIFM9e2E6dCxiOmUsYzppLGQ6cixlOmQsZjphLGc6YyxoOnMsaTp1LGo6cCxsOmwsbTpmLG46ZyxvOmIuam9pbigiOiIpLHA6dyxxOm0scjpoLHM6dix0OnMsY3g6Y3gsdHM6dHN9O3J5bS5yZXF1ZXN0LnBvc3QoIlNlY0NoayIsUyxudWxsLCJzY3JpcHQiKX0pOyB9KTsKICAgICAgPC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij5yeW1RKGZ1bmN0aW9uKCkgeyByeW0uc2Vzc2lvbi5pbml0KDc3MDEyNCwgJ3N0YW5pZWwzNTknLCAnZkIvQjhKY3daUE1HWlhJWEZESHNva3RxUDhIUk9xNGM2Z012VUplOHpHMEUzUm5qRlA4VC9OTWRpMjNtaU1QSDE2MjAyMjIxNjYwNzA5MjknKTt9KTs8L3NjcmlwdD48c2NyaXB0PiByeW1RKGZ1bmN0aW9uKCkgeyAgd2luZG93LnJ5bS5wcmVzZXJ2ZVNlYXJjaFR5cGUgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICB2YXIgc2NvcGUgPSAkKCdodG1sLCBib2R5JykuaGFzQ2xhc3MoJ3Njb3BlX2ZpbG0nKSA/ICdmaWxtJyA6ICdtdXNpYyc7CgogICAgICAgICAgICAgICAgaWYgKCAgd2luZG93LnJ5bS5wcmVzZXJ2ZVNlYXJjaFR5cGUgJiYgd2luZG93LmxvY2FsU3RvcmFnZVsnbGFzdF9zZWFyY2h0eXBlXycgKyBzY29wZV0gKSB7CiAgICAgICAgICAgICAgICAgICAgcnltLm5leHRTZWFyY2hUeXBlID0gd2luZG93LmxvY2FsU3RvcmFnZVsnbGFzdF9zZWFyY2h0eXBlXycgKyBzY29wZV07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICB9KTsgPC9zY3JpcHQ+PC9oZWFkPjxib2R5PgoKICAgICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICAgICAgcnltUShmdW5jdGlvbigpIHsgCiAgICAgICAgICAgICAgICAgd2luZG93LnJ5bS50aGVtZXMgPSBbJ2RheScsICduaWdodCddOwogICAgICAgICAgICAgICAgIHdpbmRvdy5yeW0udGhlbWVzX2xhYmVsID0gWydMaWdodCcsICdEYXJrJ107CiAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgIDxzY3JpcHQ+CgogICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIChldmVudCkgPT4gewogICAgICAgICAgICAgICAKCgogICAgICAgICAgICAgd2luZG93LmRvbV9sb2FkZWQgPSB0cnVlOwoKICAgICAgICAgICAgIHZhciBnYW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnc2NyaXB0JyApOwogICAgICAgICAgICAgZ2FtLnNldEF0dHJpYnV0ZSggJ3NyYycsICdodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC90YWcvanMvZ3B0LmpzJyApOwogICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggZ2FtICk7CiAgICAgICAgICAgIAogICAgICAgICAgICAgY29uc29sZS5sb2coJ0RPTSBsb2FkZWQnKTsKICAgICAgICAgICAgIGlmICggdHlwZW9mIChfYWRqdXN0RmlsbGVyQ29sdW1ucykgIT09ICd1bmRlZmluZWQnICkgewogICAgICAgICAgICAgICAgX2FkanVzdEZpbGxlckNvbHVtbnMoKSAKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgCiAgICAgICAgICAgICAgIGlmICggdHlwZW9mIChfY2xvc2VBbGxTdGlja3lBZHMpICE9PSAndW5kZWZpbmVkJyApIHsKICAgICAgICAgICAgICAgICAgX2Nsb3NlQWxsU3RpY2t5QWRzKCkgCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIDUwMDApOwogICAgICAgICB9KTsKCiAgICAgICAgIGlmICggd2luZG93LmxvY2FsU3RvcmFnZVsnc2l6ZV9tb2RlJ10gKSB7CiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50RWxlbWVudC5jbGFzc05hbWUgKz0gJyBzaXplX21vZGVfJyArIHdpbmRvdy5sb2NhbFN0b3JhZ2VbJ3NpemVfbW9kZSddOwogICAgICAgICB9CgogICAgICAgICBpZiAoICF3aW5kb3cubG9jYWxTdG9yYWdlWyd0aGVtZSddICYmIHdpbmRvdy5tYXRjaE1lZGlhICYmIHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJykubWF0Y2hlcyApIHsKICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5wYXJlbnRFbGVtZW50LmNsYXNzTmFtZSArPSAnIHRoZW1lX25pZ2h0JzsKICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5wYXJlbnRFbGVtZW50LmNsYXNzTmFtZSArPSAnIHRoZW1lXycgKyB3aW5kb3cubG9jYWxTdG9yYWdlWyd0aGVtZSddOwogICAgICAgICB9CgogICAgICAgICBpZiAoIHdpbmRvdy5tYXRjaE1lZGlhICkgewoKICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJykuYWRkRXZlbnRMaXN0ZW5lcjsKCiAgICAgICAgICAgICBpZiAoIGxpc3RlbmVyICkgewogICAgICAgICAgICAgICAgbGlzdGVuZXIoJ2NoYW5nZScsIGUgPT4gewogICAgICAgICAgICAgICAgICB1cGRhdGVUaGVtZSgpOwogICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICB9CiAgICAgICAgIH0KCiAgICAgICAgIHJ5bVEoZnVuY3Rpb24oKSB7IHVwZGF0ZVN0eWxlVGhlbWVMYWJlbHMoKSB9KTsKCiAgICAgICAgIDwvc2NyaXB0PgogICAgICAKPGhlYWRlcj4KPGRpdiBjbGFzcz0iaGVhZGVyX2lubmVyIGxvZ2dlZF9pbiI+CgoKCiAgIDxkaXYgb25jbGljaz0iUllNaGVhZGVyLm9uQ2xpY2tCYXJzKCkiIGNsYXNzPSJoZWFkZXJfaWNvbl9saW5rIj4KICAgICAgPGkgY2xhc3M9ImZhIGZhLWJhcnMiPjwvaT4KICAgICAgPHNwYW4gY2xhc3M9InNob3ctZm9yLXNtYWxsIj4KICAgICAgPC9zcGFuPgogICA8ZGl2IGlkPSJoZWFkZXJfZXh0ZW5kZWRfc2VjdGlvbiIgY2xhc3M9ImhlYWRlcl9leHRlbmRlZF9zZWN0aW9uIGhlYWRlcl9leHRlbmRlZF9tb3JlX21lbnUiPgogICAgICAgICAgICA8YSBocmVmPSIvfnN0YW5pZWwzNTkiIGNsYXNzPSJoZWFkZXJfaXRlbSI+CiAgICAgICAgICAgICAgIFByb2ZpbGUKICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvY29sbGVjdGlvbi9zdGFuaWVsMzU5LyIgY2xhc3M9ImhlYWRlcl9pdGVtIj4KICAgICAgICAgICAgICBNdXNpYyBDb2xsZWN0aW9uCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZpbG1fY29sbGVjdGlvbi9zdGFuaWVsMzU5LyIgY2xhc3M9ImhlYWRlcl9pdGVtIj4KICAgICAgICAgICAgICBGaWxtIENvbGxlY3Rpb24KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvbGlzdC9zdGFuaWVsMzU5LyIgY2xhc3M9ImhlYWRlcl9pdGVtIj4KICAgICAgICAgICAgICBMaXN0cwogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgPGEgaHJlZj0iL21lc3NhZ2VzL2luYm94IiBjbGFzcz0iaGVhZGVyX2l0ZW0iPgogICAgICAgICAgICAgIE1lc3NhZ2luZwogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2NvdW50L21lbnRpb25zIiBjbGFzcz0iaGVhZGVyX2l0ZW0iPgogICAgICAgICAgICAgIE1lbnRpb25zCiAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2NvdW50L3ByZWZlcmVuY2VzIiBjbGFzcz0iaGVhZGVyX2l0ZW0iPgogICAgICAgICAgICAgICBTZXR0aW5ncwogICAgICAgICAgICA8L2E+CgogICAgICAgICAgICA8YSBocmVmPSIvcXVldWVzLyIgY2xhc3M9ImhlYWRlcl9pdGVtIj4KICAgICAgICAgICAgICAgU3VibWlzc2lvbnMKICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyX2l0ZW1zX3NwaWxsb3ZlciI+CgoKCgoKCiAgICAgICAgICAgIDwvZGl2PgoKCiAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyX3RoZW1lX2J1dHRvbnMiPgogICAgCiAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPSJzd2l0Y2hTaXplTW9kZShldmVudCk7cmV0dXJuIGZhbHNlOyIgY2xhc3M9ImhlYWRlcl90aGVtZV9idXR0b24iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlcl90aGVtZV9idXR0b25fbGFiZWwiPlRleHQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXJfdGhlbWVfYnV0dG9uX21vZGUiIGlkPSJwYWdlX2ZyYW1lX3NpemVfbW9kZV9zd2l0Y2giPkFhPC9kaXY+CiAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz0ic3dpdGNoVGhlbWUoZXZlbnQpO3JldHVybiBmYWxzZTsiIGNsYXNzPSJoZWFkZXJfdGhlbWVfYnV0dG9uIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXJfdGhlbWVfYnV0dG9uX2xhYmVsIj5UaGVtZTwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlcl90aGVtZV9idXR0b25fbW9kZSIgaWQ9InBhZ2VfZnJhbWVfdGhlbWVfc3dpdGNoIj5MaWdodDwvZGl2PgogICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhcmZpeCI+PC9kaXY+CgogICAgICAgICAgIDwvZGl2PgoKCiAgICAgICAgICAgIAogICAgICAgICAgIDxzcGFuIG9uY2xpY2s9ImlmICggY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGxvZyBvdXQ/JykgKSB7IHdpbmRvdy5sb2NhdGlvbiA9ICcvYWNjb3VudC9sb2dvdXQnOyB9IiBjbGFzcz0iaGVhZGVyX2l0ZW0iPgogICAgICAgICAgICAgIExvZyBvdXQKICAgICAgICAgICA8L3NwYW4+CgogICAgICAgIDwvZGl2PgogICAgIDwvZGl2PgoKCgoKCgoKCgoKCgoKCgo8ZGl2IGNsYXNzPSJoZWFkZXJfcHJvZmlsZSI+CiAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXJfcHJvZmlsZV9sb2dnZWRfaW4iPgogICAgICAgICAgIDxhIGhyZWY9Ii9+c3RhbmllbDM1OSIgdGl0bGU9IllvdXIgcHJvZmlsZSBwYWdlIiBjbGFzcz0iaGVhZGVyX3Byb2ZpbGVfbWFpbiI+CiAgICAgICAgICAgICAgPHNwYW4gaWQ9ImhlYWRlcl91c2VyX2ltZyIgY2xhc3M9ImhlYWRlcl91c2VyX2ltZyIgCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgIDxzcGFuIGlkPSJoZWFkZXJfcHJvZmlsZV91c2VybmFtZSIgY2xhc3M9ImhlYWRlcl9wcm9maWxlX2xpbmsgdXNlciBoZWFkZXJfaXRlbSI+c3RhbmllbDM1OTwvc3Bhbj4KICAgICAgICAgICA8L2E+CiAgICAgICA8L2Rpdj4KCjwvZGl2PgoKCgo8ZGl2IGNsYXNzPSJoZWFkZXJfbG9nbyI+CiAgPGEgY2xhc3M9Im1haW4gaGVhZGVyX2l0ZW0gc29uZW1pYyIgaHJlZj0iLyI+CiAgICAgPGRpdiBjbGFzcz0ibG9nb19oZWFkZXIiPjwvZGl2PgogICAgIDxzcGFuIGNsYXNzPSJsb2dvX25hbWUiPlJZTTwvc3Bhbj4KICA8L2E+Cgo8L2Rpdj4KCjxkaXYgY2xhc3M9ImhlYWRlcl9saW5rcyI+CiAgPGRpdiBjbGFzcz0iaGVhZGVyX2xpbmtzX2lubmVyIj4KICAgICAgPGRpdiBjbGFzcz0iZGl2aWRlciI+PC9kaXY+CiAgICAgIDxhIGNsYXNzPSJoZWFkZXJfaXRlbSIgaHJlZj0iL25ldy1tdXNpYy8iPm5ldyBtdXNpYzwvYT4KICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyX2NoYXJ0cyI+CiAgICAgIDxhIGNsYXNzPSJoZWFkZXJfY2hhcnRzIGhlYWRlcl9pdGVtIiBocmVmPSIvY2hhcnRzLyI+Y2hhcnRzPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGEgY2xhc3M9ImhlYWRlcl9pdGVtIiBocmVmPSIvbGlzdHMvIj5saXN0czwvYT4KICAgICAgPGEgY2xhc3M9ImhlYWRlcl9pdGVtIiBocmVmPSIvY29tbXVuaXR5LyI+Y29tbXVuaXR5PC9hPgoKCgoKCgogICAgICAgICA8YSBjbGFzcz0iaGVhZGVyX2l0ZW0iIHRpdGxlPSJTdXBwb3J0IFJZTSBieSBiZWNvbWluZyBhIHN1YnNjcmliZXIiICBocmVmPSIvc3Vic2NyaWJlLyIgc3R5bGU9ImxpbmUtaGVpZ2h0OjEuOSI+CiAgICAgICAgICAgIDxzcGFuICBkYXRhLW5vc25pcHBldCBjbGFzcz0ic3Vic2NyaWJlX2xhYmVsX2Z1bmRyYWlzZXIiIHN0eWxlPSJmb250LXNpemU6MC44ZW07Zm9udC13ZWlnaHQ6Ym9sZDsiPmZ1bmRyYWlzZXI8L3NwYW4+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVpX2Z1bmRyYWlzZXJfYmFyX2ZyYW1lIiBzdHlsZT0iZm9udC1zaXplOiAwLjRlbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMC45ZW07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDEuMmVtOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOjAiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1aV9mdW5kcmFpc2VyX2JhciI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVpX2Z1bmRyYWlzZXJfYmFyX291dGxpbmUiPgoKICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWlfZnVuZHJhaXNlcl9iYXJfZ29hbF9kaXZpZGVyIj4KCiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWlfZnVuZHJhaXNlcl9iYXJfaW5uZXIiPgoKICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgIDwvYT4KCiAgICAgICAgIAoKICAgICAgCgogICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyIj48L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDxkaXYgY2xhc3M9ImhlYWRlcl9zZWFyY2giPgogIDxkaXYgaWQ9InVpX3NlYXJjaF9mcmFtZV9vdXRlcl9tYWluX3NlYXJjaCIgIGNsYXNzPSJ1aV9zZWFyY2hfZnJhbWVfb3V0ZXIiPiA8ZGl2IGlkPSJ1aV9zZWFyY2hfZnJhbWVfbWFpbl9zZWFyY2giIGNsYXNzPSJ1aV9zZWFyY2hfZnJhbWUiPiA8ZGl2IG9uY2xpY2s9InJ5bVEoZnVuY3Rpb24oKSB7UllNc2VhcmNoLm9uQ2xpY2tDbG9zZShldmVudCwgJ21haW5fc2VhcmNoJyk7fSkiIGNsYXNzPSJ1aV9zZWFyY2hfY2xvc2UiPiA8ZGl2IGNsYXNzPSJ1aV9zZWFyY2hfY2xvc2VfYmFyIj4gPGkgY2xhc3M9ImZhIGZhLXRpbWVzIj48L2k+IENsb3NlPC9kaXY+IDxkaXYgaWQ9InVpX3NlYXJjaF9jb250ZXh0X2luZGljYXRvcl9tYWluX3NlYXJjaCIgY2xhc3M9InVpX3NlYXJjaF9jb250ZXh0X2luZGljYXRvciI+IDxkaXYgaWQ9InVpX3NlYXJjaF9jb250ZXh0X2luZGljYXRvcl9pbm5lcl9tYWluX3NlYXJjaCIgY2xhc3M9InVpX3NlYXJjaF9jb250ZXh0X2luZGljYXRvcl9pbm5lciI+PC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz0idWlfc2VhcmNoX2NsZWFyIj48L2Rpdj4gPGRpdiBjbGFzcz0idWlfc2VhcmNoX2ZyYW1lX2lubmVyIj4gPGRpdiBpZD0idWlfc2VhcmNoX21haW5fc2VhcmNoIiBjbGFzcz0idWlfc2VhcmNoIiBkYXRhLWRlZmF1bHQtc2NvcGU9Im11c2ljIiBkYXRhLWNhbGxiYWNrPSIiIGRhdGEtY2FsbGJhY2staWQ9IiI+IDxpIHN0eWxlPSJjdXJzb3I6cG9pbnRlciIgb25DbGljaz0iUllNc2VhcmNoLnJlZGlyU2VhcmNoKCdtYWluX3NlYXJjaCcpOyIgaWQ9InVpX3NlYXJjaF9pY29uX21haW5fc2VhcmNoIiBjbGFzcz0iZmEgZmEtc2VhcmNoIHVpX3NlYXJjaF9pY29uIj48L2k+IDxpIGlkPSJ1aV9jbGVhcl9pY29uX21haW5fc2VhcmNoIiBvbmNsaWNrPSJyeW1RKGZ1bmN0aW9uKCkge1JZTXNlYXJjaC5vbkNsaWNrQ2xlYXJTZWFyY2goZXZlbnQsICdtYWluX3NlYXJjaCcpO30pIiBjbGFzcz0iZmEgZmEtdGltZXMtY2lyY2xlIHVpX2NsZWFyX2ljb24iPjwvaT4gPGlucHV0IGFyaWEtbGFiZWw9IlNlYXJjaCIgdmFsdWU9ImEiIGlkPSJ1aV9zZWFyY2hfaW5wdXRfbWFpbl9zZWFyY2giIHBsYWNlaG9sZGVyPSJTZWFyY2guLi4iIGNsYXNzPSJ1aV9zZWFyY2hfaW5wdXQiIG9uZm9jdXM9InJ5bVEoZnVuY3Rpb24oKSB7UllNc2VhcmNoLm9uRm9jdXMoZXZlbnQsICdtYWluX3NlYXJjaCcpfSkiIG9uYmx1cj0icnltUShmdW5jdGlvbigpIHtSWU1zZWFyY2gub25CbHVyKGV2ZW50LCAnbWFpbl9zZWFyY2gnKX0pIiBvbmtleWRvd249InJ5bVEoZnVuY3Rpb24oKSB7UllNc2VhcmNoLm9uS2V5RG93bihldmVudCwgJ21haW5fc2VhcmNoJyl9KSIgb25pbnB1dD0icnltUShmdW5jdGlvbigpIHtSWU1zZWFyY2gub25JbnB1dChldmVudCwgJ21haW5fc2VhcmNoJyl9KSI+IDwvZGl2PiA8ZGl2IGNsYXNzPSJ1aV9zZWFyY2hfcmVzdCI+IDxkaXYgY2xhc3M9InVpX3NlYXJjaF90eXBlIj4gPGRpdiBpZD0idWlfc2VhcmNoX2RlYnVnX21haW5fc2VhcmNoIiBjbGFzcz0idWlfc2VhcmNoX2RlYnVnIj48L2Rpdj4gPHNwYW4gY2xhc3M9InVpX3NlYXJjaF9vYmplY3RfbGFiZWwiPlNlYXJjaDo8L3NwYW4+IDxzcGFuIGlkPSJ1aV9zZWFyY2hfc2NvcGVfc2VsZWN0b3JfbWFpbl9zZWFyY2giIGNsYXNzPSJ1aV9zZWFyY2hfb2JqZWN0X3NlbGVjdG9yIj4gPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idWlfc2VhcmNoX3Njb3BlX21haW5fc2VhcmNoIiBpZD0idWlfc2VhcmNoX3Njb3BlX21haW5fc2VhcmNoIiB2YWx1ZT0ibXVzaWMiPiA8c3BhbiBpZD0idWlfc2VhcmNoX3Njb3BlX3NlbGVjdG9yX211c2ljX21haW5fc2VhcmNoIiBvbmNsaWNrPSJyeW1RKGZ1bmN0aW9uKCkge1JZTXNlYXJjaC5vbkNsaWNrU2VhcmNoU2NvcGUoZXZlbnQsICdtYWluX3NlYXJjaCcsICdtdXNpYycpO30pIiBjbGFzcz0idWlfc2VhcmNoX3Njb3BlX3NlbGVjdG9yX2l0ZW0gdWlfc2VhcmNoX3Njb3BlX3NlbGVjdG9yX2l0ZW1fbXVzaWMgc2VsZWN0ZWQiPiBNdXNpYwogIDwvc3Bhbj4gPHNwYW4gaWQ9InVpX3NlYXJjaF9zY29wZV9zZWxlY3Rvcl9maWxtX21haW5fc2VhcmNoIiBvbmNsaWNrPSJyeW1RKGZ1bmN0aW9uKCkge1JZTXNlYXJjaC5vbkNsaWNrU2VhcmNoU2NvcGUoZXZlbnQsICdtYWluX3NlYXJjaCcsICdmaWxtJyk7fSkiIGNsYXNzPSJ1aV9zZWFyY2hfc2NvcGVfc2VsZWN0b3JfaXRlbSB1aV9zZWFyY2hfc2NvcGVfc2VsZWN0b3JfaXRlbV9maWxtIj4gRmlsbQogIDwvc3Bhbj4gPHNwYW4gaWQ9InVpX3NlYXJjaF9zY29wZV9zZWxlY3Rvcl9nYW1lc19tYWluX3NlYXJjaCIgc3R5bGU9ImRpc3BsYXk6bm9uZSIgb25jbGljaz0icnltUShmdW5jdGlvbigpIHtSWU1zZWFyY2gub25DbGlja1NlYXJjaFNjb3BlKGV2ZW50LCAnbWFpbl9zZWFyY2gnLCAnZ2FtZXMnKTt9KSIgY2xhc3M9InVpX3NlYXJjaF9zY29wZV9zZWxlY3Rvcl9pdGVtIHVpX3NlYXJjaF9zY29wZV9zZWxlY3Rvcl9pdGVtX2dhbWVzIj4gR2FtZXMKICA8L3NwYW4+IDwvc3Bhbj4gPHNwYW4gY2xhc3M9InVpX3NlYXJjaF9vYmplY3RfbGFiZWwiPmZvcjo8L3NwYW4+IDxzcGFuIGlkPSJ1aV9zZWFyY2hfb2JqZWN0X3NlbGVjdF9mcmFtZV9tYWluX3NlYXJjaCIgY2xhc3M9InVpX3NlYXJjaF9vYmplY3Rfc2VsZWN0X2ZyYW1lIHNlbGVjdGVkIj4gPHNlbGVjdCBvbmNoYW5nZT0icnltUShmdW5jdGlvbigpIHtSWU1zZWFyY2gub25DaGFuZ2VPYmplY3QoZXZlbnQsICdtYWluX3NlYXJjaCcpfSkiIGlkPSJ1aV9zZWFyY2hfb2JqZWN0X3NlbGVjdF9tYWluX3NlYXJjaCIgY2xhc3M9InVpX3NlYXJjaF9vYmplY3Rfc2VsZWN0Ij4gPC9zZWxlY3Q+IDwvc3Bhbj4gIDwvZGl2PiA8ZGl2IGlkPSJ1aV9zZWFyY2hfaW5mb19mcmFtZV9tYWluX3NlYXJjaCIgY2xhc3M9InVpX3NlYXJjaF9pbmZvX2ZyYW1lIj4gPC9kaXY+IDxkaXYgaWQ9InVpX3NlYXJjaF9yZXN1bHRzX2ZyYW1lX21haW5fc2VhcmNoIiBjbGFzcz0idWlfc2VhcmNoX3Jlc3VsdHNfZnJhbWUiPiA8ZGl2IGlkPSJ1aV9zZWFyY2hfcmVzdWx0c19tYWluX3NlYXJjaCIgY2xhc3M9InVpX3NlYXJjaF9yZXN1bHRzIj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PgogIDwvZGl2PgoKPC9kaXY+ICAgCgoKCgo8L2Rpdj4KCjwvaGVhZGVyPgoKCjxkaXYgY2xhc3M9ImhlYWRlcl9lcnJvciIgb25DbGljaz0iJCh0aGlzKS5mYWRlT3V0KCk7IiBpZD0iaGVhZGVyX2Vycm9yIj4KICAgPGRpdiBjbGFzcz0iaGVhZGVyX2Vycm9yX2Nsb3NlIj48aSBjbGFzcz0iZmEgZmEtdGltZXMtY2lyY2xlIj48L2k+PC9kaXY+CiAgIDxkaXYgaWQ9ImhlYWRlcl9lcnJvcl90ZXh0Ij48L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJoZWFkZXJfbWVzc2FnZSIgb25DbGljaz0iJCh0aGlzKS5mYWRlT3V0KCk7IiBpZD0iaGVhZGVyX21lc3NhZ2UiPgogICA8ZGl2IGNsYXNzPSJoZWFkZXJfbWVzc2FnZV9jbG9zZSI+PGkgY2xhc3M9ImZhIGZhLXRpbWVzLWNpcmNsZSI+PC9pPjwvZGl2PgogICA8ZGl2IGlkPSJoZWFkZXJfbWVzc2FnZV90ZXh0Ij48L2Rpdj4KPC9kaXY+Cgo8ZGl2IGlkPSJtb2JpbGVfaGVhZGVyX21lbnUiIGNsYXNzPSJtb2JpbGVfaGVhZGVyX21lbnUiPjxhIGhyZWY9Ii9uZXctbXVzaWMvIiBjbGFzcz0ibW9iaWxlX2hlYWRlcl9tZW51X2l0ZW0gbW9iaWxlX2hlYWRlcl9tZW51X2l0ZW1fY2hhcnRzIj4KICAgICAgTmV3IE11c2ljCjwvYT48YSBocmVmPSIvY2hhcnRzLyIgY2xhc3M9Im1vYmlsZV9oZWFkZXJfbWVudV9pdGVtIG1vYmlsZV9oZWFkZXJfbWVudV9pdGVtX2NoYXJ0cyI+CiAgICAgIENoYXJ0cwo8L2E+PGEgaHJlZj0iL2xpc3RzLyIgY2xhc3M9Im1vYmlsZV9oZWFkZXJfbWVudV9pdGVtIG1vYmlsZV9oZWFkZXJfbWVudV9pdGVtX2xpc3RzIj4KICAgTGlzdHMgCjwvYT48YSBocmVmPSIvY29tbXVuaXR5LyIgY2xhc3M9Im1vYmlsZV9oZWFkZXJfbWVudV9pdGVtIG1vYmlsZV9oZWFkZXJfbWVudV9pdGVtX2NvbW11bml0eSI+CiAgIENvbW11bml0eQo8L2E+PC9kaXY+CiAgICAgICAgCgogICAgICAgICAgICA8ZGl2IGlkPSJjb250ZW50X3dyYXBwZXJfb3V0ZXIiIGNsYXNzPSJjb250ZW50X3dyYXBwZXJfb3V0ZXIiPgogICAgICAgICAgICA8ZGl2IGlkPSJjb250ZW50X3dyYXBwZXIiIGNsYXNzPSJjb250ZW50X3dyYXBwZXIiPgogICAgICAgICAgICA8ZGl2IGlkPSJjb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBpZD0icHJlY29udGVudCIgY2xhc3M9InByZWNvbnRlbnQiPjwvZGl2PgoKICAgICAgICAgCiAgICAgICAgIDxkaXYgaWQ9ImNvbnRlbnRfY292ZXIiPjwvZGl2PgogICAgICAgICA8ZGl2IGlkPSJ0b3RhbF9jb3ZlciI+PC9kaXY+CiAgICAgICAgIDxkaXYgaWQ9ImNvbnRlbnRfdG90YWxfY292ZXIiPjwvZGl2PiAgICAgICAgICAKICAgICAgCiAgICAgICAgIDxzdHlsZT4KICAgICAgICAgICAgI3N1YnNjcmlwdGlvbl91cGRhdGVfYmFubmVyIHsKICAgICAgICAgICAgICAgYmFja2dyb3VuZDp0cmFuc3BhcmVudDsKICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgdmFyKC0tbW9uby1kKTsKICAgICAgICAgICAgICAgYm9yZGVyLXRvcDoxcHggc29saWQgdmFyKC0tbW9uby1kKTsKICAgICAgICAgICAgICAgbWF4LXdpZHRoOjUwZW07CiAgICAgICAgICAgICAgIG1hcmdpbjowIGF1dG87CiAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206MmVtOwogICAgICAgICAgICAgICBwYWRkaW5nOjFlbSA3ZW0gMy41ZW0gM2VtOwogICAgICAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLnN1YnNjcmlwdGlvbl91cGRhdGVfdGl0bGUgewogICAgICAgICAgICAgICBmb250LXNpemU6MS41ZW07CiAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206MC41ZW07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDo1MGVtKSB7CiAgICAgICAgICAgICAgICNzdWJzY3JpcHRpb25fdXBkYXRlX2Jhbm5lciB7CiAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOjFlbTsKICAgICAgICAgICAgICAgICAgZm9udC1zaXplOjAuOWVtOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgPC9zdHlsZT4KICAgICAgCiAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLW5vc25pcHBldCBpZD0ic3Vic2NyaXB0aW9uX3VwZGF0ZV9iYW5uZXIiIGNsYXNzPSJwYWdlX2NoYXJ0X2Rlc2NyaXB0aW9uX2NvbnRhaW5lciI+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgIG9uQ2xpY2s9InJ5bS5yZXF1ZXN0LnBvc3QoJ0Rpc21pc3NTdWJzY3JpcHRpb25VcGRhdGVCYW5uZXInLCB7fSwgbnVsbCwgJ3NjcmlwdCcpOyIgIHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjI7dG9wOjA7cmlnaHQ6MDtwYWRkaW5nOjFlbTtjb2xvcjp2YXIoLS1tb25vLTUpO2ZvbnQtc2l6ZToxLjFlbTtjdXJzb3I6cG9pbnRlciIgY2xhc3M9InBhZ2VfZnVuZHJhaXNlcl9jbG9zZSI+PGkgY2xhc3M9ImZhIGZhLXRpbWVzLWNpcmNsZSI+PC9pPiBDbG9zZTwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWdlX2NoYXJ0X2Rlc2NyaXB0aW9uX3RleHRhbmRidG5zIj4gCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1YnNjcmlwdGlvbl91cGRhdGVfdGl0bGUiPiBXZSdyZSBsYXVuY2hpbmcgYSBzdWJzY3JpcHRpb24gZHJpdmUgdG8gaGVscCBmdW5kIG91ciBvcGVyYXRpb25zIGluIDIwMjEuICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFnZV9jaGFydF9kZXNjcmlwdGlvbl9idG5zIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9IiIgY2xhc3M9ImJ0biBmbGF0X2J0biBwYWdlX2NoYXJ0X2Rlc2NyaXB0aW9uX2J0biIgaHJlZj0iL3N1YnNjcmliZS8iPlN1YnNjcmliZSBvciBkb25hdGU8L2E+IAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVpX2Z1bmRyYWlzZXJfYmFyX2ZyYW1lIiBzdHlsZT0iZm9udC1zaXplOiAwLjdlbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMC45ZW07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAzZW07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogM2VtOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMCAxLjJlbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjowIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1aV9mdW5kcmFpc2VyX2xhYmVsIiBzdHlsZT0iZm9udC1zaXplOjEuM2VtO2NvbG9yOnZhcigtLW1vbm8tNik7Zm9udC13ZWlnaHQ6Ym9sZDsiPlByb2dyZXNzPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVpX2Z1bmRyYWlzZXJfYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWlfZnVuZHJhaXNlcl9iYXJfb3V0bGluZSI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1aV9mdW5kcmFpc2VyX2Jhcl9nb2FsX2RpdmlkZXIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1aV9mdW5kcmFpc2VyX2Jhcl9pbm5lciI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+PGRpdiBjbGFzcz0icm93Ij48ZGl2IGlkPSJjb2x1bW5fY29udGFpbmVyX2xlZnQiIGNsYXNzPSJsYXJnZS04IGNvbHVtbnMiPjwhLS0gYmVnaW4gc2VhcmNoIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWdlX3NlYXJjaF9yZXN1bHRzIj4KICAgICAgICAgICAgICAgPHRhYmxlIHN0eWxlPSJ3aWR0aDoxMDAlO3BhZGRpbmc6MDttYXJnaW46MDsiPjx0cj48dGQgc3R5bGU9InBhZGRpbmc6MDttYXJnaW46MDt2ZXJ0aWNhbC1hbGlnbjp0b3A7Ij48ZGl2IHN0eWxlPSJwYWRkaW5nLWxlZnQ6MC44ZW07Zm9udC1zaXplOjEuM2VtO21hcmdpbi10b3A6MWVtO21hcmdpbi1ib3R0b206MWVtO2NvbG9yOnZhcigtLW1vbm8tOSk7Ij5TZWFyY2ggcmVzdWx0cyBmb3IgPGI+YTwvYj48L2Rpdj4KCjwhLS1hLS0+CjxkaXYgY2xhc3M9ImNsZWFyIj4gPC9kaXY+PGgzPkFydGlzdHM8L2gzPjx0YWJsZT48dHIgY2xhc3M9ImluZm9ib3giPgogICAgICAgICAgICA8dGQgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZ19jZWxsIj48ZGl2IHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO3BhZGRpbmctYm90dG9tOmNhbGMoIDEwMCUgLyAwLjk5MTkwMjgzNDAwODA5NzIpOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWcgbGF6eWxvYWQiIGRhdGEtc3JjPSIvL2Uuc25tYy5pby8yLjUvaW1nL2ltYWdlcy9ibG9ja2Vkcy5wbmciIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC90ZD48dGQgc3R5bGU9InBhZGRpbmctbGVmdDoxOHB4OyI+PHRhYmxlID48dHI+PCEtLW0tLT48dGQgc3R5bGU9InBhZGRpbmc6MDsiPjxiPjxhIGhyZWY9Ii9hcnRpc3Qvb2xkLWZvcmdvdHRlbi1sYW5kcyIgY2xhc3M9InNlYXJjaHBhZ2UiICB0aXRsZT0iW0FydGlzdDU4NzE1M10iPk9sZCBGb3Jnb3R0ZW4gTGFuZHM8L2E+PC9iPjwvdGQ+PHRkIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+PHNwYW4gY2xhc3M9InNtYWxsZ3JheSI+W0FydGlzdDU4NzE1M108L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+PCEtLW4tLT48c3BhbiBjbGFzcz0ic3ViaW5mbyI+CiAgICAgICBhLmsuYTogw4lsYW4gTyYjMzk7TmVhbCBbYmlydGggbmFtZV0sIEEuLCBBc2fDoHRoLCBEZXIgUGVzdGFyenQsIMOJbGFuPGJyIC8+CiAgICAgICAgPGEgdGl0bGU9IltHZW5yZTQxMV0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvTmVvZm9say8iPk5lb2ZvbGs8L2E+PGJyIC8+CiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjdweDsiPjxpbWcgc3JjPSIvL2Uuc25tYy5pby8yLjUvaW1nL2ltYWdlcy9ibGFuay5wbmciIGNsYXNzPSJmbGFnIGZsYWctdXMiIGFsdD0iVW5pdGVkIFN0YXRlcyIgdGl0bGU9IlVuaXRlZCBTdGF0ZXMiIC8+ICZuYnNwOwogICAgICAgPC9kaXY+CgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDowLjdlbTsgZm9udC1zaXplOjAuOWVtOyBjb2xvcjp2YXIoLS1tb25vLTgpIj48aSBjbGFzcz0iZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZSI+PC9pPiBEYXJrIEFtYmllbnQgYXJ0aXN0IGZyb20gdGhlIFVTQTwvZGl2Pjwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT4gPGJyIC8+PHRhYmxlPjx0ciBjbGFzcz0iaW5mb2JveCI+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0icGFnZV9zZWFyY2hfaW1nX2NlbGwiPjxkaXYgc3R5bGU9InBvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7cGFkZGluZy1ib3R0b206Y2FsYyggMTAwJSAvIDEuMCk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZyBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZS5zbm1jLmlvL2kvMTUwL3MvYWEyMjE2YmIzNTlkYjRkODg2OWIzNzUwNjI0MmM0ZjYvODM2MDUxNyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L3RkPjx0ZCBzdHlsZT0icGFkZGluZy1sZWZ0OjE4cHg7Ij48dGFibGUgPjx0cj48IS0tbS0tPjx0ZCBzdHlsZT0icGFkZGluZzowOyI+PGI+PGEgaHJlZj0iL2FydGlzdC9hcmVuYS0zIiBjbGFzcz0ic2VhcmNocGFnZSIgIHRpdGxlPSJbQXJ0aXN0MTUxMDUyMl0iPkFyZW5hPC9hPjwvYj48L3RkPjx0ZCBzdHlsZT0idGV4dC1hbGlnbjpyaWdodDsiPjxzcGFuIGNsYXNzPSJzbWFsbGdyYXkiPltBcnRpc3QxNTEwNTIyXTwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT48IS0tbi0tPjxzcGFuIGNsYXNzPSJzdWJpbmZvIj48L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+IDxiciAvPjx0YWJsZT48dHIgY2xhc3M9ImluZm9ib3giPgogICAgICAgICAgICA8dGQgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZ19jZWxsIj48ZGl2IHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO3BhZGRpbmctYm90dG9tOmNhbGMoIDEwMCUgLyAxLjApOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWcgbGF6eWxvYWQiIGRhdGEtc3JjPSIvL2Uuc25tYy5pby9pLzE1MC9zL2JlNTkxNGM5MWRhOWQ0MDY3NDFmYTI1Nzc1ZDVlMjM2LzgxNTc3ODkiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC90ZD48dGQgc3R5bGU9InBhZGRpbmctbGVmdDoxOHB4OyI+PHRhYmxlID48dHI+PCEtLW0tLT48dGQgc3R5bGU9InBhZGRpbmc6MDsiPjxiPjxhIGhyZWY9Ii9hcnRpc3QvYV9tX2lfZ19hIiBjbGFzcz0ic2VhcmNocGFnZSIgIHRpdGxlPSJbQXJ0aXN0MTM5OTE1M10iPkEuTS5JLkcuQTwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0MTM5OTE1M108L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+PCEtLW4tLT48c3BhbiBjbGFzcz0ic3ViaW5mbyI+PC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPiA8YnIgLz48dGFibGU+PHRyIGNsYXNzPSJpbmZvYm94Ij4KICAgICAgICAgICAgPHRkIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWdfY2VsbCI+PGRpdiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbTpjYWxjKCAxMDAlIC8gMC45ODczOTQ5NTc5ODMxOTMzKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0icGFnZV9zZWFyY2hfaW1nIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9lLnNubWMuaW8vaS8xNTAvcy9jODA5YzFkZTM1ZDc1OGFkMzJkN2ZkYzhiMjFkNTk5My83OTU0MTU3IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L3NhcmctMSIgY2xhc3M9InNlYXJjaHBhZ2UiICB0aXRsZT0iW0FydGlzdDEyMzEwNzhdIj5TYXJnPC9hPjwvYj48L3RkPjx0ZCBzdHlsZT0idGV4dC1hbGlnbjpyaWdodDsiPjxzcGFuIGNsYXNzPSJzbWFsbGdyYXkiPltBcnRpc3QxMjMxMDc4XTwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT48IS0tbi0tPjxzcGFuIGNsYXNzPSJzdWJpbmZvIj48L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+IDxiciAvPjx0YWJsZT48dHIgY2xhc3M9ImluZm9ib3giPgogICAgICAgICAgICA8dGQgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZ19jZWxsIj48ZGl2IHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO3BhZGRpbmctYm90dG9tOmNhbGMoIDEwMCUgLyAxLjApOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWcgbGF6eWxvYWQiIGRhdGEtc3JjPSIvL2Uuc25tYy5pby9pLzE1MC9zLzlhZTBmYmZlZGFiNDRkZjdkMzRkODI5NDk3ODc3ZmEzLzE3MjQxODAiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC90ZD48dGQgc3R5bGU9InBhZGRpbmctbGVmdDoxOHB4OyI+PHRhYmxlID48dHI+PCEtLW0tLT48dGQgc3R5bGU9InBhZGRpbmc6MDsiPjxiPjxhIGhyZWY9Ii9hcnRpc3QvYS10cmliZS1jYWxsZWQtcXVlc3QiIGNsYXNzPSJzZWFyY2hwYWdlIiAgdGl0bGU9IltBcnRpc3QxODU5XSI+QSBUcmliZSBDYWxsZWQgUXVlc3Q8L2E+PC9iPjwvdGQ+PHRkIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+PHNwYW4gY2xhc3M9InNtYWxsZ3JheSI+W0FydGlzdDE4NTldPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPjwhLS1uLS0+PHNwYW4gY2xhc3M9InN1YmluZm8iPgogICAgICAgYS5rLmE6IEFUQ1E8YnIgLz4KICAgICAgICA8YSB0aXRsZT0iW0dlbnJlMjhdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0Vhc3QrQ29hc3QrSGlwK0hvcC8iPkVhc3QgQ29hc3QgSGlwIEhvcDwvYT4sIDxhIHRpdGxlPSJbR2VucmUxOF0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvSmF6eitSYXAvIj5KYXp6IFJhcDwvYT4sIDxhIHRpdGxlPSJbR2VucmUyNTEwOF0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvQm9vbStCYXAvIj5Cb29tIEJhcDwvYT48YnIgLz4KICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6N3B4OyI+PGltZyBzcmM9Ii8vZS5zbm1jLmlvLzIuNS9pbWcvaW1hZ2VzL2JsYW5rLnBuZyIgY2xhc3M9ImZsYWcgZmxhZy11cyIgYWx0PSJVbml0ZWQgU3RhdGVzIiB0aXRsZT0iVW5pdGVkIFN0YXRlcyIgLz4gJm5ic3A7CiAgICAgICBGb3JtZWQgMTk4ODwvZGl2PgoKICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6MC43ZW07IGZvbnQtc2l6ZTowLjllbTsgY29sb3I6dmFyKC0tbW9uby04KSI+PGkgY2xhc3M9ImZhciBmYS1xdWVzdGlvbi1jaXJjbGUiPjwvaT4gSGlwLUhvcCAvIEphenogUmFwIGNvbGxlY3RpdmU8L2Rpdj48L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+IDxiciAvPjx0YWJsZT48dHIgY2xhc3M9ImluZm9ib3giPgogICAgICAgICAgICA8dGQgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZ19jZWxsIj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L2FfZl9hX19mMSIgY2xhc3M9InNlYXJjaHBhZ2UiICB0aXRsZT0iW0FydGlzdDM0MTY0OF0iPkEuRi5BLjwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0MzQxNjQ4XTwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT48IS0tbi0tPjxzcGFuIGNsYXNzPSJzdWJpbmZvIj4KICAgICAgIGEuay5hOiBBY2lkIEZvbGsgQWxsZWFuemEsIEFGQSwgQSBGYTxiciAvPgogICAgICAgCiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjdweDsiPiAmbmJzcDsKICAgICAgIEZvcm1lZCAxOTkyPC9kaXY+CgogICAgICAgPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPiA8YnIgLz48dGFibGU+PHRyIGNsYXNzPSJpbmZvYm94Ij4KICAgICAgICAgICAgPHRkIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWdfY2VsbCI+PGRpdiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbTpjYWxjKCAxMDAlIC8gMS43Nzc3Nzc3Nzc3Nzc3Nzc3KTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0icGFnZV9zZWFyY2hfaW1nIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9lLnNubWMuaW8vaS8xNTAvcy9kN2FiNDQ3M2E2ZTdiMDhkNjQ5OTU5Nzg1MTgxNjAzNC84MDM5MDIwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L2FnYWluc3QtYWxsLWxvZ2ljIiBjbGFzcz0ic2VhcmNocGFnZSIgIHRpdGxlPSJbQXJ0aXN0MTIwOTg2NF0iPkFnYWluc3QgQWxsIExvZ2ljPC9hPjwvYj48L3RkPjx0ZCBzdHlsZT0idGV4dC1hbGlnbjpyaWdodDsiPjxzcGFuIGNsYXNzPSJzbWFsbGdyYXkiPltBcnRpc3QxMjA5ODY0XTwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT48IS0tbi0tPjxzcGFuIGNsYXNzPSJzdWJpbmZvIj4KICAgICAgIGEuay5hOiBOaWNvbMOhcyBKYWFyLCBBLkEuTC4gKEFnYWluc3QgQWxsIExvZ2ljKSwgQUFMPGJyIC8+CiAgICAgICAKICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6N3B4OyI+PGltZyBzcmM9Ii8vZS5zbm1jLmlvLzIuNS9pbWcvaW1hZ2VzL2JsYW5rLnBuZyIgY2xhc3M9ImZsYWcgZmxhZy11cyIgYWx0PSJVbml0ZWQgU3RhdGVzIiB0aXRsZT0iVW5pdGVkIFN0YXRlcyIgLz4gJm5ic3A7CiAgICAgICBCb3JuIDEwIEphbnVhcnkgMTk5MCA8L2Rpdj4KCiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjAuN2VtOyBmb250LXNpemU6MC45ZW07IGNvbG9yOnZhcigtLW1vbm8tOCkiPjxpIGNsYXNzPSJmYXIgZmEtcXVlc3Rpb24tY2lyY2xlIj48L2k+IEhvdXNlIG11c2ljIHByb2plY3Q8L2Rpdj48L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+IDxiciAvPjx0YWJsZT48dHIgY2xhc3M9ImluZm9ib3giPgogICAgICAgICAgICA8dGQgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZ19jZWxsIj48ZGl2IHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO3BhZGRpbmctYm90dG9tOmNhbGMoIDEwMCUgLyAxLjA4MTU2ODI3Mzk5NzI5Nik7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZyBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZS5zbm1jLmlvL2kvMTUwL3MvZmMzYzhhNTkxZmI3OGE4NjJiZGE4NzI2YzYzNzQ5Y2UvNTIxMDQ5NCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L3RkPjx0ZCBzdHlsZT0icGFkZGluZy1sZWZ0OjE4cHg7Ij48dGFibGUgPjx0cj48IS0tbS0tPjx0ZCBzdHlsZT0icGFkZGluZzowOyI+PGI+PGEgaHJlZj0iL2FydGlzdC90aGVlLXNpbHZlci1tdC16aW9uLW1lbW9yaWFsLW9yY2hlc3RyYSIgY2xhc3M9InNlYXJjaHBhZ2UiICB0aXRsZT0iW0FydGlzdDI3NjFdIj5UaGVlIFNpbHZlciBNdC4gWmlvbiBNZW1vcmlhbCBPcmNoZXN0cmE8L2E+PC9iPjwvdGQ+PHRkIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+PHNwYW4gY2xhc3M9InNtYWxsZ3JheSI+W0FydGlzdDI3NjFdPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPjwhLS1uLS0+PHNwYW4gY2xhc3M9InN1YmluZm8iPgogICAgICAgYS5rLmE6IEEgU2lsdmVyIE10LiBaaW9uLCBBU01aLCBUaGUgU2lsdmVyIE10LiBaaW9uIE1lbW9yaWFsIE9yY2hlc3RyYSAmYW1wOyBUcmEtTGEtTGEgQmFuZCwgVGhlIFNpbHZlciBNdC4gWmlvbiBNZW1vcmlhbCBPcmNoZXN0cmEgYW5kIFRyYS1MYS1MYSBCYW5kIFdpdGggQ2hvaXIsIFRoZWUgU2lsdmVyIE1vdW50YWluIFJldmVyaWVzLCBUaGVlIFNpbHZlciBNb3VudCBFbGVnaWVzLCBUaGVlIFNpbHZlciBNdC4gWmlvbiBNZW1vcmlhbCBPcmNoZXN0cmEgJmFtcDsgVHJhLUxhLUxhIEJhbmQsIFRoZWUgU2lsdmVyIE10LiBaaW9uPGJyIC8+CiAgICAgICAgPGEgdGl0bGU9IltHZW5yZTU2XSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9Qb3N0JTJkUm9jay8iPlBvc3QtUm9jazwvYT4sIDxhIHRpdGxlPSJbR2VucmU1Ml0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvQXJ0K1JvY2svIj5BcnQgUm9jazwvYT4sIDxhIHRpdGxlPSJbR2VucmUyMDFdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL01vZGVybitDbGFzc2ljYWwvIj5Nb2Rlcm4gQ2xhc3NpY2FsPC9hPjxiciAvPgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDo3cHg7Ij48aW1nIHNyYz0iLy9lLnNubWMuaW8vMi41L2ltZy9pbWFnZXMvYmxhbmsucG5nIiBjbGFzcz0iZmxhZyBmbGFnLWNhIiBhbHQ9IkNhbmFkYSIgdGl0bGU9IkNhbmFkYSIgLz4gJm5ic3A7CiAgICAgICBGb3JtZWQgMTk5OTwvZGl2PgoKICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6MC43ZW07IGZvbnQtc2l6ZTowLjllbTsgY29sb3I6dmFyKC0tbW9uby04KSI+PGkgY2xhc3M9ImZhciBmYS1xdWVzdGlvbi1jaXJjbGUiPjwvaT4gUG9zdC1Sb2NrIGJhbmQgZnJvbSBDYW5hZGE8L2Rpdj48L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+IDxiciAvPjx0YWJsZT48dHIgY2xhc3M9ImluZm9ib3giPgogICAgICAgICAgICA8dGQgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZ19jZWxsIj48ZGl2IHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO3BhZGRpbmctYm90dG9tOmNhbGMoIDEwMCUgLyAxLjAyMDQwODE2MzI2NTMwNjEpOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWcgbGF6eWxvYWQiIGRhdGEtc3JjPSIvL2Uuc25tYy5pby9pLzE1MC9zLzQ4YWM5NjhmZDUxNDJhZGE5ZjQwZTI2ZmM0NGJjYmY0LzI3MzIyODYiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC90ZD48dGQgc3R5bGU9InBhZGRpbmctbGVmdDoxOHB4OyI+PHRhYmxlID48dHI+PCEtLW0tLT48dGQgc3R5bGU9InBhZGRpbmc6MDsiPjxiPjxhIGhyZWY9Ii9hcnRpc3Qvbl93X2EiIGNsYXNzPSJzZWFyY2hwYWdlIiAgdGl0bGU9IltBcnRpc3QzMDYwXSI+Ti5XLkE8L2E+PC9iPjwvdGQ+PHRkIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+PHNwYW4gY2xhc3M9InNtYWxsZ3JheSI+W0FydGlzdDMwNjBdPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPjwhLS1uLS0+PHNwYW4gY2xhc3M9InN1YmluZm8iPgogICAgICAgYS5rLmE6IE4uVy5BLiwgTmlnZ2F6IFdpdGggQXR0aXR1ZGUsIE5pZ2dheiBXaXQgQXR0aXR1ZGVzLCBOLlcuQS4gYW5kIHRoZSBQb3NzZTxiciAvPgogICAgICAgIDxhIHRpdGxlPSJbR2VucmUxMDldIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0dhbmdzdGErUmFwLyI+R2FuZ3N0YSBSYXA8L2E+LCA8YSB0aXRsZT0iW0dlbnJlMjldIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1dlc3QrQ29hc3QrSGlwK0hvcC8iPldlc3QgQ29hc3QgSGlwIEhvcDwvYT4sIDxhIHRpdGxlPSJbR2VucmUxMjNdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1BvbGl0aWNhbCtIaXArSG9wLyI+UG9saXRpY2FsIEhpcCBIb3A8L2E+PGJyIC8+CiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjdweDsiPjxpbWcgc3JjPSIvL2Uuc25tYy5pby8yLjUvaW1nL2ltYWdlcy9ibGFuay5wbmciIGNsYXNzPSJmbGFnIGZsYWctdXMiIGFsdD0iVW5pdGVkIFN0YXRlcyIgdGl0bGU9IlVuaXRlZCBTdGF0ZXMiIC8+ICZuYnNwOwogICAgICAgRm9ybWVkIDE5ODY8L2Rpdj4KCiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjAuN2VtOyBmb250LXNpemU6MC45ZW07IGNvbG9yOnZhcigtLW1vbm8tOCkiPjxpIGNsYXNzPSJmYXIgZmEtcXVlc3Rpb24tY2lyY2xlIj48L2k+IFdlc3QgY29hc3QgaGlwIGhvcCBncm91cDwvZGl2Pjwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT4gPGJyIC8+PHRhYmxlPjx0ciBjbGFzcz0iaW5mb2JveCI+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0icGFnZV9zZWFyY2hfaW1nX2NlbGwiPjxkaXYgc3R5bGU9InBvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7cGFkZGluZy1ib3R0b206Y2FsYyggMTAwJSAvIDEuMCk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZyBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZS5zbm1jLmlvL2kvMTUwL3MvOWVlOWUwMjYyYTNlYzI0ZjhlZjc0NzFhNjI5MWY0MmQvMTcyNDE0MiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L3RkPjx0ZCBzdHlsZT0icGFkZGluZy1sZWZ0OjE4cHg7Ij48dGFibGUgPjx0cj48IS0tbS0tPjx0ZCBzdHlsZT0icGFkZGluZzowOyI+PGI+PGEgaHJlZj0iL2FydGlzdC9hLXBlcmZlY3QtY2lyY2xlIiBjbGFzcz0ic2VhcmNocGFnZSIgIHRpdGxlPSJbQXJ0aXN0NTAxXSI+QSBQZXJmZWN0IENpcmNsZTwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0NTAxXTwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT48IS0tbi0tPjxzcGFuIGNsYXNzPSJzdWJpbmZvIj4KICAgICAgIAogICAgICAgIDxhIHRpdGxlPSJbR2VucmUxMTZdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0FsdGVybmF0aXZlK1JvY2svIj5BbHRlcm5hdGl2ZSBSb2NrPC9hPiwgPGEgdGl0bGU9IltHZW5yZTE2M10iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvQWNvdXN0aWMrUm9jay8iPkFjb3VzdGljIFJvY2s8L2E+LCA8YSB0aXRsZT0iW0dlbnJlNTJdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0FydCtSb2NrLyI+QXJ0IFJvY2s8L2E+PGJyIC8+CiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjdweDsiPjxpbWcgc3JjPSIvL2Uuc25tYy5pby8yLjUvaW1nL2ltYWdlcy9ibGFuay5wbmciIGNsYXNzPSJmbGFnIGZsYWctdXMiIGFsdD0iVW5pdGVkIFN0YXRlcyIgdGl0bGU9IlVuaXRlZCBTdGF0ZXMiIC8+ICZuYnNwOwogICAgICAgRm9ybWVkIDE5OTk8L2Rpdj4KCiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjAuN2VtOyBmb250LXNpemU6MC45ZW07IGNvbG9yOnZhcigtLW1vbm8tOCkiPjxpIGNsYXNzPSJmYXIgZmEtcXVlc3Rpb24tY2lyY2xlIj48L2k+IEFsdGVybmF0aXZlIFJvY2sgYmFuZCBmcm9tIHRoZSBVbml0ZWQgU3RhdGVzPC9kaXY+PC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPiA8YnIgLz48dGFibGU+PHRyIGNsYXNzPSJpbmZvYm94Ij4KICAgICAgICAgICAgPHRkIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWdfY2VsbCI+PGRpdiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbTpjYWxjKCAxMDAlIC8gMS4wKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0icGFnZV9zZWFyY2hfaW1nIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9lLnNubWMuaW8vaS8xNTAvcy8wOTVmOGY2NGRjNWNkMzlkMTcyMzI2OWY5ZDY1ODcwZi81MDk4NDk3IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L3RoZS1hbGNoZW1pc3QtMiIgY2xhc3M9InNlYXJjaHBhZ2UiICB0aXRsZT0iW0FydGlzdDQ1NTIyXSI+VGhlIEFsY2hlbWlzdDwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0NDU1MjJdPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPjwhLS1uLS0+PHNwYW4gY2xhc3M9InN1YmluZm8iPgogICAgICAgYS5rLmE6IEFsYW4gRGFuaWVsIE1hbWFuIFtiaXJ0aCBuYW1lXSwgMXN0IEluZmFudHJ5LCBBLiBNYW1hbiwgQS4gTWFtbWFuLCBBbCBDaGVtaXN0LCBBbD9DaGVtaXN0LCBBbGNoZW1pc3QsIEtpbmcgQWxjaGVtaXN0LCBNdWRmb290LCBUaGUgQWxjZW1pc3QsIFRoZSBBbGNoaW1pc3Q8YnIgLz4KICAgICAgICA8YSB0aXRsZT0iW0dlbnJlMTddIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0luc3RydW1lbnRhbCtIaXArSG9wLyI+SW5zdHJ1bWVudGFsIEhpcCBIb3A8L2E+LCA8YSB0aXRsZT0iW0dlbnJlMTA4XSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9BYnN0cmFjdCtIaXArSG9wLyI+QWJzdHJhY3QgSGlwIEhvcDwvYT4sIDxhIHRpdGxlPSJbR2VucmUxNl0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvSGFyZGNvcmUrSGlwK0hvcC8iPkhhcmRjb3JlIEhpcCBIb3A8L2E+PGJyIC8+CiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjdweDsiPjxpbWcgc3JjPSIvL2Uuc25tYy5pby8yLjUvaW1nL2ltYWdlcy9ibGFuay5wbmciIGNsYXNzPSJmbGFnIGZsYWctdXMiIGFsdD0iVW5pdGVkIFN0YXRlcyIgdGl0bGU9IlVuaXRlZCBTdGF0ZXMiIC8+ICZuYnNwOwogICAgICAgQm9ybiAyNSBPY3RvYmVyIDE5NzcgPC9kaXY+CgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDowLjdlbTsgZm9udC1zaXplOjAuOWVtOyBjb2xvcjp2YXIoLS1tb25vLTgpIj48aSBjbGFzcz0iZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZSI+PC9pPiBVUyBoaXAtaG9wIHByb2R1Y2VyICZhbXA7IHJhcHBlcjwvZGl2Pjwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT4gPGJyIC8+PHRhYmxlPjx0ciBjbGFzcz0iaW5mb2JveCI+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0icGFnZV9zZWFyY2hfaW1nX2NlbGwiPjxkaXYgc3R5bGU9InBvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7cGFkZGluZy1ib3R0b206Y2FsYyggMTAwJSAvIDEuMCk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZyBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZS5zbm1jLmlvL2kvMTUwL3MvYjlkZTFjZDZiNzg5M2U2NjczZjk3ZDc4MDk3ZTZlMTMvMjU1MTk2NyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L3RkPjx0ZCBzdHlsZT0icGFkZGluZy1sZWZ0OjE4cHg7Ij48dGFibGUgPjx0cj48IS0tbS0tPjx0ZCBzdHlsZT0icGFkZGluZzowOyI+PGI+PGEgaHJlZj0iL2FydGlzdC90aGVfYWxhbl9wYXJzb25zX3Byb2plY3QiIGNsYXNzPSJzZWFyY2hwYWdlIiAgdGl0bGU9IltBcnRpc3Q4OTZdIj5UaGUgQWxhbiBQYXJzb25zIFByb2plY3Q8L2E+PC9iPjwvdGQ+PHRkIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+PHNwYW4gY2xhc3M9InNtYWxsZ3JheSI+W0FydGlzdDg5Nl08L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+PCEtLW4tLT48c3BhbiBjbGFzcz0ic3ViaW5mbyI+CiAgICAgICBhLmsuYTogQVBQLCBBLlAuUC4sIFRoZSBBbGFuIFBhcnNvbnMgUHJvamVrdCwgQWxvbiBQYXJzb25zIFByb2plY3QsIEZyZXVkaWFuYTxiciAvPgogICAgICAgIDxhIHRpdGxlPSJbR2VucmU0NTBdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1Byb2dyZXNzaXZlK1BvcC8iPlByb2dyZXNzaXZlIFBvcDwvYT4sIDxhIHRpdGxlPSJbR2VucmU2MzBdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1BvcCtSb2NrLyI+UG9wIFJvY2s8L2E+LCA8YSB0aXRsZT0iW0dlbnJlNTJdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0FydCtSb2NrLyI+QXJ0IFJvY2s8L2E+PGJyIC8+CiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjdweDsiPjxpbWcgc3JjPSIvL2Uuc25tYy5pby8yLjUvaW1nL2ltYWdlcy9ibGFuay5wbmciIGNsYXNzPSJmbGFnIGZsYWctZ2IiIGFsdD0iVW5pdGVkIEtpbmdkb20iIHRpdGxlPSJVbml0ZWQgS2luZ2RvbSIgLz4gJm5ic3A7CiAgICAgICBGb3JtZWQgMTk3NTwvZGl2PgoKICAgICAgIDwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT4gPGJyIC8+PHRhYmxlPjx0ciBjbGFzcz0iaW5mb2JveCI+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0icGFnZV9zZWFyY2hfaW1nX2NlbGwiPjxkaXYgc3R5bGU9InBvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7cGFkZGluZy1ib3R0b206Y2FsYyggMTAwJSAvIDEuMCk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZyBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZS5zbm1jLmlvL2kvMTUwL3MvODU2OTk4Y2E3NTE2OTE2ZWM4ZDQ1MjA2YjU3NGY2ODEvMjEyOTY5MyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L3RkPjx0ZCBzdHlsZT0icGFkZGluZy1sZWZ0OjE4cHg7Ij48dGFibGUgPjx0cj48IS0tbS0tPjx0ZCBzdHlsZT0icGFkZGluZzowOyI+PGI+PGEgaHJlZj0iL2FydGlzdC9hLWZpbmUtYm9hdC10aGF0LWNvZmZpbiIgY2xhc3M9InNlYXJjaHBhZ2UiICB0aXRsZT0iW0FydGlzdDEyODQwMF0iPkEgRmluZSBCb2F0LCBUaGF0IENvZmZpbiE8L2E+PC9iPjwvdGQ+PHRkIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+PHNwYW4gY2xhc3M9InNtYWxsZ3JheSI+W0FydGlzdDEyODQwMF08L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+PCEtLW4tLT48c3BhbiBjbGFzcz0ic3ViaW5mbyI+CiAgICAgICBhLmsuYTogQ2FsbGluZyBHaW5hIENsYXJrIFsxOTk5LTIwMDRdLCBhIGZpbmUgYm9hdCB0aGF0IGNvZmZpbjxiciAvPgogICAgICAgIDxhIHRpdGxlPSJbR2VucmU0OTZdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1NjcmVhbW8vIj5TY3JlYW1vPC9hPjxiciAvPgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDo3cHg7Ij48aW1nIHNyYz0iLy9lLnNubWMuaW8vMi41L2ltZy9pbWFnZXMvYmxhbmsucG5nIiBjbGFzcz0iZmxhZyBmbGFnLWRlIiBhbHQ9Ikdlcm1hbnkiIHRpdGxlPSJHZXJtYW55IiAvPiAmbmJzcDsKICAgICAgIEZvcm1lZCAyMDA0PC9kaXY+CgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDowLjdlbTsgZm9udC1zaXplOjAuOWVtOyBjb2xvcjp2YXIoLS1tb25vLTgpIj48aSBjbGFzcz0iZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZSI+PC9pPiBTY3JlYW1vIGJhbmQgZnJvbSBMw7xiZWNrLCBHZXJtYW55PC9kaXY+PC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPiA8YnIgLz48dGFibGU+PHRyIGNsYXNzPSJpbmZvYm94Ij4KICAgICAgICAgICAgPHRkIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWdfY2VsbCI+PGRpdiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbTpjYWxjKCAxMDAlIC8gMS4wKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0icGFnZV9zZWFyY2hfaW1nIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9lLnNubWMuaW8vaS8xNTAvcy81YmU0YjAxYTEwZjUwZTIwNjI1NmI0ZDhhZjVlYjA1Ny8zMjEwNjcxIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L2plZmYtYmVjayIgY2xhc3M9InNlYXJjaHBhZ2UiICB0aXRsZT0iW0FydGlzdDg1Nl0iPkplZmYgQmVjazwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0ODU2XTwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT48IS0tbi0tPjxzcGFuIGNsYXNzPSJzdWJpbmZvIj4KICAgICAgIGEuay5hOiBHZW9mZnJleSBBcm5vbGQgQmVjayBbYmlydGggbmFtZV0sIEEuTi4gT3RoZXI8YnIgLz4KICAgICAgICA8YSB0aXRsZT0iW0dlbnJlMTgyXSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9KYXp6JTJkUm9jay8iPkphenotUm9jazwvYT4sIDxhIHRpdGxlPSJbR2VucmUxNTZdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0JsdWVzK1JvY2svIj5CbHVlcyBSb2NrPC9hPiwgPGEgdGl0bGU9IltHZW5yZTVdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1JvY2svIj5Sb2NrPC9hPjxiciAvPgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDo3cHg7Ij48aW1nIHNyYz0iLy9lLnNubWMuaW8vMi41L2ltZy9pbWFnZXMvYmxhbmsucG5nIiBjbGFzcz0iZmxhZyBmbGFnLWdiIiBhbHQ9IlVuaXRlZCBLaW5nZG9tIiB0aXRsZT0iVW5pdGVkIEtpbmdkb20iIC8+ICZuYnNwOwogICAgICAgQm9ybiAyNCBKdW5lIDE5NDQgPC9kaXY+CgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDowLjdlbTsgZm9udC1zaXplOjAuOWVtOyBjb2xvcjp2YXIoLS1tb25vLTgpIj48aSBjbGFzcz0iZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZSI+PC9pPiBSb2NrIC8gQmx1ZXMgLyBKYXp6IEZ1c2lvbiBndWl0YXJpc3Q8L2Rpdj48L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+IDxiciAvPjx0YWJsZT48dHIgY2xhc3M9ImluZm9ib3giPgogICAgICAgICAgICA8dGQgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZ19jZWxsIj48ZGl2IHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO3BhZGRpbmctYm90dG9tOmNhbGMoIDEwMCUgLyAxLjApOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWcgbGF6eWxvYWQiIGRhdGEtc3JjPSIvL2Uuc25tYy5pby9pLzE1MC9zLzA3YTI1Y2IzMzM3NzdiZTlmNDU4MmQ5MjZjMzY1ZmU2LzIwODI3NzAiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC90ZD48dGQgc3R5bGU9InBhZGRpbmctbGVmdDoxOHB4OyI+PHRhYmxlID48dHI+PCEtLW0tLT48dGQgc3R5bGU9InBhZGRpbmc6MDsiPjxiPjxhIGhyZWY9Ii9hcnRpc3QvdGhlLXNwZWNpYWxzIiBjbGFzcz0ic2VhcmNocGFnZSIgIHRpdGxlPSJbQXJ0aXN0MTAxXSI+VGhlIFNwZWNpYWxzPC9hPjwvYj48L3RkPjx0ZCBzdHlsZT0idGV4dC1hbGlnbjpyaWdodDsiPjxzcGFuIGNsYXNzPSJzbWFsbGdyYXkiPltBcnRpc3QxMDFdPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPjwhLS1uLS0+PHNwYW4gY2xhc3M9InN1YmluZm8iPgogICAgICAgYS5rLmE6IFRoZSBBdXRvbWF0aWNzLCBUaGUgQ292ZW50cnkgQXV0b21hdGljcywgPHNwYW4gdGl0bGU9IltBcnRpc3QxMzExN10iPi4uLjwvc3Bhbj4sIFRoZSBTcGVjaWFsIEFLQSwgVGhlIFNwZWNpYWwgQUtBIFRoZSBBdXRvbWF0aWNzPGJyIC8+CiAgICAgICAgPGEgdGl0bGU9IltHZW5yZTEwMjIyXSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS8yK1RvbmUvIj4yIFRvbmU8L2E+LCA8YSB0aXRsZT0iW0dlbnJlMTQ2XSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9Sb2Nrc3RlYWR5LyI+Um9ja3N0ZWFkeTwvYT4sIDxhIHRpdGxlPSJbR2VucmUxNDVdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1NrYS8iPlNrYTwvYT48YnIgLz4KICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6N3B4OyI+PGltZyBzcmM9Ii8vZS5zbm1jLmlvLzIuNS9pbWcvaW1hZ2VzL2JsYW5rLnBuZyIgY2xhc3M9ImZsYWcgZmxhZy1nYiIgYWx0PSJVbml0ZWQgS2luZ2RvbSIgdGl0bGU9IlVuaXRlZCBLaW5nZG9tIiAvPiAmbmJzcDsKICAgICAgIEZvcm1lZCAxOTc3PC9kaXY+CgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDowLjdlbTsgZm9udC1zaXplOjAuOWVtOyBjb2xvcjp2YXIoLS1tb25vLTgpIj48aSBjbGFzcz0iZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZSI+PC9pPiBCcml0aXNoIDIgVG9uZSBiYW5kPC9kaXY+PC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPiA8YnIgLz48dGFibGU+PHRyIGNsYXNzPSJpbmZvYm94Ij4KICAgICAgICAgICAgPHRkIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWdfY2VsbCI+PGRpdiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbTpjYWxjKCAxMDAlIC8gMS4wKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0icGFnZV9zZWFyY2hfaW1nIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9lLnNubWMuaW8vaS8xNTAvcy8yZjAyZGFmZTY2YmJhMDk1ZGEzZTE2MjQ2ZmVjYjA4My8yMTg5OTgwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L2FfaGEiIGNsYXNzPSJzZWFyY2hwYWdlIiAgdGl0bGU9IltBcnRpc3QxMTEwXSI+YS1oYTwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0MTExMF08L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+PCEtLW4tLT48c3BhbiBjbGFzcz0ic3ViaW5mbyI+CiAgICAgICAKICAgICAgICA8YSB0aXRsZT0iW0dlbnJlMzgyXSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9TeW50aHBvcC8iPlN5bnRocG9wPC9hPiwgPGEgdGl0bGU9IltHZW5yZTM2XSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9Qb3AvIj5Qb3A8L2E+LCA8YSB0aXRsZT0iW0dlbnJlNjMwXSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9Qb3ArUm9jay8iPlBvcCBSb2NrPC9hPjxiciAvPgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDo3cHg7Ij48aW1nIHNyYz0iLy9lLnNubWMuaW8vMi41L2ltZy9pbWFnZXMvYmxhbmsucG5nIiBjbGFzcz0iZmxhZyBmbGFnLW5vIiBhbHQ9Ik5vcndheSIgdGl0bGU9Ik5vcndheSIgLz4gJm5ic3A7CiAgICAgICBGb3JtZWQgMTk4MjwvZGl2PgoKICAgICAgIDwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT4gPGJyIC8+PHRhYmxlPjx0ciBjbGFzcz0iaW5mb2JveCI+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0icGFnZV9zZWFyY2hfaW1nX2NlbGwiPjxkaXYgc3R5bGU9InBvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7cGFkZGluZy1ib3R0b206Y2FsYyggMTAwJSAvIDEuMDA3MTk0MjQ0NjA0MzE2NSk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZyBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZS5zbm1jLmlvL2kvMTUwL3MvMzI3YTlhZWRjMDQzNTUxMDZkMDc2ZWE4YTVhZTdmMzYvMjU2MDQ1NyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L3RkPjx0ZCBzdHlsZT0icGFkZGluZy1sZWZ0OjE4cHg7Ij48dGFibGUgPjx0cj48IS0tbS0tPjx0ZCBzdHlsZT0icGFkZGluZzowOyI+PGI+PGEgaHJlZj0iL2FydGlzdC9hZmkiIGNsYXNzPSJzZWFyY2hwYWdlIiAgdGl0bGU9IltBcnRpc3QzNjddIj5BRkk8L2E+PC9iPjwvdGQ+PHRkIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+PHNwYW4gY2xhc3M9InNtYWxsZ3JheSI+W0FydGlzdDM2N108L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+PCEtLW4tLT48c3BhbiBjbGFzcz0ic3ViaW5mbyI+CiAgICAgICBhLmsuYTogQSBGaXJlIEluc2lkZTxiciAvPgogICAgICAgIDxhIHRpdGxlPSJbR2VucmUxMTZdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0FsdGVybmF0aXZlK1JvY2svIj5BbHRlcm5hdGl2ZSBSb2NrPC9hPiwgPGEgdGl0bGU9IltHZW5yZTI4MF0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvUG9wK1B1bmsvIj5Qb3AgUHVuazwvYT4sIDxhIHRpdGxlPSJbR2VucmUxNjBdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1B1bmsrUm9jay8iPlB1bmsgUm9jazwvYT48YnIgLz4KICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6N3B4OyI+PGltZyBzcmM9Ii8vZS5zbm1jLmlvLzIuNS9pbWcvaW1hZ2VzL2JsYW5rLnBuZyIgY2xhc3M9ImZsYWcgZmxhZy11cyIgYWx0PSJVbml0ZWQgU3RhdGVzIiB0aXRsZT0iVW5pdGVkIFN0YXRlcyIgLz4gJm5ic3A7CiAgICAgICBGb3JtZWQgMTk5MTwvZGl2PgoKICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6MC43ZW07IGZvbnQtc2l6ZTowLjllbTsgY29sb3I6dmFyKC0tbW9uby04KSI+PGkgY2xhc3M9ImZhciBmYS1xdWVzdGlvbi1jaXJjbGUiPjwvaT4gUHVuayBSb2NrL0FsdGVybmF0aXZlIFJvY2sgYmFuZCBmcm9tIENhbGlmb3JuaWE8L2Rpdj48L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+IDxiciAvPjx0YWJsZT48dHIgY2xhc3M9ImluZm9ib3giPgogICAgICAgICAgICA8dGQgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZ19jZWxsIj48ZGl2IHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO3BhZGRpbmctYm90dG9tOmNhbGMoIDEwMCUgLyAxLjAwNzU2NzU2NzU2NzU2NzUpOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWcgbGF6eWxvYWQiIGRhdGEtc3JjPSIvL2Uuc25tYy5pby9pLzE1MC9zL2Y4YmY4NmNmMzI3N2FkMjU4ODM3ZjUxZDg4M2Q1ODgzLzU0NjUwNzIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC90ZD48dGQgc3R5bGU9InBhZGRpbmctbGVmdDoxOHB4OyI+PHRhYmxlID48dHI+PCEtLW0tLT48dGQgc3R5bGU9InBhZGRpbmc6MDsiPjxiPjxhIGhyZWY9Ii9hcnRpc3Qvc2lhIiBjbGFzcz0ic2VhcmNocGFnZSIgIHRpdGxlPSJbQXJ0aXN0MjQyOF0iPlNpYTwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0MjQyOF08L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+PCEtLW4tLT48c3BhbiBjbGFzcz0ic3ViaW5mbyI+CiAgICAgICBhLmsuYTogU2lhIEthdGUgSXNvYmVsbGUgRnVybGVyIFtiaXJ0aCBuYW1lXSwgUy5pLkE8YnIgLz4KICAgICAgICA8YSB0aXRsZT0iW0dlbnJlNDAyXSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9FbGVjdHJvcG9wLyI+RWxlY3Ryb3BvcDwvYT4sIDxhIHRpdGxlPSJbR2VucmUzOTBdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0luZGllK1BvcC8iPkluZGllIFBvcDwvYT4sIDxhIHRpdGxlPSJbR2VucmUzNzldIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0FydCtQb3AvIj5BcnQgUG9wPC9hPjxiciAvPgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDo3cHg7Ij48aW1nIHNyYz0iLy9lLnNubWMuaW8vMi41L2ltZy9pbWFnZXMvYmxhbmsucG5nIiBjbGFzcz0iZmxhZyBmbGFnLWF1IiBhbHQ9IkF1c3RyYWxpYSIgdGl0bGU9IkF1c3RyYWxpYSIgLz4gJm5ic3A7CiAgICAgICBCb3JuIDE4IERlY2VtYmVyIDE5NzUgPC9kaXY+CgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDowLjdlbTsgZm9udC1zaXplOjAuOWVtOyBjb2xvcjp2YXIoLS1tb25vLTgpIj48aSBjbGFzcz0iZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZSI+PC9pPiBBdXN0cmFsaWFuIHNpbmdlci1zb25nd3JpdGVyIGFuZCByZWNvcmQgcHJvZHVjZXIgYmFzZWQgaW4gTG9uZG9uLCBVSzwvZGl2Pjwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT4gPGJyIC8+PHRhYmxlPjx0ciBjbGFzcz0iaW5mb2JveCI+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0icGFnZV9zZWFyY2hfaW1nX2NlbGwiPjxkaXYgc3R5bGU9InBvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7cGFkZGluZy1ib3R0b206Y2FsYyggMTAwJSAvIDEuMCk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZyBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZS5zbm1jLmlvL2kvMTUwL3MvMTkzMzE0ZDU5YjM2MmE5ZTkxZjAxMjI2ZjgwNjJjN2UvNTM0MjM5OCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L3RkPjx0ZCBzdHlsZT0icGFkZGluZy1sZWZ0OjE4cHg7Ij48dGFibGUgPjx0cj48IS0tbS0tPjx0ZCBzdHlsZT0icGFkZGluZzowOyI+PGI+PGEgaHJlZj0iL2FydGlzdC9rZXZpbi1hYnN0cmFjdCIgY2xhc3M9InNlYXJjaHBhZ2UiICB0aXRsZT0iW0FydGlzdDEwNDQ3NjBdIj5LZXZpbiBBYnN0cmFjdDwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0MTA0NDc2MF08L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+PCEtLW4tLT48c3BhbiBjbGFzcz0ic3ViaW5mbyI+CiAgICAgICBhLmsuYTogQ2xpZmZvcmQgRmVybmFuZG8gU2ltcHNvbiBbYmlydGggbmFtZV0sIEdJLCBJYW4gU2ltcHNvbiwgWW91bmcgSy5BLjxiciAvPgogICAgICAgIDxhIHRpdGxlPSJbR2VucmUzNTg1Nl0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvQWx0ZXJuYXRpdmUrUiUyNkIvIj5BbHRlcm5hdGl2ZSBSJkI8L2E+LCA8YSB0aXRsZT0iW0dlbnJlMzc5XSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9BcnQrUG9wLyI+QXJ0IFBvcDwvYT4sIDxhIHRpdGxlPSJbR2VucmUxNF0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvQ29uc2Npb3VzK0hpcCtIb3AvIj5Db25zY2lvdXMgSGlwIEhvcDwvYT48YnIgLz4KICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6N3B4OyI+PGltZyBzcmM9Ii8vZS5zbm1jLmlvLzIuNS9pbWcvaW1hZ2VzL2JsYW5rLnBuZyIgY2xhc3M9ImZsYWcgZmxhZy11cyIgYWx0PSJVbml0ZWQgU3RhdGVzIiB0aXRsZT0iVW5pdGVkIFN0YXRlcyIgLz4gJm5ic3A7CiAgICAgICBCb3JuIDE2IEp1bHkgMTk5NiA8L2Rpdj4KCiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjAuN2VtOyBmb250LXNpemU6MC45ZW07IGNvbG9yOnZhcigtLW1vbm8tOCkiPjxpIGNsYXNzPSJmYXIgZmEtcXVlc3Rpb24tY2lyY2xlIj48L2k+IFJhcHBlciBhbmQgc2luZ2VyLCBtZW1iZXIgb2YgQnJvY2toYW1wdG9uPC9kaXY+PC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPiA8YnIgLz48dGFibGU+PHRyIGNsYXNzPSJpbmZvYm94Ij4KICAgICAgICAgICAgPHRkIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWdfY2VsbCI+PGRpdiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbTpjYWxjKCAxMDAlIC8gMS4wKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0icGFnZV9zZWFyY2hfaW1nIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9lLnNubWMuaW8vaS8xNTAvcy82MjVmODFiZmI3MjM2NjkyMDAzNTk1ZmRkM2NiNzdhYy8yOTQ4MjUyIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L2ZseWluZy1zYXVjZXItYXR0YWNrIiBjbGFzcz0ic2VhcmNocGFnZSIgIHRpdGxlPSJbQXJ0aXN0MjQ1M10iPkZseWluZyBTYXVjZXIgQXR0YWNrPC9hPjwvYj48L3RkPjx0ZCBzdHlsZT0idGV4dC1hbGlnbjpyaWdodDsiPjxzcGFuIGNsYXNzPSJzbWFsbGdyYXkiPltBcnRpc3QyNDUzXTwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT48IS0tbi0tPjxzcGFuIGNsYXNzPSJzdWJpbmZvIj4KICAgICAgIGEuay5hOiBGLlMuQS48YnIgLz4KICAgICAgICA8YSB0aXRsZT0iW0dlbnJlODFdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1NwYWNlK1JvY2svIj5TcGFjZSBSb2NrPC9hPiwgPGEgdGl0bGU9IltHZW5yZTM2Nl0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvTmVvJTJkUHN5Y2hlZGVsaWEvIj5OZW8tUHN5Y2hlZGVsaWE8L2E+LCA8YSB0aXRsZT0iW0dlbnJlOThdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1Nob2VnYXplLyI+U2hvZWdhemU8L2E+PGJyIC8+CiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjdweDsiPjxpbWcgc3JjPSIvL2Uuc25tYy5pby8yLjUvaW1nL2ltYWdlcy9ibGFuay5wbmciIGNsYXNzPSJmbGFnIGZsYWctZ2IiIGFsdD0iVW5pdGVkIEtpbmdkb20iIHRpdGxlPSJVbml0ZWQgS2luZ2RvbSIgLz4gJm5ic3A7CiAgICAgICBGb3JtZWQgMTk5MjwvZGl2PgoKICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6MC43ZW07IGZvbnQtc2l6ZTowLjllbTsgY29sb3I6dmFyKC0tbW9uby04KSI+PGkgY2xhc3M9ImZhciBmYS1xdWVzdGlvbi1jaXJjbGUiPjwvaT4gU3BhY2UgUm9jayAvIFBvc3QgUm9jayBwcm9qZWN0PC9kaXY+PC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPiA8YnIgLz48dGFibGU+PHRyIGNsYXNzPSJpbmZvYm94Ij4KICAgICAgICAgICAgPHRkIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWdfY2VsbCI+PGRpdiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbTpjYWxjKCAxMDAlIC8gMS4wKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0icGFnZV9zZWFyY2hfaW1nIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9lLnNubWMuaW8vaS8xNTAvcy80MmRkZGJiZTBiNThkMTQyNmJhZTg0OTY4NWViODIwYy8yNjA0MTc4IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L2RlYXRoX2FuZ2VsIiBjbGFzcz0ic2VhcmNocGFnZSIgIHRpdGxlPSJbQXJ0aXN0MTE0MzRdIj5EZWF0aCBBbmdlbDwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0MTE0MzRdPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPjwhLS1uLS0+PHNwYW4gY2xhc3M9InN1YmluZm8iPgogICAgICAgYS5rLmE6IEQuQS48YnIgLz4KICAgICAgICA8YSB0aXRsZT0iW0dlbnJlMTQwXSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9UaHJhc2grTWV0YWwvIj5UaHJhc2ggTWV0YWw8L2E+LCA8YSB0aXRsZT0iW0dlbnJlNDcyXSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9IZWF2eStNZXRhbC8iPkhlYXZ5IE1ldGFsPC9hPjxiciAvPgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDo3cHg7Ij48aW1nIHNyYz0iLy9lLnNubWMuaW8vMi41L2ltZy9pbWFnZXMvYmxhbmsucG5nIiBjbGFzcz0iZmxhZyBmbGFnLXVzIiBhbHQ9IlVuaXRlZCBTdGF0ZXMiIHRpdGxlPSJVbml0ZWQgU3RhdGVzIiAvPiAmbmJzcDsKICAgICAgIEZvcm1lZCAxOTgyPC9kaXY+CgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDowLjdlbTsgZm9udC1zaXplOjAuOWVtOyBjb2xvcjp2YXIoLS1tb25vLTgpIj48aSBjbGFzcz0iZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZSI+PC9pPiBUaHJhc2ggTWV0YWwgYmFuZCBmcm9tIFNhbiBGcmFuY2lzY28sIENBPC9kaXY+PC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPiA8YnIgLz48dGFibGU+PHRyIGNsYXNzPSJpbmZvYm94Ij4KICAgICAgICAgICAgPHRkIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWdfY2VsbCI+PGRpdiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbTpjYWxjKCAxMDAlIC8gMC45OTI5MDc4MDE0MTg0Mzk3KTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0icGFnZV9zZWFyY2hfaW1nIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9lLnNubWMuaW8vaS8xNTAvcy8wNmEwODQ1N2ZhNjg5MGRiNzY4Y2M2ZjIzZWRlYTk5Yy8yNTgxMDY3IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L2JsYWNrLWV5ZWQtcGVhcyIgY2xhc3M9InNlYXJjaHBhZ2UiICB0aXRsZT0iW0FydGlzdDIzNTZdIj5CbGFjayBFeWVkIFBlYXM8L2E+PC9iPjwvdGQ+PHRkIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+PHNwYW4gY2xhc3M9InNtYWxsZ3JheSI+W0FydGlzdDIzNTZdPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPjwhLS1uLS0+PHNwYW4gY2xhc3M9InN1YmluZm8iPgogICAgICAgYS5rLmE6IEEuVC5CLkEuTi4gS2xhbm4gWzE5OTEtOTVdLCBUaGUgQmxhY2sgRXllZCBQZWFzPGJyIC8+CiAgICAgICAgPGEgdGl0bGU9IltHZW5yZTQwMl0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvRWxlY3Ryb3BvcC8iPkVsZWN0cm9wb3A8L2E+LCA8YSB0aXRsZT0iW0dlbnJlMjJdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL1BvcCtSYXAvIj5Qb3AgUmFwPC9hPiwgPGEgdGl0bGU9IltHZW5yZTIxMDgyXSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9FbGVjdHJvK0hvdXNlLyI+RWxlY3RybyBIb3VzZTwvYT48YnIgLz4KICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6N3B4OyI+PGltZyBzcmM9Ii8vZS5zbm1jLmlvLzIuNS9pbWcvaW1hZ2VzL2JsYW5rLnBuZyIgY2xhc3M9ImZsYWcgZmxhZy11cyIgYWx0PSJVbml0ZWQgU3RhdGVzIiB0aXRsZT0iVW5pdGVkIFN0YXRlcyIgLz4gJm5ic3A7CiAgICAgICBGb3JtZWQgMTk5NTwvZGl2PgoKICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6MC43ZW07IGZvbnQtc2l6ZTowLjllbTsgY29sb3I6dmFyKC0tbW9uby04KSI+PGkgY2xhc3M9ImZhciBmYS1xdWVzdGlvbi1jaXJjbGUiPjwvaT4gQW1lcmljYW4gSGlwIEhvcCBncm91cDwvZGl2Pjwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT4gPGJyIC8+PHRhYmxlPjx0ciBjbGFzcz0iaW5mb2JveCI+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0icGFnZV9zZWFyY2hfaW1nX2NlbGwiPjxkaXYgc3R5bGU9InBvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7cGFkZGluZy1ib3R0b206Y2FsYyggMTAwJSAvIDEuMCk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InBhZ2Vfc2VhcmNoX2ltZyBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZS5zbm1jLmlvLzIuNS9pbWcvaW1hZ2VzL2Jsb2NrZWRzLnBuZyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L3RkPjx0ZCBzdHlsZT0icGFkZGluZy1sZWZ0OjE4cHg7Ij48dGFibGUgPjx0cj48IS0tbS0tPjx0ZCBzdHlsZT0icGFkZGluZzowOyI+PGI+PGEgaHJlZj0iL2FydGlzdC9hX3dpbmdlZF92aWN0b3J5X2Zvcl90aGVfc3VsbGVuIiBjbGFzcz0ic2VhcmNocGFnZSIgIHRpdGxlPSJbQXJ0aXN0NzE3MjgyXSI+QSBXaW5nZWQgVmljdG9yeSBmb3IgdGhlIFN1bGxlbjwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0NzE3MjgyXTwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT48IS0tbi0tPjxzcGFuIGNsYXNzPSJzdWJpbmZvIj4KICAgICAgIAogICAgICAgIDxhIHRpdGxlPSJbR2VucmU4NF0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvQW1iaWVudC8iPkFtYmllbnQ8L2E+LCA8YSB0aXRsZT0iW0dlbnJlMjAxXSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9Nb2Rlcm4rQ2xhc3NpY2FsLyI+TW9kZXJuIENsYXNzaWNhbDwvYT48YnIgLz4KICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6N3B4OyI+PGltZyBzcmM9Ii8vZS5zbm1jLmlvLzIuNS9pbWcvaW1hZ2VzL2JsYW5rLnBuZyIgY2xhc3M9ImZsYWcgZmxhZy1pdCIgYWx0PSJJdGFseSIgdGl0bGU9Ikl0YWx5IiAvPiAmbmJzcDsKICAgICAgIEZvcm1lZCAyMDA3PC9kaXY+CgogICAgICAgPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPiA8YnIgLz48dGFibGU+PHRyIGNsYXNzPSJpbmZvYm94Ij4KICAgICAgICAgICAgPHRkIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWdfY2VsbCI+PGRpdiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbTpjYWxjKCAxMDAlIC8gMS4wKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0icGFnZV9zZWFyY2hfaW1nIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9lLnNubWMuaW8vaS8xNTAvcy8zZjQwMTliZDVjZTViZDgxOWE0MjA3MmRkZmU0YTZjMC8xNjg5OTQwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L2EtZmxvY2stb2Ytc2VhZ3VsbHMiIGNsYXNzPSJzZWFyY2hwYWdlIiAgdGl0bGU9IltBcnRpc3QyNjI4XSI+QSBGbG9jayBvZiBTZWFndWxsczwvYT48L2I+PC90ZD48dGQgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij48c3BhbiBjbGFzcz0ic21hbGxncmF5Ij5bQXJ0aXN0MjYyOF08L3NwYW4+PC90ZD48L3RyPjwvdGFibGU+PCEtLW4tLT48c3BhbiBjbGFzcz0ic3ViaW5mbyI+CiAgICAgICAKICAgICAgICA8YSB0aXRsZT0iW0dlbnJlMzgyXSIgY2xhc3M9InNtYWxsZ3JlZW4iIGhyZWY9Ii9nZW5yZS9TeW50aHBvcC8iPlN5bnRocG9wPC9hPiwgPGEgdGl0bGU9IltHZW5yZTEyOV0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvTmV3K1dhdmUvIj5OZXcgV2F2ZTwvYT4sIDxhIHRpdGxlPSJbR2VucmU0NThdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL05ldytSb21hbnRpYy8iPk5ldyBSb21hbnRpYzwvYT48YnIgLz4KICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6N3B4OyI+PGltZyBzcmM9Ii8vZS5zbm1jLmlvLzIuNS9pbWcvaW1hZ2VzL2JsYW5rLnBuZyIgY2xhc3M9ImZsYWcgZmxhZy1nYiIgYWx0PSJVbml0ZWQgS2luZ2RvbSIgdGl0bGU9IlVuaXRlZCBLaW5nZG9tIiAvPiAmbmJzcDsKICAgICAgIEZvcm1lZCAxOTc5PC9kaXY+CgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDowLjdlbTsgZm9udC1zaXplOjAuOWVtOyBjb2xvcjp2YXIoLS1tb25vLTgpIj48aSBjbGFzcz0iZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZSI+PC9pPiBOZXcgV2F2ZSAvIFN5bnRoLXBvcCBiYW5kPC9kaXY+PC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPiA8YnIgLz48dGFibGU+PHRyIGNsYXNzPSJpbmZvYm94Ij4KICAgICAgICAgICAgPHRkIGNsYXNzPSJwYWdlX3NlYXJjaF9pbWdfY2VsbCI+PGRpdiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbTpjYWxjKCAxMDAlIC8gMS4wKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0icGFnZV9zZWFyY2hfaW1nIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9lLnNubWMuaW8vaS8xNTAvcy8wNThkODZjYmRlMjE5Y2ZkM2M5NWM2N2QwYTQ3ZTZiZi8zODE2MDA1IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MThweDsiPjx0YWJsZSA+PHRyPjwhLS1tLS0+PHRkIHN0eWxlPSJwYWRkaW5nOjA7Ij48Yj48YSBocmVmPSIvYXJ0aXN0L21hc3RhX2FjZSIgY2xhc3M9InNlYXJjaHBhZ2UiICB0aXRsZT0iW0FydGlzdDMwMzRdIj5NYXN0YSBBY2U8L2E+PC9iPjwvdGQ+PHRkIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+PHNwYW4gY2xhc3M9InNtYWxsZ3JheSI+W0FydGlzdDMwMzRdPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPjwhLS1uLS0+PHNwYW4gY2xhc3M9InN1YmluZm8iPgogICAgICAgYS5rLmE6IER1dmFsIENsZWFyIFtiaXJ0aCBuYW1lXSwgQWNlLCBBc2UsIEFzZSBPbmUsIENsZWFyLCBELkEuIENsZWFyLCBFY2EgUmV0c2FtLCBNLkEuLCBNYXN0YSBBc2UsIE1hc3RlciBBY2U8YnIgLz4KICAgICAgICA8YSB0aXRsZT0iW0dlbnJlMjhdIiBjbGFzcz0ic21hbGxncmVlbiIgaHJlZj0iL2dlbnJlL0Vhc3QrQ29hc3QrSGlwK0hvcC8iPkVhc3QgQ29hc3QgSGlwIEhvcDwvYT4sIDxhIHRpdGxlPSJbR2VucmUyNTEwOF0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvQm9vbStCYXAvIj5Cb29tIEJhcDwvYT4sIDxhIHRpdGxlPSJbR2VucmUxNl0iIGNsYXNzPSJzbWFsbGdyZWVuIiBocmVmPSIvZ2VucmUvSGFyZGNvcmUrSGlwK0hvcC8iPkhhcmRjb3JlIEhpcCBIb3A8L2E+PGJyIC8+CiAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjdweDsiPjxpbWcgc3JjPSIvL2Uuc25tYy5pby8yLjUvaW1nL2ltYWdlcy9ibGFuay5wbmciIGNsYXNzPSJmbGFnIGZsYWctdXMiIGFsdD0iVW5pdGVkIFN0YXRlcyIgdGl0bGU9IlVuaXRlZCBTdGF0ZXMiIC8+ICZuYnNwOwogICAgICAgQm9ybiA0IERlY2VtYmVyIDE5NjYgPC9kaXY+CgogICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDowLjdlbTsgZm9udC1zaXplOjAuOWVtOyBjb2xvcjp2YXIoLS1tb25vLTgpIj48aSBjbGFzcz0iZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZSI+PC9pPiBSYXBwZXIgJmFtcDsgcHJvZHVjZXIgZnJvbSBCcm9va2x5bjwvZGl2Pjwvc3Bhbj48L3RkPjwvdHI+PC90YWJsZT4gPGJyIC8+PGRpdiBzdHlsZT0idGV4dC1hbGlnbjpyaWdodCI+PGEgaWQ9InNlYXJjaF9tb3JlbGluayIgc3R5bGU9Im1hcmdpbi1yaWdodDoxZW07IiBocmVmPSIvc2VhcmNoP3NlYXJjaHRlcm09YSZhbXA7c2VhcmNodHlwZT1hJmFtcDtwYWdlPTMiPk1vcmUgUmVzdWx0czwvYT48YnIgLz48YnIgLz48L2Rpdj48IS0tei0tPjxkaXYgc3R5bGU9InBhZGRpbmc6MWVtOyI+PGJyIC8+PGJyIC8+SWYgdGhlIGFydGlzdCB5b3UncmUgbG9va2luZyBmb3IgaXNuJ3QgbGlzdGVkLCBnbyBoZXJlOiA8Yj48YSBocmVmPSIvYXJ0aXN0L3Byb2ZpbGVfYWMiPkFkZCBhcnRpc3Q8L2E+PC9iPjwvZGl2PjwvdGQ+PC90cj48L3RhYmxlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICA8IS0tIGVuZCBzZWFyY2ggLS0+PGRpdiBjbGFzcz0iY29sdW1uX2ZpbGxlciIgaWQ9ImNvbHVtbl9maWxsZXJfbGVmdCI+PC9kaXY+PC9kaXY+CiAgICAgICAgICAgPGRpdiBpZD0iY29sdW1uX2NvbnRhaW5lcl9yaWdodCIgY2xhc3M9ImxhcmdlLTQgY29sdW1ucyI+PGRpdiBjbGFzcz0iY29sdW1uX2ZpbGxlciIgaWQ9ImNvbHVtbl9maWxsZXJfcmlnaHQiPjwvZGl2PjwvZGl2PjwvZGl2PgogICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhcmZpeCI+PC9kaXY+CiAgICAgICAgIDwhLS0gZW5kIGNvbnRlbnQgYW5kIGNvbnRlbnRfd3JhcHBlciAtLT4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgaWQ9InRyYWNrX3ByZXZpZXdfZnJhbWUiICBjbGFzcz0idHJhY2tfcHJldmlld19mcmFtZSI+CgogICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJhY2tfcHJldmlld19jbG9zZSIgb25DbGljaz0iJCgnI3RyYWNrX3ByZXZpZXdfZnJhbWUnKS5oaWRlKCk7JCgnI3RyYWNrX3ByZXZpZXcnKS5odG1sKCcnKTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXRpbWVzLWNpcmNsZSI+PC9pPgogICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgPGRpdiBpZD0idHJhY2tfcHJldmlld190ZXh0IiBjbGFzcz0idHJhY2tfcHJldmlld190ZXh0Ij4KICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgIDxkaXYgaWQ9InRyYWNrX3ByZXZpZXciIGNsYXNzPSJ0cmFja19wcmV2aWV3Ij4KCiAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXlfaW52aXNpYmxlIiBpZD0ib3ZlcmxheV9pbnZpc2libGUiPjwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9InVpX2Nyb3BwZXJfZnJhbWUiIGlkPSJ1aV9jcm9wcGVyX2ZyYW1lIj48L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbF9wYXJlbnRfZnJhbWUiIGlkPSJtb2RhbF9wYXJlbnRfZnJhbWUiPgogICAgICAgICAgICAgPGRpdiBvbkNsaWNrPSJyeW0uY2xvc2VNb2RhbCgpOyIgaWQ9Im1vZGFsX292ZXJsYXkiIGNsYXNzPSJtb2RhbF9vdmVybGF5IiBzdHlsZT0iIj5DbG9zZSA8aSBjbGFzcz0iZmEgZmEtdGltZXMiPjwvaT48L2Rpdj4KICAgICAgICAgICAgIDxkaXYgb25DbGljaz0icnltLmNsb3NlTW9kYWwoKTsiIGlkPSJtb2RhbF9vdmVybGF5X2ludmlzaWJsZSIgY2xhc3M9Im1vZGFsX292ZXJsYXlfaW52aXNpYmxlIiBzdHlsZT0iIj48L2Rpdj4KICAgICAgICAgICAgIDxkaXYgaWQ9Im1vZGFsX3BhcmVudF9mcmFtZV9pbm5lciIgY2xhc3M9Im1vZGFsX3BhcmVudF9mcmFtZV9pbm5lciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ibW9kYWxfY29udGVudCIgY2xhc3M9Im1vZGFsX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbF9wYXJlbnRfZnJhbWVfbGV2ZWxfMiIgaWQ9Im1vZGFsX3BhcmVudF9mcmFtZV9sZXZlbF8yIj4KICAgICAgICAgICAgIDxkaXYgb25DbGljaz0icnltLmNsb3NlTW9kYWwyKCk7IiBpZD0ibW9kYWxfb3ZlcmxheV9sZXZlbF8yIiBjbGFzcz0ibW9kYWxfb3ZlcmxheSIgc3R5bGU9IiI+Q2xvc2UgPGkgY2xhc3M9ImZhIGZhLXRpbWVzIj48L2k+PC9kaXY+CiAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9InJ5bS5jbG9zZU1vZGFsMigpOyIgaWQ9Im1vZGFsX292ZXJsYXlfaW52aXNpYmxlX2xldmVsXzIiIGNsYXNzPSJtb2RhbF9vdmVybGF5X2ludmlzaWJsZSIgc3R5bGU9IiI+PC9kaXY+CiAgICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbF9wYXJlbnRfZnJhbWVfaW5uZXJfbGV2ZWxfMiIgY2xhc3M9Im1vZGFsX3BhcmVudF9mcmFtZV9pbm5lcl9sZXZlbF8yIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbF9jb250ZW50X2xldmVsXzIiIGNsYXNzPSJtb2RhbF9jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CgoKCiAgICAgICAgICAgICA8IS0tIH5+fn5+fn5+IGVuZCBjb250ZW50IH5+fn5+fn5+fn5+fn5+fiAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idWlfY2hvb3Nlcl9yZXN1bHRzX2ZyYW1lIiBpZD0idWlfY2hvb3Nlcl9yZXN1bHRzX2ZyYW1lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVpX2Nob29zZXJfcmVzdWx0cyBiZy1mZmYgYWx0ZXJuYXRlIiBpZD0idWlfY2hvb3Nlcl9yZXN1bHRzIj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4gIAoKICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbnRlbnRfY292ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBpZD0icHJldmlld19mcmFtZSI+PC9kaXY+CiAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICA8ZGl2IGlkPSJ2b3RpbmdfdWlfZnJhbWUiPjwvZGl2PgoKICAgICAgICAgIDxkaXYgc3R5bGU9ImNsZWFyOmJvdGg7Ij48L2Rpdj4KICAgICAgCjxmb290ZXI+CiAgPGRpdiBjbGFzcz0iZm9vdGVyX2lubmVyIj4KCiAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX21haW5fc2VjdGlvbiI+PGRpdiBjbGFzcz0ibWluaWxvZ29fZnJhbWUiPjxkaXYgY2xhc3M9Im1pbmlsb2dvIj4gPGRpdiBjbGFzcz0ibG9nb19zb25lbWljX2J3XzI0Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1pbmlsb2dvX3RleHQiPlJhdGUgWW91ciBNdXNpYzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj48L2Rpdj4KCgogICAgICAgIDxkaXYgY2xhc3M9ImNvcHlyaWdodCI+JmNvcHk7IDIwMDAtMjAyMSBTb25lbWljLCBJbmMuPC9kaXY+CiAgICAgICAgICAKCiAgICAgICAgCgogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4Ij48L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXJmaXgiPjwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJzb2NpYWxfaWNvbnMiPiAKICAgICAgICAgICA8YSByZWw9Im5vb3BlbmVyIiB0aXRsZT0iRm9sbG93IHVzIG9uIEZhY2Vib29rIiBocmVmPSJodHRwczovL2ZhY2Vib29rLmNvbS9zb25lbWljLm5ldHdvcmsvIiB0YXJnZXQ9Il9ibGFuayI+PGkgY2xhc3M9ImZhYiBmYS1mYWNlYm9vay1zcXVhcmUiPjwvaT48L2E+IAogICAgICAgICAgIDxhIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJGb2xsb3cgdXMgb24gVHdpdHRlciIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9zb25lbWljLyIgdGFyZ2V0PSJfYmxhbmsiPjxpIGNsYXNzPSJmYWIgZmEtdHdpdHRlci1zcXVhcmUiPjwvaT48L2E+IAogICAgICAgICAgIDxhIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJGb2xsb3cgdXMgb24gSW5zdGFncmFtIiBocmVmPSJodHRwczovL2luc3RhZ3JhbS5jb20vc29uZW1pYy8iIHRhcmdldD0iX2JsYW5rIj48aSBjbGFzcz0iZmFiIGZhLWluc3RhZ3JhbS1zcXVhcmUiPjwvaT48L2E+IAogICAgICAgICAgIDxhIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJGb2xsb3cgdXMgb24gU3BvdGlmeSIgaHJlZj0iaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3VzZXIvc29uZW1pYy5jb20iIHRhcmdldD0iX2JsYW5rIj48aSBjbGFzcz0iZmFiIGZhLXNwb3RpZnkiPjwvaT48L2E+IAogICAgIAogICAgICAgIDwvZGl2PgogICAgIDwvZGl2PiAKICAKICA8ZGl2IGlkPSJleHBhbmRfZnVsbF9mb290ZXIiIGNsYXNzPSJtb2JpbGVfZXhwYW5kYWJsZV9mdWxsIG1vYmlsZV9leHBhbmRfZm9vdGVyIj4KCiAgICAgICAgPGRpdiBpZD0iZXhwYW5kX2Z1bGxfaGVhZGVyX2Zvb3RlciIgY2xhc3M9Im1vYmlsZV9leHBhbmRhYmxlX2Z1bGxfaGVhZGVyIiBvbmNsaWNrPSJSWU1tb2JpbGUubW9iaWxlRXhwYW5kLnRvZ2dsZUZ1bGwoJ2Zvb3RlcicpOyI+CgogICAgICAgICAgIDxkaXYgY2xhc3M9Im1vYmlsZV9leHBhbmRhYmxlX2Z1bGxfaWNvbnMiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vYmlsZV9leHBhbmRhYmxlX2Z1bGxfZXhwYW5kX2ljb25fZXhwYW5kZWQiPgogICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jYXJldC1kb3duIj48L2k+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9iaWxlX2V4cGFuZGFibGVfZnVsbF9leHBhbmRfaWNvbl9oaWRkZW4iPgogICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jYXJldC1yaWdodCI+PC9pPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICA8ZGl2IGlkPSJleHBhbmRfZnVsbF9uYW1lX2Zvb3RlciIgY2xhc3M9Im1vYmlsZV9leHBhbmRhYmxlX2Z1bGxfbmFtZSI+CiAgICAgICAgICAgICAgU2l0ZSBsaW5rcwogICAgICAgICAgIDwvZGl2PgoKICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBpZD0iZXhwYW5kX2Z1bGxfY29udGVudF9mb290ZXIiIGNsYXNzPSJtb2JpbGVfZXhwYW5kYWJsZV9mdWxsX2NvbnRlbnQiPgogICAgICAgICAgIAogICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9zZWN0aW9ucyI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX3NlY3Rpb24iIGlkPSJzZWN0aW9uX25ldHdvcmsiPgogICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9oZWFkZXIiPlJZTSBOZXR3b3JrPC9kaXY+CiAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX3N1Yl9saW5rcyI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImFzb25lbWljIiBocmVmPSJodHRwczovL3JhdGV5b3VybXVzaWMuY29tLyI+UllNIDxzcGFuIGNsYXNzPSJzdWIiPm11c2ljPC9zcGFuPjwvYT4KICAgICAgICAgICAgICA8YSBjbGFzcz0iYXNvbmVtaWMiIGhyZWY9Imh0dHBzOi8vc29uZW1pYy5jb20vIj5Tb25lbWljIDxzcGFuIGNsYXNzPSJzdWIiPm5ldyBtdXNpYyBzaXRlIChiZXRhKTwvc3Bhbj48L2E+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImFjaW5lbW9zIiBocmVmPSJodHRwczovL2NpbmVtb3MuY29tLyI+Q2luZW1vcyA8c3BhbiBjbGFzcz0ic3ViIj5maWxtIChiZXRhKTwvc3Bhbj48L2E+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImFnbGl0Y2h3YXZlIiBocmVmPSJodHRwczovL2dsaXRjaHdhdmUuY29tLyI+R2xpdGNod2F2ZSA8c3BhbiBjbGFzcz0ic3ViIj52aWRlbyBnYW1lcyAoYmV0YSk8L3NwYW4+PC9hPgogICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9zZWN0aW9uIj4KICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfaGVhZGVyIj5JbmZvPC9kaXY+CiAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX3N1Yl9saW5rcyI+CiAgICAgICAgICAgICAgPGEgaHJlZj0iL3dpa2kvUllNOkZBUSI+RkFRPC9hPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9kZXZlbG9wbWVudC8iPkRldmVsb3BtZW50IHN0YXR1czwvYT4KICAgICAgICAgICAgICA8YSBocmVmPSIvcnltemlsbGEvIiBjbGFzcz0iaGFzX3RpcCIgZGF0YS10aXB0aXA9IlJlcG9ydCBidWdzIGFuZCByZXF1ZXN0IGZlYXR1cmVzIj5SWU16aWxsYTwvYT4KICAgICAgICAgICAgICA8YSBocmVmPSIvcXVldWVzLyI+U3VibWlzc2lvbnM8L2E+CiAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX3NlY3Rpb24iPgogICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9oZWFkZXIiPlBvbGljeTwvZGl2PgogICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9zdWJfbGlua3MiPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgIDxhIGhyZWY9Ii93aWtpLyI+RGF0YWJhc2Ugc3RhbmRhcmRzPC9hPgogICAgICAgICAgICAgIDxhIGNsYXNzPSIiIGhyZWY9Ii9wcml2YWN5Ij5Qcml2YWN5PC9hPgogICAgICAgICAgICAgIDxhIGNsYXNzPSIiIGhyZWY9Ii90b3MiPlRlcm1zIG9mIHNlcnZpY2U8L2E+CiAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX3NlY3Rpb24iPgogICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9oZWFkZXIiPkNvbnRhY3QgdXM8L2Rpdj4KICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfc3ViX2xpbmtzIj4KICAgICAgICAgICAgICA8YSBocmVmPSIvY29udGFjdCI+U3VwcG9ydCAvIEZlZWRiYWNrPC9hPgogICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYnV5LmJ1eXNlbGxhZHMuY29tL2RpcmVjdG9yeS9yYXRleW91cm11c2ljL2NoZWNrb3V0L25ldyI+QWR2ZXJ0aXNlPC9hPgogICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vc29uZW1pYy5jb20vam9icy8iPkpvYnM8L2E+CiAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgPC9kaXY+CiAgCiAgICAgICAgPC9kaXY+CiAgICAgPC9kaXY+CiAgCiAKIAoKICAgICA8ZGl2IHN0eWxlPSJjbGVhcjpib3RoOyI+PC9kaXY+CiAgPC9kaXY+Cgo8L2Zvb3Rlcj48L2JvZHk+PC9odG1sPjxzY3JpcHQ+PC9zY3JpcHQ+CgogICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9lLnNubWMuaW8vMi41L2pzL2pxdWVyeS5taW4uMi5qcyI+PC9zY3JpcHQ+PHNjcmlwdCBzcmM9Ii8vZS5zbm1jLmlvL2Rpc3QvanMvYnVuZGxlLmpzP3Y9NzBkZTY3ZWYtZDM1MC00MmQwLTk4NWEtNDFlZWY0YTFjY2Q4Ij48L3NjcmlwdD48bGluayBpZD0iY3NzLWJhc2UtZmxhZ3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9lLnNubWMuaW8vZGlzdC9jc3MvYmFzZS9mbGFncy5jc3M/dj03MGRlNjdlZi1kMzUwLTQyZDAtOTg1YS00MWVlZjRhMWNjZDgiIHR5cGU9InRleHQvY3NzIiAvPgogICAgICA8c2NyaXB0PgogICAgICAgIChmdW5jdGlvbihpLHMsbyxnLHIsYSxtKXtpWydHb29nbGVBbmFseXRpY3NPYmplY3QnXT1yO2lbcl09aVtyXXx8ZnVuY3Rpb24oKXsKICAgICAgICAoaVtyXS5xPWlbcl0ucXx8W10pLnB1c2goYXJndW1lbnRzKX0saVtyXS5sPTEqbmV3IERhdGUoKTthPXMuY3JlYXRlRWxlbWVudChvKSwKICAgICAgICBtPXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07YS5hc3luYz0xO2Euc3JjPWc7bS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLG0pCiAgICAgICAgfSkod2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCcvL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanMnLCdnYScpOwoKCiAgICAgIAogICAgICAgICAgIGNvbnNvbGUubG9nKCdyeW0uYW5hbHl0aWNzOiBHb29nbGUgYW5hbHl0aWNzIHBhZ2V2aWV3IGV2ZW50IHNlbnQuJyk7CiAgICAgICAgICAgZ2EoJ2NyZWF0ZScsICdVQS01OTA1Ny0xJywgJ2F1dG8nKTsKICAgICAgICAgICBnYSgnc2VuZCcsICdwYWdldmlldycpOwogICAgICAgICAgICAKICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxzY3JpcHQ+CgogICAgICAgICAgICBmb3IgKCB2YXIgaSBpbiByeW1pbml0ICkgewogICAgICAgICAgICAgICB2YXIgZm4gPSByeW1pbml0W2ldOwogICAgICAgICAgICAgICByeW1pbml0W2ldID0gbnVsbDsKICAgICAgICAgICAgICAgaWYgKCBmbiApIHsKICAgICAgICAgICAgICAgICAgZm4oKTsKICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByeW1pbml0ID0gbnVsbDsKICAgICAgICAgPC9zY3JpcHQ+CiAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii8vZS5zbm1jLmlvLzIuNS9qcy9iYXNlcmVxLW1pbi1iNS5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii8vZS5zbm1jLmlvLzIuNS9qcy9qcXVlcnktYXBwZWFyLWIxLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9lLnNubWMuaW8vMi41L2pzL3RhZ2dlcmYudjIuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvL2Uuc25tYy5pby8yLjUvanMvcmF0aW5ndjQuanMiPjwvc2NyaXB0Pg==
  recorded_at: Mon, 14 Jun 2021 12:11:34 GMT
recorded_with: VCR 6.0.0
