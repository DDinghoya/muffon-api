---
http_interactions:
- request:
    method: get
    uri: https://rateyourmusic.com/release/album/sparks/in-outer-space/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.1p64
      Cookie:
      - sec_bs=<RATEYOURMUSIC_SEC_BS>; sec_id=<RATEYOURMUSIC_SEC_ID>; sec_ts=<RATEYOURMUSIC_SEC_TS>;
        ulv=<RATEYOURMUSIC_SESSION_ID>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - rateyourmusic.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Wed, 09 Jun 2021 05:39:03 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Keep-Alive:
      - timeout=60
      Set-Cookie:
      - is_logged_in=1; Expires=Tue, 01-Jan-2030 01:00:00 GMT; Path=/; HttpOnly;
      - sec_bs=d81dc5b696f59b99a5b69f9482ec0472; Expires=Wed, 09-Jun-2021 13:01:25
        GMT; Path=/; secure; HttpOnly;
      - sec_id=0448d6d4253b263b98006b6216b98153; Expires=Wed, 09-Jun-2021 13:01:25
        GMT; Path=/; secure; HttpOnly;
      - sec_ts=1623242185; Expires=Wed, 09-Jun-2021 13:01:25 GMT; Path=/; secure;
        HttpOnly;
      Mime-Version:
      - '1.0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en" id="page_release" class="rym page_release scope_music">
<head>

      
<link rel="preconnect" href="//e.snmc.io" />
<link rel="preconnect" href="//www.google-analytics.com" />
<link rel="dns-prefetch" href="//ib.adnxs.com" />
<link rel="dns-prefetch" href="//securepubads.g.doubleclick.net" />
<link rel="dns-prefetch" href="//tpc.googlesyndication.com" />
<link rel="dns-prefetch" href="//pagead2.googlesyndication.com" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="//e.snmc.io/2.5/img/sonemic.png" type="image/png" />
<title>In Outer Space by Sparks (Album, Synthpop): Reviews, Ratings, Credits, Song list - Rate Your Music</title>
      <meta name="description" content="In Outer Space, an Album by Sparks. Released in June 1983 on Atlantic (catalog no. 80055-1; Vinyl LP). Genres: Synthpop.  Rated #1048 in the best albums of 1983.  Featured peformers: Ron Mael (producer, writer, synthesizer), Russell Mael (producer, writer, vocals), Brian Reeves (mixing), Brian Gardner (mastering), Bob Haag (guitar, guitar synthesizer, background vocals, bass guitar), Leslie Bohem (bass guitar, background vocals), David Kendrick (drums), James Goodwin (keyboards), Larry Vigon (art direction, design), Jim Shea (photography)." />
      <meta name="keywords" content="rate your music, sonemic, rate music, rate albums, music catalog, music catalogue, social software, album reviews, music lists, community, music recommendations, concert listings, record labels, venues, shows" />
         <meta name="robots" content="max-image-preview:large" />
       <meta name="twitter:card" content="summary_large_image" />
                <meta name="twitter:site" content="@Sonemic" />
                <meta property="og:site_name" content="Rate Your Music">

                <meta property="og:url" content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" />
                <meta property="og:type" content="music.album">
                <meta property="og:title" content="In Outer Space by Sparks - RYM/Sonemic" /><meta property="og:description" content="In Outer Space, an Album by Sparks. Released in June 1983 on Atlantic (catalog no. 80055-1; Vinyl LP). Genres: Synthpop.  Rated #1048 in the best albums of 1983.  Featured peformers: Ron Mael (producer, writer, synthesizer), Russell Mael (producer, writer, vocals), Brian Reeves (mixing), Brian Gardner (mastering), Bob Haag (guitar, guitar synthesizer, background vocals, bass guitar), Leslie Bohem (bass guitar, background vocals), David Kendrick (drums), James Goodwin (keyboards), Larry Vigon (art direction, design), Jim Shea (photography)." /><meta property="og:image" content="https://e.snmc.io/i/600/s/31c8b65119c8367bd46bd030c4633d66/2656352" /><script> window.rym_dist_version = '0b7068f6-17b5-4599-9812-4101fd5364aa';</script> 
      <script>
         ryminit = window.ryminit || [];

         function rymQ( a ) {
            if ( !ryminit ) {
               a();
            } else {
               ryminit.push(a);
            }
         }
        if ( 'ontouchstart' in window ) {
          document.documentElement.className += ' touch';
        } else {
          document.documentElement.className += ' noTouch';
        }

      </script>
      <style id="base">*,*::before,*::after{margin:0;padding:0;box-sizing:border-box}html{font-size:62.5%}body{font-family:"ProximaNova",Helvetica,Verdana,Arial,Sans-Serif;font-size:12px}h1,h2,h3,h4,h5{font-weight:normal;margin:0;margin-bottom:.25em}h1{font-size:2.5em;font-weight:bold}h2{font-size:2.2em}h3{font-size:1.9em}h4{font-size:1.6em}h5{font-size:1.5em}@media only screen and (max-width:48em){h1{font-size:2em;font-weight:bold}h2{font-size:1.9em}h3{font-size:1.8em}h4{font-size:1.7em}h5{font-size:1.5em}}p{line-height:1.6em;margin-bottom:1em}blockquote{margin:0 1.5em}table{width:100%;border-collapse:collapse}td{border-collapse:collapse;padding:5px}tr{border-collapse:collapse}.anchor{scroll-margin-top:3em}a.artist,a.game,a.work.major,a.user,a.film,a.film_artist{font-weight:bold}img.lazyload:not([src]){visibility:hidden}img.cover{width:2.8em;height:2.8em;float:left;object-fit:cover;border-radius:4px;margin-right:.75em}img.size_2{width:2em;height:2em}img.image_release{width:2.8em;height:2.8em;float:left;object-fit:cover;border-radius:4px;margin-right:.75em;overflow:hidden}input,select,textarea,.input_auto_resize_frame,.input_auto_resize_frame::after{font-size:16px;font-weight:normal;padding:.15em;border-radius:3px;background:var(--mono-f);color:var(--mono-3);border:1px solid var(--mono-a);font-family:"Proxima Nova",Verdana,Arial,sans-serif}textarea{width:100%}input:disabled,select:disabled,textarea:disabled{color:var(--mono-8);background:var(--mono-e)}select{min-width:8em}label{font-weight:bold}.overlay_invisible{background:rgba(0,0,0,.1);z-index:45;position:fixed;top:0;left:0;right:0;bottom:0;display:none}.content_wrapper_outer{xbackground:var(--mono-f2);background-repeat:no-repeat;background-size:cover!important;background-position:center center!important}.precontent{-webkit-transform:scale3d(1,1,1);position:absolute;top:-100vh;left:0;height:100vh;background-size:cover!important;width:100%;z-index:-1}#content_cover{position:absolute;z-index:7000;background:rgba(0,0,15,.6);display:none}#content_total_cover{position:fixed: top:0;left:0;right:0;bottom:0;z-index:50;background:rgba(0,0,0,.1)}body.has_background_image #content_wrapper{background:rgba(49,49,49,.2);margin:0 auto;max-width:132.5em;padding-left:2px;padding-right:2px}#content_cover{z-index:900}#content{padding:3em;font-size:1.25em;line-height:1.3;background:var(--mono-f);min-height:calc(100vh);max-width:106em;margin:0 auto;margin-top:4rem}html.size_mode_smaller #content{font-size:1.15em;line-height:1.25;max-width:115em}@media only screen and (max-width:48em){#content{margin-top:0;padding:.5em}}.smallgray,a.smallgray{font-size:.9em}.error{padding:.5em 1.5em;margin-bottom:1em}.code{font-family:"Courier new",monospace;border-left:5px solid;padding:1em}.note{border:1px solid;padding:1em 2em}.warning{padding:1em 2em;margin-bottom:1em}.warning p{margin:0}.notice{padding:1em 2em;color:var(--mono-8);font-size:.9em;margin-bottom:1em}.notice p{margin:0}.clear,.clearfix{clear:both}.comma_separated:after{content:", "}.comma_separated:last-child:after{content:""}.show-for-small-table-row{display:none}.show-for-small-inline{display:none}.hide-for-small-block{display:none}.hide-for-small-inline{display:none}.show-for-small{display:none}.hide-for-small{display:none}@media only screen and (min-width: 48.063em){.hide-for-small-block{display:block}.hide-for-small{display:inherit}.hide-for-small-inline{display:inline}tr.hide-for-small{display:table-row}}@media only screen and (max-width: 48em){.show-for-small{display:inherit!important}.show-for-small-inline{display:inline!important}.show-for-small-table-row{display:table-row}}
@font-face{font-family:"ProximaNova";src:url(https://e.snmc.io/3.0/font/Proxima-Nova/Regular.woff2?d) format("woff2"),url(https://e.snmc.io/3.0/font/Proxima-Nova/Regular.woff?d) format("woff");font-weight:normal;font-style:normal;font-display:swap}@font-face{font-family:"ProximaNova";src:url(https://e.snmc.io/3.0/font/Proxima-Nova/Bold.woff2?d) format("woff2"),url(https://e.snmc.io/3.0/font/Proxima-Nova/Bold.woff?d) format("woff");font-weight:700;font-display:swap;font-style:normal}@font-face{font-family:"Font Awesome 5 Free";font-style:normal;font-weight:400;font-display:swap;src:url(https://e.snmc.io/3.0/font/fa-2021-03-02/fa-regular-400.woff2?b) format("woff2"),url(https://e.snmc.io/3.0/font/fa-2021-03-02/fa-regular-400.woff?b) format("woff")}@font-face{font-family:"Font Awesome 5 Brands";font-style:normal;font-weight:400;font-display:swap;src:url(https://e.snmc.io/3.0/font/fa-2021-03-02/fa-brands-400.woff2?b) format("woff2"),url(https://e.snmc.io/3.0/font/fa-2021-03-02/fa-brands-400.woff?b) format("woff")}@font-face{font-family:"Font Awesome 5 Free";font-style:normal;font-weight:900;font-display:swap;src:url(https://e.snmc.io/3.0/font/fa-2021-03-02/fa-solid-900.woff2?b) format("woff2"),url(https://e.snmc.io/3.0/font/fa-2021-03-02/fa-solid-900.woff?b) format("woff")}
</style><script id="base_script">window.rym_dist = '//e.snmc.io';
var n=(e,t,s)=>new Promise((d,r)=>{var l=o=>{try{a(s.next(o))}catch(i){r(i)}},c=o=>{try{a(s.throw(o))}catch(i){r(i)}},a=o=>o.done?d(o.value):Promise.resolve(o.value).then(l,c);a((s=s.apply(e,t)).next())});window.RYMtemplate=window.RYMtemplate||{};function ensureTemplateLoaded(e){return n(this,null,function*(){if(console.log("ensureTemplateLoaded: "+e),RYMtemplate[e])return;let t=[];return yield import((window.rym_dist||"//e.snmc.io")+"/dist/template/"+e+".js?v="+window.rym_dist_version).then(d=>{console.log("dependencies: "+d.compiledTemplate.dependencies),t=d.compiledTemplate.dependencies.map(r=>ensureTemplateLoaded(r)),window.RYMtemplate[e]=d.compiledTemplate.template}),console.log("promise array has "+t.length),Promise.all(t)})}function renderTemplate(e,t){return function(){return n(this,null,function*(){return window.RYMtemplate=window.RYMtemplate||{},RYMtemplate[e]||(console.log("calling ensureTemplateLoaded: "+e),yield ensureTemplateLoaded(e),console.log("calling render: "+e)),RYMtemplate[e].render(t,RYMtemplate)})}()}function applyLazyLoadBehavior(e,t){e.classList.remove("lazyload"),e.classList.add("lazyload-complete"),e.dataset.srcset&&(e.srcset=e.dataset.srcset,delete e.dataset.srcset),window.devicePixelRatio>1&&e.dataset.bkg2x?(e.style.backgroundImage=`url('${e.dataset.bkg2x}')`,delete e.dataset.bkg2x,delete e.dataset.bkg):e.dataset.bkg&&(e.style.backgroundImage=`url('${e.dataset.bkg}')`,delete e.dataset.bkg),e.dataset.src&&(e.src=e.dataset.src,delete e.dataset.src),e.dataset.suggestions&&(console.log("loading suggestions"),RYMsuggestions.load($(e))),!t&&e.dataset.adcode&&adVisibilityChanged(e.dataset.adcode)}window.refreshLazyLoadList=function(){const e=document.querySelectorAll(".lazyload");for(let s=0;s<e.length;s++)typeof window.lazyloadObserver!="undefined"?window.lazyloadObserver.observe(e[s]):applyLazyLoadBehavior(e[s],!0);const t=document.querySelectorAll(".lazyload-ad");for(let s=0;s<t.length;s++)typeof window.lazyloadObserverAds!="undefined"?window.lazyloadObserverAds.observe(t[s]):applyLazyLoadBehavior(t[s],!0)},rymQ(function(){typeof IntersectionObserver!="undefined"&&(window.lazyloadObserver=new IntersectionObserver(e=>{for(let t=0;t<e.length;t++)if(e[t].isIntersecting){const s=e[t].target;lazyloadObserver.unobserve(s),applyLazyLoadBehavior(s,!1)}},{rootMargin:"300px 50px 300px 50px"}),window.lazyloadObserverAds=new IntersectionObserver(e=>{for(let t=0;t<e.length;t++)if(e[t].isIntersecting){const s=e[t].target;lazyloadObserverAds.unobserve(s),applyLazyLoadBehavior(s,!1)}},{rootMargin:"10px 0px 10px 0px"}))}),rymQ(function(){refreshLazyLoadList()});
</script><link id="css-bundle" rel="stylesheet" href="//e.snmc.io/dist/css/bundle.css?v=0b7068f6-17b5-4599-9812-4101fd5364aa" type="text/css" /><link id="css-page-release" rel="stylesheet" href="//e.snmc.io/dist/css/page/release.css?v=0b7068f6-17b5-4599-9812-4101fd5364aa" type="text/css" /><link id="css-component-release_issue_list" rel="stylesheet" href="//e.snmc.io/dist/css/component/release_issue_list.css?v=0b7068f6-17b5-4599-9812-4101fd5364aa" type="text/css" /><link id="css-component-play_history" rel="stylesheet" href="//e.snmc.io/dist/css/component/play_history.css?v=0b7068f6-17b5-4599-9812-4101fd5364aa" type="text/css" /><link id="css-component-suggestions" rel="stylesheet" href="//e.snmc.io/dist/css/component/suggestions.css?v=0b7068f6-17b5-4599-9812-4101fd5364aa" type="text/css" /><link id="css-ui-comments" rel="stylesheet" href="//e.snmc.io/dist/css/ui/comments.css?v=0b7068f6-17b5-4599-9812-4101fd5364aa" type="text/css" /><link id="css-component-suggestions" rel="stylesheet" href="//e.snmc.io/dist/css/component/suggestions.css?v=0b7068f6-17b5-4599-9812-4101fd5364aa" type="text/css" /><link id="css-component-lists" rel="stylesheet" href="//e.snmc.io/dist/css/component/lists.css?v=0b7068f6-17b5-4599-9812-4101fd5364aa" type="text/css" /><link id="css-component-discussion" rel="stylesheet" href="//e.snmc.io/dist/css/component/discussion.css?v=0b7068f6-17b5-4599-9812-4101fd5364aa" type="text/css" />

               <style>

                  .ui_fundraiser_letter_date {
                     text-align:right;
                     margin-bottom:1em;
                  }

                  .ui_fundraiser_letter {
                     background:linear-gradient(to bottom, var(--mono-f), var(--mono-f8));
                     box-shadow:1px 1px 5px rgba(0,0,0,0.2);
                     padding:2em 4em;
                     font-size:1.1em;
                  }

                  .ui_fundraiser_letter_button_subtext {
                     font-size:0.8em;
                     font-weight:normal;
                  }

                  .ui_fundraiser_letter_button {
                     height:3.5em;
                     width:45%;
                     line-height:1.2;
                     margin-right:2%;
                     margin-bottom:1em;
                     float:left;
                     display:flex;
                     flex-direction:column;
                     align-items:center;
                     justify-content:center;
                  }

                  .ui_fundraiser_letter_button_subscribe, .ui_fundraiser_letter_button_subscribe:hover {
                     background: var(--gen-blue-dark);
                     color: var(--mono-abs-f);
                  }


                  .ui_fundraiser_letter_button_donate {

                  }

                  .ui_fundraiser_bar_outline {
                     border:1px solid var(--mono-d8);
                     height:1em;
                     width:100%;
                     border-radius:1em;
                     overflow:hidden;
                     background:var(--mono-f8);
                     position:relative;
                  }

                  .ui_fundraiser_bar_frame {
                     padding-right:6%;
                     margin-bottom:2em;
                  }

                  .ui_fundraiser_bar_inner {
                     position:absolute;
                     top:0;
                     left:0;
                     height:1em;
                     background:crimson;

                     width:50%
                  }

                  .ui_fundraiser_bar_legend {
                     width:100%;
                     height:3em;
                     margin-top:0.2em;
                     font-size:0.8em;
                     color:var(--mono-5);
                     position:relative;
                  }

                  .ui_fundraiser_bar_legend_item {
                     position:absolute;
                     top:0;
                     z-index:1;
                  }

                  .ui_fundraiser_bar_legend_start {
                     left:0;
                  }

                  .ui_fundraiser_bar_legend_fundraiser_goal {
                      right:37.32%;
                      text-align:right;
                  }

                  .ui_fundraiser_bar_legend_longterm_goal {
                     right:0;
                     text-align:right;
                  }

                  .ui_fundraiser_bar_goal_divider {
                     position:absolute;
                     top:0;
                      right:37.32%;
                      height:1em;
                      width:1px;
                      background:var(--mono-8)         
                  }

                  .ui_fundraiser_letter_contents {
                     padding-right:3em;
                  }

                  .ui_fundraiser_letter_contents p {
                     line-height:1.5;
                  }

                  .ui_fundraiser_current {
                     xfloat:right;
                     font-size:0.8em;
                     line-height:1.2;
                     color:var(--mono-6);
                  }

                  @media only screen and (max-width:48em) {


                     .ui_fundraiser_letter {
                        padding:2em 1.5em;
                     }

                     .ui_fundraiser_letter_contents {
                        padding-right:0;
                     }

                  }

               
             .ui_fundraiser_bar_inner  { width: 13.6%; background: crimson; } </style>
         <!-- Confiant -->
         <script defer src="https://confiant-integrations.global.ssl.fastly.net/auRQOdOlhE1icXOcEFNrokIoNbU/gpt_and_prebid/config.js"></script>
      
         <!-- Begin Google Funding Choices CMP -->
         <script>
             window.googlefc = window.googlefc || {};
             window.googlefc.ccpa = window.googlefc.ccpa || {}
             window.googlefc.callbackQueue = window.googlefc.callbackQueue || [];
         </script>
      
         <script>
            window.consent_gathered = 1;
            window.consent_complete = 1;
            window.is_in_ca = false;
            window.is_in_eu = 0;
            googlefc.controlledMessagingFunction = (message) => {
               message.proceed( window.is_in_ca || window.is_in_eu );
            }
            googlefc.callbackQueue.push({
                'CONSENT_DATA_READY':
                () => {
                     console.log('rym.ads: CONSENT_DATA_READY')
                     if ( window.is_in_ca ) {
                        window.consent_gathered = true;
                        console.log ('CA CMP completed')
                     }
                     __tcfapi('getTCData', 2, function(tcData, success) { 

                        if ( tcData && tcData['purpose'] && tcData['purpose']['consents'] ) {
                           var consents = tcData['purpose']['consents'];

                           if ( consents[1] ) {
                              console.log('consent OK')
                              window.consent_gathered = true;
                           }
                        }
                     });
                     window.consent_complete = true;

                }
              });



         </script>
      
         <script>(function(){/*

             Copyright The Closure Library Authors.
             SPDX-License-Identifier: Apache-2.0
            */
            'use strict';var g=function(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}},l=this||self,m=/^[\w+/_-]+[=]{0,2}$/,p=null,q=function(){},r=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";
            if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";else if("function"==b&&"undefined"==typeof a.call)return"object";return b},u=function(a,b){function c(){}c.prototype=b.prototype;a.prototype=new c;a.prototype.constructor=a};var v=function(a,b){Object.defineProperty(l,a,{configurable:!1,get:function(){return b},set:q})};var y=function(a,b){this.b=a===w&&b||"";this.a=x},x={},w={};var aa=function(a,b){a.src=b instanceof y&&b.constructor===y&&b.a===x?b.b:"type_error:TrustedResourceUrl";if(null===p)b:{b=l.document;if((b=b.querySelector&&b.querySelector("script[nonce]"))&&(b=b.nonce||b.getAttribute("nonce"))&&m.test(b)){p=b;break b}p=""}b=p;b&&a.setAttribute("nonce",b)};var z=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^+new Date).toString(36)};var A=function(a,b){b=String(b);"application/xhtml+xml"===a.contentType&&(b=b.toLowerCase());return a.createElement(b)},B=function(a){this.a=a||l.document||document};B.prototype.appendChild=function(a,b){a.appendChild(b)};var C=function(a,b,c,d,e,f){try{var k=a.a,h=A(a.a,"SCRIPT");h.async=!0;aa(h,b);k.head.appendChild(h);h.addEventListener("load",function(){e();d&&k.head.removeChild(h)});h.addEventListener("error",function(){0<c?C(a,b,c-1,d,e,f):(d&&k.head.removeChild(h),f())})}catch(n){f()}};var ba=l.atob("aHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vaW1hZ2VzL2ljb25zL21hdGVyaWFsL3N5c3RlbS8xeC93YXJuaW5nX2FtYmVyXzI0ZHAucG5n"),ca=l.atob("WW91IGFyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGJlY2F1c2UgYWQgb3Igc2NyaXB0IGJsb2NraW5nIHNvZnR3YXJlIGlzIGludGVyZmVyaW5nIHdpdGggdGhpcyBwYWdlLg=="),da=l.atob("RGlzYWJsZSBhbnkgYWQgb3Igc2NyaXB0IGJsb2NraW5nIHNvZnR3YXJlLCB0aGVuIHJlbG9hZCB0aGlzIHBhZ2Uu"),ea=function(a,b,c){this.b=a;this.f=new B(this.b);this.a=null;this.c=[];this.g=!1;this.i=b;this.h=c},F=function(a){if(a.b.body&&!a.g){var b=
            function(){D(a);l.setTimeout(function(){return E(a,3)},50)};C(a.f,a.i,2,!0,function(){l[a.h]||b()},b);a.g=!0}},D=function(a){for(var b=G(1,5),c=0;c<b;c++){var d=H(a);a.b.body.appendChild(d);a.c.push(d)}b=H(a);b.style.bottom="0";b.style.left="0";b.style.position="fixed";b.style.width=G(100,110).toString()+"%";b.style.zIndex=G(2147483544,2147483644).toString();b.style["background-color"]=I(249,259,242,252,219,229);b.style["box-shadow"]="0 0 12px #888";b.style.color=I(0,10,0,10,0,10);b.style.display=
            "flex";b.style["justify-content"]="center";b.style["font-family"]="Roboto, Arial";c=H(a);c.style.width=G(80,85).toString()+"%";c.style.maxWidth=G(750,775).toString()+"px";c.style.margin="24px";c.style.display="flex";c.style["align-items"]="flex-start";c.style["justify-content"]="center";d=A(a.f.a,"IMG");d.className=z();d.src=ba;d.style.height="24px";d.style.width="24px";d.style["padding-right"]="16px";var e=H(a),f=H(a);f.style["font-weight"]="bold";f.textContent=ca;var k=H(a);k.textContent=da;J(a,
            e,f);J(a,e,k);J(a,c,d);J(a,c,e);J(a,b,c);a.a=b;a.b.body.appendChild(a.a);b=G(1,5);for(c=0;c<b;c++)d=H(a),a.b.body.appendChild(d),a.c.push(d)},J=function(a,b,c){for(var d=G(1,5),e=0;e<d;e++){var f=H(a);b.appendChild(f)}b.appendChild(c);c=G(1,5);for(d=0;d<c;d++)e=H(a),b.appendChild(e)},G=function(a,b){return Math.floor(a+Math.random()*(b-a))},I=function(a,b,c,d,e,f){return"rgb("+G(Math.max(a,0),Math.min(b,255)).toString()+","+G(Math.max(c,0),Math.min(d,255)).toString()+","+G(Math.max(e,0),Math.min(f,
            255)).toString()+")"},H=function(a){a=A(a.f.a,"DIV");a.className=z();return a},E=function(a,b){0>=b||null!=a.a&&0!=a.a.offsetHeight&&0!=a.a.offsetWidth||(fa(a),D(a),l.setTimeout(function(){return E(a,b-1)},50))},fa=function(a){var b=a.c;var c="undefined"!=typeof Symbol&&Symbol.iterator&&b[Symbol.iterator];b=c?c.call(b):{next:g(b)};for(c=b.next();!c.done;c=b.next())(c=c.value)&&c.parentNode&&c.parentNode.removeChild(c);a.c=[];(b=a.a)&&b.parentNode&&b.parentNode.removeChild(b);a.a=null};var ia=function(a,b,c,d,e){var f=ha(c),k=function(n){n.appendChild(f);l.setTimeout(function(){f?(0!==f.offsetHeight&&0!==f.offsetWidth?b():a(),f.parentNode&&f.parentNode.removeChild(f)):a()},d)},h=function(n){document.body?k(document.body):0<n?l.setTimeout(function(){h(n-1)},e):b()};h(3)},ha=function(a){var b=document.createElement("div");b.className=a;b.style.width="1px";b.style.height="1px";b.style.position="absolute";b.style.left="-10000px";b.style.top="-10000px";b.style.zIndex="-10000";return b};var K={},L=null;var M=function(){},N="function"==typeof Uint8Array,O=function(a,b){a.b=null;b||(b=[]);a.j=void 0;a.f=-1;a.a=b;a:{if(b=a.a.length){--b;var c=a.a[b];if(!(null===c||"object"!=typeof c||Array.isArray(c)||N&&c instanceof Uint8Array)){a.g=b-a.f;a.c=c;break a}}a.g=Number.MAX_VALUE}a.i={}},P=[],Q=function(a,b){if(b<a.g){b+=a.f;var c=a.a[b];return c===P?a.a[b]=[]:c}if(a.c)return c=a.c[b],c===P?a.c[b]=[]:c},R=function(a,b,c){a.b||(a.b={});if(!a.b[c]){var d=Q(a,c);d&&(a.b[c]=new b(d))}return a.b[c]};
            M.prototype.h=N?function(){var a=Uint8Array.prototype.toJSON;Uint8Array.prototype.toJSON=function(){var b;void 0===b&&(b=0);if(!L){L={};for(var c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),d=["+/=","+/","-_=","-_.","-_"],e=0;5>e;e++){var f=c.concat(d[e].split(""));K[e]=f;for(var k=0;k<f.length;k++){var h=f[k];void 0===L[h]&&(L[h]=k)}}}b=K[b];c=[];for(d=0;d<this.length;d+=3){var n=this[d],t=(e=d+1<this.length)?this[d+1]:0;h=(f=d+2<this.length)?this[d+2]:0;k=n>>2;n=(n&
            3)<<4|t>>4;t=(t&15)<<2|h>>6;h&=63;f||(h=64,e||(t=64));c.push(b[k],b[n],b[t]||"",b[h]||"")}return c.join("")};try{return JSON.stringify(this.a&&this.a,S)}finally{Uint8Array.prototype.toJSON=a}}:function(){return JSON.stringify(this.a&&this.a,S)};var S=function(a,b){return"number"!==typeof b||!isNaN(b)&&Infinity!==b&&-Infinity!==b?b:String(b)};M.prototype.toString=function(){return this.a.toString()};var T=function(a){O(this,a)};u(T,M);var U=function(a){O(this,a)};u(U,M);var ja=function(a,b){this.c=new B(a);var c=R(b,T,5);c=new y(w,Q(c,4)||"");this.b=new ea(a,c,Q(b,4));this.a=b},ka=function(a,b,c,d){b=new T(b?JSON.parse(b):null);b=new y(w,Q(b,4)||"");C(a.c,b,3,!1,c,function(){ia(function(){F(a.b);d(!1)},function(){d(!0)},Q(a.a,2),Q(a.a,3),Q(a.a,1))})};var la=function(a,b){V(a,"internal_api_load_with_sb",function(c,d,e){ka(b,c,d,e)});V(a,"internal_api_sb",function(){F(b.b)})},V=function(a,b,c){a=l.btoa(a+b);v(a,c)},W=function(a,b,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];e=l.btoa(a+b);e=l[e];if("function"==r(e))e.apply(null,d);else throw Error("API not exported.");};var X=function(a){O(this,a)};u(X,M);var Y=function(a){this.h=window;this.a=a;this.b=Q(this.a,1);this.f=R(this.a,T,2);this.g=R(this.a,U,3);this.c=!1};Y.prototype.start=function(){ma();var a=new ja(this.h.document,this.g);la(this.b,a);na(this)};
            var ma=function(){var a=function(){if(!l.frames.googlefcPresent)if(document.body){var b=document.createElement("iframe");b.style.display="none";b.style.width="0px";b.style.height="0px";b.style.border="none";b.style.zIndex="-1000";b.style.left="-1000px";b.style.top="-1000px";b.name="googlefcPresent";document.body.appendChild(b)}else l.setTimeout(a,5)};a()},na=function(a){var b=Date.now();W(a.b,"internal_api_load_with_sb",a.f.h(),function(){var c;var d=a.b,e=l[l.btoa(d+"loader_js")];if(e){e=l.atob(e);
            e=parseInt(e,10);d=l.btoa(d+"loader_js").split(".");var f=l;d[0]in f||"undefined"==typeof f.execScript||f.execScript("var "+d[0]);for(;d.length&&(c=d.shift());)d.length?f[c]&&f[c]!==Object.prototype[c]?f=f[c]:f=f[c]={}:f[c]=null;c=Math.abs(b-e);c=1728E5>c?0:c}else c=-1;0!=c&&(W(a.b,"internal_api_sb"),Z(a,Q(a.a,6)))},function(c){Z(a,c?Q(a.a,4):Q(a.a,5))})},Z=function(a,b){a.c||(a.c=!0,a=new l.XMLHttpRequest,a.open("GET",b,!0),a.send())};(function(a,b){l[a]=function(c){for(var d=[],e=0;e<arguments.length;++e)d[e-0]=arguments[e];l[a]=q;b.apply(null,d)}})("__d3lUW8vwsKlB__",function(a){"function"==typeof window.atob&&(a=window.atob(a),a=new X(a?JSON.parse(a):null),(new Y(a)).start())});}).call(this);

            window.__d3lUW8vwsKlB__("WyJjODNlYzMwODU3N2JlNjViIixbbnVsbCxudWxsLG51bGwsImh0dHBzOi8vZnVuZGluZ2Nob2ljZXNtZXNzYWdlcy5nb29nbGUuY29tL2YvQUdTS1d4WDhJY0VoT29hMDIxazNrTjFlTkZiMXY2b3hOSml5dnJSVXI1T2JMOVBQQzcyVW53ZjBSYm9jdVhXTmZ4Y2Z5Zjg1NTB1cFZtOE44VC1zczJYaDBYQVx1MDAzZCJdCixbMjAsImRpdi1ncHQtYWQiLDEwMCwiWXpnelpXTXpNRGcxTnpkaVpUWTFZZ1x1MDAzZFx1MDAzZCIsW251bGwsbnVsbCxudWxsLCJodHRwczovL3d3dy5nc3RhdGljLmNvbS8wZW1uL2YvcC9jODNlYzMwODU3N2JlNjViLmpzP3VzcXBcdTAwM2RDQTAiXQpdCiwiaHR0cHM6Ly9mdW5kaW5nY2hvaWNlc21lc3NhZ2VzLmdvb2dsZS5jb20vbC9BR1NLV3hXb3pqOUVma1I2RUR4NElBMkNLUk1XY2RjWkhkRzFiVXVKTTNlZHNXeDhXZTNRRjVmVDI0bHNoVHo2cUNQU1JVVmN1R0xWOU9yVC1HTGRRYVROP2FiXHUwMDNkMSIsImh0dHBzOi8vZnVuZGluZ2Nob2ljZXNtZXNzYWdlcy5nb29nbGUuY29tL2wvQUdTS1d4WFNqNWJQdmkyRk1kMFZOQ0FJdXg4S2NGd1N1M1hMTTgtRUpCOHg2ckI4V1lFQ1k3TmJ6bGhmTTk3cXJOVzR4NThHSGlDTHBKamJHQTVQQ0c2Nz9hYlx1MDAzZDJcdTAwMjZzYmZcdTAwM2QxIiwiaHR0cHM6Ly9mdW5kaW5nY2hvaWNlc21lc3NhZ2VzLmdvb2dsZS5jb20vbC9BR1NLV3hXRVByeDVwVlZ5UlU2ZGV5SGZCNXVxWFBJN1RZcHJGMzF5N2pwYkNyRGlJSjRpRVFhc0ZqamMwbWplTVlBbkNRYTlKV0VqOFRzRVZrZWRYNFM4P3NiZlx1MDAzZDIiXQo=");

         </script>     
      
         <!-- End Google Funding Choices CMP -->
      
      <!-- Prebid setup -->

           <script> 
             window.PREBID_MAX_RETRIES = 50;
             window.PREBID_TIMEOUT = 600;
             var adUnits = [{"code":"div-gpt-ad-1465817209349-19","bids":[{"bidder":"appnexusAst","params":{"placementId":"10850178"}},{"bidder":"districtmDMX","params":{"memberid":100419,"dmxid":121402}},{"bidder":"33across","params":{"productId":"siab","siteId":"cxEe1yCner6ikvaKlId8sQ"}},{"bidder":"sharethrough","params":{"pkey":"32Hd2Doa2DmznED441KfwvgW"}},{"bidder":"triplelift","params":{"inventoryCode":"RateYourMusic_Desktop_300x250_1"}},{"bidder":"amx","params":{"tagId":"b2tvLnVr"}}],"mediaTypes":{"banner":{"sizes":[[300,250]]}}},{"code":"div-gpt-ad-1465817209349-22","bids":[{"bidder":"appnexusAst","params":{"placementId":"10850167"}},{"bidder":"districtmDMX","params":{"memberid":100419,"dmxid":121402}},{"bidder":"33across","params":{"productId":"siab","siteId":"ayXcWQCner6i0YaKkv7mNO"}},{"bidder":"sharethrough","params":{"pkey":"ApQUx2HusdN3bazYL9yHCRgS"}},{"bidder":"triplelift","params":{"inventoryCode":"RateYourMusic_Desktop_728x90_1"}},{"bidder":"amx","params":{"tagId":"b2tvLnVr"}}],"mediaTypes":{"banner":{"sizes":[[728,90]]}}},{"code":"div-gpt-ad-1465817209349-21","bids":[{"bidder":"appnexusAst","params":{"placementId":"10850179"}},{"bidder":"districtmDMX","params":{"memberid":100419,"dmxid":121402}},{"bidder":"33across","params":{"productId":"siab","siteId":"ddqui8Cner6iodaKkv7mNO"}},{"bidder":"sharethrough","params":{"pkey":"Ru6PvcJaQB8qUqEkzg3dna4t"}},{"bidder":"triplelift","params":{"inventoryCode":"RateYourMusic_Desktop_300x250_1"}},{"bidder":"amx","params":{"tagId":"b2tvLnVr"}}],"mediaTypes":{"banner":{"sizes":[[300,250]]}}},{"code":"div-gpt-ad-1465817209349-23","bids":[{"bidder":"appnexusAst","params":{"placementId":"10850185"}},{"bidder":"districtmDMX","params":{"memberid":100419,"dmxid":121402}},{"bidder":"33across","params":{"productId":"siab","siteId":"attalqCnir6iodaKkv7mNO"}},{"bidder":"sharethrough","params":{"pkey":"Xr5zhqJMBREu4Cr55m5jN5i4"}},{"bidder":"triplelift","params":{"inventoryCode":"RateYourMusic_Desktop_300x250_1"}},{"bidder":"amx","params":{"tagId":"b2tvLnVr"}}],"mediaTypes":{"banner":{"sizes":[[300,250]]}}},{"code":"div-gpt-ad-1465817209349-24","bids":[{"bidder":"appnexusAst","params":{"placementId":"10850175"}},{"bidder":"districtmDMX","params":{"memberid":100419,"dmxid":121402}},{"bidder":"33across","params":{"productId":"siab","siteId":"bfJk_aCner6iodaKkv7mNO"}},{"bidder":"sharethrough","params":{"pkey":"hVfbxDwtjuocurX6PuWbbMEk"}},{"bidder":"triplelift","params":{"inventoryCode":"RateYourMusic_Desktop_728x90_1"}},{"bidder":"amx","params":{"tagId":"b2tvLnVr"}}],"mediaTypes":{"banner":{"sizes":[[728,90]]}}}];
             window.prebidAdCodes = ["div-gpt-ad-1465817209349-19","div-gpt-ad-1465817209349-22","div-gpt-ad-1465817209349-21","div-gpt-ad-1465817209349-23","div-gpt-ad-1465817209349-24"];
             
             var pbjs = pbjs || {};
             pbjs.que = pbjs.que || [];
             pbjs.retries = 0;
 
             pbjs.bidderSettings = {

               appnexusAst: {
                 bidCpmAdjustment : function(bidCpm){
                   return bidCpm * 1.118; // 
                 }
               },
               districtmDMX: {
                 bidCpmAdjustment : function(bidCpm){
                   return bidCpm * 1.002; 
                 }
               },
               "33across": {
                 bidCpmAdjustment : function(bidCpm){
                   return bidCpm * 1.0283;  
                 }                  
               }

             };
           </script>
      <script src="https://e.snmc.io/3.0/js/prebid/pb-20210530.js" defer></script>
      <!-- End prebid setup -->


         <!-- Begin RYM ad tracking -->
         <script>
            window.rymads = window.rymads || {}; 
            window.rymadslots = window.rymadslots || {}; 
      
            rymads['div-gpt-ad-1465817209349-19'] = {load_type:'lazyload', sizes:'[[336, 280], [300, 250]]', name:'release.case-a.300-336.top-left', description:'Release: top-left square under album art'}; 
            rymads['div-gpt-ad-1465817209349-124'] = {load_type:'standard', sizes:'[320, 50]', name:'release.case-a.320x50-tonefuse', description:'Release: Tonefuse streaming ad'}; 
            rymads['div-gpt-ad-1465817209349-22'] = {load_type:'lazyload', sizes:'[728, 90]', name:'release.case-a.728.mid-right', description:'Release: horizontal rectangle in review section'}; 
            rymads['div-gpt-ad-1465817209349-21'] = {load_type:'standard', sizes:'[300, 250]', name:'release.case-a.300.top-right', description:'Release: square in top-right corner'}; 
            rymads['div-gpt-ad-1465817209349-23'] = {load_type:'lazyload', sizes:'[[336, 280], [300, 250]]', name:'release.case-a.300-336.bottom-left', description:'Release: square under lists section'}; 
            rymads['div-gpt-ad-1465817209349-24'] = {load_type:'lazyload', sizes:'[728, 90]', name:'release.case-a.728.bottom', description:'Release: horizontal rectangle at bottom of page'}; 
         </script>
         <!-- End RYM ad tracking -->
      
         <!-- BEGIN GAM init -->
         
      
         <script>
            window.googletag = window.googletag || {cmd: []};
         </script>
         
      
         <!-- Slot definitions -->
      

         <script id="ads/ads.init.fragment.setup_display">         window.displayCalledOnAllUnits=!1,googletag.cmd.push(function(){googletag.__display=googletag.display,googletag.display=function(l){var o=googletag.__display(l),a=l.getSlotElementId();a==="gpt_unit_/31961696/RYM_Interstitial_AdX_0"&&(a="div-gpt-ad-1465817209349-125"),console.log("page.ads: GAM displaying unit "+a),window.rymads[a].loaded=!0;var d=!0;for(var e in window.rymads)if(!window.rymads[e].loaded){d=!1;break}return d&&(console.log("page.ads: GAM display called on all units."),window.displayCalledOnAllUnits=!0),o}});
         </script>

         <script>

         window.ads_loaded_slots = window.ads_loaded_slots || [];
         googletag.cmd.push(function() {
      
               rymadslots['div-gpt-ad-1465817209349-19'] =    function() { return googletag.defineSlot('/31961696/release.case-a.300-336.top-left', [[336, 280], [300, 250]], 'div-gpt-ad-1465817209349-19').addService(googletag.pubads()); }
         
               rymadslots['div-gpt-ad-1465817209349-124'] =    function() { return googletag.defineSlot('/31961696/release.case-a.320x50-tonefuse', [320, 50], 'div-gpt-ad-1465817209349-124').addService(googletag.pubads()); }
         
               rymadslots['div-gpt-ad-1465817209349-22'] =    function() { return googletag.defineSlot('/31961696/release.case-a.728.mid-right', [728, 90], 'div-gpt-ad-1465817209349-22').addService(googletag.pubads()); }
         
               rymadslots['div-gpt-ad-1465817209349-21'] =    function() { return googletag.defineSlot('/31961696/release.case-a.300.top-right', [300, 250], 'div-gpt-ad-1465817209349-21').addService(googletag.pubads()); }
         
               rymadslots['div-gpt-ad-1465817209349-23'] =    function() { return googletag.defineSlot('/31961696/release.case-a.300-336.bottom-left', [[336, 280], [300, 250]], 'div-gpt-ad-1465817209349-23').addService(googletag.pubads()); }
         
               rymadslots['div-gpt-ad-1465817209349-24'] =    function() { return googletag.defineSlot('/31961696/release.case-a.728.bottom', [728, 90], 'div-gpt-ad-1465817209349-24').addService(googletag.pubads()); }
          

            // googletag.pubads().enableSingleRequest();

            // googletag.pubads().enableLazyLoad({
            //    fetchMarginPercent: 100,
            //    renderMarginPercent: 20,
            //    mobileScaling: 1.5
            // });

            googletag.pubads().disableInitialLoad();

            // Register event handlers to observe lazy loading behavior.
            googletag.pubads().addEventListener('slotRequested', function(event) {
               var adCode = event.slot.getSlotElementId();
               //HACK
               if ( adCode === 'gpt_unit_/31961696/RYM_Interstitial_AdX_0' ) {
                  adCode = 'div-gpt-ad-1465817209349-125';
               }
               console.log(`*** rym.ads: GAM fetched (${adCode} - ${rymads[adCode].description})`);
            });

            googletag.pubads().addEventListener('slotOnload', function(event) {
               //HACK
               var adCode = event.slot.getSlotElementId();
               if ( adCode === 'gpt_unit_/31961696/RYM_Interstitial_AdX_0' ) {
                  adCode = 'div-gpt-ad-1465817209349-125';
               }
               _doPostRender(adCode);
               console.log(`*** rym.ads: GAM rendered (${adCode} - ${rymads[adCode].description})`);
            });
            googletag.pubads().setTargeting('artist_name', 'Sparks');
            googletag.pubads().setTargeting('release_name', 'In Outer Space');
            googletag.pubads().setTargeting('pagetype', ['album']);
            googletag.pubads().setTargeting('logged_in', 'true');
      
            googletag.enableServices();

         });
      
         </script>
      <script id="ads/ads.init.fragment.final">         window.totalAdRetries=0,window.pubAdsRetries=0,window.displayCallRetries=0,window.ads_bid_queue=[],window.ads_refresh_queue=[],window.ads_loaded_slots=window.ads_loaded_slots||[];function processBidQueue(){if(!window.dom_loaded||!window.consent_gathered){setTimeout(processBidQueue,25);return}window.processBidQueueTimeout&&(clearTimeout(window.processBidQueueTimeout),window.processBidQueueTimeout=null),window.processBidQueueTimeout=setTimeout(_doProcessBidQueue,25)}function _doProcessBidQueue(){console.log("rym.ads: _doProcessBidQueue: "+window.ads_bid_queue.length+" items");let e=[...window.ads_bid_queue];window.ads_bid_queue=[],pbjs.que.push(function(){pbjs.requestBids({timeout:PREBID_TIMEOUT||400,adUnitCodes:e,bidsBackHandler:function(){googletag.cmd.push(function(){for(var o in e){let i=e[o];rymads[i].load_status="loaded",console.log(`bids received for ${i}; queueing refresh`);var s=rymadslots[i]();window.ads_loaded_slots[i]=s,googletag.display(s),pbjs.setTargetingForGPTAsync(i),ads_refresh_queue.push(i),processRefreshQueue()}})}})})}function processRefreshQueue(){if(!window.consent_gathered||!window.dom_loaded){setTimeout(processRefreshQueue,15);return}var e=!0,o=window.ads_refresh_queue;for(var s in o)if(console.log("checking "+o[s]),!rymads[o[s]].loaded){console.log("not loaded: "+o[s]),e=!1;break}if((!googletag.pubadsReady||!e)&&window.totalAdRetries<=(window.PREBID_MAX_RETRIES||50)){googletag.pubadsReady||window.pubAdsRetries++,window.displayCalledOnQueuedUnits||window.displayCallRetries++,window.totalAdRetries++,setTimeout(processRefreshQueue,25);return}console.log(`rym.ads: Refresh enabled after ${window.pubAdsRetries} pubadsReady and ${window.displayCallRetries} display retries`),console.log("rym.ads: processRefreshQueue"),window.processRefreshQueueTimeout&&clearTimeout(window.processRefreshQueueTimeout),window.processRefreshQueueTimeout=setTimeout(_doProcessRefreshQueue,50)}function _doProcessRefreshQueue(){console.log("rym.ads: _doProcessRefreshQueue, "+window.ads_refresh_queue.length+" items: "+JSON.stringify(window.ads_refresh_queue));let e=[...window.ads_refresh_queue];window.ads_refresh_queue=[],googletag.cmd.push(function(){for(var o in e)console.log(`refreshing ${e[o]}`),googletag.pubads().refresh([window.ads_loaded_slots[e[o]]])})}function _doPostRender(e){var o=$(`#frame-${e}`);o.hasClass("mobile-sticky-ad")&&(console.log("setting sticky timer for "+e),setTimeout(function(){o.addClass("seen")},2e3))}function _closeAllStickyAds(){$(".mobile-sticky-ad").addClass("seen")}function _adjustFillerColumns(){var e=document.getElementById("column_container_left"),o=document.getElementById("column_container_right"),s=document.getElementById("column_filler_left"),i=document.getElementById("column_filler_right");if(!e||!o||!s||!i)return;let n=s,t=o,u="left";o.offsetHeight<e.offsetHeight&&(u="right",n=i,t=e);let d=t.offsetHeight-n.offsetTop;d=Math.floor(d*=.95),n.style.height=d+"px",console.log(`${u} column was filled with ${d} pixels`)}function initAds(){queueNonLazyloadAds()}function queueAd(e){console.log(`rym.ads: queueAd(${e} - ${rymads[e].description})`),rymads[e].queued||(rymads[e].queued=!0,window.prebidAdCodes.indexOf(e)!=-1?(ads_bid_queue.push(e),processBidQueue()):googletag.cmd.push(function(){console.log(`rym.ads: skipping prebid for ${e}`);var o=rymadslots[e]();window.ads_loaded_slots[e]=o,googletag.display(o),ads_refresh_queue.push(e),processRefreshQueue()}))}function queueNonLazyloadAds(){console.log("rym.ads: Queueing all non-lazyload Ads");for(var e in window.rymads)window.rymads[e].load_type==="standard"&&queueAd(e)}function adVisibilityChanged(e){console.log(`rym.ads: Visibility for ${e} changed; queueing`),queueAd(e)}initAds();
         </script>
         <!-- END GAM init -->
      <script id="ads/ads.init.fragment.setup_prebid">         var customConfigObject={buckets:[{precision:2,min:0,max:2,increment:.01},{precision:2,min:2,max:20,increment:.1}]},consentManagement=null;window.is_in_ca?consentManagement={usp:{cmpApi:"iab",timeout:3e3}}:window.is_in_eu&&(consentManagement={gdpr:{cmpApi:"iab",defaultGdprScope:!0,timeout:4e3}}),pbjs.que.push(function(){console.log("page.ads: pbjs global config"),pbjs.setConfig({userSync:{userIds:[{name:"pubCommonId",storage:{type:"cookie",name:"_pubcid",expires:180}},{name:"unifiedId",params:{url:"//match.adsrvr.org/track/rid?ttd_pid=58fqbth&fmt=json"},storage:{type:"cookie",name:"pbjs-unifiedid",expires:60}},{name:"id5Id",params:{partner:368},storage:{type:"cookie",name:"pbjs-id5id",expires:90,refreshInSeconds:8*3600}},{name:"flocId",params:{token:"A9p+JuFKd8LimDgT1c3kgZynD+ELlkE3gDJ5AX+Lu51pzSEJiFm4LaUTeYqfQDZJJg7W7uD6sGcmYRrFfgg5qwAAAABweyJvcmlnaW4iOiJodHRwczovL3JhdGV5b3VybXVzaWMuY29tOjQ0MyIsImZlYXR1cmUiOiJJbnRlcmVzdENvaG9ydEFQSSIsImV4cGlyeSI6MTYyNjIyMDc5OSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="}}],syncsPerBidder:50,iframeEnabled:!0,pixelEnabled:!0,filterSettings:{iframe:{bidders:"*",filter:"include"}}},syncDelay:5e3,maxRequestsPerOrigin:4,timeoutBuffer:400,disableAjaxTimeout:!0,priceGranularity:customConfigObject,consentManagement}),pbjs.addAdUnits(adUnits)});
         </script>
         <script>
                var assertive_debug = 0;
                var assertive_entityId = 'ShzapK9mskdmSkcmM';
                var assertive_sampleRate = 1; // 1 = 100%, 0.2 = 20%...
                var assertive_timeout = null;
                var assertive_layout = null;
                var assertive_userState = null;
                var assertive_custom_1 = null;
                var assertive_custom_2 = null;
                var assertive_custom_3 = null;
                var assertive_custom_4 = null;
                var assertive_custom_5 = null;
         </script>
         <script src="https://ShzapK9mskdmSkcmM.ay.delivery/client-v1.js" async></script>
      <script>
          var ts = new Date().valueOf();

          var cx='6e8afc04f5184aa00177e2db7b69b4a1';
         rymQ(function() { $("body").on("mousemove touchend",function(n){$("body").off("mousemove touchend");var o,t=!!window.opr&&!!opr.addons||!!window.opera||navigator.userAgent.indexOf(" OPR/")>=0,e="undefined"!=typeof InstallTrigger,i=Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")>0,r=!!document.documentMode,d=!r&&!!window.StyleMedia,a=!!window.chrome&&!!window.chrome.webstore,c=(a||t)&&!!window.CSS,s=!1;navigator.webdriver;a&&window.chrome;try{navigator.permissions.query({name:"notifications"}).then(function(n){"denied"===Notification.permission&&"prompt"===n.state&&!0})}catch(n){o=n}try{null[0]()}catch(n){o=n}o.stack.indexOf("phantomjs")>-1&&(s=!0);var u=window.outerHeight,w=window.innerHeight,m=window.outerWidth,h=window.innerWidth,p=document.documentElement.hasAttribute("webdriver"),v=document.documentElement.hasAttribute("hola_ext_inject"),l=!!("ontouchstart"in window)||"ontouchstart"in document.documentElement,f=navigator.hardwareConcurrency,g=navigator.appCodeName,y=navigator.plugins,b=new Array;for(var x in y){var j=y[x];if(j)for(var C in j){var O=j[C];O&&O.description&&b.push(O.description.substr(0,12))}}var S={a:t,b:e,c:i,d:r,e:d,f:a,g:c,h:s,i:u,j:p,l:l,m:f,n:g,o:b.join(":"),p:w,q:m,r:h,s:v,t:s,cx:cx,ts:ts};rym.request.post("SecChk",S,null,"script")}); });
      </script>
<script type="text/javascript">rymQ(function() { rym.session.init(770124, 'staniel359', 'fB/B8JcwZPMGZXIXFDHsoktqP8HROq4c6gMvUJe8zG0E3RnjFP8T/NMdi23miMPH1620222166070929');});</script><script> rymQ(function() {  window.rym.preserveSearchType = false;

                var scope = $('html, body').hasClass('scope_film') ? 'film' : 'music';

                if (  window.rym.preserveSearchType && window.localStorage['last_searchtype_' + scope] ) {
                    rym.nextSearchType = window.localStorage['last_searchtype_' + scope];
                }

         }); </script></head><body class="has_background_image" style="background-image:url('//e.snmc.io/i/25/s/91085ba9fd1e3b203bd89faba91d7a80/2656352');">

            <script>
               rymQ(function() { 
                 window.rym.themes = ['day', 'night'];
                 window.rym.themes_label = ['Light', 'Dark'];
               });
            </script>
          <script>

         window.addEventListener('load', (event) => {
               


             window.dom_loaded = true;

             var gam = document.createElement( 'script' );
             gam.setAttribute( 'src', 'https://securepubads.g.doubleclick.net/tag/js/gpt.js' );
             document.body.appendChild( gam );
            
             console.log('DOM loaded');
             if ( typeof (_adjustFillerColumns) !== 'undefined' ) {
                _adjustFillerColumns() 
             }

             setTimeout(function () { 
               if ( typeof (_closeAllStickyAds) !== 'undefined' ) {
                  _closeAllStickyAds() 
               }
             }, 5000);
         });

         if ( window.localStorage['size_mode'] ) {
            document.body.parentElement.className += ' size_mode_' + window.localStorage['size_mode'];
         }

         if ( !window.localStorage['theme'] && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ) {
            document.body.parentElement.className += ' theme_night';
         } else {
            document.body.parentElement.className += ' theme_' + window.localStorage['theme'];
         }

         if ( window.matchMedia ) {

             var listener = window.matchMedia('(prefers-color-scheme: dark)').addEventListener;

             if ( listener ) {
                listener('change', e => {
                  updateTheme();
                });               
             }
         }

         rymQ(function() { updateStyleThemeLabels() });

         </script>
      
<header>
<div class="header_inner logged_in">



   <div onclick="RYMheader.onClickBars()" class="header_icon_link">
      <i class="fa fa-bars"></i>
      <span class="show-for-small">
      </span>
   <div id="header_extended_section" class="header_extended_section header_extended_more_menu">
            <a href="/~staniel359" class="header_item">
               Profile
            </a>
            <a href="/collection/staniel359/" class="header_item">
              Music Collection
            </a>
            <a href="/film_collection/staniel359/" class="header_item">
              Film Collection
            </a>
            <a href="/list/staniel359/" class="header_item">
              Lists
            </a>
            <br>
            <a href="/messages/inbox" class="header_item">
              Messaging
            </a>
            <a href="/account/mentions" class="header_item">
              Mentions
            </a>

            <a href="/account/preferences" class="header_item">
               Settings
            </a>

            <a href="/queues/" class="header_item">
               Submissions
            </a>

            <div class="header_items_spillover">






            </div>


           <div class="header_theme_buttons">
    
                 <div onClick="switchSizeMode(event);return false;" class="header_theme_button">
                    <div class="header_theme_button_label">Text</div>
                    <div class="header_theme_button_mode" id="page_frame_size_mode_switch">Aa</div>
                 </div>

                 <div onClick="switchTheme(event);return false;" class="header_theme_button">
                    <div class="header_theme_button_label">Theme</div>
                    <div class="header_theme_button_mode" id="page_frame_theme_switch">Light</div>
                 </div>

                 <div class="clearfix"></div>

           </div>


            
           <span onclick="if ( confirm('Are you sure you want to log out?') ) { window.location = '/account/logout'; }" class="header_item">
              Log out
           </span>

        </div>
     </div>















<div class="header_profile">
       <div class="header_profile_logged_in">
           <a href="/~staniel359" title="Your profile page" class="header_profile_main">
              <span id="header_user_img" class="header_user_img" 
                ></span>
              <span id="header_profile_username" class="header_profile_link user header_item">staniel359</span>
           </a>
       </div>

</div>



<div class="header_logo">
  <a class="main header_item sonemic" href="/">
     <div class="logo_header"></div>
     <span class="logo_name">RYM</span>
  </a>

</div>

<div class="header_links">
  <div class="header_links_inner">
      <div class="divider"></div>
      <a class="header_item" href="/new-music/">new music</a>
      <div class="header_charts">
      <a class="header_charts header_item" href="/charts/">charts</a>
      </div>
      <a class="header_item" href="/lists/">lists</a>
      <a class="header_item" href="/community/">community</a>







         <a class="header_item" title="Support RYM by becoming a subscriber"  href="/subscribe/" style="line-height:1.9">
            <span  data-nosnippet class="subscribe_label_fundraiser" style="font-size:0.8em;font-weight:bold;">fundraiser</span>
            <div class="ui_fundraiser_bar_frame" style="font-size: 0.4em;
                                                       position: absolute;
                                                       bottom: 0.9em;
                                                       left: 0;
                                                       right: 0;
                                                       padding: 0 1.2em;
                                                       margin:0">
               <div class="ui_fundraiser_bar">
                  <div class="ui_fundraiser_bar_outline">

                     <div class="ui_fundraiser_bar_goal_divider">

                     </div>

                     <div class="ui_fundraiser_bar_inner">

                     </div>
                  </div>
               </div>
            </div>
         </a>



      

      <div class="divider"></div>
    </div>
  </div>
  <div class="header_search">
  <div id="ui_search_frame_outer_main_search"  class="ui_search_frame_outer"> <div id="ui_search_frame_main_search" class="ui_search_frame"> <div onclick="rymQ(function() {RYMsearch.onClickClose(event, 'main_search');})" class="ui_search_close"> <div class="ui_search_close_bar"> <i class="fa fa-times"></i> Close</div> <div id="ui_search_context_indicator_main_search" class="ui_search_context_indicator"> <div id="ui_search_context_indicator_inner_main_search" class="ui_search_context_indicator_inner"></div> </div> </div> <div class="ui_search_clear"></div> <div class="ui_search_frame_inner"> <div id="ui_search_main_search" class="ui_search" data-default-scope="music" data-callback="" data-callback-id=""> <i style="cursor:pointer" onClick="RYMsearch.redirSearch('main_search');" id="ui_search_icon_main_search" class="fa fa-search ui_search_icon"></i> <i id="ui_clear_icon_main_search" onclick="rymQ(function() {RYMsearch.onClickClearSearch(event, 'main_search');})" class="fa fa-times-circle ui_clear_icon"></i> <input aria-label="Search" value="" id="ui_search_input_main_search" placeholder="Search..." class="ui_search_input" onfocus="rymQ(function() {RYMsearch.onFocus(event, 'main_search')})" onblur="rymQ(function() {RYMsearch.onBlur(event, 'main_search')})" onkeydown="rymQ(function() {RYMsearch.onKeyDown(event, 'main_search')})" oninput="rymQ(function() {RYMsearch.onInput(event, 'main_search')})"> </div> <div class="ui_search_rest"> <div class="ui_search_type"> <div id="ui_search_debug_main_search" class="ui_search_debug"></div> <span class="ui_search_object_label">Search:</span> <span id="ui_search_scope_selector_main_search" class="ui_search_object_selector"> <input type="hidden" name="ui_search_scope_main_search" id="ui_search_scope_main_search" value="music"> <span id="ui_search_scope_selector_music_main_search" onclick="rymQ(function() {RYMsearch.onClickSearchScope(event, 'main_search', 'music');})" class="ui_search_scope_selector_item ui_search_scope_selector_item_music selected"> Music
  </span> <span id="ui_search_scope_selector_film_main_search" onclick="rymQ(function() {RYMsearch.onClickSearchScope(event, 'main_search', 'film');})" class="ui_search_scope_selector_item ui_search_scope_selector_item_film"> Film
  </span> <span id="ui_search_scope_selector_games_main_search" style="display:none" onclick="rymQ(function() {RYMsearch.onClickSearchScope(event, 'main_search', 'games');})" class="ui_search_scope_selector_item ui_search_scope_selector_item_games"> Games
  </span> </span> <span class="ui_search_object_label">for:</span> <span id="ui_search_object_select_frame_main_search" class="ui_search_object_select_frame selected"> <select onchange="rymQ(function() {RYMsearch.onChangeObject(event, 'main_search')})" id="ui_search_object_select_main_search" class="ui_search_object_select"> </select> </span>  </div> <div id="ui_search_info_frame_main_search" class="ui_search_info_frame"> </div> <div id="ui_search_results_frame_main_search" class="ui_search_results_frame"> <div id="ui_search_results_main_search" class="ui_search_results"> </div> </div> </div> </div> </div>
  </div>

</div>   




</div>

</header>


<div class="header_error" onClick="$(this).fadeOut();" id="header_error">
   <div class="header_error_close"><i class="fa fa-times-circle"></i></div>
   <div id="header_error_text"></div>
</div>

<div class="header_message" onClick="$(this).fadeOut();" id="header_message">
   <div class="header_message_close"><i class="fa fa-times-circle"></i></div>
   <div id="header_message_text"></div>
</div>

<div id="mobile_header_menu" class="mobile_header_menu"><a href="/new-music/" class="mobile_header_menu_item mobile_header_menu_item_charts">
      New Music
</a><a href="/charts/" class="mobile_header_menu_item mobile_header_menu_item_charts">
      Charts
</a><a href="/lists/" class="mobile_header_menu_item mobile_header_menu_item_lists">
   Lists 
</a><a href="/community/" class="mobile_header_menu_item mobile_header_menu_item_community">
   Community
</a></div>
        

            <div id="content_wrapper_outer" class="content_wrapper_outer">
            <div id="content_wrapper" class="content_wrapper" >
            <div id="content">
            <div id="precontent" class="precontent lazyload" data-bkg="//e.snmc.io/i/25/s/91085ba9fd1e3b203bd89faba91d7a80/2656352"></div>
         <div id="content_cover"></div>
         <div id="total_cover"></div>
         <div id="content_total_cover"></div>          
      
         <style>
            #subscription_update_banner {
               background:transparent;
               border-bottom:1px solid var(--mono-d);
               border-top:1px solid var(--mono-d);
               max-width:50em;
               margin:0 auto;
               margin-bottom:2em;
               padding:1em 7em 3.5em 3em;
               position:relative;
            }

            .subscription_update_title {
               font-size:1.5em;
               margin-bottom:0.5em;
            }

            @media only screen and (max-width:50em) {
               #subscription_update_banner {
                  padding-top:1em;
                  font-size:0.9em;
               }
            }
         </style>
      
                 <div data-nosnippet id="subscription_update_banner" class="page_chart_description_container">

                    <div  onClick="rym.request.post('DismissSubscriptionUpdateBanner', {}, null, 'script');"  style="position:absolute;z-index:2;top:0;right:0;padding:1em;color:var(--mono-5);font-size:1.1em;cursor:pointer" class="page_fundraiser_close"><i class="fa fa-times-circle"></i> Close</div>

                    <div class="page_chart_description_textandbtns"> 
                        <div class="subscription_update_title"> We're launching a subscription drive to help fund our operations in 2021.  </div>
                        <div class="page_chart_description_btns"> 
                          <a id="" class="btn flat_btn page_chart_description_btn" href="/subscribe/">Subscribe or donate</a> 
                        </div> 

                        

                        <div class="ui_fundraiser_bar_frame" style="font-size: 0.7em;
                                                                   position: absolute;
                                                                   bottom: 0.9em;
                                                                   left: 3em;
                                                                   right: 3em;
                                                                   padding: 0 1.2em;
                                                                   margin:0">
                          <div class="ui_fundraiser_label" style="font-size:1.3em;color:var(--mono-6);font-weight:bold;">Progress</div>
                           <div class="ui_fundraiser_bar">
                              <div class="ui_fundraiser_bar_outline">

                                 <div class="ui_fundraiser_bar_goal_divider">

                                 </div>

                                 <div class="ui_fundraiser_bar_inner">

                                 </div>
                              </div>
                           </div>
                        </div>

                    </div> 
                </div>

            <div class="clear"></div><style>div.prev_image img, div.next_image img {
    width: 3em;
}
div.list_image {
   background-size:cover !important;
   background-position:center center !important;
}
</style>
   <div id="dropheader" style="display:none;"> </div>
   <div id="shortcut"  style="display:none;">
    <div id="shortcutshell">
      <div id="shortcutinner">
         <div class="small">
         <table><tr><td>
<div class="musictoolbar"> <a id="btnshortcutartist" href="#shortcutartist" onclick="viewshortcut('shortcutartist', '');return false;">artist</a>
             
             <a id="btnshortcutrelease" href="#shortcutrelease" onclick="viewshortcut('shortcutrelease', '');return false;">release</a>
             <a id="btnshortcutlabel" href="#shortcutlabel" onclick="viewshortcut('shortcutlabel', '');return false;">label</a>
             <a id="btnshortcutwork" href="#shortcutwork" onclick="viewshortcut('shortcutwork', '');return false;">work</a>
             <a id="btnshortcutfilm" href="#shortcutfilm" onclick="viewshortcut('shortcutfilm', '');return false;">film</a>
             <a id="btnshortcutvideo" href="#shortcutvideo" onclick="viewshortcut('shortcutvideo', '');return false;">video</a>
             <a id="btnshortcutpicture" href="#shortcutpicture" onclick="viewshortcut('shortcutpicture', '');return false;">pic</a>
             
            </div>

  </td><td style="text-align:right;"><a href="javascript:closeShortcut();" class="btn darkred_btn btn_small">x</a></td></tr></table>
         </div>
         <div id="shortcutsearch">
            <iframe src="about:blank" name="shortcutsearchframe" id="shortcutsearchframe"  width="99%" height="99%"></iframe>
         </div>
      </div>
      
    </div>
   
   </div>
   
   <script type="text/javascript">var shortcut_first_sc='shortcutartist', shortcut_first_func = '';</script> 
<div id="searchsuggestions" style="visibility:hidden;position:absolute;z-index:500;max-height:150px;overflow-y:scroll" ></div>
<script>
  function openShortcut(element)
  {
      currentElement = element;
      var pos = $(element).position();
      var shortcutWidth = $('#shortcut').outerWidth();
      var windowWidth = $(window).outerWidth();
      var left = pos.left + $(element).outerWidth();

      if ( (left + shortcutWidth) > windowWidth ) {
         left = windowWidth - shortcutWidth;
      }

      $('#shortcut').css('top', pos.top + 'px').css('left', left + 'px').show();;
      if ( shortcut_first_sc && shortcut_first_sc != "") {
        viewshortcut(shortcut_first_sc, shortcut_first_func);
      }

 }
 </script>
            <div id="fb-root"></div>
            <script>(function(d, s, id) {
              var js, fjs = d.getElementsByTagName(s)[0];
              if (d.getElementById(id)) return;
              js = d.createElement(s); js.id = id;
              js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=2378093252";
              fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'facebook-jssdk'));</script>
         <style>
      div.coverart_10198 {
         position:relative;
         padding-bottom:calc( 100% / 0.9893992932862191);
      }

      div.coverart_10198 img {
         position:absolute;
         top:0;
         left:0;
         width:100%
      }

   </style>

<div class="release_page"  itemprop="mainEntity" itemscope itemtype="http://schema.org/MusicAlbum">
     <div itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
     <meta itemprop="ratingValue" content="3.16" />
     <meta itemprop="bestRating" content="5.0" />
     <meta itemprop="worstRating" content="0.5" />
     <meta itemprop="ratingCount" content="462" /><meta  itemprop="reviewCount" content="11" /></div>
   <meta content="In Outer Space" itemprop="name" />
   <!--<meta content="Sparks" itemprop="byArtist" /> -->
   <meta content="/release/album/sparks/in-outer-space/" itemprop="url" />
   <div style="max-width:1700px; margin: 0px auto;">
   <div class="row">

    <div id="column_container_right" class="large-8 push-4 columns release_right_column">  <div class="section_main_info section_outer"><div class="page_section">          
         <div class="album_title">In Outer Space 
               <input aria-label="album shortcut" class="album_shortcut" readonly onclick="focus();select();" value="[Album10198]" />
               <div class="show-for-small album_artist_small">By <a title="[Artist2854]"  href="/artist/sparks" class="artist">Sparks</a></div>
            </div>

         <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:2px;font-size:1px;padding:0;"><tr style="height:2px;padding:0;"><td style="background:#bcb5bd;height:2px;padding:0px;color:#bcb5bd">.</td><td style="background:#a69bb9;height:2px;padding:0px;color:#a69bb9">.</td><td style="background:#916c7e;height:2px;padding:0px;color:#916c7e">.</td><td style="background:#9687a4;height:2px;padding:0px;color:#9687a4">.</td><td style="background:#b4b1b2;height:2px;padding:0px;color:#b4b1b2">.</td></tr></table>

         <div class="show-for-small" style="text-align:center;">
            <div style="padding-top:0.3em;"> <a href="buy/">
      <div class="coverart_10198">
      <img srcset ="//e.snmc.io/i/600/s/31c8b65119c8367bd46bd030c4633d66/2656352/sparks-in-outer-space-Cover-Art.jpg,
                     //e.snmc.io/i/600/s/31c8b65119c8367bd46bd030c4633d66/2656352/sparks-in-outer-space-Cover-Art.jpg 2x"
           src="//e.snmc.io/i/600/s/31c8b65119c8367bd46bd030c4633d66/2656352/sparks-in-outer-space-Cover-Art.jpg"
           alt="Cover art for In Outer Space by Sparks"
      />
      <!-- <meta itemprop="image" content="//e.snmc.io/i/300/s/c3e83121b5aad106084a420d6d88a7d2/2656352" /> -->
    </div></a>
    
          <div style="margin-top:8px;">
            <a class="buy_button" 
                  href="buy/">Buy this Album</a></div>
         <div class="ui_media_links_container">
            <div class="ui_media_links promoted"><a target="_blank" rel="noopener nofollow" title="Apple Music" class="ui_media_link_btn ui_media_link_btn_applemusic" href="https://music.apple.com/by/album/in-outer-space/279523332?at=10l59k&ct=media-link&itscg=30200&itsct=toolbox_linkbuilder&ls=1&app=music"></a><a target="_blank" rel="noopener nofollow" title="Spotify" class="ui_media_link_btn ui_media_link_btn_spotify" href="https://open.spotify.com/album/7DQ4JbSvurZKtAUCz1hxE9"></a><div style="clear:both;"></div></div></div><div style="text-align:center;max-width:100%;margin:0 auto;margin-top:0.5em;"><a href="/submit_media_link?object=release&assoc_id=10198" style="text-align:center;font-size:0.9em;color:var(--gen-blue-darker);text-decoration:none;">Submit media links</a></div> </div>
         </div>
         <table class="album_info_outer">
         <tr><td style="vertical-align:top;">
            <table class="album_info">
               <tr class="hide-for-small"><th class="info_hdr">Artist</td><td colspan="2"><span itemprop="byArtist" itemscope itemtype="http://schema.org/MusicGroup"><a title="[Artist2854]" itemprop="name" href="/artist/sparks" class="artist">Sparks</a></span>
               <span class="release_info_classifiers"></span></td></tr>
               <tr><th class="info_hdr">Type</td><td colspan="2">Album</td></tr>
                  <tr><th class="info_hdr">Released</td><td colspan="2">June <a style="text-decoration:none;" href="/charts/top/album/1983"><b>1983</b></a> </td></tr>
               <tr><th class="info_hdr">RYM Rating</td><td colspan="2" style="padding:4px;">
                <span >
                  <span class="avg_rating" >
                     3.16
                  </span> 
                  <span class="max_rating">/ <span >5.0</span><span style="display:none">0.5</span></span>
                  <span class="num_ratings">
                     from <b><span >462</span></b> ratings
                  </span>
               </span>
               </td></tr>
               <tr><th class="info_hdr">Ranked</td><td colspan="2">#<b>1,048</b> for <a href="/charts/top/album/1983/27/#pos1048">1983</a></td></tr><tr class="release_genres">
                        <th class="info_hdr">
                           Genres
                        </th>
                        <td><meta content="Synthpop" itemprop="genre" />   <div style="float:left;">
                           <span class="release_pri_genres"><a title="[Genre382]" class="genre" href="/genre/Synthpop/">Synthpop</a></span>
                           <br /><span class="release_sec_genres"><a title="[Genre129]" class="genre" href="/genre/New+Wave/">New Wave</a>, <a title="[Genre379]" class="genre" href="/genre/Art+Pop/">Art Pop</a></span>
                           </div>
                           </td>
	
                     <td style="text-align:center;padding:0">
                        <a href="/rgenre/set?album_id=10198" class="genre_descriptor_vote_btn has_tip" title="vote for genres" data-tiptip="Vote for genres"><i class="fa fa-check"></i></a>
                     </td>
                        </tr><tr class="release_descriptors">
                        <th class="info_hdr">
                           Descriptors
                        </th>
                        <td>   <div style="float:left;">
                           <span class="release_pri_descriptors"></span>
                           </div>
                           </td>
                           <td style="text-align:center;padding:0">
                              <a href="/rdescriptor/set?album_id=10198" class="genre_descriptor_vote_btn has_tip" title="vote for descriptors" data-tiptip="Vote for descriptors"><i class="fa fa-check"></i></a>
                           </td>                
           
                        </tr><tr><th class="info_hdr">Language </th><td style="font-size:0.9em;color:var(--mono-5);" colspan="2">English</td></tr>
               <tr><th class="info_hdr">Share</th>
                  <td colspan="2" style="padding-bottom: 4px;color:var(--mono-b);height:2.8em">
                     

            <div style="float:left;">
               <a href="https://twitter.com/share" class="twitter-share-button" style="margin-top:2px;" data-hashtags="sonemic">Tweet</a>
               <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
            </div>
            <div style="float:left;margin-left:0.5em;">
               <div class="fb-like" data-href="https://rateyourmusic.com/release/album/sparks/in-outer-space/" data-width="200" data-layout="button_count" data-action="like" data-show-faces="true" data-send="false"></div>
            </div>
                  </td>
               </tr>
         </table></td><td style="vertical-align:top;width:320px;min-height:280px;">

            <div style="font-size:0.9em;
            color:var(--mono-6);text-align:center;
            margin:0 auto;
            margin-top:1em;
            margin-bottom:0.25em;">
         ADVERTISEMENT</div>
         <!-- /31961696/release.case-a.300.top-right -->
            <div class='page_ads_creative_frame 
               
               
               

               ' id='frame-div-gpt-ad-1465817209349-21'  style='overflow:hidden;margin:0 auto;display: flex;align-items: center;justify-content: center;margin-bottom:1em;min-height:300px;min-width:300px;' >
            <div id='div-gpt-ad-1465817209349-21'>
            </div></div></td></tr></table></div></div><div class="show-for-small"><div class="section_tracklisting"><div class="release_page_header"><h2>Track listing</h2>
            <div id="track_credit_show_link_tracks_mobile" class="track_credit_show_link" onClick="rymQ( function() { RYMmediaPage.toggleTrackCredits('tracks_mobile'); });">Show track credits</div>
         </div>
            <span id="track_credit_show_msg_tracks_mobile" style="display:none;">Show track credits</span>
            <span id="track_credit_hide_msg_tracks_mobile" style="display:none;">Hide track credits</span>
          
       <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table>
       <ul id="tracks_mobile" class="tracks tracklisting"><li class="track"><div class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     A1
                  </span>
                  <span class="tracklist_title"><span><span class="rendered_text">Cool Places</span></span><span class="tracklist_duration" data-inseconds="203">
                     3:23
                  </span>
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/jane_wiedlin" class="artist">Jane Wiedlin</a></div>
               <div class="credits_roles">vocals</div>
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/brian_reeves_f1" class="artist">Brian Reeves</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     A2
                  </span>
                  <span class="tracklist_title"><span><span class="rendered_text">Popularity</span></span><span class="tracklist_duration" data-inseconds="232">
                     3:52
                  </span>
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     A3
                  </span>
                  <span class="tracklist_title"><span><span class="rendered_text">Prayin&#39; for a Party</span></span><span class="tracklist_duration" data-inseconds="179">
                     2:59
                  </span>
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     A4
                  </span>
                  <span class="tracklist_title"><span><span class="rendered_text">All You Ever Think About Is Sex</span></span><span class="tracklist_duration" data-inseconds="249">
                     4:09
                  </span>
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     A5
                  </span>
                  <span class="tracklist_title"><span><span class="rendered_text">Please, Baby, Please</span></span><span class="tracklist_duration" data-inseconds="222">
                     3:42
                  </span>
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     B1
                  </span>
                  <span class="tracklist_title"><span><span class="rendered_text">Rockin&#39; Girls</span></span><span class="tracklist_duration" data-inseconds="282">
                     4:42
                  </span>
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     B2
                  </span>
                  <span class="tracklist_title"><span><span class="rendered_text">I Wish I Looked a Little Better</span></span><span class="tracklist_duration" data-inseconds="178">
                     2:58
                  </span>
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     B3
                  </span>
                  <span class="tracklist_title"><span><span class="rendered_text">Lucky Me, Lucky You</span></span><span class="tracklist_duration" data-inseconds="206">
                     3:26
                  </span>
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/jane_wiedlin" class="artist">Jane Wiedlin</a></div>
               <div class="credits_roles">vocals</div>
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/brian_reeves_f1" class="artist">Brian Reeves</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     B4
                  </span>
                  <span class="tracklist_title"><span><span class="rendered_text">A Fun Bunch of Guys From Outer Space</span></span><span class="tracklist_duration" data-inseconds="240">
                     4:00
                  </span>
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     B5
                  </span>
                  <span class="tracklist_title"><span><span class="rendered_text">Dance Godammit</span></span><span class="tracklist_duration" data-inseconds="206">
                     3:26
                  </span>
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track" style="text-align:right;"><span style="line-height: 2.6em;color: var(--mono-6);margin-right:0.8em;" class="tracklist_total">Total length: 36:37</span></li></ul><div id="track_preview_tracks_mobile">
            
         </div> </div></div><div class="show-for-small"><div class="section_release_navigation"><div class="release_navigation"><div class="release_navigation_guidance">
                    <div class="release_nav_guidance_artist">
                     <div class="release_nav_guidance_left">
                      <a href="/release/album/sparks/angst-in-my-pants/"><i class="fa fa-caret-left"></i>
                      Previous</a>
                     </div>                     
                     <div class="release_nav_guidance_right">
                     <a href="/release/album/sparks/pulling-rabbits-out-of-a-hat/">Next
                      <i class="fa fa-caret-right"></i></a>
                      
                     </div></div>
                     <div style="clear:both;"></div>
                  </div>
               
                                 
                  <div class="release_navigation_links">
                    <div class="prev_image">
                       <a href="/release/album/sparks/angst-in-my-pants/"><img alt="Previous in discography: Angst in My Pants" src="//e.snmc.io/i/75/s/cd65b83c877464fa7c23ec2395e76efe/2370288" /></a>
                    </div>
                    <div class="prev_link">
                       <a title="[Album10197]" href="/release/album/sparks/angst-in-my-pants/" class="small">Angst in My Pants</a>
                    </div>
                    <div class="next_image">
                       <a href="/release/album/sparks/pulling-rabbits-out-of-a-hat/"><img alt="Next in discography: Angst in My Pants" src="//e.snmc.io/i/75/s/7b17467d777cad3197391cd7be84fb66/2370290" /></a>
                    </div>
                    <div class="next_link">
                       <a title="[Album10199]" href="/release/album/sparks/pulling-rabbits-out-of-a-hat/" class="small">Pulling Rabbits Out of a Hat</a>
                    </div>
                    <div style="clear:both;"></div>
                  </div>                
               
            </div></div></div><div class="section_my_catalog section_outer" style="padding-bottom: 5px;"><div class="page_section"><div id="my_catalog">
      <div class="release_page_header"><h2>Rate/Catalog 
      </h2></div>
       <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table>
            <div class="release_my_catalog">
               <div id="my_catalog_rating_l_10198" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_l_10198.onMouseMove(event,this);"
                  onMouseOver="rating_l_10198.onMouseOver(event,this);"
                  onMouseOut="rating_l_10198.onMouseOut(event,this);"

                  onTouchStart="rating_l_10198.onTouchStart(event,this);"
                  onTouchMove="rating_l_10198.onTouchMove(event,this);"
                  onTouchEnd="rating_l_10198.onTouchEnd(event,this);"

                  onClick="rating_l_10198.onClick(event,this);"
            >
               <div id="rating_stars_l_10198" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_l_10198" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_l_10198 = new RYMrating('l', 10198, 0 );});
            </script>
               
               <div class="my_catalog_catalog">
               <div onMouseOver="$('#catalog_btn_options_l_10198').show();" onMouseOut="$('#catalog_btn_options_l_10198').hide();" id="catalog_l_10198" class="catalog_btn catalog_n">
                     <span id="catalog_text_l_10198">Catalog</span>
                  <div id="catalog_btn_options_l_10198" class="catalog_btn_options">
                     <div id="catalog_btn_o" onClick="catalog_l_10198.setOwnership('o');" class="catalog_btn_option">In collection</div>
                     <div id="catalog_btn_w" onClick="catalog_l_10198.setOwnership('w');" class="catalog_btn_option">On wishlist</div>
                     <div id="catalog_btn_u" onClick="catalog_l_10198.setOwnership('u');" class="catalog_btn_option">Used to own</div>
                     <div id="catalog_btn_n" onClick="catalog_l_10198.setOwnership('n');" class="catalog_btn_option">(not cataloged)</div>
                  </div>
               </div>
               <script>
                  rymQ(function() { window.catalog_l_10198 = new RYMcatalog('l', 10198, 'n', '');});
               </script>
              </div>

               <div id="my_catalog_format_l_10198" class="my_catalog_format" style="display:none;">
               <div onMouseOver="$('#format_btn_options').show();" onMouseOut="$('#format_btn_options').hide();" id="catalog_l_10198" class="format_btn">
                     <span id="format_text_l_10198">---</span>
                     <div id="format_btn_options" class="format_btn_options">
                        <div id="format_btn_x" onClick="catalog_l_10198.setFormat('');" class="format_btn_option">(not set)</div>
                        <div id="format_btn_a" onClick="catalog_l_10198.setFormat('CD');" class="format_btn_option ">CD</div>
                        <div id="format_btn_b" onClick="catalog_l_10198.setFormat('LP');" class="format_btn_option default_format">Vinyl</div>
                        <div id="format_btn_c" onClick="catalog_l_10198.setFormat('MP3');" class="format_btn_option ">Digital</div>
                        <div id="format_btn_d" onClick="catalog_l_10198.setFormat('CD-R');" class="format_btn_option ">CD-R</div>
                        <div id="format_btn_e" onClick="catalog_l_10198.setFormat('Cassette');" class="format_btn_option ">Cassette</div>
                        <div id="format_btn_f" onClick="catalog_l_10198.setFormat('DVD-A');" class="format_btn_option ">DVD-A</div>
                        <div id="format_btn_g" onClick="catalog_l_10198.setFormat('SACD');" class="format_btn_option ">SACD</div>
                        <div id="format_btn_h" onClick="catalog_l_10198.setFormat('Minidisc');" class="format_btn_option ">Minidisc</div>
                        <div id="format_btn_i" onClick="catalog_l_10198.setFormat('Multiple');" class="format_btn_option ">Multiple</div>
                        <div id="format_btn_j" onClick="catalog_l_10198.setFormat('8-Track');" class="format_btn_option ">8-track</div>
                        <div id="format_btn_k" onClick="catalog_l_10198.setFormat('Other');" class="format_btn_option ">Other</div>
                     </div>
            
               </div>
               <script>
                  rymQ(function() {window.catalog_l_10198 = new RYMcatalog('l', 10198, 'n', '');});
               </script>
              </div>

               <div class="my_catalog_listening">
                     <div id="listening_btn" class="listening_btn" onclick="rymQ( function() { RYMPlayHistory.toggleSection(); });">Set listening</div>
                  </div>

               <div class="my_catalog_tags" >
               <div id="tag_btn_l_10198" class="tag_btn " onClick="$('#tag_dlg_l_10198').toggle();$('#tags_l_10198').focus();"  >
                  <span id="tags_text_l_10198">Tags</span>
                  <span id="tags_add_text" style="display:none">Tags</span>
                  </div>
               <div id="tag_dlg_l_10198" class="tag_dlg">
                     <label for="tags_l_10198">Enter tags, separated by commas</label>
                     <input onFocus="musictagattachSuggest(this.id);" id="tags_l_10198" value="" class="tag_tags">
                  <a href="javascript:void(0);" onClick="tags.save()" class="tag_save">Save</a>
               </div>
               <script>
                  rymQ(function() {window.tags = new RYMtags('l', 10198, []);});
               </script>               
            </div>

               <div class="my_catalog_review">
                  <div id="review_btn" class="review_btn" onclick="rymQ( function() { review.toggleSection(); });">Review</div>
               </div>

               <div class="my_catalog_rate_tracks">
                  <div id="track_rating_btn" class="track_rating_btn" onclick="rymQ( function() { track_ratings.toggleSection(); });">Track ratings</div>
               </div>
               
               <div class="my_catalog_bump">
               <div id="bump_btn_l_10198" class="bump_btn bumpable" onClick="catalog_l_10198.bump();">Bump</div>
              </div>


            <div class="clear"> </div>
            <div class="release_touch_guidance">To rate, slide your finger across the stars from left to right.</div>
            </div>
            <div id="release_touch_catalog_guidance" class="subtext">It's best to choose the correct issue from the "issues" section before cataloging.</div>
            <div class="clear"> </div>
            <div id="my_review" class="my_review edit_mode" style=" " id="my_review"><div id="saved_review" class="saved_review"><div id="saved_review_inner"><div class="review" itemprop="review" itemscope itemtype="http://schema.org/Review">
               <div class="review_header "><a href="/~staniel359"><div class="review_header_no_img"></div></a>
                  <span class="review_user" itemprop="author" content="staniel359" ><a class="usero" href = "/~staniel359">staniel359</a></span>
                  <span class="review_date"  itemprop="datePublished" content="">
                  <a href=""></a>
                  </span>
                  <span  class="review_rating"> &nbsp; </span><div style="float:right;" id="review_voting_0"><span onClick="window.location='/favorited/0_q_f';" class="review_vote_count"> </span><span class="review_voting" onMouseOver="RYMmediaPage.toggleReviewHelp(this, 'l', true);" onMouseOut="RYMmediaPage.toggleReviewHelp(this, 'l', false);"><span onClick="RYMmediaPage.reviewVote('l', 0, -1);" class="review_vote_down "><i class="fa fa-caret-down"></i><span class="voting_tip">Vote down</span></span><span onClick="RYMmediaPage.reviewBookmark('l', 0);"  class="review_vote_bookmark "><i class="fa fa-circle"></i><span class="voting_tip">Bookmark</span></span><span onClick="RYMmediaPage.reviewVote('l', 0, 1);"  class="review_vote_up "><i class="fa fa-caret-up"></i><span class="voting_tip">Vote up</span></span></span></div>
                 
               </div><div class="review_body my_review">


      <span itemprop="description"><span class="rendered_text"></span></span><div class="review_publish_status">Not published <input aria-label="review shortcut" class="review_shortcut" readonly style="width:150px;margin-top:0;float:none;" onclick="focus();select();" value="[Rating0]" /></div></div>
             </div></div><a id="review_edit_btn" onClick="rymQ( function() { review.edit(event, this); });" class="btn blue_btn">Edit review...</a> 
                      <a id="review_delete_btn"  onClick="rymQ( function() { review.remove(event, this); });"  class="btn blue_btn">Delete review</a></div>

         <div id="review_edit">

         <label for="title"><span class="review_label">Title</span> <span class="inline_subtext">[optional] One-line summary of your review</span></label><br />
         <input onChange="review.onChangeReviewField(event,this)" onInput="review.onChangeReviewField(event,this)" id="review_title" value="" name="title" style="font-weight:bold;padding:3px;background:var(--mono-f);border:1px var(--mono-d) solid;border-radius:3px;width:95%;"><br />

         
         <label for="review_publish" style="margin-top:10px;"><input onInput="review.onClickPublish(event,this)" onClick="review.onClickPublish(event,this)" id="review_publish" name="review_publish" type="checkbox"   > Publish this review to the release page.</label>
         <br /><span class="smallgray">Users who follow you can always see your reviews on album pages.</span>
         <div style="clear:both;margin-bottom:5px;"></div>

         <label for="review"><span class="review_label">Review</span> <br ><span class="subtext">The <b>text</b> portion of your review.

         All reviews must meet the following standards:

            <ul>
               <li>adherent to the <a target="_blank" href="/tos">terms of service</a></li>
               <li>adherent to the <a target="_blank" href="/wiki/RYM:Community+rules">community rules</a>, and not condoning any sort of violence or hatred toward the artist</li>
               <li>written in <b>your own words</b> (copying text from another site will lead to permanent suspension of your account)</li>
               <li>should not contain any metadata (custom rating, favorite tracks, track listing, credits, links, acknowledgements, etc). Anything that's not the main text of your review should be in the supplement section.</li>
            </ul>

         <span id="published_rules"  >
         Published reviews must meet additional standards:

            <ul>
               <li>mostly focused on the musical content of the recording  <span style="font-weight:normal;color:#999"></span></li>
               <li>have substance <span style="font-weight:normal;color:#999">(not just "this sucks!/this is awesome!")</span></li>
               <li>coherent and understandable by everyone that views the album pages <span style="font-weight:normal;color:#999">(not just people who know you personally)</span> </li>
               <li>able to stand alone <span style="font-weight:normal;color:#999">(written as if your review is the only one that appears on the page)</span> </li>
               <li>able to stand the test of time <span style="font-weight:normal;color:#999">(not contain references to things that won't matter or could change in the future, such as average rating, chart position or what someone else said about the release)</span></li>
               <li>contain a full review <span style="font-weight:normal;color:#999">(not "review coming soon" or a teaser review with a link to a website.  One-liners are fine if they are well-written and on-topic.)</span> </li>
               <li>well-formatted and readable <span style="font-weight:normal;color:#999">(especially regarding spacing, lack of noise, and consistency in text formatting)</span> </li>
               <li><span style="font-weight:normal;color:var(--gen-text-red)">ONLY PUBLISH ACTUAL REVIEWS! Do not publish offhand comments, jokes, memes, etc. Read the <a class="list" href="/list/sharifi/publishing_unpublishing_faq/">publishing FAQ</a> for more detailed information on what is considered publishable. </span></li>
            </ul>

         </span></label></label>
         <div>
         

   <style>
      .preview { position:absolute; margin:0; padding:10px; left:0px; top:0px; background:var(--gen-blue-lightest); width:100%;height:100% overflow:auto;} 
   </style>
       <div class="textarea_toolbar">
         <a id="ta_bold_review_body" href="javascript:void(0);" title="Bold" onClick="return RYMtextarea.insertFormatTag($('#review_body'), '[b]', '[/b]');"><b>B</b></a> 
         <a id="ta_italic_review_body" href="javascript:void(0);" title="Italic"  onClick="return RYMtextarea.insertFormatTag($('#review_body'), '[i]', '[/i]');"><i>I</i></a> 
         <a id="ta_connectArtist_review_body" href="javascript:openShortcut(did('review_body'));" >Insert music link, picture, or video</a>
       </div>
      
   <textarea 
       onInput="review.onChangeReviewField(event,this)" onChange="review.onChangeReviewField(event,this)"

       
       style="width:97%;padding:3px;color:var(--mono-4);background:var(--mono-f);border:1px var(--mono-d) solid;border-radius:3px;padding:3px;height:250px;" 
       
       

       name="review_body" id="review_body" rows="1" cols="1" ></textarea>
   
   
   <script type="text/javascript">//initTextarea('review');</script>
         </div>

         <label><span class="review_label">Extra information</span> <br ><span class="subtext">
            If there is any data in your review that's not formatted as normal text or is not actual review text (such as overall numeric ratings, track-by-track info or ratings, credits, ratings of other aspects of the release, etc), then it <b>must</b> be placed in this section, which is hidden by default if more than one line (but expandable). 
            </span></label>
         <div>
         

   <style>
      .preview { position:absolute; margin:0; padding:10px; left:0px; top:0px; background:var(--gen-blue-lightest); width:100%;height:100% overflow:auto;} 
   </style>
       <div class="textarea_toolbar">
         <a id="ta_bold_review_supplement" href="javascript:void(0);" title="Bold" onClick="return RYMtextarea.insertFormatTag($('#review_supplement'), '[b]', '[/b]');"><b>B</b></a> 
         <a id="ta_italic_review_supplement" href="javascript:void(0);" title="Italic"  onClick="return RYMtextarea.insertFormatTag($('#review_supplement'), '[i]', '[/i]');"><i>I</i></a> 
         <a id="ta_connectArtist_review_supplement" href="javascript:openShortcut(did('review_supplement'));" >Insert music link, picture, or video</a>
       </div>
      
   <textarea 
       onInput="review.onChangeReviewField(event,this)" onChange="review.onChangeReviewField(event,this)"

       
       style="width:97%;padding:3px;color:var(--mono-4);background:var(--mono-f);border:1px var(--mono-d) solid;border-radius:3px;padding:3px;height:150px;" 
       
       

       name="review_supplement" id="review_supplement" rows="1" cols="1" ></textarea>
   
   
   <script type="text/javascript">//initTextarea('review_supplement');</script>
         </div>



         <label for="review_attribution"><span class="review_label">Attribution</span> 
            <span class="subtext">If you wrote this review for another publication first (such as your own blog) and want to credit it, you can enter the URL here. </span></label><br />

         <input name="review_attribution" onChange="review.onChangeReviewField(event,this)" onInput="review.onChangeReviewField(event,this)"  id="review_attribution" value="" style="font-size:0.9em;padding:3px;color:var(--mono-6);background:var(--mono-f);border:1px var(--mono-d) solid;border-radius:3px;width:95%;"><br />

         <input onClick="review.cancelEdit(event,this);" id="review_cancel_btn" class="review_save_btn" type="button" value="Cancel edit" />

         <input onClick="review.preview(event,this);" id="review_preview_btn" class="review_save_btn" type="button" value="Preview" />

         <input onClick="review.save(event,this);"  id="review_save_btn" class="review_save_btn" type="button" disabled="disabled" value="Save review"  />

         </div>
         <div class="clear"> </div>
      </div><script>rymQ(function() {window.review = new RYMreview('l',  10198,  '', '', '', 'f', '');});</script>
            <div id="my_track_ratings">
      <!--[if IE 7]>
         <div style="padding:10px;border:1px var(--mono-a) solid;color:var(--mono-6);font-size:12px;color:maroon">
            Note: Track-by-track ratings are not compatible with IE7.  Please <a href="http://browsehappy.com/">upgrade your browser</a> to at least IE9 to use this feature, or use Chrome, Firefox, Opera, or Safari. 
         </div>
      <![endif]-->
      <!--[if (gt IE 7)|!(IE)]><!-->
      <script> rymQ(function() {window.track_ratings = new RYMtrackRatings('l', 10198, [{"track":"A1","title":"Cool Places"},{"track":"A2","title":"Popularity"},{"track":"A3","title":"Prayin&#39; for a Party"},{"track":"A4","title":"All You Ever Think About Is Sex"},{"track":"A5","title":"Please, Baby, Please"},{"track":"B1","title":"Rockin&#39; Girls"},{"track":"B2","title":"I Wish I Looked a Little Better"},{"track":"B3","title":"Lucky Me, Lucky You"},{"track":"B4","title":"A Fun Bunch of Guys From Outer Space"},{"track":"B5","title":"Dance Godammit"}]);});</script>
      <ul id="track_ratings" class="tracks tracklisting"><li class="track">
                           <div class="tracklist_line">
                              <span class="tracklist_num">A1</span> 
                              <span style="float:right;margin-top: -6px;" class="tracklist_track_rating">
                                 <div id="my_catalog_rating_z_0" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_z_0.onMouseMove(event,this);"
                  onMouseOver="rating_z_0.onMouseOver(event,this);"
                  onMouseOut="rating_z_0.onMouseOut(event,this);"

                  onTouchStart="rating_z_0.onTouchStart(event,this);"
                  onTouchMove="rating_z_0.onTouchMove(event,this);"
                  onTouchEnd="rating_z_0.onTouchEnd(event,this);"

                  onClick="rating_z_0.onClick(event,this);"
            >
               <div id="rating_stars_z_0" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_z_0" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_z_0 = new RYMrating('z', 0, 0 );});
            </script></span>
                                 <script>rymQ(function() {window.rating_z_0.onChange = function(index, rating) { track_ratings.onChange(index, rating) }
                                 track_ratings.ratings[0].rating = 0;});
                                 </script>
                              <span class="tracklist_title"><span class="rendered_text">Cool Places</span></span></div></li>
                              <li class="track">
                           <div class="tracklist_line">
                              <span class="tracklist_num">A2</span> 
                              <span style="float:right;margin-top: -6px;" class="tracklist_track_rating">
                                 <div id="my_catalog_rating_z_1" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_z_1.onMouseMove(event,this);"
                  onMouseOver="rating_z_1.onMouseOver(event,this);"
                  onMouseOut="rating_z_1.onMouseOut(event,this);"

                  onTouchStart="rating_z_1.onTouchStart(event,this);"
                  onTouchMove="rating_z_1.onTouchMove(event,this);"
                  onTouchEnd="rating_z_1.onTouchEnd(event,this);"

                  onClick="rating_z_1.onClick(event,this);"
            >
               <div id="rating_stars_z_1" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_z_1" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_z_1 = new RYMrating('z', 1, 0 );});
            </script></span>
                                 <script>rymQ(function() {window.rating_z_1.onChange = function(index, rating) { track_ratings.onChange(index, rating) }
                                 track_ratings.ratings[1].rating = 0;});
                                 </script>
                              <span class="tracklist_title"><span class="rendered_text">Popularity</span></span></div></li>
                              <li class="track">
                           <div class="tracklist_line">
                              <span class="tracklist_num">A3</span> 
                              <span style="float:right;margin-top: -6px;" class="tracklist_track_rating">
                                 <div id="my_catalog_rating_z_2" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_z_2.onMouseMove(event,this);"
                  onMouseOver="rating_z_2.onMouseOver(event,this);"
                  onMouseOut="rating_z_2.onMouseOut(event,this);"

                  onTouchStart="rating_z_2.onTouchStart(event,this);"
                  onTouchMove="rating_z_2.onTouchMove(event,this);"
                  onTouchEnd="rating_z_2.onTouchEnd(event,this);"

                  onClick="rating_z_2.onClick(event,this);"
            >
               <div id="rating_stars_z_2" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_z_2" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_z_2 = new RYMrating('z', 2, 0 );});
            </script></span>
                                 <script>rymQ(function() {window.rating_z_2.onChange = function(index, rating) { track_ratings.onChange(index, rating) }
                                 track_ratings.ratings[2].rating = 0;});
                                 </script>
                              <span class="tracklist_title"><span class="rendered_text">Prayin&#39; for a Party</span></span></div></li>
                              <li class="track">
                           <div class="tracklist_line">
                              <span class="tracklist_num">A4</span> 
                              <span style="float:right;margin-top: -6px;" class="tracklist_track_rating">
                                 <div id="my_catalog_rating_z_3" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_z_3.onMouseMove(event,this);"
                  onMouseOver="rating_z_3.onMouseOver(event,this);"
                  onMouseOut="rating_z_3.onMouseOut(event,this);"

                  onTouchStart="rating_z_3.onTouchStart(event,this);"
                  onTouchMove="rating_z_3.onTouchMove(event,this);"
                  onTouchEnd="rating_z_3.onTouchEnd(event,this);"

                  onClick="rating_z_3.onClick(event,this);"
            >
               <div id="rating_stars_z_3" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_z_3" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_z_3 = new RYMrating('z', 3, 0 );});
            </script></span>
                                 <script>rymQ(function() {window.rating_z_3.onChange = function(index, rating) { track_ratings.onChange(index, rating) }
                                 track_ratings.ratings[3].rating = 0;});
                                 </script>
                              <span class="tracklist_title"><span class="rendered_text">All You Ever Think About Is Sex</span></span></div></li>
                              <li class="track">
                           <div class="tracklist_line">
                              <span class="tracklist_num">A5</span> 
                              <span style="float:right;margin-top: -6px;" class="tracklist_track_rating">
                                 <div id="my_catalog_rating_z_4" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_z_4.onMouseMove(event,this);"
                  onMouseOver="rating_z_4.onMouseOver(event,this);"
                  onMouseOut="rating_z_4.onMouseOut(event,this);"

                  onTouchStart="rating_z_4.onTouchStart(event,this);"
                  onTouchMove="rating_z_4.onTouchMove(event,this);"
                  onTouchEnd="rating_z_4.onTouchEnd(event,this);"

                  onClick="rating_z_4.onClick(event,this);"
            >
               <div id="rating_stars_z_4" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_z_4" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_z_4 = new RYMrating('z', 4, 0 );});
            </script></span>
                                 <script>rymQ(function() {window.rating_z_4.onChange = function(index, rating) { track_ratings.onChange(index, rating) }
                                 track_ratings.ratings[4].rating = 0;});
                                 </script>
                              <span class="tracklist_title"><span class="rendered_text">Please, Baby, Please</span></span></div></li>
                              <li class="track">
                           <div class="tracklist_line">
                              <span class="tracklist_num">B1</span> 
                              <span style="float:right;margin-top: -6px;" class="tracklist_track_rating">
                                 <div id="my_catalog_rating_z_5" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_z_5.onMouseMove(event,this);"
                  onMouseOver="rating_z_5.onMouseOver(event,this);"
                  onMouseOut="rating_z_5.onMouseOut(event,this);"

                  onTouchStart="rating_z_5.onTouchStart(event,this);"
                  onTouchMove="rating_z_5.onTouchMove(event,this);"
                  onTouchEnd="rating_z_5.onTouchEnd(event,this);"

                  onClick="rating_z_5.onClick(event,this);"
            >
               <div id="rating_stars_z_5" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_z_5" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_z_5 = new RYMrating('z', 5, 0 );});
            </script></span>
                                 <script>rymQ(function() {window.rating_z_5.onChange = function(index, rating) { track_ratings.onChange(index, rating) }
                                 track_ratings.ratings[5].rating = 0;});
                                 </script>
                              <span class="tracklist_title"><span class="rendered_text">Rockin&#39; Girls</span></span></div></li>
                              <li class="track">
                           <div class="tracklist_line">
                              <span class="tracklist_num">B2</span> 
                              <span style="float:right;margin-top: -6px;" class="tracklist_track_rating">
                                 <div id="my_catalog_rating_z_6" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_z_6.onMouseMove(event,this);"
                  onMouseOver="rating_z_6.onMouseOver(event,this);"
                  onMouseOut="rating_z_6.onMouseOut(event,this);"

                  onTouchStart="rating_z_6.onTouchStart(event,this);"
                  onTouchMove="rating_z_6.onTouchMove(event,this);"
                  onTouchEnd="rating_z_6.onTouchEnd(event,this);"

                  onClick="rating_z_6.onClick(event,this);"
            >
               <div id="rating_stars_z_6" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_z_6" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_z_6 = new RYMrating('z', 6, 0 );});
            </script></span>
                                 <script>rymQ(function() {window.rating_z_6.onChange = function(index, rating) { track_ratings.onChange(index, rating) }
                                 track_ratings.ratings[6].rating = 0;});
                                 </script>
                              <span class="tracklist_title"><span class="rendered_text">I Wish I Looked a Little Better</span></span></div></li>
                              <li class="track">
                           <div class="tracklist_line">
                              <span class="tracklist_num">B3</span> 
                              <span style="float:right;margin-top: -6px;" class="tracklist_track_rating">
                                 <div id="my_catalog_rating_z_7" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_z_7.onMouseMove(event,this);"
                  onMouseOver="rating_z_7.onMouseOver(event,this);"
                  onMouseOut="rating_z_7.onMouseOut(event,this);"

                  onTouchStart="rating_z_7.onTouchStart(event,this);"
                  onTouchMove="rating_z_7.onTouchMove(event,this);"
                  onTouchEnd="rating_z_7.onTouchEnd(event,this);"

                  onClick="rating_z_7.onClick(event,this);"
            >
               <div id="rating_stars_z_7" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_z_7" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_z_7 = new RYMrating('z', 7, 0 );});
            </script></span>
                                 <script>rymQ(function() {window.rating_z_7.onChange = function(index, rating) { track_ratings.onChange(index, rating) }
                                 track_ratings.ratings[7].rating = 0;});
                                 </script>
                              <span class="tracklist_title"><span class="rendered_text">Lucky Me, Lucky You</span></span></div></li>
                              <li class="track">
                           <div class="tracklist_line">
                              <span class="tracklist_num">B4</span> 
                              <span style="float:right;margin-top: -6px;" class="tracklist_track_rating">
                                 <div id="my_catalog_rating_z_8" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_z_8.onMouseMove(event,this);"
                  onMouseOver="rating_z_8.onMouseOver(event,this);"
                  onMouseOut="rating_z_8.onMouseOut(event,this);"

                  onTouchStart="rating_z_8.onTouchStart(event,this);"
                  onTouchMove="rating_z_8.onTouchMove(event,this);"
                  onTouchEnd="rating_z_8.onTouchEnd(event,this);"

                  onClick="rating_z_8.onClick(event,this);"
            >
               <div id="rating_stars_z_8" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_z_8" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_z_8 = new RYMrating('z', 8, 0 );});
            </script></span>
                                 <script>rymQ(function() {window.rating_z_8.onChange = function(index, rating) { track_ratings.onChange(index, rating) }
                                 track_ratings.ratings[8].rating = 0;});
                                 </script>
                              <span class="tracklist_title"><span class="rendered_text">A Fun Bunch of Guys From Outer Space</span></span></div></li>
                              <li class="track">
                           <div class="tracklist_line">
                              <span class="tracklist_num">B5</span> 
                              <span style="float:right;margin-top: -6px;" class="tracklist_track_rating">
                                 <div id="my_catalog_rating_z_9" tabIndex="0" class="my_catalog_rating" 
                  onMouseMove="rating_z_9.onMouseMove(event,this);"
                  onMouseOver="rating_z_9.onMouseOver(event,this);"
                  onMouseOut="rating_z_9.onMouseOut(event,this);"

                  onTouchStart="rating_z_9.onTouchStart(event,this);"
                  onTouchMove="rating_z_9.onTouchMove(event,this);"
                  onTouchEnd="rating_z_9.onTouchEnd(event,this);"

                  onClick="rating_z_9.onClick(event,this);"
            >
               <div id="rating_stars_z_9" class="rating_stars star-0m">
               </div>
               <div class="rating_loading">Saving...
               </div>
               <div id="rating_num_z_9" class="rating_num">
                  0.0
               </div>
            </div>
            <script>
              rymQ(function() {window.rating_z_9 = new RYMrating('z', 9, 0 );});
            </script></span>
                                 <script>rymQ(function() {window.rating_z_9.onChange = function(index, rating) { track_ratings.onChange(index, rating) }
                                 track_ratings.ratings[9].rating = 0;});
                                 </script>
                              <span class="tracklist_title"><span class="rendered_text">Dance Godammit</span></span></div></li>
                              </ul><script>rymQ(function() {track_ratings.updateButton();
                  track_ratings.newRatings = JSON.parse(JSON.stringify(track_ratings.ratings));});</script>
         <input onClick="rymQ( function() { track_ratings.cancel(event,this); });" id="track_ratings_cancel_btn" class="review_save_btn" type="button" value="Cancel" />
         <input onClick="rymQ( function() { track_ratings.save(event,this); });"  id="track_ratings_save_btn" class="review_save_btn" type="button" disabled="disabled" value="Save track ratings"  />
         <span id="track_rating_success">Track ratings saved.</span>
      <!--<![endif]--></div>
            
<div id="release_play_selection">
 
   <span class="listening_header">Currently listening to:</span>
   <div id="listening_current">
         <i>&lt;not set&gt;</i>
   </div>

   <span class="listening_header">Select what you are listening to right now:</span>
   <ul id="release_listening" class="listening_tracks tracklisting listening_selector">

      <li class="listening_track track_select_btn listening_selected" onclick="RYMPlayHistory.selectTrack('', this);">
         <div class="listening_tracklist_line">
            <span class="listening_entire_album">Entire album</span>
         </div>
      </li>

      <details>
         <summary class="listening_tracks_dropdown">Select a track</summary>
         <li class="listening_track track_select_btn" onclick="RYMPlayHistory.selectTrack('A1', this);">
            <div class="listening_tracklist_line">
               <span class="listening_tracklist_num">A1</span> 
               <span class="listening_tracklist_title"><span class="rendered_text">Cool Places</span></span>
            </div>
         </li>
         <li class="listening_track track_select_btn" onclick="RYMPlayHistory.selectTrack('A2', this);">
            <div class="listening_tracklist_line">
               <span class="listening_tracklist_num">A2</span> 
               <span class="listening_tracklist_title"><span class="rendered_text">Popularity</span></span>
            </div>
         </li>
         <li class="listening_track track_select_btn" onclick="RYMPlayHistory.selectTrack('A3', this);">
            <div class="listening_tracklist_line">
               <span class="listening_tracklist_num">A3</span> 
               <span class="listening_tracklist_title"><span class="rendered_text">Prayin&#39; for a Party</span></span>
            </div>
         </li>
         <li class="listening_track track_select_btn" onclick="RYMPlayHistory.selectTrack('A4', this);">
            <div class="listening_tracklist_line">
               <span class="listening_tracklist_num">A4</span> 
               <span class="listening_tracklist_title"><span class="rendered_text">All You Ever Think About Is Sex</span></span>
            </div>
         </li>
         <li class="listening_track track_select_btn" onclick="RYMPlayHistory.selectTrack('A5', this);">
            <div class="listening_tracklist_line">
               <span class="listening_tracklist_num">A5</span> 
               <span class="listening_tracklist_title"><span class="rendered_text">Please, Baby, Please</span></span>
            </div>
         </li>
         <li class="listening_track track_select_btn" onclick="RYMPlayHistory.selectTrack('B1', this);">
            <div class="listening_tracklist_line">
               <span class="listening_tracklist_num">B1</span> 
               <span class="listening_tracklist_title"><span class="rendered_text">Rockin&#39; Girls</span></span>
            </div>
         </li>
         <li class="listening_track track_select_btn" onclick="RYMPlayHistory.selectTrack('B2', this);">
            <div class="listening_tracklist_line">
               <span class="listening_tracklist_num">B2</span> 
               <span class="listening_tracklist_title"><span class="rendered_text">I Wish I Looked a Little Better</span></span>
            </div>
         </li>
         <li class="listening_track track_select_btn" onclick="RYMPlayHistory.selectTrack('B3', this);">
            <div class="listening_tracklist_line">
               <span class="listening_tracklist_num">B3</span> 
               <span class="listening_tracklist_title"><span class="rendered_text">Lucky Me, Lucky You</span></span>
            </div>
         </li>
         <li class="listening_track track_select_btn" onclick="RYMPlayHistory.selectTrack('B4', this);">
            <div class="listening_tracklist_line">
               <span class="listening_tracklist_num">B4</span> 
               <span class="listening_tracklist_title"><span class="rendered_text">A Fun Bunch of Guys From Outer Space</span></span>
            </div>
         </li>
         <li class="listening_track track_select_btn" onclick="RYMPlayHistory.selectTrack('B5', this);">
            <div class="listening_tracklist_line">
               <span class="listening_tracklist_num">B5</span> 
               <span class="listening_tracklist_title"><span class="rendered_text">Dance Godammit</span></span>
            </div>
         </li>
      </details>

   </ul>



   <div class="listening_comments_container">
      <input class="listening_comments_inputbox" type="text" id="listening_comments" placeholder="Add a comment (optional)">

      <div class="listening_comment_btns_container">
         <input onClick="RYMPlayHistory.save();"  id="listening_save_btn" class="review_save_btn" type="button" value="Save listening" />
         <input onClick="RYMPlayHistory.cancel();" id="listening_cancel_btn" class="review_save_btn" type="button" value="Cancel" />
      </div>
      <span id="listening_success">Listening saved.</span>
   
   </div>

</div>

<script>
   rymQ( function() { 
      RYMPlayHistory.assoc_id = 10198; 
   });
</script>
            

            </div>
         </div></div><div class="show-for-small">
      <div id="expand_full_issues" class="mobile_expandable_full ">

            <div id="expand_full_header_issues" class="mobile_expandable_full_header" onClick="RYMmobile.mobileExpand.toggleFull('issues');">

               <div class="mobile_expandable_full_icons">
                  <div class="mobile_expandable_full_expand_icon_expanded">
                     <i class="fa fa-caret-down"></i>
                  </div>
                  <div class="mobile_expandable_full_expand_icon_hidden">
                     <i class="fa fa-caret-right"></i>
                  </div>
               </div>

               <div id="expand_full_name_issues" class="mobile_expandable_full_name">
                  Issues
               </div>

            </div>

            <div id="expand_full_content_issues" class="mobile_expandable_full_content">
               <div class="section_issues section_outer"><div class="page_section">
         <div class="release_page_header"><h2>11 Issues</h2></div>
         <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table>
         <ul class="issues ">
      <li  class="issue_info release_view current"><a >Release view [combined information for all issues]</a></li><li id="issue_10198" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space/" title="In Outer Space"><div 
                     class="has_tip issue_img" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/c3e83121b5aad106084a420d6d88a7d2/2656352>" style="background:url('//e.snmc.io/i/75/s/2f1b266e391e114b09ea68994c6bb426/2656352') center center no-repeat;" 
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space.p/">In Outer Space</a> 
                        
                        <span title="This is the primary issue." class="primary_indicator">[p]</span>
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="33 rpm">33 rpm</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year ym" title="June 1983 ">
                     1983&nbsp;
                  </span>

                  <span class="issue_formats" title="Vinyl LP">
                     Vinyl LP
                  </span>

                  <span class="issue_label" title="Atlantic / 80055-1" >
                     <a title="[Label95]" href="/label/atlantic/" class="label">Atlantic</a> 
                     / 80055-1
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-us" alt="United States" title="United States" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_1881100" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-4/" title="In Outer Space"><div 
                     class="has_tip issue_img" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/eadcdb694ae2c0739ebe2a4b8c53a891/2452909>" style="background:url('//e.snmc.io/i/75/s/921cc540221995c6ad0863ce1c5908b6/2452909') center center no-repeat;" 
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-4/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title=""></span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1983">
                     1983&nbsp;
                  </span>

                  <span class="issue_formats" title="Cassette ">
                     Cassette 
                  </span>

                  <span class="issue_label" title="Atlantic / 7 80055-4" >
                     <a title="[Label95]" href="/label/atlantic/" class="label">Atlantic</a> 
                     / 7 80055-4
                  </span>

                  <span class="issue_countries">&nbsp;</span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_2506489" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-7/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/2f413e9d1393938312aeae338a971c1a/2772205>" data-bkg="//e.snmc.io/i/75/s/36e3e7c38b40900ad5280d082509d0ca/2772205"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-7/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title=""></span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1983">
                     1983&nbsp;
                  </span>

                  <span class="issue_formats" title="Vinyl LP">
                     Vinyl LP
                  </span>

                  <span class="issue_label" title="Underdog / 67981" >
                     <a title="[Label34917]" href="/label/underdog/" class="label">Underdog</a> 
                     / 67981
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-fr" alt="France" title="France" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_4440055" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-3/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/9bb3006f72da95d0bb6d044d7ce13c8d/4671248>" data-bkg="//e.snmc.io/i/75/s/0d597fae852e019be7c7e9e8d0ac8039/4671248"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-3/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="33 rpm">33 rpm</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1983">
                     1983&nbsp;
                  </span>

                  <span class="issue_formats" title="Vinyl LP">
                     Vinyl LP
                  </span>

                  <span class="issue_label" title="Atlantic / 7 80055-1" >
                     <a title="[Label95]" href="/label/atlantic/" class="label">Atlantic</a> 
                     / 7 80055-1
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-us" alt="United States" title="United States" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_7859308" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-1/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/e3f6e3bb24cee44236a525c50e0dc271/6323088>" data-bkg="//e.snmc.io/i/75/s/841c011b71c7f0b67df2df4f1bcf3d0a/6323088"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-1/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="33 rpm">33 rpm</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1983">
                     1983&nbsp;
                  </span>

                  <span class="issue_formats" title="Vinyl LP">
                     Vinyl LP
                  </span>

                  <span class="issue_label" title="Atlantic / 78-0055-1" >
                     <a title="[Label95]" href="/label/atlantic/" class="label">Atlantic</a> 
                     / 78-0055-1
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-de" alt="Germany" title="Germany" /> <img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-no" alt="Norway" title="Norway" /> <img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-se" alt="Sweden" title="Sweden" /> <img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-dk" alt="Denmark" title="Denmark" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_766952" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-6/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/436e582934d328d42d6574c080cae54d/1812153>" data-bkg="//e.snmc.io/i/75/s/c493a5d21edd19fba04a567c3e07ca5f/1812153"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-6/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title=""></span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year ymd" title="16 November 1994 ">
                     1994&nbsp;
                  </span>

                  <span class="issue_formats" title="CD ">
                     CD 
                  </span>

                  <span class="issue_label" title="Oglio / OGL 81603-2" >
                     <a title="[Label717]" href="/label/oglio_records/" class="label">Oglio</a> 
                     / OGL 81603-2
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-us" alt="United States" title="United States" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_3006178" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-11/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/91f41d0e10aa8092ac85bd0f78ef04ad/6280366>" data-bkg="//e.snmc.io/i/75/s/58152cda7671cdb37a8cda7c5220efc3/6280366"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-11/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title=""></span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1996">
                     1996&nbsp;
                  </span>

                  <span class="issue_formats" title="CD ">
                     CD 
                  </span>

                  <span class="issue_label" title="Oasis / CMP 62008" >
                     <a title="[Label1177]" href="/label/oasis/" class="label">Oasis</a> 
                     / CMP 62008
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-de" alt="Germany" title="Germany" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_432764" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-8/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/9f1b529cadcd3bf1f5487af41d94d574/3064872>" data-bkg="//e.snmc.io/i/75/s/5d1b180cb3052caf3ab7b9a42568b025/3064872"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-8/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="Remastered">Remastered</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1999">
                     1999&nbsp;
                  </span>

                  <span class="issue_formats" title="CD ">
                     CD 
                  </span>

                  <span class="issue_label" title="Repertoire / REP 4761-WG" >
                     <a title="[Label489]" href="/label/repertoire_records/" class="label">Repertoire</a> 
                     / REP 4761-WG
                  </span>

                  <span class="issue_countries">&nbsp;</span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_2191738" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-5/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/8b89438b477b4c9591540bc64fdd1f3d/5586361>" data-bkg="//e.snmc.io/i/75/s/53b69fd4158eef6a648f122ddfc7a284/5586361"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-5/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="Bonus Tracks, Remastered, SHM">Bonus Tracks, Remastered, SHM</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="2009">
                     2009&nbsp;
                  </span>

                  <span class="issue_formats" title="CD ">
                     CD 
                  </span>

                  <span class="issue_label" title="Imperial / TECI-26551" >
                     <a title="[Label1917]" href="/label/imperial_records/" class="label">Imperial</a> 
                     / TECI-26551
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-jp" alt="Japan" title="Japan" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_10059050" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-9/" title="In Outer Space"><div 
                     class="issue_no_img"
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-9/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="Bonus Tracks, Digipak, Remastered">Bonus Tracks, Digipak, Remastered</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="2013">
                     2013&nbsp;
                  </span>

                  <span class="issue_formats" title="CD ">
                     CD 
                  </span>

                  <span class="issue_label" title="Repertoire / REP 5312" >
                     <a title="[Label489]" href="/label/repertoire_records/" class="label">Repertoire</a> 
                     / REP 5312
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-eu" alt="Europe" title="Europe"/> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_10553475" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-10/" title="In Outer Space"><div 
                     class="issue_no_img"
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-10/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title=""></span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="2018">
                     2018&nbsp;
                  </span>

                  <span class="issue_formats" title="Vinyl LP">
                     Vinyl LP
                  </span>

                  <span class="issue_label" title="Repertoire " >
                     <a title="[Label489]" href="/label/repertoire_records/" class="label">Repertoire</a> 
                     
                  </span>

                  <span class="issue_countries">&nbsp;</span>
                  <div class="clearfix"></div>
               </div>


              </li></ul><script>rymQ(function() {$('.issues').prop('scrollTop', 0);});</script><div id="expand_button" onClick="rymQ( function() { RYMmediaPage.toggleIssues(11); });" data-state="compact" class="expand_button">
               Expand all 11 issues
            </div>
            <span style="display:none;" id="issue_expand_text_compact">Compact issues</span>
            <span style="display:none;"  id="issue_expand_text_expand">Expand all 11 issues</span><div style="text-align:right;margin:5px;font-size:0.9em;">
                        <a style="text-decoration:none;" href="/releases/ac?parent_id=10198">Add issue</a>
                     </div></div></div>
            </div>
         </div>
      </div><div class="hide-for-small"><div class="section_issues section_outer"><div class="page_section">
         <div class="release_page_header"><h2>11 Issues</h2></div>
         <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table>
         <ul class="issues ">
      <li  class="issue_info release_view current"><a >Release view [combined information for all issues]</a></li><li id="issue_10198" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space/" title="In Outer Space"><div 
                     class="has_tip issue_img" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/c3e83121b5aad106084a420d6d88a7d2/2656352>" style="background:url('//e.snmc.io/i/75/s/2f1b266e391e114b09ea68994c6bb426/2656352') center center no-repeat;" 
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space.p/">In Outer Space</a> 
                        
                        <span title="This is the primary issue." class="primary_indicator">[p]</span>
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="33 rpm">33 rpm</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year ym" title="June 1983 ">
                     1983&nbsp;
                  </span>

                  <span class="issue_formats" title="Vinyl LP">
                     Vinyl LP
                  </span>

                  <span class="issue_label" title="Atlantic / 80055-1" >
                     <a title="[Label95]" href="/label/atlantic/" class="label">Atlantic</a> 
                     / 80055-1
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-us" alt="United States" title="United States" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_1881100" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-4/" title="In Outer Space"><div 
                     class="has_tip issue_img" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/eadcdb694ae2c0739ebe2a4b8c53a891/2452909>" style="background:url('//e.snmc.io/i/75/s/921cc540221995c6ad0863ce1c5908b6/2452909') center center no-repeat;" 
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-4/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title=""></span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1983">
                     1983&nbsp;
                  </span>

                  <span class="issue_formats" title="Cassette ">
                     Cassette 
                  </span>

                  <span class="issue_label" title="Atlantic / 7 80055-4" >
                     <a title="[Label95]" href="/label/atlantic/" class="label">Atlantic</a> 
                     / 7 80055-4
                  </span>

                  <span class="issue_countries">&nbsp;</span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_2506489" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-7/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/2f413e9d1393938312aeae338a971c1a/2772205>" data-bkg="//e.snmc.io/i/75/s/36e3e7c38b40900ad5280d082509d0ca/2772205"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-7/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title=""></span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1983">
                     1983&nbsp;
                  </span>

                  <span class="issue_formats" title="Vinyl LP">
                     Vinyl LP
                  </span>

                  <span class="issue_label" title="Underdog / 67981" >
                     <a title="[Label34917]" href="/label/underdog/" class="label">Underdog</a> 
                     / 67981
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-fr" alt="France" title="France" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_4440055" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-3/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/9bb3006f72da95d0bb6d044d7ce13c8d/4671248>" data-bkg="//e.snmc.io/i/75/s/0d597fae852e019be7c7e9e8d0ac8039/4671248"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-3/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="33 rpm">33 rpm</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1983">
                     1983&nbsp;
                  </span>

                  <span class="issue_formats" title="Vinyl LP">
                     Vinyl LP
                  </span>

                  <span class="issue_label" title="Atlantic / 7 80055-1" >
                     <a title="[Label95]" href="/label/atlantic/" class="label">Atlantic</a> 
                     / 7 80055-1
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-us" alt="United States" title="United States" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_7859308" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-1/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/e3f6e3bb24cee44236a525c50e0dc271/6323088>" data-bkg="//e.snmc.io/i/75/s/841c011b71c7f0b67df2df4f1bcf3d0a/6323088"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-1/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="33 rpm">33 rpm</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1983">
                     1983&nbsp;
                  </span>

                  <span class="issue_formats" title="Vinyl LP">
                     Vinyl LP
                  </span>

                  <span class="issue_label" title="Atlantic / 78-0055-1" >
                     <a title="[Label95]" href="/label/atlantic/" class="label">Atlantic</a> 
                     / 78-0055-1
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-de" alt="Germany" title="Germany" /> <img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-no" alt="Norway" title="Norway" /> <img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-se" alt="Sweden" title="Sweden" /> <img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-dk" alt="Denmark" title="Denmark" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_766952" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-6/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/436e582934d328d42d6574c080cae54d/1812153>" data-bkg="//e.snmc.io/i/75/s/c493a5d21edd19fba04a567c3e07ca5f/1812153"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-6/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title=""></span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year ymd" title="16 November 1994 ">
                     1994&nbsp;
                  </span>

                  <span class="issue_formats" title="CD ">
                     CD 
                  </span>

                  <span class="issue_label" title="Oglio / OGL 81603-2" >
                     <a title="[Label717]" href="/label/oglio_records/" class="label">Oglio</a> 
                     / OGL 81603-2
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-us" alt="United States" title="United States" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_3006178" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-11/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/91f41d0e10aa8092ac85bd0f78ef04ad/6280366>" data-bkg="//e.snmc.io/i/75/s/58152cda7671cdb37a8cda7c5220efc3/6280366"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-11/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title=""></span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1996">
                     1996&nbsp;
                  </span>

                  <span class="issue_formats" title="CD ">
                     CD 
                  </span>

                  <span class="issue_label" title="Oasis / CMP 62008" >
                     <a title="[Label1177]" href="/label/oasis/" class="label">Oasis</a> 
                     / CMP 62008
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-de" alt="Germany" title="Germany" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_432764" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-8/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/9f1b529cadcd3bf1f5487af41d94d574/3064872>" data-bkg="//e.snmc.io/i/75/s/5d1b180cb3052caf3ab7b9a42568b025/3064872"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-8/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="Remastered">Remastered</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="1999">
                     1999&nbsp;
                  </span>

                  <span class="issue_formats" title="CD ">
                     CD 
                  </span>

                  <span class="issue_label" title="Repertoire / REP 4761-WG" >
                     <a title="[Label489]" href="/label/repertoire_records/" class="label">Repertoire</a> 
                     / REP 4761-WG
                  </span>

                  <span class="issue_countries">&nbsp;</span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_2191738" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-5/" title="In Outer Space"><div 
                     class="has_tip issue_img lazyload" data-tiptip="<img class=large_tip_img src=//e.snmc.io/i/300/s/8b89438b477b4c9591540bc64fdd1f3d/5586361>" data-bkg="//e.snmc.io/i/75/s/53b69fd4158eef6a648f122ddfc7a284/5586361"  
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-5/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="Bonus Tracks, Remastered, SHM">Bonus Tracks, Remastered, SHM</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="2009">
                     2009&nbsp;
                  </span>

                  <span class="issue_formats" title="CD ">
                     CD 
                  </span>

                  <span class="issue_label" title="Imperial / TECI-26551" >
                     <a title="[Label1917]" href="/label/imperial_records/" class="label">Imperial</a> 
                     / TECI-26551
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-jp" alt="Japan" title="Japan" /> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_10059050" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-9/" title="In Outer Space"><div 
                     class="issue_no_img"
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-9/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title="Bonus Tracks, Digipak, Remastered">Bonus Tracks, Digipak, Remastered</span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="2013">
                     2013&nbsp;
                  </span>

                  <span class="issue_formats" title="CD ">
                     CD 
                  </span>

                  <span class="issue_label" title="Repertoire / REP 5312" >
                     <a title="[Label489]" href="/label/repertoire_records/" class="label">Repertoire</a> 
                     / REP 5312
                  </span>

                  <span class="issue_countries">&nbsp;<img src="//e.snmc.io/2.5/img/images/blank.png" class="flag flag-eu" alt="Europe" title="Europe"/> </span>
                  <div class="clearfix"></div>
               </div>


              </li><li id="issue_10553475" class="issue_info ">
                  <a href="/release/album/sparks/in-outer-space-10/" title="In Outer Space"><div 
                     class="issue_no_img"
                  >
         
               </div></a>

               <div class="issue_info_top">
                  <span class="main_issue_info">
                     <span class="issue_title">
                        <a class="sametitle" href="/release/album/sparks/in-outer-space-10/">In Outer Space</a> 
                        
                        
                        <span class="issue_attributes" style="font-weight:normal;">
                           <span class="attribute" title=""></span>
                        </span>
                     </span>
                  </span>
               </div>

               <div class="issue_info_bottom">
                  <span class="issue_year y" title="2018">
                     2018&nbsp;
                  </span>

                  <span class="issue_formats" title="Vinyl LP">
                     Vinyl LP
                  </span>

                  <span class="issue_label" title="Repertoire " >
                     <a title="[Label489]" href="/label/repertoire_records/" class="label">Repertoire</a> 
                     
                  </span>

                  <span class="issue_countries">&nbsp;</span>
                  <div class="clearfix"></div>
               </div>


              </li></ul><script>rymQ(function() {$('.issues').prop('scrollTop', 0);});</script><div id="expand_button" onClick="rymQ( function() { RYMmediaPage.toggleIssues(11); });" data-state="compact" class="expand_button">
               Expand all 11 issues
            </div>
            <span style="display:none;" id="issue_expand_text_compact">Compact issues</span>
            <span style="display:none;"  id="issue_expand_text_expand">Expand all 11 issues</span><div style="text-align:right;margin:5px;font-size:0.9em;">
                        <a style="text-decoration:none;" href="/releases/ac?parent_id=10198">Add issue</a>
                     </div></div></div></div><div class="show-for-small">
      <div id="expand_full_credits_small" class="mobile_expandable_full ">

            <div id="expand_full_header_credits_small" class="mobile_expandable_full_header" onClick="RYMmobile.mobileExpand.toggleFull('credits_small');">

               <div class="mobile_expandable_full_icons">
                  <div class="mobile_expandable_full_expand_icon_expanded">
                     <i class="fa fa-caret-down"></i>
                  </div>
                  <div class="mobile_expandable_full_expand_icon_hidden">
                     <i class="fa fa-caret-right"></i>
                  </div>
               </div>

               <div id="expand_full_name_credits_small" class="mobile_expandable_full_name">
                  Credits
               </div>

            </div>

            <div id="expand_full_content_credits_small" class="mobile_expandable_full_content">
               <div class="section_credits"><div class="release_page_header hide-for-small"><h2>Credits</h2></div>
          <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table>
          <ul id="credits_credits_mobile" class="credits"><li><a title="[Artist954920]"  href="/artist/ron_mael" class="artist">Ron Mael</a><br /> <span class="role_name ">producer</span>,  <span class="role_name ">writer</span>,  <span class="role_name ">synthesizer</span></li>
<li><a title="[Artist314265]"  href="/artist/russell_mael" class="artist">Russell Mael</a><br /> <span class="role_name ">producer</span>,  <span class="role_name ">writer</span>,  <span class="role_name ">vocals</span></li>
<li><a title="[Artist957477]"  href="/artist/brian_reeves_f1" class="artist">Brian Reeves</a><br /> <span class="role_name has_tracks">engineer<span class="role_tracks">A1, B3</span></span>,  <span class="role_name "><span class="rendered_text">mixing</span></span></li>
<li><a title="[Artist954805]"  href="/artist/brian_gardner_f1" class="artist">Brian Gardner</a><br /> <span class="role_name ">mastering</span></li>
<li><a title="[Artist1496747]"  href="/artist/bob-haag" class="artist">Bob Haag</a><br /> <span class="role_name ">guitar</span>,  <span class="role_name ">guitar synthesizer</span>,  <span class="role_name "><span class="rendered_text">background vocals</span></span>,  <span class="role_name ">bass guitar</span></li>
<li><a title="[Artist949072]"  href="/artist/leslie_bohem" class="artist">Leslie Bohem</a><br /> <span class="role_name ">bass guitar</span>,  <span class="role_name "><span class="rendered_text">background vocals</span></span></li>
<li><a title="[Artist1357949]"  href="/artist/david-kendrick" class="artist">David Kendrick</a><br /> <span class="role_name ">drums</span></li>
<li><a title="[Artist463556]"  href="/artist/james_goodwin" class="artist">James Goodwin</a><br /> <span class="role_name ">keyboards</span></li>
<li><a title="[Artist1045369]"  href="/artist/larry_vigon" class="artist">Larry Vigon</a><br /> <span class="role_name ">art direction</span>,  <span class="role_name ">design</span></li>
<li><a title="[Artist1008307]"  href="/artist/jim_shea" class="artist">Jim Shea</a><br /> <span class="role_name ">photography</span></li>
             <div id="minor_credits_credits_mobile" style="display:none;"><li><a title="[Artist11043]"  href="/artist/jane_wiedlin" class="artist">Jane Wiedlin</a><br /> <span class="role_name has_tracks">vocals<span class="role_tracks">A1, B3</span></span></li>
<li><a title="[Artist168692]"  href="/artist/dan_lacksman" class="artist">Dan Lacksman</a><br /> <span class="role_name has_tracks">engineer<span class="role_tracks">A2-A5, B1, B2, B4, B5</span></span></li></div><li onClick="$('#minor_credits_credits_mobile').slideToggle(100);$('#track_minor_hide_credits_mobile').toggle();$('#track_minor_show_credits_mobile').toggle();" class="expand_button"> <span id="track_minor_show_credits_mobile"> Expand credits <span style="font-weight:normal">[+2]</span></span> <span id="track_minor_hide_credits_mobile" style="display:none;"> Compact credits </span></li> </ul> </div>
          
            </div>
         </div>
      </div><div id="reviews_shell"><div class="section_reviews section_outer"><div class="page_section">
         <div class="release_page_header"><h2>11 Reviews
         </h2></div>
         <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table>
         <div class="review_list"><div class="review_sort"><b>Sort:</b>
                  <span class="sort_choices"><span onClick="rymQ( function() { RYMmediaPage.setSortOrder('votes'); });" class="sort_choice selected">votes</span><span onClick="rymQ( function() { RYMmediaPage.setSortOrder('date'); });" class="sort_choice ">date</span><span onClick="rymQ( function() { RYMmediaPage.setSortOrder('length'); });"  class="sort_choice ">length</span><span onClick="rymQ( function() { RYMmediaPage.setSortOrder('positive'); });"  class="sort_choice ">positive</span><span onClick="rymQ( function() { RYMmediaPage.setSortOrder('negative'); });"  class="sort_choice ">negative</span></span>
                </div> <span class="navspan"><span class="navpage">Page </span><span class="navlinkcurrent">1</span> <a class="navlinknum" href = "/release/album/sparks/in-outer-space/reviews/2/">2</a> <a class="navlinknext" href="/release/album/sparks/in-outer-space/reviews/2/">&gt;&gt;</a></span>
         <div style="clear:both;"></div></div>
         <div id="review_shell_std_945769"><div class="review" itemprop="review" itemscope itemtype="http://schema.org/Review">
               <div class="review_header "><a title="User Harmonica23" href="/~Harmonica23"><div class="review_header_img lazyload" data-bkg="//e.snmc.io/i/75/s/2a25256f7b0d57cf2b6ee70a5c93abc7/3654550" data-bkg2x="//e.snmc.io/i/75/s/2a25256f7b0d57cf2b6ee70a5c93abc7/3654550" style="background-position:center !important; background-repeat:no-repeat !important ;background-size:cover !important;background-color:var(--mono-0);"></div></a>
                  <span class="review_user" itemprop="author" content="Harmonica23" ><a class="user" href = "/~Harmonica23">Harmonica23</a></span>
                  <span class="review_date"  itemprop="datePublished" content="2004-07-22">
                  <a href="/music-review/Harmonica23/sparks/in-outer-space/945769">Jul 22 2004</a>
                  </span>
                  <span class="catalog_no_track_ratings"></span><span itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                      <meta itemprop="worstRating" content = "0.5">
                        <meta itemprop="bestRating" content = "5.0"><span itemprop="ratingValue" content="3.50"  class="review_rating"><img src = "//e.snmc.io/2.5/img/images/7m.png" width="90" height="16" style="border:0;" alt="3.50 stars" title="3.50 stars" /></span></span><div style="float:right;" id="review_voting_945769"><span onClick="window.location='/favorited/945769_q_f';" class="review_vote_count"> </span><span class="review_voting" onMouseOver="RYMmediaPage.toggleReviewHelp(this, 'l', true);" onMouseOut="RYMmediaPage.toggleReviewHelp(this, 'l', false);"><span onClick="RYMmediaPage.reviewVote('l', 945769, -1);" class="review_vote_down "><i class="fa fa-caret-down"></i><span class="voting_tip">Vote down</span></span><span onClick="RYMmediaPage.reviewBookmark('l', 945769);"  class="review_vote_bookmark "><i class="fa fa-circle"></i><span class="voting_tip">Bookmark</span></span><span onClick="RYMmediaPage.reviewVote('l', 945769, 1);"  class="review_vote_up "><i class="fa fa-caret-up"></i><span class="voting_tip">Vote up</span></span></span></div>
                 
               </div><div class="review_body ">


      <span itemprop="description"><span class="rendered_text">It would be easy to call this a dated 80’s album however this is  a Sparks album so it’s more like the 80’s finally caught up with them. All the Mael brother wit is intact and the syth pop melodies they create are for the most part infectiously catchy.  Songs like “Popularity”, “All You Ever Think About Is Sex”, and “I Wish I Looked A Little Better” make this a worthwhile purchase for even the casual Sparks fan.</span></span><div class="review_publish_status">Published <input aria-label="review shortcut" class="review_shortcut" readonly style="width:150px;margin-top:0;float:none;" onclick="focus();select();" value="[Rating945769]" /></div></div>
             </div></div><!-- @@_review_945769 --><div id="review_shell_std_70078042"><div class="review" itemprop="review" itemscope itemtype="http://schema.org/Review">
               <div class="review_header "><a title="User matagotmatagot" href="/~matagotmatagot"><div class="review_header_img lazyload" data-bkg="//e.snmc.io/i/75/s/131e83f41278fe17a0c106112c32911b/8661020" data-bkg2x="//e.snmc.io/i/75/s/131e83f41278fe17a0c106112c32911b/8661020" style="background-position:center !important; background-repeat:no-repeat !important ;background-size:cover !important;background-color:var(--mono-0);"></div></a>
                  <span class="review_user" itemprop="author" content="matagotmatagot" ><a class="user" href = "/~matagotmatagot">matagotmatagot</a></span>
                  <span class="review_date"  itemprop="datePublished" content="2015-06-30">
                  <a href="/music-review/matagotmatagot/sparks/in-outer-space/70078042">Jun 30 2015</a>
                  </span>
                  <span class="catalog_no_track_ratings"></span><span itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                      <meta itemprop="worstRating" content = "0.5">
                        <meta itemprop="bestRating" content = "5.0"><span itemprop="ratingValue" content="2.50"  class="review_rating"><img src = "//e.snmc.io/2.5/img/images/5m.png" width="90" height="16" style="border:0;" alt="2.50 stars" title="2.50 stars" /></span></span><div style="float:right;" id="review_voting_70078042"><span onClick="window.location='/favorited/70078042_q_f';" class="review_vote_count"> </span><span class="review_voting" onMouseOver="RYMmediaPage.toggleReviewHelp(this, 'l', true);" onMouseOut="RYMmediaPage.toggleReviewHelp(this, 'l', false);"><span onClick="RYMmediaPage.reviewVote('l', 70078042, -1);" class="review_vote_down "><i class="fa fa-caret-down"></i><span class="voting_tip">Vote down</span></span><span onClick="RYMmediaPage.reviewBookmark('l', 70078042);"  class="review_vote_bookmark "><i class="fa fa-circle"></i><span class="voting_tip">Bookmark</span></span><span onClick="RYMmediaPage.reviewVote('l', 70078042, 1);"  class="review_vote_up "><i class="fa fa-caret-up"></i><span class="voting_tip">Vote up</span></span></span></div>
                 
               </div><div class="review_body ">


      <span itemprop="description"><span class="rendered_text">It&#39;s a rocky record, but it&#39;s still the right weirdness for any Sparks record (maybe a little tame? this was actually my first Sparks album so maybe I calibrate the rest to this one?). Prayin&#39; for a Party is the lowest point here, and would feel like an outlier in its pub rockiness if not for Rockin&#39; Girls (which is my other least favorite, the Jerry Lee Lewis &#34;oh baaAAAby&#34;s haven&#39;t aged well and remind me of bad flash cartoons now!) The whole thing is permeated by a lyrical cynicism that in itself is so 80&#39;s synthpop in the best way though. Also the vocal flourishes in Please, Baby, Please totally compensate for its synth-balladeer-feat.-a-choir-at-the-end pratfalls. Popularity, I Wish I Looked a Little Better, and Lucky Me, Lucky You are forever standout tracks within their entire discography. Once again, maybe just because it was my first! But naww, I&#39;ll argue for their merits among the best of &#39;em!<br /><br />I suppose if I had been a fan when it came out I would have seen it as a transitional album into a more realized sound. I would have felt like there was potential for a brilliant follow-up here? Guess I woulda been deeply wrong!!<br /><br /><b>2019 Edit:</b> In 2015 I thought I was going through a Sparks phase and an RYM phase, and I was wrong on both counts. This record isn’t that exciting to me anymore, and even the songs I enjoy here could be about half as long or at least 15 bpm faster (this is a recurring issue of mine with Sparks), but I do think about “All You Ever Think About Is Sex” all the time and it is for sure the best track here.</span></span><div class="review_publish_status">Published <input aria-label="review shortcut" class="review_shortcut" readonly style="width:150px;margin-top:0;float:none;" onclick="focus();select();" value="[Rating70078042]" /></div></div>
             </div></div><!-- @@_review_70078042 --><div id="review_shell_std_59529130"><div class="review" itemprop="review" itemscope itemtype="http://schema.org/Review">
               <div class="review_header "><a title="User funger92" href="/~funger92"><div class="review_header_img lazyload" data-bkg="//e.snmc.io/i/75/s/9269e0510e9f961de9155bef5522bcb6/7443168" data-bkg2x="//e.snmc.io/i/75/s/9269e0510e9f961de9155bef5522bcb6/7443168" style="background-position:center !important; background-repeat:no-repeat !important ;background-size:cover !important;background-color:var(--mono-0);"></div></a>
                  <span class="review_user" itemprop="author" content="funger92" ><a class="user" href = "/~funger92">funger92</a></span>
                  <span class="review_date"  itemprop="datePublished" content="2015-05-15">
                  <a href="/music-review/funger92/sparks/in-outer-space/59529130">May 15 2015</a>
                  </span>
                  <span onClick="$('#review_track_rating_59529130').toggle();" class="catalog_track_ratings">▼</span><span itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                      <meta itemprop="worstRating" content = "0.5">
                        <meta itemprop="bestRating" content = "5.0"><span itemprop="ratingValue" content="3.00"  class="review_rating"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span></span><div style="float:right;" id="review_voting_59529130"><span onClick="window.location='/favorited/59529130_q_f';" class="review_vote_count"> </span><span class="review_voting" onMouseOver="RYMmediaPage.toggleReviewHelp(this, 'l', true);" onMouseOut="RYMmediaPage.toggleReviewHelp(this, 'l', false);"><span onClick="RYMmediaPage.reviewVote('l', 59529130, -1);" class="review_vote_down "><i class="fa fa-caret-down"></i><span class="voting_tip">Vote down</span></span><span onClick="RYMmediaPage.reviewBookmark('l', 59529130);"  class="review_vote_bookmark "><i class="fa fa-circle"></i><span class="voting_tip">Bookmark</span></span><span onClick="RYMmediaPage.reviewVote('l', 59529130, 1);"  class="review_vote_up "><i class="fa fa-caret-up"></i><span class="voting_tip">Vote up</span></span></span></div>
                 
               </div><div class="review_body "><div id="review_track_rating_59529130" class="track_rating_hide"><ul class="tracks" style="margin:10px;"><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/5m.png" width="90" height="16" style="border:0;" alt="2.50 stars" title="2.50 stars" /></span>
                        <span class="tracklist_num">A1</span>
                        <span class="tracklist_title"><span class="rendered_text">Cool Places</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">A2</span>
                        <span class="tracklist_title"><span class="rendered_text">Popularity</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">A3</span>
                        <span class="tracklist_title"><span class="rendered_text">Prayin&#39; for a Party</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/7m.png" width="90" height="16" style="border:0;" alt="3.50 stars" title="3.50 stars" /></span>
                        <span class="tracklist_num">A4</span>
                        <span class="tracklist_title"><span class="rendered_text">All You Ever Think About Is Sex</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/7m.png" width="90" height="16" style="border:0;" alt="3.50 stars" title="3.50 stars" /></span>
                        <span class="tracklist_num">A5</span>
                        <span class="tracklist_title"><span class="rendered_text">Please, Baby, Please</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/5m.png" width="90" height="16" style="border:0;" alt="2.50 stars" title="2.50 stars" /></span>
                        <span class="tracklist_num">B1</span>
                        <span class="tracklist_title"><span class="rendered_text">Rockin&#39; Girls</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/8m.png" width="90" height="16" style="border:0;" alt="4.00 stars" title="4.00 stars" /></span>
                        <span class="tracklist_num">B2</span>
                        <span class="tracklist_title"><span class="rendered_text">I Wish I Looked a Little Better</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/5m.png" width="90" height="16" style="border:0;" alt="2.50 stars" title="2.50 stars" /></span>
                        <span class="tracklist_num">B3</span>
                        <span class="tracklist_title"><span class="rendered_text">Lucky Me, Lucky You</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/7m.png" width="90" height="16" style="border:0;" alt="3.50 stars" title="3.50 stars" /></span>
                        <span class="tracklist_num">B4</span>
                        <span class="tracklist_title"><span class="rendered_text">A Fun Bunch of Guys From Outer Space</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/7m.png" width="90" height="16" style="border:0;" alt="3.50 stars" title="3.50 stars" /></span>
                        <span class="tracklist_num">B5</span>
                        <span class="tracklist_title"><span class="rendered_text">Dance Godammit</span></span>
                     </div>
                   </li></ul></div>


      <span itemprop="description"><span class="rendered_text">Detesto bastante ese primer tema que abre el disco, pero me resultó gustando la aproximación minimalista del synthpop de varios temas, los simples ganchos efectivos, y los brillantes arreglos.</span></span><div onClick="$('#review_supplement__59529130').slideToggle(100);$(this).hide()" class="review_supplement_expand">More ▾</div><div id="review_supplement__59529130" class="review_supplement supplement_hidden"><span class="rendered_text">Escrito para mi ranking oficial de Sparks</span></div><div class="review_attribution">Attribution: <span class="rendered_text"><a rel="nofollow noopener" target="_blank" href="https://rateyourmusic.com/list/funger92/the-number-one-ranking-in-heaven-ranking-sparks/">https://rateyourmusic.com/...ranking-sparks/</a></span></div><div class="review_publish_status">Published <input aria-label="review shortcut" class="review_shortcut" readonly style="width:150px;margin-top:0;float:none;" onclick="focus();select();" value="[Rating59529130]" /></div></div>
             </div></div><!-- @@_review_59529130 --><div id="review_shell_std_19580873"><div class="review" itemprop="review" itemscope itemtype="http://schema.org/Review">
               <div class="review_header "><a title="User VinzClortho" href="/~VinzClortho"><div class="review_header_img lazyload" data-bkg="//e.snmc.io/i/75/s/01b12631272688bc7a58a3c1398bd11b/9076523" data-bkg2x="//e.snmc.io/i/75/s/01b12631272688bc7a58a3c1398bd11b/9076523" style="background-position:center !important; background-repeat:no-repeat !important ;background-size:cover !important;background-color:var(--mono-0);"></div></a>
                  <span class="review_user" itemprop="author" content="VinzClortho" ><a class="user" href = "/~VinzClortho">VinzClortho</a></span>
                  <span class="review_date"  itemprop="datePublished" content="2014-12-23">
                  <a href="/music-review/VinzClortho/sparks/in-outer-space/19580873">Dec 23 2014</a>
                  </span>
                  <span class="catalog_no_track_ratings"></span><span itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                      <meta itemprop="worstRating" content = "0.5">
                        <meta itemprop="bestRating" content = "5.0"><span itemprop="ratingValue" content="4.00"  class="review_rating"><img src = "//e.snmc.io/2.5/img/images/8m.png" width="90" height="16" style="border:0;" alt="4.00 stars" title="4.00 stars" /></span></span><div style="float:right;" id="review_voting_19580873"><span onClick="window.location='/favorited/19580873_q_f';" class="review_vote_count"> </span><span class="review_voting" onMouseOver="RYMmediaPage.toggleReviewHelp(this, 'l', true);" onMouseOut="RYMmediaPage.toggleReviewHelp(this, 'l', false);"><span onClick="RYMmediaPage.reviewVote('l', 19580873, -1);" class="review_vote_down "><i class="fa fa-caret-down"></i><span class="voting_tip">Vote down</span></span><span onClick="RYMmediaPage.reviewBookmark('l', 19580873);"  class="review_vote_bookmark "><i class="fa fa-circle"></i><span class="voting_tip">Bookmark</span></span><span onClick="RYMmediaPage.reviewVote('l', 19580873, 1);"  class="review_vote_up "><i class="fa fa-caret-up"></i><span class="voting_tip">Vote up</span></span></span></div>
                 
               </div><div class="review_body ">


      <div class="review_title" itemprop="name" >Dance. Godammit.</div><span itemprop="description"><span class="rendered_text">So I dusted this one off tonight to give it the first listen in many years. Being a lover of &#39;80s synthpop and new wave, I&#39;ve long had a fondness for the dancey, poppy singles here: &#34;Cool Places,&#34; the ironic duet with <b><a title="[Artist11043]"  href="/artist/jane_wiedlin" class="artist">Jane Wiedlin</a></b> (and the first Sparks song I ever heard in my life), and the funny &#34;All You Ever Think About is Sex&#34; (with a stupidly hilarious video to boot). I remembered kind of liking &#34;Popularity&#34; and thinking it was...quaint, but the rest of the record was a hazy memory for me.<br /><br />Side one (containing all three of the aforementioned songs) is obviously a sly attack on vapid party culture...or is it? I&#39;ve often thought that this was maybe the first album in Sparks&#39; career where the satire didn&#39;t go far enough and they began to become what they were mocking.<br /><br />But those Mael brothers are always a few steps ahead of us.<br /><br />The dance party starts to evaporate by the end of side one with &#34;Please, Baby, Please.&#34; Then you get to side two, which starts off with our narrator talking about his love of underage girls and descends into murky, minimalist dance songs with a darker edge. &#34;Lucky Me, Lucky You&#34; (a second duet with Wiedlin) is one of the saddest songs the Maels ever penned and practically sounds like the template for <b><a title="[Artist71]"  href="/artist/the-magnetic-fields" class="artist">The Magnetic Fields</a></b>&#39; entire career. I had to play it three times in a row just to make sure I&#39;d heard it correctly. The album ends with &#34;Dance Godammit,&#34; one of the most comically un-danceable slices of synthpop I&#39;ve ever heard: a dirge-like beat with a serpentine bass line and completely deadpan, borderline moronic vocals intoning lines like, &#34;well, I like clubs, I like girls, I like music, and that&#39;s it. Dance, godammit.&#34; <br /><br />Ah...now I get it.<br /><br />In my mind, this plays out almost like a concept album, where the characters start out by betraying a blissfully ignorant embrace of party culture and soon turn more reflective and self deprecating. By the time you get to the end, your protagonist has come hurtling back down to Earth, lost all his friends and has possibly even lost a few IQ points in the process.<br /><br />This is pretty much Sparks&#39; new wave era equivalent of their 1976 album <b><i><a title="[Album10192]" href="/release/album/sparks/big_beat/" class="album">Big Beat</a></b></i> in that the humor is so damn subtle and camouflaged by the trends of the day that it can fly right over your head. Then at some point a little light bulb goes off and you realize, &#39;oh, right...it&#39;s just another brilliant Sparks record.&#39;</span></span><div class="review_publish_status">Published <input aria-label="review shortcut" class="review_shortcut" readonly style="width:150px;margin-top:0;float:none;" onclick="focus();select();" value="[Rating19580873]" /></div></div>
             </div></div><!-- @@_review_19580873 --><div id="review_shell_std_52147917"><div class="review" itemprop="review" itemscope itemtype="http://schema.org/Review">
               <div class="review_header "><a title="User lordjohnwhite" href="/~lordjohnwhite"><div class="review_header_img lazyload" data-bkg="//e.snmc.io/i/75/s/b5d7bc270c5b3cbdb83085c5ee896aed/8832154" data-bkg2x="//e.snmc.io/i/75/s/b5d7bc270c5b3cbdb83085c5ee896aed/8832154" style="background-position:center !important; background-repeat:no-repeat !important ;background-size:cover !important;background-color:var(--mono-0);"></div></a>
                  <span class="review_user" itemprop="author" content="lordjohnwhite" ><a class="user" href = "/~lordjohnwhite">lordjohnwhite</a></span>
                  <span class="review_date"  itemprop="datePublished" content="2013-03-31">
                  <a href="/music-review/lordjohnwhite/sparks/in-outer-space/52147917">Mar 31 2013</a>
                  </span>
                  <span class="catalog_no_track_ratings"></span><span itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                      <meta itemprop="worstRating" content = "0.5">
                        <meta itemprop="bestRating" content = "5.0"><span itemprop="ratingValue" content="4.50"  class="review_rating"><img src = "//e.snmc.io/2.5/img/images/9m.png" width="90" height="16" style="border:0;" alt="4.50 stars" title="4.50 stars" /></span></span><div style="float:right;" id="review_voting_52147917"><span onClick="window.location='/favorited/52147917_q_f';" class="review_vote_count"> </span><span class="review_voting" onMouseOver="RYMmediaPage.toggleReviewHelp(this, 'l', true);" onMouseOut="RYMmediaPage.toggleReviewHelp(this, 'l', false);"><span onClick="RYMmediaPage.reviewVote('l', 52147917, -1);" class="review_vote_down "><i class="fa fa-caret-down"></i><span class="voting_tip">Vote down</span></span><span onClick="RYMmediaPage.reviewBookmark('l', 52147917);"  class="review_vote_bookmark "><i class="fa fa-circle"></i><span class="voting_tip">Bookmark</span></span><span onClick="RYMmediaPage.reviewVote('l', 52147917, 1);"  class="review_vote_up "><i class="fa fa-caret-up"></i><span class="voting_tip">Vote up</span></span></span></div>
                 
               </div><div class="review_body ">


      <span itemprop="description"><span class="rendered_text">They mostly cut out the cock-rock guitars that made Angst in My Pants so great, but they moved the synths to the forefront so that you&#39;ll never miss &#39;em. The lyrical concerns are the same as Angst, of course. This isn&#39;t as great a synthpop record as No. 1 in Heaven, but few can be. <br /><br />My favorites are Cool Places, Prayin&#39; for a Party, All You Ever Think About is Sex, and I Wish I Looked a Little Better.</span></span><div class="review_publish_status">Published <input aria-label="review shortcut" class="review_shortcut" readonly style="width:150px;margin-top:0;float:none;" onclick="focus();select();" value="[Rating52147917]" /></div></div>
             </div></div><!-- @@_review_52147917 --><div id="review_shell_std_43764005"><div class="review" itemprop="review" itemscope itemtype="http://schema.org/Review">
               <div class="review_header "><a title="User cupo" href="/~cupo"><div class="review_header_img lazyload" data-bkg="//e.snmc.io/i/75/s/a94099b5457623c2965d7431efde09de/6788862" data-bkg2x="//e.snmc.io/i/75/s/a94099b5457623c2965d7431efde09de/6788862" style="background-position:center !important; background-repeat:no-repeat !important ;background-size:cover !important;background-color:var(--mono-0);"></div></a>
                  <span class="review_user" itemprop="author" content="cupo" ><a class="user" href = "/~cupo">cupo</a></span>
                  <span class="review_date"  itemprop="datePublished" content="2012-03-07">
                  <a href="/music-review/cupo/sparks/in-outer-space/43764005">Mar 07 2012</a>
                  </span>
                  <span class="catalog_no_track_ratings"></span><span itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                      <meta itemprop="worstRating" content = "0.5">
                        <meta itemprop="bestRating" content = "5.0"><span itemprop="ratingValue" content="3.50"  class="review_rating"><img src = "//e.snmc.io/2.5/img/images/7m.png" width="90" height="16" style="border:0;" alt="3.50 stars" title="3.50 stars" /></span></span><div style="float:right;" id="review_voting_43764005"><span onClick="window.location='/favorited/43764005_q_f';" class="review_vote_count"> </span><span class="review_voting" onMouseOver="RYMmediaPage.toggleReviewHelp(this, 'l', true);" onMouseOut="RYMmediaPage.toggleReviewHelp(this, 'l', false);"><span onClick="RYMmediaPage.reviewVote('l', 43764005, -1);" class="review_vote_down "><i class="fa fa-caret-down"></i><span class="voting_tip">Vote down</span></span><span onClick="RYMmediaPage.reviewBookmark('l', 43764005);"  class="review_vote_bookmark "><i class="fa fa-circle"></i><span class="voting_tip">Bookmark</span></span><span onClick="RYMmediaPage.reviewVote('l', 43764005, 1);"  class="review_vote_up "><i class="fa fa-caret-up"></i><span class="voting_tip">Vote up</span></span></span></div>
                 
               </div><div class="review_body ">


      <span itemprop="description"><span class="rendered_text">Solid collection of sparks tunes, for when you want bouncy and clever pop. All around this is nearly solid b grade sparks. But really, I only don&#39;t like rockin&#39; girls and fun bunch of guys from outer space so that&#39;s pretty good consistency for you.</span></span><div class="review_publish_status">Published <input aria-label="review shortcut" class="review_shortcut" readonly style="width:150px;margin-top:0;float:none;" onclick="focus();select();" value="[Rating43764005]" /></div></div>
             </div></div><!-- @@_review_43764005 --><div id="review_shell_std_37004689"><div class="review" itemprop="review" itemscope itemtype="http://schema.org/Review">
               <div class="review_header "><a href="/~Amstad"><div class="review_header_no_img"></div></a>
                  <span class="review_user" itemprop="author" content="Amstad" ><a class="user" href = "/~Amstad">Amstad</a></span>
                  <span class="review_date"  itemprop="datePublished" content="2011-04-13">
                  <a href="/music-review/Amstad/sparks/in-outer-space/37004689">Apr 13 2011</a>
                  </span>
                  <span class="catalog_no_track_ratings"></span><span itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                      <meta itemprop="worstRating" content = "0.5">
                        <meta itemprop="bestRating" content = "5.0"><span itemprop="ratingValue" content="2.00"  class="review_rating"><img src = "//e.snmc.io/2.5/img/images/4m.png" width="90" height="16" style="border:0;" alt="2.00 stars" title="2.00 stars" /></span></span><div style="float:right;" id="review_voting_37004689"><span onClick="window.location='/favorited/37004689_q_f';" class="review_vote_count"> </span><span class="review_voting" onMouseOver="RYMmediaPage.toggleReviewHelp(this, 'l', true);" onMouseOut="RYMmediaPage.toggleReviewHelp(this, 'l', false);"><span onClick="RYMmediaPage.reviewVote('l', 37004689, -1);" class="review_vote_down "><i class="fa fa-caret-down"></i><span class="voting_tip">Vote down</span></span><span onClick="RYMmediaPage.reviewBookmark('l', 37004689);"  class="review_vote_bookmark "><i class="fa fa-circle"></i><span class="voting_tip">Bookmark</span></span><span onClick="RYMmediaPage.reviewVote('l', 37004689, 1);"  class="review_vote_up "><i class="fa fa-caret-up"></i><span class="voting_tip">Vote up</span></span></span></div>
                 
               </div><div class="review_body ">


      <span itemprop="description"><span class="rendered_text">This album is that pie and I am Russel Mael.</span></span><div class="review_publish_status">Published <input aria-label="review shortcut" class="review_shortcut" readonly style="width:150px;margin-top:0;float:none;" onclick="focus();select();" value="[Rating37004689]" /></div></div>
             </div></div><!-- @@_review_37004689 --><div id="review_shell_std_28649781"><div class="review" itemprop="review" itemscope itemtype="http://schema.org/Review">
               <div class="review_header "><a title="User antonbildern" href="/~antonbildern"><div class="review_header_img lazyload" data-bkg="//e.snmc.io/i/75/s/e75c4d665e43a58b1795ab1f2f1f8ed3/8078738" data-bkg2x="//e.snmc.io/i/75/s/e75c4d665e43a58b1795ab1f2f1f8ed3/8078738" style="background-position:center !important; background-repeat:no-repeat !important ;background-size:cover !important;background-color:var(--mono-0);"></div></a>
                  <span class="review_user" itemprop="author" content="antonbildern" ><a class="user" href = "/~antonbildern">antonbildern</a></span>
                  <span class="review_date"  itemprop="datePublished" content="2010-03-15">
                  <a href="/music-review/antonbildern/sparks/in-outer-space/28649781">Mar 15 2010</a>
                  </span>
                  <span class="catalog_no_track_ratings"></span><span itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                      <meta itemprop="worstRating" content = "0.5">
                        <meta itemprop="bestRating" content = "5.0"><span itemprop="ratingValue" content="4.00"  class="review_rating"><img src = "//e.snmc.io/2.5/img/images/8m.png" width="90" height="16" style="border:0;" alt="4.00 stars" title="4.00 stars" /></span></span><div style="float:right;" id="review_voting_28649781"><span onClick="window.location='/favorited/28649781_q_f';" class="review_vote_count"> </span><span class="review_voting" onMouseOver="RYMmediaPage.toggleReviewHelp(this, 'l', true);" onMouseOut="RYMmediaPage.toggleReviewHelp(this, 'l', false);"><span onClick="RYMmediaPage.reviewVote('l', 28649781, -1);" class="review_vote_down "><i class="fa fa-caret-down"></i><span class="voting_tip">Vote down</span></span><span onClick="RYMmediaPage.reviewBookmark('l', 28649781);"  class="review_vote_bookmark "><i class="fa fa-circle"></i><span class="voting_tip">Bookmark</span></span><span onClick="RYMmediaPage.reviewVote('l', 28649781, 1);"  class="review_vote_up "><i class="fa fa-caret-up"></i><span class="voting_tip">Vote up</span></span></span></div>
                 
               </div><div class="review_body ">


      <span itemprop="description"><span class="rendered_text">If they only had cut out the obnoxious &#34;Prayin&#39; For a Party&#34; (a mixture of Beastie Boys and Pub Rock with nothing to do with Sparks anyway), it would have made &#34;In Outer Space&#34; an excellent addition to the band&#39;s discography. At least a wonderful Sparks goes synth pop. And sneaking from each album&#39;s track the usual Sparks&#39; spark (since when I&#39;ve been wanting to say this?). Also with a perfect Jane Wiedlin on their middle.<br />The Mael brothers = bizarre but lovely yet impassive piano player and songwriter Ron Mael (stop the comparison with Hitler people :-) did you ever though of Groucho Marx&#39;s moustache??) + frantic and skinny and lovely androgynous diva Russell Mael. <br />Watch this incredible performance: <a rel="nofollow noopener" target="_blank" href="http://www.youtube.com/watch?v=rv4rg62Xk6c">http://www.youtube.com/watch?v=rv4rg62Xk6c</a></span></span><div class="review_publish_status">Published <input aria-label="review shortcut" class="review_shortcut" readonly style="width:150px;margin-top:0;float:none;" onclick="focus();select();" value="[Rating28649781]" /></div></div>
             </div></div>

            <div style="font-size:0.9em;
            color:var(--mono-6);text-align:center;
            margin:0 auto;
            margin-top:1em;
            margin-bottom:0.25em;">
         ADVERTISEMENT</div>
         <!-- /31961696/release.case-a.728.mid-right -->
            <div class='page_ads_creative_frame 
               lazyload-ad
               
               

               ' id='frame-div-gpt-ad-1465817209349-22'  data-adcode='div-gpt-ad-1465817209349-22'  style='overflow:hidden;margin:0 auto;display: flex;align-items: center;justify-content: center;margin-bottom:1em;min-height:108px;min-width:728px;' >
            <div id='div-gpt-ad-1465817209349-22'>
            </div></div><div class="review_list"><span class="navspan"><span class="navpage">Page </span><span class="navlinkcurrent">1</span> <a class="navlinknum" href = "/release/album/sparks/in-outer-space/reviews/2/">2</a> <a class="navlinknext" href="/release/album/sparks/in-outer-space/reviews/2/">&gt;&gt;</a></span></div><div class="review_help" id="review_help_l">
         Votes are used to help determine the most interesting content on RYM.    
         <br /><br />
         Vote up content that is on-topic, within the rules/guidelines, and will likely stay relevant long-term.
         <br />
         Vote down content which breaks the rules.
      </div></div></div></div><div class="section_catalog section_outer"><div class="page_section">
         <script> 
            var rating_info_album_id = 10198;
            var rating_info_show_all_issues = true;
         </script>
         <div class="release_page_header"><h2>Catalog</h2></div>
         <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table>

         <div class="rating_info_table">
               <div onClick="rymQ( function() { RYMmediaPage.selectCatalogPane('l', 10198, true, 'ratings'); });" id="rating_info_ratings" class="rating_info_tab rating_info_ratings active">
                  <b>Ratings:</b> 462
               </div>
            
               <div onClick="rymQ( function() { RYMmediaPage.selectCatalogPane('l', 10198, true, 'catalog'); });" id="rating_info_catalog"  class="rating_info_tab rating_info_cataloged">
                  <b>Cataloged:</b> 335
               </div>
            
               <div onClick="rymQ( function() { RYMmediaPage.selectCatalogPane('l', 10198, true, 'track_ratings'); });" id="rating_info_track_ratings" class="rating_info_tab rating_info_track_ratings">
                  <b><span class="hide-for-small-inline">Track rating sets:</span><span class="show-for-small-inline">Track ratings:</span></b> 22
               </div>
            </div>

         <div class="catalog_section">
               <div class="catalog_stats hide-for-small">
                  <div class="header">Rating distribution</div>
                  <div id="chart_div" style="background:var(--mono-f);height:100px;width:200px;"></div>
            <script>
      
               function drawChart1() {
                 var data = new google.visualization.DataTable();
                 data.addColumn('number', 'Rating');
                 data.addColumn('number', '# of ratings');
                 data.addRows([
                   [0.5, 1],[1.0, 5],[1.5, 20],[2.0, 40],[2.5, 66],[3.0, 116],[3.5, 117],[4.0, 63],[4.5, 19],[5.0, 15]
                 ]);

                 var options = {
                     backgroundColor:'transparent',
                     legend:{position:'none'},
                     chartArea:{left:30,bottom:50,width:"80%",height:"60%"},
                     colors:['#336fc6'],
                     hAxis:{textStyle: {color: '#999'}, baselineColor: '#aaa'},
                     vAxis:{textStyle: {color: '#999'}, baselineColor: '#aaa'},
                     tooltip: {textStyle: {fontSize:12} }
                 };

                 var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
                 chart.draw(data, options);
               }
            </script>
       

                  

                  <div class="header">Rating trend</div>
            <div id="chart_div2" style="background:var(--mono-f);height:100px;width:200px;"></div>
            <script>
               function drawChart2() {
                 var data = google.visualization.arrayToDataTable([
                   ['Year', 'Differential'],
                   ['2006', -0.55 ],['2007', -0.06 ],['2008', -0.44 ],['2009', -0.26 ],['2010', -0.07 ],['2011', -0.60 ],['2012', -0.05 ],['2013', -0.22 ],['2014', -0.18 ],['2015', -0.42 ],['2016', 0.05 ],['2017', -0.28 ],['2018', -0.22 ],['2019', -0.47 ],['2020', -0.49 ],['2021', -0.10 ]
                 ]);

                 var options = {
                     backgroundColor:'transparent',
                     legend:{position:'none'},
                     chartArea:{left:30,bottom:20,width:"80%",height:"80%"},
                     colors:['#677DD6'],
                     hAxis:{textStyle: {color: '#999'}, baselineColor: '#999'},
                     vAxis:{textStyle: {color: '#999'}, format:'+#.##;-#.##;avg', negativeColor:'#800', baselineColor: '#666' /*,viewWindow:{max:5.5,min:0.5} */},
                     pointSize:'3',
                     lineWidth:1,
                     tooltip: {textStyle: {fontSize:12} }
                 };

                  var formatter = new google.visualization.NumberFormat(
                     {negativeColor: 'red', negativeParens: false});
                 formatter.format(data, 1); // Apply formatter to second column

                 var chart = new google.visualization.LineChart(document.getElementById('chart_div2'));
                 chart.draw(data, options);
               }
            </script>
      
               </div>
               <div id="catalog_list" class="catalog_list"><span class="navspan"><span class="navpage">Page </span><span class="navlinkcurrent">1</span> <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/2');">2</a>  <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/3');">3</a> <span class="navdot">..</span> <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/6');">6</a> <span class="navdot">..</span> <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/9');">9</a> <span class="navdot">..</span> <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/12');">12</a> <span class="navdot">..</span> <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/15');">15</a> <span class="navdot">..</span> <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/18');">18</a> <span class="navdot">..</span> <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/21');">21</a> <span class="navdot">..</span> <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/24');">24</a> <span class="navdot">..</span> <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/27');">27</a> <span class="navdot">..</span> <a class="navlinknum" href = "javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/31');">31</a> <a class="navlinknext" href="javascript:RYMmediaPage.navCatalog('l', 10198, true, 'ratings', '/2');">&gt;&gt;</a></span> <div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">7 Jun 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/d93531dc9c890214d83b38dc528f2cf9/8630196" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~jortsarecool">jortsarecool</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small">i liked it, sure</span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">5 Jun 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/ba57bc3829b48de02d30f42b442292d5/9061790" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~ThreeExclamationMarks">ThreeExclamationMarks</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small"></span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">1 Jun 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/6f79023cd154aa546b0c6df27c0c2fd9/9045544" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~Fisht">Fisht</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small">good</span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">1 Jun 2021</div></div>
               <div class="catalog_header "><div style="float:left;margin-right:7px;width:25px;height:25px;border-radius:3px;background:var(--mono-d8)"></div>
                  <span class="catalog_user"> <a class="user" href = "/~Oh_Jim">Oh_Jim</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/7m.png" width="90" height="16" style="border:0;" alt="3.50 stars" title="3.50 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small"></span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">26 May 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/8ad2f27b08a721b5b74038e26397c8d9/7404049" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~Strange_Overtones">Strange_Overtones</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small">Good album. Some flaws.</span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">25 May 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/ba7a72d5685b00b77a731f80e8c01a68/6884372" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~jamkam">jamkam</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/7m.png" width="90" height="16" style="border:0;" alt="3.50 stars" title="3.50 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small">good</span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">18 May 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/55fb43215d6c6715d86068ca0d3380ba/9016285" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~KittenKanassis">KittenKanassis</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/8m.png" width="90" height="16" style="border:0;" alt="4.00 stars" title="4.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small"></span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">17 May 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/f1c83b9ab61400161443e756dfd54b25/9017659" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~bloodyshadow">bloodyshadow</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/8m.png" width="90" height="16" style="border:0;" alt="4.00 stars" title="4.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small">8/10</span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">5 May 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/9332efdf907b59478c058096f019c0f6/8991610" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~bohater_werteryczny">bohater_werteryczny</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/8m.png" width="90" height="16" style="border:0;" alt="4.00 stars" title="4.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small">&lt;3</span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">28 Apr 2021</div></div>
               <div class="catalog_header "><div style="float:left;margin-right:7px;width:25px;height:25px;border-radius:3px;background:var(--mono-d8)"></div>
                  <span class="catalog_user"> <a class="user" href = "/~chloeoverdover">chloeoverdover</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/9m.png" width="90" height="16" style="border:0;" alt="4.50 stars" title="4.50 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small"></span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">22 Apr 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/2e018befbefc856d28411774810b2126/7725850" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~Sodajerk">Sodajerk</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span onClick="$('#catalog_track_rating_149135716').toggle();" class="catalog_track_ratings">▼</span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small">Good</span>
               </div>
         <div style="clear:both;"></div><div id="catalog_track_rating_149135716" class="track_rating_hide"><ul class="tracks" style="margin:10px;"><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">A1</span>
                        <span class="tracklist_title"><span class="rendered_text">Cool Places</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">A2</span>
                        <span class="tracklist_title"><span class="rendered_text">Popularity</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">A3</span>
                        <span class="tracklist_title"><span class="rendered_text">Prayin&#39; for a Party</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">A4</span>
                        <span class="tracklist_title"><span class="rendered_text">All You Ever Think About Is Sex</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">A5</span>
                        <span class="tracklist_title"><span class="rendered_text">Please, Baby, Please</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">B1</span>
                        <span class="tracklist_title"><span class="rendered_text">Rockin&#39; Girls</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">B2</span>
                        <span class="tracklist_title"><span class="rendered_text">I Wish I Looked a Little Better</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">B3</span>
                        <span class="tracklist_title"><span class="rendered_text">Lucky Me, Lucky You</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">B4</span>
                        <span class="tracklist_title"><span class="rendered_text">A Fun Bunch of Guys From Outer Space</span></span>
                     </div>
                   </li><li class="track">
                     <div class="tracklist_line">
                        <span class="track_rating_disp"><img src = "//e.snmc.io/2.5/img/images/6m.png" width="90" height="16" style="border:0;" alt="3.00 stars" title="3.00 stars" /></span>
                        <span class="tracklist_num">B5</span>
                        <span class="tracklist_title"><span class="rendered_text">Dance Godammit</span></span>
                     </div>
                   </li></ul></div><div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">19 Apr 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/269370c5a0a6bf7e9eaea109e917d1f2/9057438" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~marvox">marvox</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/8m.png" width="90" height="16" style="border:0;" alt="4.00 stars" title="4.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small"></span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">28 Feb 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/d4806a3e24d9281a6aebb8944975160e/8820167" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~MysticMerman">MysticMerman</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/8m.png" width="90" height="16" style="border:0;" alt="4.00 stars" title="4.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small"></span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">21 Feb 2021</div></div>
               <div class="catalog_header "><div class="lazyload" data-bkg="//e.snmc.io/i/25/s/cf5ed85569dd67e573d27c7f051d87e0/8989837" style="float:left;margin-right:7px;display:inline-block;border-radius:3px;width:25px;height:25px; center no-repeat;background-size:cover;background-color:var(--mono-0);"></div>
                  <span class="catalog_user"> <a class="user" href = "/~InGloriousMono">InGloriousMono</a></span>
                  <span class="catalog_ownership">&nbsp;</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/4m.png" width="90" height="16" style="border:0;" alt="2.00 stars" title="2.00 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small"></span>
               </div>
         <div style="clear:both;"></div></div><div class="catalog_line  "><div class="catalog_date"><div class="catalog_date_inner" id="catalog_date_inner_l_10198">18 Feb 2021</div></div>
               <div class="catalog_header "><div style="float:left;margin-right:7px;width:25px;height:25px;border-radius:3px;background:var(--mono-d8)"></div>
                  <span class="catalog_user"> <a class="user" href = "/~Kobin">Kobin</a></span>
                  <span class="catalog_ownership">Vinyl</span><span class="catalog_no_track_ratings"></span><span class="catalog_rating"><img src = "//e.snmc.io/2.5/img/images/5m.png" width="90" height="16" style="border:0;" alt="2.50 stars" title="2.50 stars" /></span>
                  <span class="catalog_rating_system_comment hide-for-small"></span>
               </div>
         <div style="clear:both;"></div></div></div></div></div></div>

            <div style="font-size:0.9em;
            color:var(--mono-6);text-align:center;
            margin:0 auto;
            margin-top:1em;
            margin-bottom:0.25em;">
         ADVERTISEMENT</div>
         <!-- /31961696/release.case-a.728.bottom -->
            <div class='page_ads_creative_frame 
               lazyload-ad
               
               desktop-sticky-persist-ad

               ' id='frame-div-gpt-ad-1465817209349-24'  data-adcode='div-gpt-ad-1465817209349-24'  style='overflow:hidden;margin:0 auto;display: flex;align-items: center;justify-content: center;margin-bottom:1em;min-height:108px;min-width:728px;' >
            <div id='div-gpt-ad-1465817209349-24'>
            </div></div><div style="clear:both;"></div><div class="column_filler" id="column_filler_right"></div>
        </div> <div id="column_container_left" class="large-4 pull-8 columns release_left_column column_container_left"><div class="page_release_art_frame"><div class="hide-for-small"><a href="buy/">
      <div class="coverart_10198">
      <img srcset ="//e.snmc.io/i/600/s/31c8b65119c8367bd46bd030c4633d66/2656352/sparks-in-outer-space-Cover-Art.jpg,
                     //e.snmc.io/i/600/s/31c8b65119c8367bd46bd030c4633d66/2656352/sparks-in-outer-space-Cover-Art.jpg 2x"
           src="//e.snmc.io/i/600/s/31c8b65119c8367bd46bd030c4633d66/2656352/sparks-in-outer-space-Cover-Art.jpg"
           alt="Cover art for In Outer Space by Sparks"
      />
      <!-- <meta itemprop="image" content="//e.snmc.io/i/300/s/c3e83121b5aad106084a420d6d88a7d2/2656352" /> -->
    </div></a>
    
          <div style="margin-top:8px;">
            <a class="buy_button" 
                  href="buy/">Buy this Album</a></div>
         <div class="ui_media_links_container">
            <div class="ui_media_links promoted"><a target="_blank" rel="noopener nofollow" title="Apple Music" class="ui_media_link_btn ui_media_link_btn_applemusic" href="https://music.apple.com/by/album/in-outer-space/279523332?at=10l59k&ct=media-link&itscg=30200&itsct=toolbox_linkbuilder&ls=1&app=music"></a><a target="_blank" rel="noopener nofollow" title="Spotify" class="ui_media_link_btn ui_media_link_btn_spotify" href="https://open.spotify.com/album/7DQ4JbSvurZKtAUCz1hxE9"></a><div style="clear:both;"></div></div></div><div style="text-align:center;max-width:100%;margin:0 auto;margin-top:0.5em;"><a href="/submit_media_link?object=release&assoc_id=10198" style="text-align:center;font-size:0.9em;color:var(--gen-blue-darker);text-decoration:none;">Submit media links</a></div> </div></div>
<table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:4px;font-size:1px;padding:0;"><tr style="height:4px;padding:0;"><td style="background:#bcb5bd;height:4px;padding:0px;color:#bcb5bd">.</td><td style="background:#a69bb9;height:4px;padding:0px;color:#a69bb9">.</td><td style="background:#916c7e;height:4px;padding:0px;color:#916c7e">.</td><td style="background:#9687a4;height:4px;padding:0px;color:#9687a4">.</td><td style="background:#b4b1b2;height:4px;padding:0px;color:#b4b1b2">.</td></tr></table>
<div style="padding:0px;padding-top:0;"><div class="hide-for-small"><div class="section_release_navigation"><div class="release_navigation"><div class="release_navigation_guidance">
                    <div class="release_nav_guidance_artist">
                     <div class="release_nav_guidance_left">
                      <a href="/release/album/sparks/angst-in-my-pants/"><i class="fa fa-caret-left"></i>
                      Previous</a>
                     </div>                     
                     <div class="release_nav_guidance_right">
                     <a href="/release/album/sparks/pulling-rabbits-out-of-a-hat/">Next
                      <i class="fa fa-caret-right"></i></a>
                      
                     </div></div>
                     <div style="clear:both;"></div>
                  </div>
               
                                 
                  <div class="release_navigation_links">
                    <div class="prev_image">
                       <a href="/release/album/sparks/angst-in-my-pants/"><img alt="Previous in discography: Angst in My Pants" src="//e.snmc.io/i/75/s/cd65b83c877464fa7c23ec2395e76efe/2370288" /></a>
                    </div>
                    <div class="prev_link">
                       <a title="[Album10197]" href="/release/album/sparks/angst-in-my-pants/" class="small">Angst in My Pants</a>
                    </div>
                    <div class="next_image">
                       <a href="/release/album/sparks/pulling-rabbits-out-of-a-hat/"><img alt="Next in discography: Angst in My Pants" src="//e.snmc.io/i/75/s/7b17467d777cad3197391cd7be84fb66/2370290" /></a>
                    </div>
                    <div class="next_link">
                       <a title="[Album10199]" href="/release/album/sparks/pulling-rabbits-out-of-a-hat/" class="small">Pulling Rabbits Out of a Hat</a>
                    </div>
                    <div style="clear:both;"></div>
                  </div>                
               
            </div></div></div>

            <div style="font-size:0.9em;
            color:var(--mono-6);text-align:center;
            margin:0 auto;
            margin-top:1em;
            margin-bottom:0.25em;">
         ADVERTISEMENT</div>
         <!-- /31961696/release.case-a.300-336.top-left -->
            <div class='page_ads_creative_frame 
               lazyload-ad
               
               

               ' id='frame-div-gpt-ad-1465817209349-19'  data-adcode='div-gpt-ad-1465817209349-19'  style='margin:0 auto;display: flex;align-items: center;justify-content: center;margin-bottom:1em;min-height:280px;min-width:305px;'>
            <div id='div-gpt-ad-1465817209349-19'>
            </div></div><div class="hide-for-small"><div class="section_tracklisting"><div class="release_page_header"><h2>Track listing</h2>
            <div id="track_credit_show_link_tracks" class="track_credit_show_link" onClick="rymQ( function() { RYMmediaPage.toggleTrackCredits('tracks'); });">Show track credits</div>
         </div>
            <span id="track_credit_show_msg_tracks" style="display:none;">Show track credits</span>
            <span id="track_credit_hide_msg_tracks" style="display:none;">Hide track credits</span>
         <meta content="10" itemprop="numTracks" /> 
       <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table>
       <ul id="tracks" class="tracks tracklisting"><li class="track"><div itemprop="track" itemscope itemtype="http://schema.org/MusicRecording" class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     A1
                  </span>
                  <span class="tracklist_title"><span itemprop="name"><span class="rendered_text">Cool Places</span></span><span class="tracklist_duration" data-inseconds="203" itemprop="duration" content="PT3M23S">
                     3:23
                  </span>
                  <meta content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" itemprop="url" />
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/jane_wiedlin" class="artist">Jane Wiedlin</a></div>
               <div class="credits_roles">vocals</div>
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/brian_reeves_f1" class="artist">Brian Reeves</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div itemprop="track" itemscope itemtype="http://schema.org/MusicRecording" class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     A2
                  </span>
                  <span class="tracklist_title"><span itemprop="name"><span class="rendered_text">Popularity</span></span><span class="tracklist_duration" data-inseconds="232" itemprop="duration" content="PT3M52S">
                     3:52
                  </span>
                  <meta content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" itemprop="url" />
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div itemprop="track" itemscope itemtype="http://schema.org/MusicRecording" class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     A3
                  </span>
                  <span class="tracklist_title"><span itemprop="name"><span class="rendered_text">Prayin&#39; for a Party</span></span><span class="tracklist_duration" data-inseconds="179" itemprop="duration" content="PT2M59S">
                     2:59
                  </span>
                  <meta content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" itemprop="url" />
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div itemprop="track" itemscope itemtype="http://schema.org/MusicRecording" class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     A4
                  </span>
                  <span class="tracklist_title"><span itemprop="name"><span class="rendered_text">All You Ever Think About Is Sex</span></span><span class="tracklist_duration" data-inseconds="249" itemprop="duration" content="PT4M09S">
                     4:09
                  </span>
                  <meta content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" itemprop="url" />
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div itemprop="track" itemscope itemtype="http://schema.org/MusicRecording" class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     A5
                  </span>
                  <span class="tracklist_title"><span itemprop="name"><span class="rendered_text">Please, Baby, Please</span></span><span class="tracklist_duration" data-inseconds="222" itemprop="duration" content="PT3M42S">
                     3:42
                  </span>
                  <meta content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" itemprop="url" />
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div itemprop="track" itemscope itemtype="http://schema.org/MusicRecording" class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     B1
                  </span>
                  <span class="tracklist_title"><span itemprop="name"><span class="rendered_text">Rockin&#39; Girls</span></span><span class="tracklist_duration" data-inseconds="282" itemprop="duration" content="PT4M42S">
                     4:42
                  </span>
                  <meta content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" itemprop="url" />
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div itemprop="track" itemscope itemtype="http://schema.org/MusicRecording" class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     B2
                  </span>
                  <span class="tracklist_title"><span itemprop="name"><span class="rendered_text">I Wish I Looked a Little Better</span></span><span class="tracklist_duration" data-inseconds="178" itemprop="duration" content="PT2M58S">
                     2:58
                  </span>
                  <meta content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" itemprop="url" />
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div itemprop="track" itemscope itemtype="http://schema.org/MusicRecording" class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     B3
                  </span>
                  <span class="tracklist_title"><span itemprop="name"><span class="rendered_text">Lucky Me, Lucky You</span></span><span class="tracklist_duration" data-inseconds="206" itemprop="duration" content="PT3M26S">
                     3:26
                  </span>
                  <meta content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" itemprop="url" />
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/jane_wiedlin" class="artist">Jane Wiedlin</a></div>
               <div class="credits_roles">vocals</div>
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/brian_reeves_f1" class="artist">Brian Reeves</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div itemprop="track" itemscope itemtype="http://schema.org/MusicRecording" class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     B4
                  </span>
                  <span class="tracklist_title"><span itemprop="name"><span class="rendered_text">A Fun Bunch of Guys From Outer Space</span></span><span class="tracklist_duration" data-inseconds="240" itemprop="duration" content="PT4M00S">
                     4:00
                  </span>
                  <meta content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" itemprop="url" />
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track"><div itemprop="track" itemscope itemtype="http://schema.org/MusicRecording" class="tracklist_line" style="width:100%;"><span class="tracklist_num">
                     B5
                  </span>
                  <span class="tracklist_title"><span itemprop="name"><span class="rendered_text">Dance Godammit</span></span><span class="tracklist_duration" data-inseconds="206" itemprop="duration" content="PT3M26S">
                     3:26
                  </span>
                  <meta content="https://rateyourmusic.com/release/album/sparks/in-outer-space/" itemprop="url" />
                  </span><div style="clear:both;"></div></div>
         <div style="width:300px;padding-left:23px;"><ul class="credits">
             <li class="credits non_featured_credit">
               <div class="credits_artist "><a   href="/artist/dan_lacksman" class="artist">Dan Lacksman</a></div>
               <div class="credits_roles">engineer</div></ul></div>                  
               </li><li class="track" style="text-align:right;"><span style="line-height: 2.6em;color: var(--mono-6);margin-right:0.8em;" class="tracklist_total">Total length: 36:37</span></li></ul><div id="track_preview_tracks">
            
         </div> </div></div><div class="hide-for-small"><div class="section_credits"><div class="release_page_header hide-for-small"><h2>Credits</h2></div>
          <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table>
          <ul id="credits_" class="credits"><li><a title="[Artist954920]"  href="/artist/ron_mael" class="artist">Ron Mael</a><br /> <span class="role_name ">producer</span>,  <span class="role_name ">writer</span>,  <span class="role_name ">synthesizer</span></li>
<li><a title="[Artist314265]"  href="/artist/russell_mael" class="artist">Russell Mael</a><br /> <span class="role_name ">producer</span>,  <span class="role_name ">writer</span>,  <span class="role_name ">vocals</span></li>
<li><a title="[Artist957477]"  href="/artist/brian_reeves_f1" class="artist">Brian Reeves</a><br /> <span class="role_name has_tracks">engineer<span class="role_tracks">A1, B3</span></span>,  <span class="role_name "><span class="rendered_text">mixing</span></span></li>
<li><a title="[Artist954805]"  href="/artist/brian_gardner_f1" class="artist">Brian Gardner</a><br /> <span class="role_name ">mastering</span></li>
<li><a title="[Artist1496747]"  href="/artist/bob-haag" class="artist">Bob Haag</a><br /> <span class="role_name ">guitar</span>,  <span class="role_name ">guitar synthesizer</span>,  <span class="role_name "><span class="rendered_text">background vocals</span></span>,  <span class="role_name ">bass guitar</span></li>
<li><a title="[Artist949072]"  href="/artist/leslie_bohem" class="artist">Leslie Bohem</a><br /> <span class="role_name ">bass guitar</span>,  <span class="role_name "><span class="rendered_text">background vocals</span></span></li>
<li><a title="[Artist1357949]"  href="/artist/david-kendrick" class="artist">David Kendrick</a><br /> <span class="role_name ">drums</span></li>
<li><a title="[Artist463556]"  href="/artist/james_goodwin" class="artist">James Goodwin</a><br /> <span class="role_name ">keyboards</span></li>
<li><a title="[Artist1045369]"  href="/artist/larry_vigon" class="artist">Larry Vigon</a><br /> <span class="role_name ">art direction</span>,  <span class="role_name ">design</span></li>
<li><a title="[Artist1008307]"  href="/artist/jim_shea" class="artist">Jim Shea</a><br /> <span class="role_name ">photography</span></li>
             <div id="minor_credits_" style="display:none;"><li><a title="[Artist11043]"  href="/artist/jane_wiedlin" class="artist">Jane Wiedlin</a><br /> <span class="role_name has_tracks">vocals<span class="role_tracks">A1, B3</span></span></li>
<li><a title="[Artist168692]"  href="/artist/dan_lacksman" class="artist">Dan Lacksman</a><br /> <span class="role_name has_tracks">engineer<span class="role_tracks">A2-A5, B1, B2, B4, B5</span></span></li></div><li onClick="$('#minor_credits_').slideToggle(100);$('#track_minor_hide_').toggle();$('#track_minor_show_').toggle();" class="expand_button"> <span id="track_minor_show_"> Expand credits <span style="font-weight:normal">[+2]</span></span> <span id="track_minor_hide_" style="display:none;"> Compact credits </span></li> </ul> </div>
          </div><div class="section_lists"><div class="release_page_header">
         <h2 style="float:left;">
            54 Lists
         </h2>

         
            <div onMouseOver="$('#add_to_list_lists').show();"
                  onMouseOut="$('#add_to_list_lists').hide();"
                  id="addtolist" style="float:right;">
               <div id="add_to_list_btn" class="btn blue_btn btn_small">Add to list</div>
               <div id="add_to_list_lists">  </div>
            </div>

         </div><div class="clearfix"></div>
       
          <ul class="lists not_expanded">
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/b2005c59933a6bc49980bdc20c6bda16/1631962" data-bkg2x="//e.snmc.io/i/150/s/2bfe412ce9b8303ad4a7c012ffda1a16/1631962" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/BenBassPlayer84/foods-and-beverages/">Foods And Beverages</a></div>
                        <div class="list_author"><a class="user" href="/~BenBassPlayer84">BenBassPlayer84</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/36867375e354e5dafaecab7942cde1f1/1212962" data-bkg2x="//e.snmc.io/i/150/s/ae1d3df0438fefd321d0f7312ae83bec/1212962" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/markeefe/favorite-albums-of-1983/">Favorite Albums of 1983</a></div>
                        <div class="list_author"><a class="user" href="/~markeefe">markeefe</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/bfaedaa476f643d4c5210858ec46c6b6/1284722" data-bkg2x="//e.snmc.io/i/150/s/ebc05d10e0050675fbdeccd4ba2d5727/1284722" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/Todd_Clark/american_albums__1983/">AMERICAN ALBUMS: 1983</a></div>
                        <div class="list_author"><a class="user" href="/~Todd_Clark">Todd_Clark</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/dfcaa3b999951facef79348f0a3bea50/6396337" data-bkg2x="//e.snmc.io/i/150/s/5f3ce4f9fa2e9b4f5bdee11ff2cdff57/6396337" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/Numanoid2/underrated-albums/">Underrated Albums</a></div>
                        <div class="list_author"><a class="user" href="/~Numanoid2">Numanoid2</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/9bd4eccba20bc24b93e8d0d975bd3711/4791189" data-bkg2x="//e.snmc.io/i/150/s/bb779fad97825639aa64080cb4854599/4791189" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/tremolo/1983/">1983</a></div>
                        <div class="list_author"><a class="user" href="/~tremolo">tremolo</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/526c65259a3e8ea8d94d16eb79f4025d/2451241" data-bkg2x="//e.snmc.io/i/150/s/70b7c954f3bbfad7674fabfb858f0a9a/2451241" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/kyokoku/my-top-25-albums-1983/">My Top 25 Albums (1983)</a></div>
                        <div class="list_author"><a class="user" href="/~kyokoku">kyokoku</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/01643b15c8827b96e055703e73ef9edc/6975219" data-bkg2x="//e.snmc.io/i/150/s/20c60d53e2e5830e0347c820d11e7182/6975219" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/markeefe/sparks-albums-ranked/">Sparks Albums Ranked</a></div>
                        <div class="list_author"><a class="user" href="/~markeefe">markeefe</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/44d994243de77fd14e2ae805a69d6355/7913334" data-bkg2x="//e.snmc.io/i/150/s/bc9c0cea4198032c5ab15762dce4839b/7913334" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/kmdevine/2020-listener-log/">2020 Listener Log</a></div>
                        <div class="list_author"><a class="user" href="/~kmdevine">kmdevine</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/6d00f55584ae8f71ecb116a68ea9d9f9/4898675" data-bkg2x="//e.snmc.io/i/150/s/266b30a6177cb1df4a75ba58fdf64a24/4898675" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/SaintGIGA/listened-to/">Listened To</a></div>
                        <div class="list_author"><a class="user" href="/~SaintGIGA">SaintGIGA</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/41c4c22ad81666450a4f897239c19236/6809300" data-bkg2x="//e.snmc.io/i/150/s/443d6e5d2c1321d9f0755e91bdab5ee1/6809300" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/pousweden/sparks-ranked-1/">Sparks: Ranked</a></div>
                        <div class="list_author"><a class="user" href="/~pousweden">pousweden</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/9e082b182fbf81b645d22718debf48f1/7666057" data-bkg2x="//e.snmc.io/i/150/s/60b2bd6ee1401e359b79205b6c9ae4fb/7666057" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/AlexanderVerlaineFrost/albums_of_1983/">Albums of 1983</a></div>
                        <div class="list_author"><a class="user" href="/~AlexanderVerlaineFrost">AlexanderVerlaineFrost</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/ef2e5990d9b4d40a03a1148b43db7027/8970701" data-bkg2x="//e.snmc.io/i/150/s/53cc61152a928f718107fbddb6dd117a/8970701" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/dial35/freeze_frame_/">Freeze Frame!</a></div>
                        <div class="list_author"><a class="user" href="/~dial35">dial35</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/ddde2f5b0e93f89b424122da536b33be/2408048" data-bkg2x="//e.snmc.io/i/150/s/2505484b87cfafea0d21dca9d2abc80f/2408048" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/theflynet/my-1983-albums-the-day-after/">My 1983 Albums, The Day After</a></div>
                        <div class="list_author"><a class="user" href="/~theflynet">theflynet</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/c15d78d47ceb854829c751cc553e9a11/1886173" data-bkg2x="//e.snmc.io/i/150/s/56d670e8c4172618592e62efa3d1b8ba/1886173" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/BenBassPlayer84/dynamic-duos/">Dynamic Duo&#39;s</a></div>
                        <div class="list_author"><a class="user" href="/~BenBassPlayer84">BenBassPlayer84</a></div>
                     </div>
                  </li>
                  <li>
                     <div class="list_image"></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/strugatsky/cover_art_for_adventurously_minded/">cover art for adventurously minded</a></div>
                        <div class="list_author"><a class="user" href="/~strugatsky">strugatsky</a></div>
                     </div>
                  </li>
                  <li>
                     <div data-bkg="//e.snmc.io/i/75/s/ba3fc556b50b60dcd0b866d809585af2/2609248" data-bkg2x="//e.snmc.io/i/150/s/4f641ca757ae210e7d97e4c5668d836e/2609248" class="list_image lazyload" ></div>
                     <div class="list_info">
                        <div class="list_name"><a style="color:var(--gen-blue-dark)" href="/list/nesfan6000/underrated_albums/">Underrated Albums</a></div>
                        <div class="list_author"><a class="user" href="/~nesfan6000">nesfan6000</a></div>
                     </div>
                  </li><li class="expand_button"><a href="lists/">See all 54 lists</a></li></ul>       
               </div><style> ul.comments_list { max-height:600px; }</style> <div class="section_comments">
                  <div class="release_page_header">
                     <h2 class="">Comments </h2>
                  </div>
                  <div class="clearfix"></div>
       <table class="color_bar" style="xborder:1px #333 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table><style>
         .comments_load {font-size:0.9em;margin-bottom:0.5em;margin-top:0.5em;border-radius:3px;cursor:pointer;list-style-type:none;line-height:2.5;font-weight:bold;background:var(--mono-d8);color:var(--mono-5);text-align:center;}

         .comments_load.loading { color:var(--mono-6); cursor:default }
      </style>
      <script>rymQ(function() {comments_l_c_10198 = new RYMcomments('l', 'c', 10198);});</script><div class="comments view" id="comments_l_c_10198"><div class="comment_help" id="comment_help_l_c_10198">

      <b>Rules for comments</b>
         <ul class="comment_rules">
            <li>Be respectful!  All the community rules apply here. </li>
            <li>Keep your comments focused on the release.  Don't post randomness/off-topic comments.   Jokes are fine, but don't post tactless/inappropriate ones.</li>
            <li>Don't get in arguments with people here, or start long discussions.  Use the boards for extended discussion. </li>
            <li style="color:var(--gen-text-red);;font-weight:bold;">Don't use this space to complain about the average rating, chart position, genre voting,  others' reviews or ratings, or errors on the page.</li>
            <li>Don't comment just to troll/provoke.  Likewise, don't respond to trollish comments; just report them and ignore them. </li>
            <li>Any spoilers should be placed in spoiler tags as such: <span style="font-weight:bold;color:var(--gen-text-red)">[spoiler]</span>(spoiler goes here)<span style="font-weight:bold;color:var(--gen-text-red)">[/spoiler]</span></li>
         </ul>

      <b>Note</b>: Unlike reviews, comments are considered temporary and may be deleted/purged without notice.
      </div><ul class="comments_list" id="comments_list_l_c_10198"></ul><div class="comments_post">
            <div id="comments_post_loading_l_c_10198"  class="comments_post_loading"></div>

            <div style="padding:10px;">

               <textarea id="comments_textarea_l_c_10198" onFocus="comments_l_c_10198.onFocusTextarea(event)" onBlur="comments_l_c_10198.onBlurTextarea(event)" class="comment_new"></textarea>
               <div onClick="comments_l_c_10198.open()" class="comment_post_add_btn" href="javascript:blah();">Add comment</div>

               <div onClick="comments_l_c_10198.cancel()" class="comment_cancel_btn" href="javascript:blah();">Cancel</div>
               <div onClick="comments_l_c_10198.post()" class="comment_post_btn" href="javascript:blah();">Post</div>
               <div style="clear:both;"></div>
            </div>
            </div></div><script>
                     var el = document.getElementById('comments_list_l_c_10198');
                            el.scrollTop = el.scrollHeight;
                  </script></div>
<div class="page_object_section page_object_section_discussion">

   <div class="page_object_section_discussion_header">
      <h2 class="page_object_section_header">Discussion</h2>
   </div>
   
   <ul class="page_object_discussion_threads">
      <li class="page_object_discussion_thread">
         <a href="/discussion/music/what-non-bolded-sparks-albums-are-must-haves/1/#post_7964189">What non-bolded Sparks albums are must-haves?</a> <span class="page_object_discussion_group_name">Music</span>
      </li>
      <li class="page_object_discussion_thread">
         <a href="/discussion/music/worst-album-runs/3/#post_7632645">worst album runs</a> <span class="page_object_discussion_group_name">Music</span>
      </li>
      <li class="page_object_discussion_thread">
         <a href="/discussion/music/good-songs-on-bad-albums-1/1/#post_7606837">good songs on bad albums</a> <span class="page_object_discussion_group_name">Music</span>
      </li>
      <li class="page_object_discussion_thread">
         <a href="/discussion/music-polls_games/rym-rough-guide-poll-1189-sparks-results/1/#post_6810457">RYM ROUGH GUIDE POLL #1189: SPARKS (RESULTS)</a> <span class="page_object_discussion_group_name">Music Polls/Games</span>
      </li>
   </ul>
</div>
<a name="suggestions" class="anchor"></a><div 
            style="text-align:center;padding:0.5em;
            margin-top:1em;display:block;font-size:1em;">
             <a style="text-decoration:none;color:var(--gen-blue-darkest);" href="/subscribe/"><i class="fa fa-star"></i> Subscribe to see similar release suggestions </a> 
            </div>

            <div style="font-size:0.9em;
            color:var(--mono-6);text-align:center;
            margin:0 auto;
            margin-top:1em;
            margin-bottom:0.25em;">
         ADVERTISEMENT</div>
         <!-- /31961696/release.case-a.300-336.bottom-left -->
            <div class='page_ads_creative_frame 
               lazyload-ad
               
               desktop-sticky-persist-ad

               ' id='frame-div-gpt-ad-1465817209349-23'  data-adcode='div-gpt-ad-1465817209349-23'  style='margin:0 auto;display: flex;align-items: center;justify-content: center;margin-bottom:1em;min-height:280px;min-width:305px;'>
            <div id='div-gpt-ad-1465817209349-23'>
            </div></div><div class="column_filler" id="column_filler_left"></div>
    </div></div>
      </div>
      </div>

<div style="border-top:1px solid var(--mono-d);padding:15px;padding-left:50px;padding-right:50px;padding-bottom:20px;"><div style=""><div class="release_page_header"><h2>Contributions</h2></div>
       <table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:1px;font-size:1px;padding:0;"><tr style="height:1px;padding:0;"></tr></table><span class="contributor_header">Contributors to this release: </span><a class="user" href = "/~a_owens">a_owens</a>, <a class="user" href = "/~Cthulhu">Cthulhu</a>, <a class="user" href = "/~VinzClortho">VinzClortho</a>, <a class="user" href = "/~StudioMONDO">StudioMONDO</a>, <a class="user" href = "/~markeefe">markeefe</a>, <a class="user" href = "/~coolidge">coolidge</a>, <span class="userd" title="user doesn't exist or has been deleted">[deleted]</span>, <a class="user" href = "/~Tornadoes">Tornadoes</a>, <a class="user" href = "/~jhendrix110">jhendrix110</a>, <span class="userd" title="user doesn't exist or has been deleted">[deleted]</span>, <a class="user" href = "/~blackmore4">blackmore4</a>, <a class="user" href = "/~Lionji">Lionji</a>, <a class="user" href = "/~jefqoi">jefqoi</a><div style="margin-top:15px;">
                  <a href="/releases/ac?album_id=10198" class="btn blue_btn btn_small contrib_btn">Correct this entry</a>
                  <a href="/admin/corq/?album_id=10198" class="btn blue_btn btn_small contrib_btn">History [9]</a> &nbsp; 
                  <a href="/images/upload?type=l&assoc_id=10198&replace_id=2656352" class="btn blue_btn btn_small contrib_btn">Upload cover art</a>
                  <a href="/admin/imaq/?type=l&assoc_id=10198"  class="btn blue_btn btn_small contrib_btn">History [5]</a> &nbsp; 
                  &nbsp;
                  <a href="/misc/customize_release_page?release_id=10198" class="btn blue_btn btn_small contrib_btn">Customize this page</a>

                  
                  
                  

                  
                  </div></div></div></div><div style="height:4px;width:100%;overflow:hidden;"><table class="color_bar" style="xborder:1px #423b43 solid; width:100%;height:4px;font-size:1px;padding:0;"><tr style="height:4px;padding:0;"><td style="background:#bcb5bd;height:4px;padding:0px;color:#bcb5bd">.</td><td style="background:#a69bb9;height:4px;padding:0px;color:#a69bb9">.</td><td style="background:#916c7e;height:4px;padding:0px;color:#916c7e">.</td><td style="background:#9687a4;height:4px;padding:0px;color:#9687a4">.</td><td style="background:#b4b1b2;height:4px;padding:0px;color:#b4b1b2">.</td></tr></table></div>
         <div class="clearfix"></div>
         <!-- end content and content_wrapper -->
               </div>
             </div>
          </div>

          <div id="track_preview_frame"  class="track_preview_frame">

             <div class="track_preview_close" onClick="$('#track_preview_frame').hide();$('#track_preview').html('');">
                <i class="fa fa-times-circle"></i>
             </div>

             <div id="track_preview_text" class="track_preview_text">
             </div>

             <div id="track_preview" class="track_preview">

             </div>
          </div>

          <div class="overlay_invisible" id="overlay_invisible"></div>

          <div class="ui_cropper_frame" id="ui_cropper_frame"></div>

          <div class="modal_parent_frame" id="modal_parent_frame">
             <div onClick="rym.closeModal();" id="modal_overlay" class="modal_overlay" style="">Close <i class="fa fa-times"></i></div>
             <div onClick="rym.closeModal();" id="modal_overlay_invisible" class="modal_overlay_invisible" style=""></div>
             <div id="modal_parent_frame_inner" class="modal_parent_frame_inner">
                    <div id="modal_content" class="modal_content">
                    </div>
             </div>
          </div>

          <div class="modal_parent_frame_level_2" id="modal_parent_frame_level_2">
             <div onClick="rym.closeModal2();" id="modal_overlay_level_2" class="modal_overlay" style="">Close <i class="fa fa-times"></i></div>
             <div onClick="rym.closeModal2();" id="modal_overlay_invisible_level_2" class="modal_overlay_invisible" style=""></div>
             <div id="modal_parent_frame_inner_level_2" class="modal_parent_frame_inner_level_2">
                    <div id="modal_content_level_2" class="modal_content">
                    </div>
             </div>
          </div>



             <!-- ~~~~~~~~ end content ~~~~~~~~~~~~~~~ -->
            <div class="ui_chooser_results_frame" id="ui_chooser_results_frame">
                <div class="ui_chooser_results bg-fff alternate" id="ui_chooser_results">
                </div>
            </div>  

             <div id="content_cover">
                <div id="preview_frame"></div>
             </div>

             <div id="voting_ui_frame"></div>

          <div style="clear:both;"></div>
      
<footer>
  <div class="footer_inner">

     <div class="footer_main_section"><div class="minilogo_frame"><div class="minilogo"> <div class="logo_sonemic_bw_24"></div>
                        <span class="minilogo_text">Rate Your Music</span>
                    </div></div>


        <div class="copyright">&copy; 2000-2021 Sonemic, Inc.</div>
          

        

        <div class="clearfix"></div>

        <div class="clearfix"></div>

        <div class="social_icons"> 
           <a rel="noopener" title="Follow us on Facebook" href="https://facebook.com/sonemic.network/" target="_blank"><i class="fab fa-facebook-square"></i></a> 
           <a rel="noopener" title="Follow us on Twitter" href="https://twitter.com/sonemic/" target="_blank"><i class="fab fa-twitter-square"></i></a> 
           <a rel="noopener" title="Follow us on Instagram" href="https://instagram.com/sonemic/" target="_blank"><i class="fab fa-instagram-square"></i></a> 
           <a rel="noopener" title="Follow us on Spotify" href="https://open.spotify.com/user/sonemic.com" target="_blank"><i class="fab fa-spotify"></i></a> 
     
        </div>
     </div> 
  
  <div id="expand_full_footer" class="mobile_expandable_full mobile_expand_footer">

        <div id="expand_full_header_footer" class="mobile_expandable_full_header" onclick="RYMmobile.mobileExpand.toggleFull('footer');">

           <div class="mobile_expandable_full_icons">
              <div class="mobile_expandable_full_expand_icon_expanded">
                 <i class="fa fa-caret-down"></i>
              </div>
              <div class="mobile_expandable_full_expand_icon_hidden">
                 <i class="fa fa-caret-right"></i>
              </div>
           </div>

           <div id="expand_full_name_footer" class="mobile_expandable_full_name">
              Site links
           </div>

        </div>

        <div id="expand_full_content_footer" class="mobile_expandable_full_content">
           
     <div class="footer_sections">
        <div class="footer_section" id="section_network">
           <div class="footer_header">RYM Network</div>
           <div class="footer_sub_links">
              <a class="asonemic" href="https://rateyourmusic.com/">RYM <span class="sub">music</span></a>
              <a class="asonemic" href="https://sonemic.com/">Sonemic <span class="sub">new music site (beta)</span></a>
              <a class="acinemos" href="https://cinemos.com/">Cinemos <span class="sub">film (beta)</span></a>
              <a class="aglitchwave" href="https://glitchwave.com/">Glitchwave <span class="sub">video games (beta)</span></a>
           </div>
        </div>
        <div class="footer_section">
           <div class="footer_header">Info</div>
           <div class="footer_sub_links">
              <a href="/wiki/RYM:FAQ">FAQ</a>
              <a href="/development/">Development status</a>
              <a href="/rymzilla/" class="has_tip" data-tiptip="Report bugs and request features">RYMzilla</a>
              <a href="/queues/">Submissions</a>
           </div>
        </div>
        <div class="footer_section">
           <div class="footer_header">Policy</div>
           <div class="footer_sub_links">
              
              <a href="/wiki/">Database standards</a>
              <a class="" href="/privacy">Privacy</a>
              <a class="" href="/tos">Terms of service</a>
           </div>
        </div>
        <div class="footer_section">
           <div class="footer_header">Contact us</div>
           <div class="footer_sub_links">
              <a href="/contact">Support / Feedback</a>
              <a href="https://buy.buysellads.com/directory/rateyourmusic/checkout/new">Advertise</a>
              <a href="https://sonemic.com/jobs/">Jobs</a>
           </div>
        </div>
     </div>
  
        </div>
     </div>
  
 
 

     <div style="clear:both;"></div>
  </div>

</footer></body></html><script></script>

      <script src="https://e.snmc.io/2.5/js/jquery.min.2.js"></script><script src="//e.snmc.io/dist/js/bundle.js?v=0b7068f6-17b5-4599-9812-4101fd5364aa"></script><script src="//e.snmc.io/dist/js/page/release.js?v=0b7068f6-17b5-4599-9812-4101fd5364aa"></script><script src="//e.snmc.io/dist/js/component/suggestions.js?v=0b7068f6-17b5-4599-9812-4101fd5364aa"></script><script src="//e.snmc.io/dist/js/component/play_history.js?v=0b7068f6-17b5-4599-9812-4101fd5364aa"></script><script src="//e.snmc.io/dist/js/ui/comments.js?v=0b7068f6-17b5-4599-9812-4101fd5364aa"></script><script src="//e.snmc.io/dist/js/component/content.js?v=0b7068f6-17b5-4599-9812-4101fd5364aa"></script><link id="css-base-flags" rel="stylesheet" href="//e.snmc.io/dist/css/base/flags.css?v=0b7068f6-17b5-4599-9812-4101fd5364aa" type="text/css" />
      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');


      
           console.log('rym.analytics: Google analytics pageview event sent.');
           ga('create', 'UA-59057-1', 'auto');
           ga('send', 'pageview');
            
      </script>
         <script>

            for ( var i in ryminit ) {
               var fn = ryminit[i];
               ryminit[i] = null;
               if ( fn ) {
                  fn();
               }
            }

            ryminit = null;
         </script>
      


      <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
      <script type="text/javascript">

         rymQ(function () {
             function drawChart() {
               if (typeof(drawChart1) != 'undefined') {
                  drawChart1();
               }
               if (typeof(drawChart2) != 'undefined') {
                  drawChart2();
               }
            }
           google.charts.load('42', {packages: ['corechart']});
           google.charts.setOnLoadCallback(drawChart);
         });
      </script>

    <script type="text/javascript">rymQ(function () {
      
      $(".has_tip").tipTip();



      });

     </script><script type="text/javascript" src="//e.snmc.io/2.5/js/basereq-min-b5.js"></script>
<script type="text/javascript" src="//e.snmc.io/2.5/js/dragsort.js"></script><script src="https://e.snmc.io/2.5/js/min/shortcut.js" async></script><script>rymQ(function () { 
           jQuery.ajax({
        url: '/sourced/autosuggest.js/musictag?770124',
        dataType: 'script',
        success: null,
        async: true
    });       
      });</script>
  recorded_at: Wed, 09 Jun 2021 12:36:26 GMT
recorded_with: VCR 6.0.0
