---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/tag/dream+pop/albums?page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.3p157
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/tag/dream+pop/albums?page=1
      Etag:
      - W/"78add435e1211bdc784fe3f501fbad1e"
      X-Frame-Options:
      - SAMEORIGIN
      Content-Language:
      - en
      Set-Cookie:
      - lfmanon=1; Path=/
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6ImI4MzM3OTkxLTQ3MTgtNGQ4ZS04NzFiLWY4YzA0MDYxNWFiMiJ9:1n00iI:KOl8erhYLjj_XWDE5QaL9G6NdDA;
        Domain=.last.fm; expires=Thu, 22-Dec-2022 12:27:22 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 22 Dec 2021 12:27:22 GMT
      X-Served-By:
      - prod-lfm-web-7d6578766-tb6tk, cache-hhn4073-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1640176042.758966,VS0,VE301
      Vary:
      - Accept-Encoding, Accept-Language, Cookie
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        





<!doctype html>
<html
    lang="en"
    class="
        no-js
        playbar-masthead-release-shim
        youtube-provider-not-ready
    "
>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge"><script type="text/javascript">(window.NREUM||(NREUM={})).init={ajax:{deny_list:["bam-cell.nr-data.net"]}};(window.NREUM||(NREUM={})).loader_config={xpid:"UwYPV15QGwYFXFlXDgU=",licenseKey:"0ed0ce50b0",applicationID:"5588594"};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var i=e[n]={exports:{}};t[n][0].call(i.exports,function(e){var i=t[n][1][e];return r(i||e)},i,i.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var i=0;i<n.length;i++)r(n[i]);return r}({1:[function(t,e,n){function r(t){try{s.console&&console.log(t)}catch(e){}}var i,o=t("ee"),a=t(28),s={};try{i=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(s.console=!0,i.indexOf("dev")!==-1&&(s.dev=!0),i.indexOf("nr_dev")!==-1&&(s.nrDev=!0))}catch(c){}s.nrDev&&o.on("internal-error",function(t){r(t.stack)}),s.dev&&o.on("fn-err",function(t,e,n){r(n.stack)}),s.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(s,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,s){try{p?p-=1:i(s||new UncaughtException(t,e,n),!0)}catch(f){try{o("ierr",[f,c.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function i(t,e){var n=e?null:c.now();o("err",[t,n])}var o=t("handle"),a=t(29),s=t("ee"),c=t("loader"),f=t("gos"),u=window.onerror,d=!1,l="nr@seenError";if(!c.disabled){var p=0;c.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(h){"stack"in h&&(t(10),t(9),"addEventListener"in window&&t(6),c.xhrWrappable&&t(11),d=!0)}s.on("fn-start",function(t,e,n){d&&(p+=1)}),s.on("fn-err",function(t,e,n){d&&!n[l]&&(f(n,l,function(){return!0}),this.thrown=!0,i(n))}),s.on("fn-end",function(){d&&!this.thrown&&p>0&&(p-=1)}),s.on("internal-error",function(t){o("ierr",[t,c.now(),!0])})}},{}],3:[function(t,e,n){var r=t("loader");r.disabled||(r.features.ins=!0)},{}],4:[function(t,e,n){function r(){var t=new PerformanceObserver(function(t,e){var n=t.getEntries();s(v,[n])});try{t.observe({entryTypes:["resource"]})}catch(e){}}function i(t){if(s(v,[window.performance.getEntriesByType(w)]),window.performance["c"+l])try{window.performance[h](m,i,!1)}catch(t){}else try{window.performance[h]("webkit"+m,i,!1)}catch(t){}}function o(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var a=t("ee"),s=t("handle"),c=t(10),f=t(9),u=t(5),d=t(19),l="learResourceTimings",p="addEventListener",h="removeEventListener",m="resourcetimingbufferfull",v="bstResource",w="resource",g="-start",y="-end",x="fn"+g,b="fn"+y,E="bstTimer",R="pushState",S=t("loader");if(!S.disabled){S.features.stn=!0,t(8),"addEventListener"in window&&t(6);var O=NREUM.o.EV;a.on(x,function(t,e){var n=t[0];n instanceof O&&(this.bstStart=S.now())}),a.on(b,function(t,e){var n=t[0];n instanceof O&&s("bst",[n,e,this.bstStart,S.now()])}),c.on(x,function(t,e,n){this.bstStart=S.now(),this.bstType=n}),c.on(b,function(t,e){s(E,[e,this.bstStart,S.now(),this.bstType])}),f.on(x,function(){this.bstStart=S.now()}),f.on(b,function(t,e){s(E,[e,this.bstStart,S.now(),"requestAnimationFrame"])}),a.on(R+g,function(t){this.time=S.now(),this.startPath=location.pathname+location.hash}),a.on(R+y,function(t){s("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),u()?(s(v,[window.performance.getEntriesByType("resource")]),r()):p in window.performance&&(window.performance["c"+l]?window.performance[p](m,i,d(!1)):window.performance[p]("webkit"+m,i,d(!1))),document[p]("scroll",o,d(!1)),document[p]("keypress",o,d(!1)),document[p]("click",o,d(!1))}}},{}],5:[function(t,e,n){e.exports=function(){return"PerformanceObserver"in window&&"function"==typeof window.PerformanceObserver}},{}],6:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&i(e)}function i(t){s.inPlace(t,[u,d],"-",o)}function o(t,e){return t[1]}var a=t("ee").get("events"),s=t("wrap-function")(a,!0),c=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(i(window),i(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1];if(null!==n&&("function"==typeof n||"object"==typeof n)){var r=c(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?s(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],7:[function(t,e,n){function r(t,e,n){var r=t[e];"function"==typeof r&&(t[e]=function(){var t=o(arguments),e={};i.emit(n+"before-start",[t],e);var a;e[m]&&e[m].dt&&(a=e[m].dt);var s=r.apply(this,t);return i.emit(n+"start",[t,a],s),s.then(function(t){return i.emit(n+"end",[null,t],s),t},function(t){throw i.emit(n+"end",[t],s),t})})}var i=t("ee").get("fetch"),o=t(29),a=t(28);e.exports=i;var s=window,c="fetch-",f=c+"body-",u=["arrayBuffer","blob","json","text","formData"],d=s.Request,l=s.Response,p=s.fetch,h="prototype",m="nr@context";d&&l&&p&&(a(u,function(t,e){r(d[h],e,f),r(l[h],e,f)}),r(s,"fetch",c),i.on(c+"end",function(t,e){var n=this;if(e){var r=e.headers.get("content-length");null!==r&&(n.rxSize=r),i.emit(c+"done",[null,e],n)}else i.emit(c+"done",[t],n)}))},{}],8:[function(t,e,n){var r=t("ee").get("history"),i=t("wrap-function")(r);e.exports=r;var o=window.history&&window.history.constructor&&window.history.constructor.prototype,a=window.history;o&&o.pushState&&o.replaceState&&(a=o),i.inPlace(a,["pushState","replaceState"],"-")},{}],9:[function(t,e,n){var r=t("ee").get("raf"),i=t("wrap-function")(r),o="equestAnimationFrame";e.exports=r,i.inPlace(window,["r"+o,"mozR"+o,"webkitR"+o,"msR"+o],"raf-"),r.on("raf-start",function(t){t[0]=i(t[0],"fn-")})},{}],10:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function i(t,e,n){this.method=n,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,n)}var o=t("ee").get("timer"),a=t("wrap-function")(o),s="setTimeout",c="setInterval",f="clearTimeout",u="-start",d="-";e.exports=o,a.inPlace(window,[s,"setImmediate"],s+d),a.inPlace(window,[c],c+d),a.inPlace(window,[f,"clearImmediate"],f+d),o.on(c+u,r),o.on(s+u,i)},{}],11:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",s)}function i(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,y,"fn-",s)}function o(t){x.push(t),m&&(E?E.then(a):w?w(a):(R=-R,S.data=R))}function a(){for(var t=0;t<x.length;t++)r([],x[t]);x.length&&(x=[])}function s(t,e){return e}function c(t,e){for(var n in t)e[n]=t[n];return e}t(6);var f=t("ee"),u=f.get("xhr"),d=t("wrap-function")(u),l=t(19),p=NREUM.o,h=p.XHR,m=p.MO,v=p.PR,w=p.SI,g="readystatechange",y=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],x=[];e.exports=u;var b=window.XMLHttpRequest=function(t){var e=new h(t);try{u.emit("new-xhr",[e],e),e.addEventListener(g,i,l(!1))}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(c(h,b),b.prototype=h.prototype,d.inPlace(b.prototype,["open","send"],"-xhr-",s),u.on("send-xhr-start",function(t,e){r(t,e),o(e)}),u.on("open-xhr-start",r),m){var E=v&&v.resolve();if(!w&&!v){var R=1,S=document.createTextNode(R);new m(a).observe(S,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===g||a()})},{}],12:[function(t,e,n){function r(t){if(!s(t))return null;var e=window.NREUM;if(!e.loader_config)return null;var n=(e.loader_config.accountID||"").toString()||null,r=(e.loader_config.agentID||"").toString()||null,f=(e.loader_config.trustKey||"").toString()||null;if(!n||!r)return null;var h=p.generateSpanId(),m=p.generateTraceId(),v=Date.now(),w={spanId:h,traceId:m,timestamp:v};return(t.sameOrigin||c(t)&&l())&&(w.traceContextParentHeader=i(h,m),w.traceContextStateHeader=o(h,v,n,r,f)),(t.sameOrigin&&!u()||!t.sameOrigin&&c(t)&&d())&&(w.newrelicHeader=a(h,m,v,n,r,f)),w}function i(t,e){return"00-"+e+"-"+t+"-01"}function o(t,e,n,r,i){var o=0,a="",s=1,c="",f="";return i+"@nr="+o+"-"+s+"-"+n+"-"+r+"-"+t+"-"+a+"-"+c+"-"+f+"-"+e}function a(t,e,n,r,i,o){var a="btoa"in window&&"function"==typeof window.btoa;if(!a)return null;var s={v:[0,1],d:{ty:"Browser",ac:r,ap:i,id:t,tr:e,ti:n}};return o&&r!==o&&(s.d.tk=o),btoa(JSON.stringify(s))}function s(t){return f()&&c(t)}function c(t){var e=!1,n={};if("init"in NREUM&&"distributed_tracing"in NREUM.init&&(n=NREUM.init.distributed_tracing),t.sameOrigin)e=!0;else if(n.allowed_origins instanceof Array)for(var r=0;r<n.allowed_origins.length;r++){var i=h(n.allowed_origins[r]);if(t.hostname===i.hostname&&t.protocol===i.protocol&&t.port===i.port){e=!0;break}}return e}function f(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.enabled}function u(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.exclude_newrelic_header}function d(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&NREUM.init.distributed_tracing.cors_use_newrelic_header!==!1}function l(){return"init"in NREUM&&"distributed_tracing"in NREUM.init&&!!NREUM.init.distributed_tracing.cors_use_tracecontext_headers}var p=t(25),h=t(14);e.exports={generateTracePayload:r,shouldGenerateTrace:s}},{}],13:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<l;r++)t.removeEventListener(d[r],this.listener,!1);e.aborted||(n.duration=a.now()-this.startTime,this.loadCaptureCalled||4!==t.readyState?null==e.status&&(e.status=0):o(this,t),n.cbTime=this.cbTime,s("xhr",[e,n,this.startTime,this.endTime,"xhr"],this))}}function i(t,e){var n=c(e),r=t.params;r.hostname=n.hostname,r.port=n.port,r.protocol=n.protocol,r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.parsedOrigin=n,t.sameOrigin=n.sameOrigin}function o(t,e){t.params.status=e.status;var n=v(e,t.lastSize);if(n&&(t.metrics.rxSize=n),t.sameOrigin){var r=e.getResponseHeader("X-NewRelic-App-Data");r&&(t.params.cat=r.split(", ").pop())}t.loadCaptureCalled=!0}var a=t("loader");if(a.xhrWrappable&&!a.disabled){var s=t("handle"),c=t(14),f=t(12).generateTracePayload,u=t("ee"),d=["load","error","abort","timeout"],l=d.length,p=t("id"),h=t(20),m=t(18),v=t(15),w=t(19),g=NREUM.o.REQ,y=window.XMLHttpRequest;a.features.xhr=!0,t(11),t(7),u.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,e.loadCaptureCalled=!1,e.params=this.params||{},e.metrics=this.metrics||{},t.addEventListener("load",function(n){o(e,t)},w(!1)),h&&(h>34||h<10)||t.addEventListener("progress",function(t){e.lastSize=t.loaded},w(!1))}),u.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),u.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid);var n=f(this.parsedOrigin);if(n){var r=!1;n.newrelicHeader&&(e.setRequestHeader("newrelic",n.newrelicHeader),r=!0),n.traceContextParentHeader&&(e.setRequestHeader("traceparent",n.traceContextParentHeader),n.traceContextStateHeader&&e.setRequestHeader("tracestate",n.traceContextStateHeader),r=!0),r&&(this.dt=n)}}),u.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],i=this;if(n&&r){var o=m(r);o&&(n.txSize=o)}this.startTime=a.now(),this.listener=function(t){try{"abort"!==t.type||i.loadCaptureCalled||(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}};for(var s=0;s<l;s++)e.addEventListener(d[s],this.listener,w(!1))}),u.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),u.on("xhr-load-added",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),u.on("xhr-load-removed",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),u.on("xhr-resolved",function(){this.endTime=a.now()}),u.on("addEventListener-end",function(t,e){e instanceof y&&"load"===t[0]&&u.emit("xhr-load-added",[t[1],t[2]],e)}),u.on("removeEventListener-end",function(t,e){e instanceof y&&"load"===t[0]&&u.emit("xhr-load-removed",[t[1],t[2]],e)}),u.on("fn-start",function(t,e,n){e instanceof y&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),u.on("fn-end",function(t,e){this.xhrCbStart&&u.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,e],e)}),u.on("fetch-before-start",function(t){function e(t,e){var n=!1;return e.newrelicHeader&&(t.set("newrelic",e.newrelicHeader),n=!0),e.traceContextParentHeader&&(t.set("traceparent",e.traceContextParentHeader),e.traceContextStateHeader&&t.set("tracestate",e.traceContextStateHeader),n=!0),n}var n,r=t[1]||{};"string"==typeof t[0]?n=t[0]:t[0]&&t[0].url?n=t[0].url:window.URL&&t[0]&&t[0]instanceof URL&&(n=t[0].href),n&&(this.parsedOrigin=c(n),this.sameOrigin=this.parsedOrigin.sameOrigin);var i=f(this.parsedOrigin);if(i&&(i.newrelicHeader||i.traceContextParentHeader))if("string"==typeof t[0]||window.URL&&t[0]&&t[0]instanceof URL){var o={};for(var a in r)o[a]=r[a];o.headers=new Headers(r.headers||{}),e(o.headers,i)&&(this.dt=i),t.length>1?t[1]=o:t.push(o)}else t[0]&&t[0].headers&&e(t[0].headers,i)&&(this.dt=i)}),u.on("fetch-start",function(t,e){this.params={},this.metrics={},this.startTime=a.now(),this.dt=e,t.length>=1&&(this.target=t[0]),t.length>=2&&(this.opts=t[1]);var n,r=this.opts||{},o=this.target;"string"==typeof o?n=o:"object"==typeof o&&o instanceof g?n=o.url:window.URL&&"object"==typeof o&&o instanceof URL&&(n=o.href),i(this,n);var s=(""+(o&&o instanceof g&&o.method||r.method||"GET")).toUpperCase();this.params.method=s,this.txSize=m(r.body)||0}),u.on("fetch-done",function(t,e){this.endTime=a.now(),this.params||(this.params={}),this.params.status=e?e.status:0;var n;"string"==typeof this.rxSize&&this.rxSize.length>0&&(n=+this.rxSize);var r={txSize:this.txSize,rxSize:n,duration:a.now()-this.startTime};s("xhr",[this.params,r,this.startTime,this.endTime,"fetch"],this)})}},{}],14:[function(t,e,n){var r={};e.exports=function(t){if(t in r)return r[t];var e=document.createElement("a"),n=window.location,i={};e.href=t,i.port=e.port;var o=e.href.split("://");!i.port&&o[1]&&(i.port=o[1].split("/")[0].split("@").pop().split(":")[1]),i.port&&"0"!==i.port||(i.port="https"===o[0]?"443":"80"),i.hostname=e.hostname||n.hostname,i.pathname=e.pathname,i.protocol=o[0],"/"!==i.pathname.charAt(0)&&(i.pathname="/"+i.pathname);var a=!e.protocol||":"===e.protocol||e.protocol===n.protocol,s=e.hostname===document.domain&&e.port===n.port;return i.sameOrigin=a&&(!e.hostname||s),"/"===i.pathname&&(r[t]=i),i}},{}],15:[function(t,e,n){function r(t,e){var n=t.responseType;return"json"===n&&null!==e?e:"arraybuffer"===n||"blob"===n||"json"===n?i(t.response):"text"===n||""===n||void 0===n?i(t.responseText):void 0}var i=t(18);e.exports=r},{}],16:[function(t,e,n){function r(){}function i(t,e,n,r){return function(){return u.recordSupportability("API/"+e+"/called"),o(t+e,[f.now()].concat(s(arguments)),n?null:this,r),n?void 0:this}}var o=t("handle"),a=t(28),s=t(29),c=t("ee").get("tracer"),f=t("loader"),u=t(21),d=NREUM;"undefined"==typeof window.newrelic&&(newrelic=d);var l=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],p="api-",h=p+"ixn-";a(l,function(t,e){d[e]=i(p,e,!0,"api")}),d.addPageAction=i(p,"addPageAction",!0),d.setCurrentRouteName=i(p,"routeName",!0),e.exports=newrelic,d.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(t,e){var n={},r=this,i="function"==typeof e;return o(h+"tracer",[f.now(),t,n],r),function(){if(c.emit((i?"":"no-")+"fn-start",[f.now(),r,i],n),i)try{return e.apply(this,arguments)}catch(t){throw c.emit("fn-err",[arguments,this,t],n),t}finally{c.emit("fn-end",[f.now()],n)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){m[e]=i(h,e)}),newrelic.noticeError=function(t,e){"string"==typeof t&&(t=new Error(t)),u.recordSupportability("API/noticeError/called"),o("err",[t,f.now(),!1,e])}},{}],17:[function(t,e,n){function r(t){if(NREUM.init){for(var e=NREUM.init,n=t.split("."),r=0;r<n.length-1;r++)if(e=e[n[r]],"object"!=typeof e)return;return e=e[n[n.length-1]]}}e.exports={getConfiguration:r}},{}],18:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],19:[function(t,e,n){var r=!1;try{var i=Object.defineProperty({},"passive",{get:function(){r=!0}});window.addEventListener("testPassive",null,i),window.removeEventListener("testPassive",null,i)}catch(o){}e.exports=function(t){return r?{passive:!0,capture:!!t}:!!t}},{}],20:[function(t,e,n){var r=0,i=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);i&&(r=+i[1]),e.exports=r},{}],21:[function(t,e,n){function r(t,e){var n=[a,t,{name:t},e];return o("storeMetric",n,null,"api"),n}function i(t,e){var n=[s,t,{name:t},e];return o("storeEventMetrics",n,null,"api"),n}var o=t("handle"),a="sm",s="cm";e.exports={constants:{SUPPORTABILITY_METRIC:a,CUSTOM_METRIC:s},recordSupportability:r,recordCustom:i}},{}],22:[function(t,e,n){function r(){return s.exists&&performance.now?Math.round(performance.now()):(o=Math.max((new Date).getTime(),o))-a}function i(){return o}var o=(new Date).getTime(),a=o,s=t(30);e.exports=r,e.exports.offset=a,e.exports.getLastTimestamp=i},{}],23:[function(t,e,n){function r(t){return!(!t||!t.protocol||"file:"===t.protocol)}e.exports=r},{}],24:[function(t,e,n){function r(t,e){var n=t.getEntries();n.forEach(function(t){"first-paint"===t.name?l("timing",["fp",Math.floor(t.startTime)]):"first-contentful-paint"===t.name&&l("timing",["fcp",Math.floor(t.startTime)])})}function i(t,e){var n=t.getEntries();if(n.length>0){var r=n[n.length-1];if(c&&c<r.startTime)return;l("lcp",[r])}}function o(t){t.getEntries().forEach(function(t){t.hadRecentInput||l("cls",[t])})}function a(t){if(t instanceof v&&!g){var e=Math.round(t.timeStamp),n={type:t.type};e<=p.now()?n.fid=p.now()-e:e>p.offset&&e<=Date.now()?(e-=p.offset,n.fid=p.now()-e):e=p.now(),g=!0,l("timing",["fi",e,n])}}function s(t){"hidden"===t&&(c=p.now(),l("pageHide",[c]))}if(!("init"in NREUM&&"page_view_timing"in NREUM.init&&"enabled"in NREUM.init.page_view_timing&&NREUM.init.page_view_timing.enabled===!1)){var c,f,u,d,l=t("handle"),p=t("loader"),h=t(27),m=t(19),v=NREUM.o.EV;if("PerformanceObserver"in window&&"function"==typeof window.PerformanceObserver){f=new PerformanceObserver(r);try{f.observe({entryTypes:["paint"]})}catch(w){}u=new PerformanceObserver(i);try{u.observe({entryTypes:["largest-contentful-paint"]})}catch(w){}d=new PerformanceObserver(o);try{d.observe({type:"layout-shift",buffered:!0})}catch(w){}}if("addEventListener"in document){var g=!1,y=["click","keydown","mousedown","pointerdown","touchstart"];y.forEach(function(t){document.addEventListener(t,a,m(!1))})}h(s)}},{}],25:[function(t,e,n){function r(){function t(){return e?15&e[n++]:16*Math.random()|0}var e=null,n=0,r=window.crypto||window.msCrypto;r&&r.getRandomValues&&(e=r.getRandomValues(new Uint8Array(31)));for(var i,o="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",a="",s=0;s<o.length;s++)i=o[s],"x"===i?a+=t().toString(16):"y"===i?(i=3&t()|8,a+=i.toString(16)):a+=i;return a}function i(){return a(16)}function o(){return a(32)}function a(t){function e(){return n?15&n[r++]:16*Math.random()|0}var n=null,r=0,i=window.crypto||window.msCrypto;i&&i.getRandomValues&&Uint8Array&&(n=i.getRandomValues(new Uint8Array(31)));for(var o=[],a=0;a<t;a++)o.push(e().toString(16));return o.join("")}e.exports={generateUuid:r,generateSpanId:i,generateTraceId:o}},{}],26:[function(t,e,n){function r(t,e){if(!i)return!1;if(t!==i)return!1;if(!e)return!0;if(!o)return!1;for(var n=o.split("."),r=e.split("."),a=0;a<r.length;a++)if(r[a]!==n[a])return!1;return!0}var i=null,o=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var s=navigator.userAgent,c=s.match(a);c&&s.indexOf("Chrome")===-1&&s.indexOf("Chromium")===-1&&(i="Safari",o=c[1])}e.exports={agent:i,version:o,match:r}},{}],27:[function(t,e,n){function r(t){function e(){t(s&&document[s]?document[s]:document[o]?"hidden":"visible")}"addEventListener"in document&&a&&document.addEventListener(a,e,i(!1))}var i=t(19);e.exports=r;var o,a,s;"undefined"!=typeof document.hidden?(o="hidden",a="visibilitychange",s="visibilityState"):"undefined"!=typeof document.msHidden?(o="msHidden",a="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(o="webkitHidden",a="webkitvisibilitychange",s="webkitVisibilityState")},{}],28:[function(t,e,n){function r(t,e){var n=[],r="",o=0;for(r in t)i.call(t,r)&&(n[o]=e(r,t[r]),o+=1);return n}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],29:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,i=n-e||0,o=Array(i<0?0:i);++r<i;)o[r]=t[e+r];return o}e.exports=r},{}],30:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(t,e,n){function r(){}function i(t){function e(t){return t&&t instanceof r?t:t?f(t,c,a):a()}function n(n,r,i,o,a){if(a!==!1&&(a=!0),!p.aborted||o){t&&a&&t(n,r,i);for(var s=e(i),c=m(n),f=c.length,u=0;u<f;u++)c[u].apply(s,r);var l=d[y[n]];return l&&l.push([x,n,r,s]),s}}function o(t,e){g[t]=m(t).concat(e)}function h(t,e){var n=g[t];if(n)for(var r=0;r<n.length;r++)n[r]===e&&n.splice(r,1)}function m(t){return g[t]||[]}function v(t){return l[t]=l[t]||i(n)}function w(t,e){p.aborted||u(t,function(t,n){e=e||"feature",y[n]=e,e in d||(d[e]=[])})}var g={},y={},x={on:o,addEventListener:o,removeEventListener:h,emit:n,get:v,listeners:m,context:e,buffer:w,abort:s,aborted:!1};return x}function o(t){return f(t,c,a)}function a(){return new r}function s(){(d.api||d.feature)&&(p.aborted=!0,d=p.backlog={})}var c="nr@context",f=t("gos"),u=t(28),d={},l={},p=e.exports=i();e.exports.getOrSetContext=o,p.backlog=d},{}],gos:[function(t,e,n){function r(t,e,n){if(i.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(o){}return t[e]=r,r}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){i.buffer([t],r),i.emit(t,e,n)}var i=t("ee").get("handle");e.exports=r,r.ee=i},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,o,function(){return i++})}var i=1,o="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!T++){var t=O.info=NREUM.info,e=v.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return f.abort();c(R,function(e,n){t[e]||(t[e]=n)});var n=a();s("mark",["onload",n+O.offset],null,"api"),s("timing",["load",n]);var r=v.createElement("script");0===t.agent.indexOf("http://")||0===t.agent.indexOf("https://")?r.src=t.agent:r.src=h+"://"+t.agent,e.parentNode.insertBefore(r,e)}}function i(){"complete"===v.readyState&&o()}function o(){s("mark",["domContent",a()+O.offset],null,"api")}var a=t(22),s=t("handle"),c=t(28),f=t("ee"),u=t(26),d=t(23),l=t(17),p=t(19),h=l.getConfiguration("ssl")===!1?"http":"https",m=window,v=m.document,w="addEventListener",g="attachEvent",y=m.XMLHttpRequest,x=y&&y.prototype,b=!d(m.location);NREUM.o={ST:setTimeout,SI:m.setImmediate,CT:clearTimeout,XHR:y,REQ:m.Request,EV:m.Event,PR:m.Promise,MO:m.MutationObserver};var E=""+location,R={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1212.min.js"},S=y&&x&&x[w]&&!/CriOS/.test(navigator.userAgent),O=e.exports={offset:a.getLastTimestamp(),now:a,origin:E,features:{},xhrWrappable:S,userAgent:u,disabled:b};if(!b){t(16),t(24),v[w]?(v[w]("DOMContentLoaded",o,p(!1)),m[w]("load",r,p(!1))):(v[g]("onreadystatechange",i),m[g]("onload",r)),s("mark",["firstbyte",a.getLastTimestamp()],null,"api");var T=0}},{}],"wrap-function":[function(t,e,n){function r(t,e){function n(e,n,r,c,f){function nrWrapper(){var o,a,u,l;try{a=this,o=d(arguments),u="function"==typeof r?r(o,a):r||{}}catch(p){i([p,"",[o,a,c],u],t)}s(n+"start",[o,a,c],u,f);try{return l=e.apply(a,o)}catch(h){throw s(n+"err",[o,a,h],u,f),h}finally{s(n+"end",[o,a,l],u,f)}}return a(e)?e:(n||(n=""),nrWrapper[l]=e,o(e,nrWrapper,t),nrWrapper)}function r(t,e,r,i,o){r||(r="");var s,c,f,u="-"===r.charAt(0);for(f=0;f<e.length;f++)c=e[f],s=t[c],a(s)||(t[c]=n(s,u?c+r:r,i,c,o))}function s(n,r,o,a){if(!h||e){var s=h;h=!0;try{t.emit(n,r,o,e,a)}catch(c){i([c,n,r,o],t)}h=s}}return t||(t=u),n.inPlace=r,n.flag=l,n}function i(t,e){e||(e=u);try{e.emit("internal-error",t)}catch(n){}}function o(t,e,n){if(Object.defineProperty&&Object.keys)try{var r=Object.keys(t);return r.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(o){i([o],n)}for(var a in t)p.call(t,a)&&(e[a]=t[a]);return e}function a(t){return!(t&&t instanceof Function&&t.apply&&!t[l])}function s(t,e){var n=e(t);return n[l]=t,o(t,n,u),n}function c(t,e,n){var r=t[e];t[e]=s(r,n)}function f(){for(var t=arguments.length,e=new Array(t),n=0;n<t;++n)e[n]=arguments[n];return e}var u=t("ee"),d=t(29),l="nr@original",p=Object.prototype.hasOwnProperty,h=!1;e.exports=r,e.exports.wrapFunction=s,e.exports.wrapInPlace=c,e.exports.argsToArray=f},{}]},{},["loader",2,13,4,3]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam-cell.nr-data.net","errorBeacon":"bam-cell.nr-data.net","licenseKey":"0ed0ce50b0","applicationID":"5588594","transactionName":"Y1BRbUUFWkMEWxYMV1oadUxZB0BZClZNCV5ZG0RcVUpDRxIWAxVIRxtHWFBKQlkATxFfeVhXRlREN0FSFVkFABZTUEc=","queueTime":0,"applicationTime":187,"agent":""}</script>
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title aria-live="assertive">Top dream pop albums | Last.fm</title>

        
    <link rel="canonical" href="https://www.last.fm/tag/dream+pop/albums" data-replaceable-head-tag />
    
    
        <link rel="alternate" hreflang="en" href="https://www.last.fm/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="de" href="https://www.last.fm/de/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="es" href="https://www.last.fm/es/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="fr" href="https://www.last.fm/fr/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="it" href="https://www.last.fm/it/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ja" href="https://www.last.fm/ja/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pl" href="https://www.last.fm/pl/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pt" href="https://www.last.fm/pt/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ru" href="https://www.last.fm/ru/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="sv" href="https://www.last.fm/sv/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="tr" href="https://www.last.fm/tr/tag/dream+pop/albums" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="zh" href="https://www.last.fm/zh/tag/dream+pop/albums" data-replaceable-head-tag />
    
    <link rel="alternate" hreflang="x-default" href="https://www.last.fm/tag/dream+pop/albums" data-replaceable-head-tag />


        
            
                
                
                
    <meta name="description" content="Browse the top dream pop albums to find new music and discover artists. Scrobble songs to get recommendations on tracks you might like." data-replaceable-head-tag>

    <meta property="og:title"           content="Top dream pop albums | Last.fm" data-replaceable-head-tag>
    <meta property="og:description"     content="Browse the top dream pop albums to find new music and discover artists. Scrobble songs to get recommendations on tracks you might like." data-replaceable-head-tag>
    <meta property="og:type"            content="website" data-replaceable-head-tag>
    <meta property="og:site_name"       content="Last.fm" data-replaceable-head-tag>
    <meta property="og:url"             content="https://www.last.fm/tag/dream+pop/albums?page=1" data-replaceable-head-tag />
    <meta property="og:image"           content="https://www.last.fm/static/images/lastfm_logo_facebook.15d8133be114.png" data-replaceable-head-tag>
    <meta property="og:image:width"     content="1200" data-replaceable-head-tag>
    <meta property="og:image:height"    content="630" data-replaceable-head-tag>

    <meta name="twitter:title"          content="Top dream pop albums | Last.fm" data-replaceable-head-tag>
    <meta name="twitter:description"    content="Browse the top dream pop albums to find new music and discover artists. Scrobble songs to get recommendations on tracks you might like." data-replaceable-head-tag>
    <meta name="twitter:image"          content="https://www.last.fm/static/images/lastfm_avatar_twitter.52a5d69a85ac.png" data-replaceable-head-tag>
    <meta name="twitter:card"           content="summary" data-replaceable-head-tag>
    <meta name="twitter:site"           content="@lastfm" data-replaceable-head-tag>

    <link rel="apple-music-app-icon" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />
    <link rel="apple-touch-icon-precomposed" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />
    <link rel="apple-touch-icon" href="https://www.last.fm/static/images/lastfm_avatar_applemusic.b06eb8ad89be.png" />

    

            
        

        

        <script>(function(e) { e.className = e.className.replace(/\bno-js\b/,'js'); })(document.documentElement)</script>

        

        
            
<div
    id="initial-tealium-data"
    data-require="tracking/tealium-utag-set"
    data-tealium-data="{&#34;siteSection&#34;: &#34;tag&#34;, &#34;pageType&#34;: &#34;tag_albums&#34;, &#34;pageName&#34;: &#34;tag/albums&#34;, &#34;nativeEventTracking&#34;: true, &#34;userState&#34;: &#34;not authenticated&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;ipGeo&#34;: &#34;BY&#34;}"
    data-tealium-environment="prod"
></div>
        

        <link rel="icon" href="/static/images/favicon.702b239b6194.ico">

        <link rel="stylesheet" href="/static/styles/build/anhv1-defaults-983daa777f.983daa777f56.css" data-stylesheet-name="defaults" charset="utf-8">

        
            <link rel="stylesheet" href="/static/styles/build/app-reduced-68d00b7f46.dc9c3f32b874.css" data-stylesheet-name="app" charset="utf-8">
        

        
    
        <link rel="stylesheet" href="/static/styles/build/tag-a210b3ec04.75a6caafafae.css" data-stylesheet-name="page-specific" charset="utf-8">
    


        <script
            src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js"
            
                data-domain-script="d9f750da-0271-4142-9b0e-43d9a3b334d1"
            
        ></script>

        
            
    
    
        <script async data-main="/static/js-build/init.c9c5f2fe2e74" src="/static/js-build/lib/require/require.f11c08681d1d.js"></script>
    

        

        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
    </head>
    <body
        class="
            
    two-column-layout

            anhv1
            namespace--tag_albums
            
        "
        data-require="ads/page-ads,ads/searchlinks,player/playlink-handler,dev/grid-overlay,dev/toggle-version,dev/debug-log,dev/debug-image-analysis,dev/js-log,dev/ads-toggle,components/link-block,components/ajax-form,core/media-size-events-v2"
        data-player-supported="true"
        data-country-code="BY"
        data-cbsi-player-config="/static/config/video-player.015786d691c2.xml"
        data-sensitive-path-regex="^/(../)?(googlec3ea1b252774e1ab\.html|account_deleted|inbox|join|login|lostpassword(/confirm)?|staff|subscribe|support(?!/images|/shouts|/shout)|settings/(account|website|subscription|password|lostpassword)|user/.+?/support)(/.*)?/?$"
        data-facebook-placement-id="195612451022080_220502155199776"
        data-google-maps-api-key="AIzaSyBX6-IE3lz4PpJUSBVIo_dPb0BAyMgi-VE"
        
            data-onetrust-prod
        
    >
        <div
            data-require="components/loading-indicator"
            data-loading-indicator-copy="Loading…"
        ></div>
        <div
            data-require="components/open-modal,components/submit-to-modal,components/show-alert"
            data-show-alert-ok-copy="Okay"
        ></div>
        

    
        <div class="top-bar">
            
                
                    
    <section
        data-require="player/controls,player/status,player/tracking"
        data-player-status-ad-playing="Ad playing"
        data-player-status-inactive="&nbsp;"
        data-player-status-loading-spotify="Connecting Spotify…"
        data-player-status-spotify-auth-error="Could not authenticate with Spotify."

        data-player-error-cannot-play-item="Cannot play that item."
        data-player-error-track-unavailable="Track unavailable."
        data-player-modal-title="Play video"

        

        class="
            player-bar
            inactive
        "
        aria-label="audio player"
        aria-disabled="true"
    >
        <div class="player-bar-inner-wrap">
            <a class="player-bar-artwork js-artwork">
                <img class="" src="/static/images/defaults/player_default_album.430223706b14.png" alt="" loading="lazy"/>
            </a>

            <span class="
                player-bar-source
                player-bar-source--spotify
            ">Playing via Spotify</span>

            <span class="
                player-bar-source
                player-bar-source--youtube
            ">Playing via YouTube</span>

            <div class="source-info">
                <button
                    class="player-bar-playback-options-button"
                    data-disclose-hover
                    aria-controls="player-bar-playback-options"
                >
                    Playback options
                </button>
                <div
                    id="player-bar-playback-options"
                    class="
                        player-bar-playback-options-wrap
                        disclose-hide
                    "
                >
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-spotify
                    ">
                        <li class="dropdown-menu-non-interactive-item-dark">
                            <span class="player-bar-listening-on-heading">Listening on…</span>
                            <span class="
                                player-bar-listening-on
                                js-player-bar-listening-on
                            "></span>
                        </li>
                        <li><button class="
                            dropdown-menu-item-dark
                            js-switch-device
                            player-bar-playback-options-switch-device
                        ">Switch Spotify device</button></li>
                        <li><a
                            class="
                                js-source
                                dropdown-menu-item-dark
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open in Spotify Web Player</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-youtube
                    ">
                        <li><a
                            class="
                                dropdown-menu-item-dark
                                js-source
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open on YouTube website</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                </div>
            </div>

            

            <div class="player-bar-controls">

                <ul aria-label="controls" class="media-controls">
                    <li>
                        <button
                            disabled
                            class="
                                js-previous
                                player-bar-btn
                                player-bar-btn--previous
                            "
                            data-analytics-action="PlaybarBackTrack"
                        >
                            Previous
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-play-pause
                                player-bar-btn
                                player-bar-btn--play
                            "
                            data-string-pause="Pause"
                            data-analytics-action="PlaybarResumeTrack"
                            data-analytics-action-pause="PlaybarPauseTrack"
                        >
                            Play
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-next
                                player-bar-btn
                                player-bar-btn--next
                            "
                            data-analytics-action="PlaybarSkipTrack"
                        >
                            Next
                        </button>
                    </li>
                    
                </ul>

                <a class="
                        player-bar-skiplink
                        player-bar-skiplink--youtube
                    "
                    href="#youtube-video"
                >Skip to YouTube video</a>

            </div>

            <div class="player-bar-now-playing">
                <div class="player-bar-now-playing-inner-wrap">
                    <p
                        class="player-bar-track js-player-status"
                        aria-label="now playing"
                        aria-live="polite"
                        aria-atomic="true"
                    >
                        Loading player…
                    </p>

                    <p class="player-bar-error js-player-error player-bar-status--hide">
                        <span class="player-bar-error-message js-player-error-message"></span>
                    </p>
                </div>
            </div>
        </div>

        
        <div class="player-bar-progress-wrap">
            <div
                class="player-bar-progress"
                aria-label="progress"
                role="timer"
            >
                <div
                    class="
                        js-progress-slug
                        player-bar-progress-slug
                    "
                >
                    <span
                        class="
                            js-progress-remaining
                            player-bar-progress-remaining
                        "
                        aria-label="remaining"
                    ></span>
                </div>
            </div>
        </div>

        <div data-require="player/scrobble-client"></div>
    </section>

                    
    <div
        class="
            masthead-popup
            masthead-popup--spotify-scrobbling
            masthead-popup--hidden
        "
        data-require="components/spotify-scrobbling-prompt,components/alert-dismissable,components/spotify-scrobbling-banner"
        data-spotify-scobbling-success-modal="/socialmodal/spotify-scrobbling-success"
        data-spotify-scobbling-fail-modal="/socialmodal/spotify-scrobbling-fail"
    >
        <div class="masthead-popup-inner">
            <h3>Scrobble from Spotify?</h3>
            <p>Connect your Spotify account to your Last.fm account and scrobble everything you listen to, from any Spotify app on any device or platform.</p>
            <p>
                <a
                    class="btn-primary js-setup-spotify-scrobbling"
                    href="/settings/applications"
                >
                    Connect to Spotify
                </a>
            </p>
            <a
                href="/nagbar/dismiss/spotify-scrobbling-prompt?period=permanent"
                class="masthead-popup-close js-alert-dismissable-close"
                data-close-ajax
            >
                Dismiss
            </a>
        </div>
    </div>

                
            
        </div>
    

    <div id="content" class="main-content" role="main" aria-live="polite">
        
    

    <div id="tlmdata" hidden class="hidden"
         data-tealium-data='{&#34;siteSection&#34;: &#34;tag&#34;, &#34;pageType&#34;: &#34;tag_albums&#34;, &#34;pageName&#34;: &#34;tag/albums&#34;, &#34;nativeEventTracking&#34;: true, &#34;userState&#34;: &#34;not authenticated&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;ipGeo&#34;: &#34;BY&#34;}'>
     </div>

        <div
            
                
            
            
            >
            
    <div
        data-require="components/disclose-base,components/disclose-autoclose-v2,components/disclose-dropdown-v2,components/disclose-dropdown-location-picker-v2,components/disclose-collapsing-nav-v2,components/disclose-artwork,components/disclose-remove,components/disclose-search,components/disclose-hover-v3,components/disclose-select,components/disclose-lazy-buylinks,components/focus-controls,components/prevent-resubmit-v2,components/edit-scrobble,components/toggle-buttons,components/click-proxy,components/bookmark-notification,components/tourguide"
    ></div>

    
        

    <nav class="masthead"><div class="masthead-inner-wrap"><div class="masthead-logo"><span class="masthead-logo-loading"></span><a href="/"> Last.fm</a></div><a
        class="masthead-search-toggle" href="/search" data-disclose-search aria-controls="masthead-search">Search</a><form
        class=" masthead-search-form disclose-hide disclose-hide--js-only " id="masthead-search" action="/search" method="get"><div class="masthead-search-inner-wrap"><label for="masthead-search-field" class="sr-only">Search</label><input
                id="masthead-search-field" class="masthead-search-field" type="text" name="q" placeholder="Search for music…" /><button class="masthead-search-submit" type="submit">Search</button></div></form><div class="visible-xs"><button
                        class=" masthead-hamburger-toggle " data-disclose-autoclose aria-controls="masthead-nav">Toggle navigation</button><ul
                        class=" masthead-nav disclose-hide disclose-hide--js-only " aria-label="Primary navigation" id="masthead-nav"><li class="masthead-nav-item masthead-nav-pro"><a
                class="masthead-nav-control masthead-pro-text" href="/pro" data-analytics-label="subscribe" data-analytics-action="UserMenuClick">Upgrade to Pro</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/charts" data-analytics-action="NavigationLink" data-analytics-label="charts">Charts</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li>
    
        
            <li class="masthead-nav-item">
                <a
                    class="masthead-nav-control"
                    href="/pro"
                    data-analytics-label="subscribe"
                    data-analytics-action="UserMenuClick"
                >Subscribe</a>
            </li>
        
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="/login"
            >Log In</a>
        </li>
        <li class="masthead-nav-item masthead-nav-join">
            <a
                class="btn-secondary
                    join-cta-button"
                href="/join"
                data-analytics-action="SignUpClick"
            >Sign Up</a>
        </li>
    
</ul></div><div
                    class=" navlist navlist--more masthead-nav hidden-xs " data-require="components/primary-nav" data-more-string="More…"><ul
                        class="js-navlist-items navlist-items" aria-label="Primary navigation"><li class="masthead-nav-item masthead-nav-pro"><a
                class="masthead-nav-control masthead-pro-text" href="/pro" data-analytics-label="subscribe" data-analytics-action="UserMenuClick">Upgrade to Pro</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/charts" data-analytics-action="NavigationLink" data-analytics-label="charts">Charts</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li></ul></div><ul
            class=" site-auth site-auth--anon hidden-xs ">
    <li class="site-auth-item"><a
                class="site-auth-control" href="/login">Log In</a></li><li class="site-auth-item"><a
                class="site-auth-control btn-secondary join-cta-button" href="/join" data-analytics-action="SignUpClick">Sign Up</a></li>
</ul></div></nav>

    

    

    
    <div
        class=""
        data-require="components/language-prompt"
        data-lazy-load-content="/nagbar/language-prompt"
    >
    </div>


    

    

    
    


    
    


    
    


    

    

    
    <div
        class="nag-bar nag-bar--plybar-masthead-release-warning "
        
        
        role="status"
    >
        <div class="container">
            
            <p class="nag-bar-message ">
                
        A new version of Last.fm is available, to keep everything running smoothly, please <a href="javascript:window.location.reload()">reload</a> the site.
    
            </p>
        </div>
    </div>


    

    

    
    
    <div id="redirect-bar" data-require="core/redirect-bar">
        <script id="redirect-bar-data" type="application/json">
            {
                "content": {
                    "redirect": "Redirected from {link}."
                },
                
                    "overlayColor": null
                
            }
        </script>
        <redirect-bar></redirect-bar>
    </div>

    
        
    


    
    




    
    

    <header class="
        header
        
        
            header--sub-page
        
        
            header--tag
        
        
    ">
        
            <div
                class="
                    header-background
                    header-background--has-image
                "
                style="background-image: url(https://lastfm.freetls.fastly.net/i/u/ar0/7a743d1c236649e4c9c3ee5d79f5af68.jpg);"
            ></div>
        

        
    
    <div
        class="
            recommended-next-page-container
            recommended-next-page-container--desktop-expanded
            recommended-next-page-container--mobile-hidden
        "
        data-require="components/recommended-next-page">
        
    
    <div class="js-link-block recommended-next-page recommended-next-page--tag">
        <img src="https://lastfm.freetls.fastly.net/i/u/avatar70s/dc3c775e076d40cac0124c80b258365c.jpg" class="recommended-next-page-image" alt="" loading="lazy"/>
        <div class="recommended-next-page-details">
            <h4 class="recommended-next-page-title">
                Recommended next
            </h4>
            
                <a href="/tag/female+vocalists" class="link-block-target recommended-next-page-name-unified">female vocalists</a>
                <a href="/tag/female+vocalists" class="link-block-target recommended-next-page-name">female vocalists</a>
            
        </div>
        <span class="recommended-next-button"></span>
        <a
            class="js-link-block-cover-link recommended-next-page-cover-link"
            href="/tag/female+vocalists"
            tabindex="-1"
            aria-hidden="true"
            data-analytics-action="RecommendedNextClick"
            ></a>
    </div>
    

    </div>
    


        <div class="container">
            <div class="header-inner-wrap">
                
                <div class="header-info">
                    
    <div class="header-info-primary header-info-primary--with-columns">
        
    
        
    
    <section class="share-mobile">
        <button
            aria-controls="share-d5c0e979-a5d2-4acd-994c-966097bbddc0"
            aria-expanded="false"
            data-disclose-dropdown
            data-dropdown-layout-at="center bottom+5"
            class="
                disclose-trigger
                share-button
            "
            data-analytics-action="ShareShowOptions"
        >
            Share…
        </button>

        <div
            id="share-d5c0e979-a5d2-4acd-994c-966097bbddc0"
            class="
                disclose-hide
                disclose-hide--js-only
                share-block
            "
        >
            
            
    <h2 class="share-heading">
        
            Share this tag:
        
    </h2>

            
    
    
    

    <ul class="share-options">
        <li class="share-option ">
            <a
                href="https://www.facebook.com/sharer/sharer.php?ref=facebooklink&amp;u=https://www.last.fm/tag/dream%2Bpop/albums?page=1"
                data-analytics-social="2"
                target="_blank"
            >
                <img src="/static/images/icons/facebook.e0cc15e8e1d2.svg" alt="Facebook"></a>
            </a>
        </li>
        <li class="share-option ">
            <a
                href="https://twitter.com/intent/tweet?url=https://www.last.fm/tag/dream%2Bpop/albums?page=1&amp;via=lastfm&amp;lang=en&amp;text=Check+out+dream+pop"
                data-analytics-social="8"
                target="_blank"
            >
                <img src="/static/images/icons/twitter.841d4ebdbe86.svg" alt="Twitter"></a>
            </a>
        </li>
    </ul>

        
        </div>
    </section>

    


        <div class="header-info-primary-col1">
            <div class="header-title-column-ellipsis-wrap">
                <h1 class="header-title"><a href="/tag/dream+pop">Dream pop music</a></h1>
            </div>

            
    
        
    <nav
        class="
            
                navlist
            
            secondary-nav
            
                navlist--more
            
            
        "
        aria-label="Secondary navigation"
        
            data-require="components/collapsing-nav-v2"
            data-more-string="More…"
        
    >
        <ul class="navlist-items js-navlist-items">
            <li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--overview
                        
                    "
                    
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop"
                            
                        >
                            Overview
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--artists
                        
                    "
                    
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/artists"
                            
                        >
                            Artists
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--albums
                        
                    "
                    
                ><a
                            class="
                                secondary-nav-item-link
                                
                                    secondary-nav-item-link--active
                                
                            "
                            href="/tag/dream+pop/albums"
                            
                        >
                            Albums
                            
                                <span class="sr-only">(current section)</span>
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--tracks
                        
                    "
                    
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/tracks"
                            
                        >
                            Tracks
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--wiki
                        
                    "
                    
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/wiki"
                            
                        >
                            Wiki
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--shoutbox
                        
                    "
                    
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/tag/dream+pop/shoutbox"
                            
                        >
                            Shouts
                            
                        </a></li>
        </ul>
    </nav>

    

        </div>
    </div>

                </div>
            </div>
        </div>
    </header>



    
    <div id="mantle_skin" class="adaptive-skin-container">
        <div class="adaptive-skin-wrapper">
            <div id="adSkinLeft" class="adaptive-skin-left"></div>
            <div id="adSkinRight" class="adaptive-skin-right"></div>
        </div>
        
    
        
        
        
    


        

        
    <div class="content-top">
        <div class="content-top-inner-wrap">
            
                
    
        
        
            <div id="leader_plus_top" data-ad="leader_plus_top" class="leader_plus_top lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;leader_plus_top&#34;, &#34;sizes&#34;: [[728, 90], [970, 66], [970, 250], [728, 91]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
    

                
                    
    
        
        
            <div id="mobile_pos_1" data-ad="mobile_pos_1" class="mobile_pos_1 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_1&#34;, &#34;sizes&#34;: [[300, 250], [320, 50]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;1&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mobile_pos_1">
                Don't want to see ads? <a href="/pro" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Upgrade Now</a>
            </p>
        
    

                
            

            <div class="container content-top-lower">
                
                    


                

                

                
                    
                        <h1 class="content-top-header">
                            
    Dream Pop Albums

                        </h1>
                    
                

                

                
            </div>
        </div>
    </div>


        
    <div class="container page-content">
        
    <div class="row">
        <div class="col-main">
            
                <section id="artist-albums-section">
                    
    

    
    
    
    <ol
        class="
            
            resource-list--release-list
            resource-list--release-list--with-20
        "
        
    >
        
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Lana+Del+Rey/Honeymoon"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Honeymoon</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Lana+Del+Rey"
            
            
                itemprop="url"
            
        >Lana Del Rey</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            470,837 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                17 Sep 2015 ·
                14 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/0256f9c7068d0edb75a477c596cc9787.jpg"
            alt="Honeymoon"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Lana+Del+Rey/Honeymoon"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-53193858-1ff4-4e93-ace0-68b632e02b5d"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Lana+Del+Rey/Honeymoon/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-53193858-1ff4-4e93-ace0-68b632e02b5d"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Lana+Del+Rey/Honeymoon"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Lana+Del+Rey/Paradise"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Paradise</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Lana+Del+Rey"
            
            
                itemprop="url"
            
        >Lana Del Rey</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            257,990 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                1 Jan 2012 ·
                8 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/76106f63a6085261f65c81a5d41a3292.jpg"
            alt="Paradise"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Lana+Del+Rey/Paradise"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-d964555f-cc1f-4039-8e94-16e4a08cead5"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Lana+Del+Rey/Paradise/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-d964555f-cc1f-4039-8e94-16e4a08cead5"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Lana+Del+Rey/Paradise"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Slowdive/Souvlaki"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Souvlaki</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Slowdive"
            
            
                itemprop="url"
            
        >Slowdive</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            633,000 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                17 May 1993 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/1863c131c717666e030c94880e1cce53.jpg"
            alt="Souvlaki"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Slowdive/Souvlaki"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-234f1925-84af-4122-b230-fb0c41ec7be8"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/Souvlaki/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-234f1925-84af-4122-b230-fb0c41ec7be8"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Slowdive/Souvlaki"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Cocteau+Twins/Treasure"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Treasure</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Cocteau+Twins"
            
            
                itemprop="url"
            
        >Cocteau Twins</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            317,354 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                1 Oct 1984 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/bb7f92b9de169391e0878d4b561b0df6.jpg"
            alt="Treasure"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Cocteau+Twins/Treasure"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-79f92fd2-5071-4fdf-b742-718989b4c6b5"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/Treasure/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-79f92fd2-5071-4fdf-b742-718989b4c6b5"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Cocteau+Twins/Treasure"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Navigatoria"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Navigatoria</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
            
            
                itemprop="url"
            
        >志方あきこ</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            4,652 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                20 Jul 2005 ·
                11 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/6df0a419239ec0247be760f6d0f7e522.jpg"
            alt="Navigatoria"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Navigatoria"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-8141fc8c-f50f-4d60-b8c4-48008a70fd93"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Navigatoria/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-8141fc8c-f50f-4d60-b8c4-48008a70fd93"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Navigatoria"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/My+Bloody+Valentine/Loveless"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Loveless</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                itemprop="url"
            
        >My Bloody Valentine</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            906,359 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                25 Oct 1991 ·
                11 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/467b54c386768879438fecb9071076f4.jpg"
            alt="Loveless"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/My+Bloody+Valentine/Loveless"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-d98598e6-2c15-4158-9157-4f1571ebe15d"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/Loveless/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-d98598e6-2c15-4158-9157-4f1571ebe15d"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/My+Bloody+Valentine/Loveless"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Raka"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Raka</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
            
            
                itemprop="url"
            
        >志方あきこ</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            5,418 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                25 Oct 2006 ·
                12 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/415f18b3061fc9d355684d303067a809.jpg"
            alt="Raka"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Raka"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-a82f85a9-d6c0-4af1-85cd-aaf68dcf1ea3"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Raka/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-a82f85a9-d6c0-4af1-85cd-aaf68dcf1ea3"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/Raka"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Cocteau+Twins/Heaven+or+Las+Vegas"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Heaven or Las Vegas</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Cocteau+Twins"
            
            
                itemprop="url"
            
        >Cocteau Twins</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            337,546 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                21 Aug 1990 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/1ae3a307f2474312809a4867b56139ed.jpg"
            alt="Heaven or Las Vegas"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Cocteau+Twins/Heaven+or+Las+Vegas"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-b3ca83a1-f7f4-49fa-be61-ee4542eb8859"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/Heaven+or+Las+Vegas/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-b3ca83a1-f7f4-49fa-be61-ee4542eb8859"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Cocteau+Twins/Heaven+or+Las+Vegas"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Beach+House/Teen+Dream"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Teen Dream</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Beach+House"
            
            
                itemprop="url"
            
        >Beach House</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            884,896 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                22 Jan 2010 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/f59aa166434c40f5ad86167435c6e469.jpg"
            alt="Teen Dream"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Beach+House/Teen+Dream"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-129f788e-5e22-4f22-806f-a0e5ab14fa88"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/Teen+Dream/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-129f788e-5e22-4f22-806f-a0e5ab14fa88"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Beach+House/Teen+Dream"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Beach+House/Bloom"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Bloom</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Beach+House"
            
            
                itemprop="url"
            
        >Beach House</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            632,952 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                11 May 2012 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/90ff02d4495f4c50a1b7b2a64798d892.jpg"
            alt="Bloom"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Beach+House/Bloom"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-01c613bc-55a3-4883-bdfc-8ec4b0748251"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Beach+House/Bloom/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-01c613bc-55a3-4883-bdfc-8ec4b0748251"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Beach+House/Bloom"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Slowdive/Pygmalion"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Pygmalion</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Slowdive"
            
            
                itemprop="url"
            
        >Slowdive</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            208,320 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                6 Feb 1995 ·
                9 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/17ebb43f28ab48318e2937bd8915f96c.jpg"
            alt="Pygmalion"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Slowdive/Pygmalion"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-477d0005-8984-4a8c-84cb-71db92ae5cb6"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/Pygmalion/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-477d0005-8984-4a8c-84cb-71db92ae5cb6"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Slowdive/Pygmalion"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Slowdive/Just+for+a+Day"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Just for a Day</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Slowdive"
            
            
                itemprop="url"
            
        >Slowdive</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            235,896 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                2 Sep 1991 ·
                9 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/6d2bde846a5933b29985d754166cee18.jpg"
            alt="Just for a Day"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Slowdive/Just+for+a+Day"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-4a985330-707e-4d19-8e8b-3672c5559504"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Slowdive/Just+for+a+Day/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-4a985330-707e-4d19-8e8b-3672c5559504"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Slowdive/Just+for+a+Day"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Mazzy+Star/So+Tonight+That+I+Might+See"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >So Tonight That I Might See</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Mazzy+Star"
            
            
                itemprop="url"
            
        >Mazzy Star</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            777,858 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                1 Jan 1993 ·
                10 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/60615ead3d8383e70e84a526817de4bf.jpg"
            alt="So Tonight That I Might See"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Mazzy+Star/So+Tonight+That+I+Might+See"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-20b9b482-2363-4fa7-929e-bd1dca133705"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Mazzy+Star/So+Tonight+That+I+Might+See/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-20b9b482-2363-4fa7-929e-bd1dca133705"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Mazzy+Star/So+Tonight+That+I+Might+See"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Cocteau+Twins/Victorialand"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Victorialand</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Cocteau+Twins"
            
            
                itemprop="url"
            
        >Cocteau Twins</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            120,192 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                Feb 1986 ·
                9 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/ccea1413b56cac21fc3accc4630de86b.jpg"
            alt="Victorialand"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Cocteau+Twins/Victorialand"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-0f0a635a-3a53-4fdb-8de9-5dd4f290c2fa"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Cocteau+Twins/Victorialand/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-0f0a635a-3a53-4fdb-8de9-5dd4f290c2fa"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Cocteau+Twins/Victorialand"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/caTra"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >caTra</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93"
            
            
                itemprop="url"
            
        >志方あきこ</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            248 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                10 Apr 2016 ·
                5 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/0128d00bf9225afbbc99433245efe19b.jpg"
            alt="caTra"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/caTra"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-10d77138-edc5-4195-9302-33d5c06f7c1d"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/caTra/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-10d77138-edc5-4195-9302-33d5c06f7c1d"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/%E5%BF%97%E6%96%B9%E3%81%82%E3%81%8D%E3%81%93/caTra"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Grimes/Visions"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Visions</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Grimes"
            
            
                itemprop="url"
            
        >Grimes</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            879,231 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                20 Feb 2012 ·
                13 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/94cfdb5f36a7f935b6837f5fe8840ed6.jpg"
            alt="Visions"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Grimes/Visions"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-a3fbda6a-2fed-4bae-8e00-b71c8c8d1c85"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Grimes/Visions/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-a3fbda6a-2fed-4bae-8e00-b71c8c8d1c85"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Grimes/Visions"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/My+Bloody+Valentine/Isn%27t+Anything"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Isn&#39;t Anything</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/My+Bloody+Valentine"
            
            
                itemprop="url"
            
        >My Bloody Valentine</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            316,121 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                1 Nov 1988 ·
                12 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/ae3d658e6a77d40a24dba212f1d65916.jpg"
            alt="Isn&#39;t Anything"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/My+Bloody+Valentine/Isn%27t+Anything"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-55c2e31e-790a-488c-8d92-b6612b2a689a"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/My+Bloody+Valentine/Isn%27t+Anything/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-55c2e31e-790a-488c-8d92-b6612b2a689a"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/My+Bloody+Valentine/Isn%27t+Anything"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Lana+Del+Rey/Born+to+Die+-+The+Paradise+Edition"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Born to Die - The Paradise Edition</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Lana+Del+Rey"
            
            
                itemprop="url"
            
        >Lana Del Rey</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            998,630 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                1 Jan 2012 ·
                24 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/8c5a9f54785f4f928037fc1be53d375f.jpg"
            alt="Born to Die - The Paradise Edition"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Lana+Del+Rey/Born+to+Die+-+The+Paradise+Edition"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-07c9bff3-b735-4b19-8e8b-63d0251e37fa"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Lana+Del+Rey/Born+to+Die+-+The+Paradise+Edition/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-07c9bff3-b735-4b19-8e8b-63d0251e37fa"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Lana+Del+Rey/Born+to+Die+-+The+Paradise+Edition"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Sandy+Leah/Sim"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >Sim</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Sandy+Leah"
            
            
                itemprop="url"
            
        >Sandy Leah</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            10,942 listeners
        </p>
    

        

        

        

        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/fe5cc8b991c96362703d9577e6963a03.jpg"
            alt="Sim"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-ef59ae40-52ad-46e7-a062-feb4c517b1b1"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Sandy+Leah/Sim/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-ef59ae40-52ad-46e7-a062-feb4c517b1b1"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Sandy+Leah/Sim"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
                
            

            
        
    
    <li
        class="
            resource-list--release-list-item-wrap
            
            
        "
        itemscope
        itemtype="http://schema.org/MusicAlbum"
        
        
    >
        <div
            class="
                resource-list--release-list-item
                js-link-block
                link-block
            "
        >
            

            
            
        
        
        
        
        
        
            
        

        
    <h3 class="resource-list--release-list-item-name" itemprop="name">
        <a
            href="/music/Loreena+McKennitt/The+Book+Of+Secrets"
            
            
                itemprop="url"
            
                class="link-block-target"
            
        >The Book Of Secrets</a>
    </h3>


        
    
        
            <p
                class="resource-list--release-list-item-artist"
                itemscope
                itemprop="byArtist"
                itemtype="http://schema.org/MusicGroup"
            >
                <span itemprop="name">
                    <a
            href="/music/Loreena+McKennitt"
            
            
                itemprop="url"
            
        >Loreena McKennitt</a>
                </span>
            </p>
        
    


        

        
            
    
    
        <p class="resource-list--release-list-item-aux-text resource-list--release-list-item-listeners">
            190,772 listeners
        </p>
    

        

        

        

        
            <p class="resource-list--release-list-item-aux-text">
                
                30 Sep 1997 ·
                8 tracks
            </p>
        

        
    <div class="media-item ">
        
    
    
        
    
        
    

    

    

    
        <span class="resource-list--release-list-item-image cover-art">
    

    
        <img
            src="https://lastfm.freetls.fastly.net/i/u/300x300/6ca9fc0cee3e603cd41f37fdcb7caf6c.jpg"
            alt="The Book Of Secrets"
            itemprop="image"
            loading="lazy"
        />
    

    
        </span>
    

        
    
        
    

    
        <button
            class="
                resource-list--release-list-item-playlink
                js-playlink-station
                desktop-playlink
            "
            data-station-url="/player/station/music/Loreena+McKennitt/The+Book+Of+Secrets"
            title="Play album"
            data-analytics-action="PlayAlbumOnPage"
            >
            Play album
        </button>
    

    

    
        <div class="lazy-buylinks resource-list--release-list-buylinks">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-f102e996-23c5-44ae-b94a-c97b91997e76"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Loreena+McKennitt/The+Book+Of+Secrets/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-f102e996-23c5-44ae-b94a-c97b91997e76"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    

    </div>


    
        

            
                
                
    <a
        href="/music/Loreena+McKennitt/The+Book+Of+Secrets"
        class="
            js-link-block-cover-link
            link-block-cover-link
        "
        tabindex="-1"
        aria-hidden="true"
    ></a>

            
        </div>
    </li>

    
            
    </ol>




                </section>
            
            
    
        

        

        <nav class="pagination">
            <h2 class="sr-only">Pagination</h2>

            <ul class="pagination-list">
                
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                            aria-current="page"
                        
                    >
                        
                            
                               <span>1</span>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=2">2</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=3">3</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=4">4</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                                pagination-page--hide-mobile
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=5">5</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                                pagination-page--hide-mobile
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=6">6</a>
                            
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                                pagination-page--ellipsis
                            
                        "
                        
                    >
                        
                            <span>…</span>
                        
                    </li>
                
                    <li
                        class="
                            pagination-page
                            
                            
                            
                        "
                        
                    >
                        
                            
                                <a href="?page=50">50</a>
                            
                        
                    </li>
                
                
                    <li class="pagination-next" data-pagination-next-link>
                        <a href="?page=2">Next</a>
                    </li>
                
            </ul>
        </nav>
    

        </div>
        <div class="col-sidebar">
            
    

    

    
    


    

    
    
        
        
            <div id="mpu_plus_top" data-ad="mpu_plus_top" class="mpu_plus_top lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;mpu_plus_top&#34;, &#34;sizes&#34;: [[300, 250], [300, 600]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mpu">
                Don't want to see ads? <a href="/pro" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Upgrade Now</a>
            </p>
        
    


    

    
        
    
        <div
            class="
                tonefuze
                
                    tonefuze--desktop
                    hidden-xs
                
                
                
            "
            data-require="
                ads/tonefuze
                
            "

            
                id="tonefuze-desktop"
                data-tonefuze-id=100000054
            

            
                
                data-tonefuze-artist="Lana Del Rey"
            

            data-tonefuze-flex="False"
        >
            
        </div>
    

    

    
        
    
        <div
            class="
                tonefuze
                
                    tonefuze--mobile
                    visible-xs
                
                
                
            "
            data-require="
                ads/tonefuze
                
            "

            
                id="tonefuze-mobile"
                data-tonefuze-id="100000055"
            

            
                
                data-tonefuze-artist="Post Malone"
            

            data-tonefuze-flex="False"
        >
            
        </div>
    

    

    
    
        <section class="share-desktop">
            
    <h2 class="share-heading">
        
            Share this tag:
        
    </h2>

            
    
    
    

    <ul class="share-options">
        <li class="share-option ">
            <a
                href="https://www.facebook.com/sharer/sharer.php?ref=facebooklink&amp;u=https://www.last.fm/tag/dream%2Bpop/albums?page=1"
                data-analytics-social="2"
                target="_blank"
            >
                <img src="/static/images/icons/facebook.e0cc15e8e1d2.svg" alt="Facebook"></a>
            </a>
        </li>
        <li class="share-option ">
            <a
                href="https://twitter.com/intent/tweet?url=https://www.last.fm/tag/dream%2Bpop/albums?page=1&amp;via=lastfm&amp;lang=en&amp;text=Check+out+dream+pop"
                data-analytics-social="8"
                target="_blank"
            >
                <img src="/static/images/icons/twitter.841d4ebdbe86.svg" alt="Twitter"></a>
            </a>
        </li>
    </ul>

        </section>
    


    

        
    


        
    

        
    <div class="related-ads">
            <div
                
                    data-searchlinks-desktop
                
            ></div>
        </div>


    

    
    
    
        
        
            <div id="mpu_bottom" data-ad="mpu_bottom" class="mpu_bottom lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;mpu_bottom&#34;, &#34;sizes&#34;: [[300, 250]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}}'></div>
        
        
    


        </div>
    </div>

    </div>


        


        
    <div class="container">
        
    
        
        
            <div id="leader_bottom" data-ad="leader_bottom" class="leader_bottom lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;leader_bottom&#34;, &#34;sizes&#34;: [[728, 90], [970, 66], [728, 92]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}}'></div>
        
        
    

    </div>


        
            <div class="container page-content visible-xs">
                
    <div class="related-ads">
            <div
                
                    data-searchlinks-mobile
                
            ></div>
        </div>

            </div>
        
    </div>

    <div id="qa-page-load"></div>

    
    
        
            
    
    
    
    <div
        class="lazy-features-footer"
        data-require="components/lazy-load-v3"
        data-lazy-load-content="/features/partial/footer"
        data-lazy-load-when-on-screen
        data-lazy-load-inverted-bg
    ></div>

        
    


    
    <footer class="footer" itemscope itemtype="http://schema.org/Organization">
        <link itemprop="url" href="https://www.last.fm">

        <div class="footer-top">
            <div class="container">
                <div class="footer-top-row">
                    <div class="footer-top-col">
                        <h2 class="footer-heading">Company</h2>
                        <ul class="footer-links">
                            <li><a href="/about">About Last.fm</a></li>
                            <li><a href="/about/contact">Contact Us</a></li>
                            <li><a href="/about/jobs">Jobs</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Help</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Track My Music</a></li>
                            
                                <li><a href="https://support.last.fm/" target="_BLANK">Community Support</a></li>
                            
                            <li><a href="/help/guidelines">Community Guidelines</a></li>
                            
                                <li><a href="/help/faq" target="_BLANK">Help</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Goodies</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Download Scrobbler</a></li>
                            <li><a href="/api">Developer API</a></li>
                            <li><a href="/music/+free-music-downloads">Free Music Downloads</a></li>
                            <li><a href="https://store.last.fm">Merchandise</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Account</h2>
                        <ul class="footer-links">
                            
                                <li><a href="/join">Sign Up</a></li>
                                <li><a href="/login">Log In</a></li>
                                <li><a href="/pro">Subscribe</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Follow Us</h2>
                        <ul class="footer-links">
                            <li><a itemprop="sameAs" target="_blank" href="https://www.facebook.com/lastfm">Facebook</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://twitter.com/lastfm">Twitter</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.instagram.com/last_fm">Instagram</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.youtube.com/user/lastfm">YouTube</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-xs-12 col-sm-9">
                        <ul id="language-selector">
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                            footer-language--active
                                        
                                    "
                                >
                                    
                                        <strong>English</strong><span class="sr-only">current language</span>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="de" />
                                            <button class="mimic-link" name="de" type="submit">Deutsch</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="es" />
                                            <button class="mimic-link" name="es" type="submit">Español</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="fr" />
                                            <button class="mimic-link" name="fr" type="submit">Français</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="it" />
                                            <button class="mimic-link" name="it" type="submit">Italiano</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="ja" />
                                            <button class="mimic-link" name="ja" type="submit">日本語</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="pl" />
                                            <button class="mimic-link" name="pl" type="submit">Polski</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="pt" />
                                            <button class="mimic-link" name="pt" type="submit">Português</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="ru" />
                                            <button class="mimic-link" name="ru" type="submit">Русский</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="sv" />
                                            <button class="mimic-link" name="sv" type="submit">Svenska</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="tr" />
                                            <button class="mimic-link" name="tr" type="submit">Türkçe</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type="hidden" name="language" value="zh" />
                                            <button class="mimic-link" name="zh" type="submit">简体中文</button>
                                        </form>
                                    
                                </li>
                            
                        </ul>
                        
                        <p class="footer-timezone">
                            
                                <span 
                                    data-require="components/lazy-load-v3"
                                    data-lazy-load-content="/timezone"
                                    data-lazy-load-error-message="Timezone could not be loaded, try reloading the page."
                                >

                                </span>
                            
                        </p>

                        <div class="footer-legal">
                            <ul>
                                <li class="footer-legal-item"><a rel="nofollow" href="http://www.cbsinteractive.com/">CBS Interactive</a> © 2021 <span itemprop="name">Last.fm</span> Ltd. All rights reserved</li>
                                <li class="footer-legal-item"><a href="/legal/terms">Terms of Use</a></li>
                                <li class="footer-legal-item"><a href="/legal/privacy">Privacy Policy</a></li>
                                <li class="footer-legal-item"><a href="/legal">Legal Policies</a></li>
                                
                                    <li class="footer-legal-item"><a href="/legal/cookies">Cookies Policy</a></li>
                                    <li class="footer-legal-item"><a href="https://www.viacomcbsprivacy.com/donotsell">Do Not Sell My Personal Information</a></li>
                                
                                <li class="footer-legal-item"><a target="_blank" href="https://careers.viacomcbs.com/">Jobs at ViacomCBS</a></li>
                                <li class="footer-legal-item"><a rel="nofollow" href="http://www.last.fm">Last.fm Music</a></li>
                            </ul>
                            
                        </div>
                    </div>


                    <div class="logo col-xs-12 col-sm-3">
                        <p>Audioscrobbler</p>
                        <img src="/static/images/footer_logo@2x.49ca51948b0a.png"
                             width="37"
                             height="20"
                             alt="Last.fm 'as' logo"
                             loading="lazy"
                        >
                    </div>
                </div>
            </div>
        </div>
    </footer>


    <section class="debug-log">
    <h2 class="debug-log-heading">API Calls</h2>
    
</section>


        </div>
        
    
        <div id="data-ads"
            data-ads-beacon
            data-ads-network='8264'
            data-ads-targeting='{&#34;lang&#34;: &#34;en&#34;, &#34;beta&#34;: &#34;yes&#34;, &#34;ptype&#34;: &#34;tag_albums&#34;, &#34;tag&#34;: &#34;dreampop,shoegaze,indie,indiepop,electronic,ethereal,femalevocalists&#34;}'
            data-ads-zone='/tag/albums'
            data-ads-env='prod'
        ></div>
    

    </div>

    
        <div
            data-require="player/providers/spotify/spotify-provider"
            data-spotify-auth-modal="/player/modal/spotify"
            data-spotify-premium-modal="/player/modal/spotify-premium"
            data-spotify-inactive-modal="/player/modal/spotify-inactive"
            data-spotify-initial-device-modal="/player/modal/spotify-initial-device-detection"
        ></div>

        <div
            data-require="player/providers/youtube/youtube-provider"
            class="video-player"
            aria-hidden="true"
            id="youtube-video"
        >
            <div class="video-player-inner-wrap">
                <div class="video-player-embed js-player"></div>
                <button class="
                    video-player-close
                    js-close-player
                ">Close</button>
            </div>
        </div>
    


        
            
        
        
            
    
        
        
            <div id="intromercial" data-ad="intromercial" class="intromercial lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;intromercial&#34;, &#34;out_of_page&#34;: true}'></div>
        
        
    

            
    
        
        
            <div id="mobile_intromercial" data-ad="mobile_intromercial" class="mobile_intromercial lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_intromercial&#34;, &#34;is_mobile&#34;: true, &#34;out_of_page&#34;: true}'></div>
        
        
    

        
        
            
                
            
        

        <script class="js-modal-template" type="text/template">
            <div class="modal-dialog" role="dialog" aria-labelledby="modal-label">
                <div class="modal-content" data-require="stats/base-v3">
                    <div class="modal-actions">
                        
                        <button class="modal-dismiss js-close sr-only">Close</button>
                    </div>
                    <div js-modal-body class="modal-body">
                    </div>
                </div>
            </div>
        </script>

        <script>
            var immediateUseBidBarrelFunctions = ['auction', 'initialize', 'setTargeting', 'destroySlots', 'setConfig', 'on', 'setLazyLoad'];
            (function(a){
                var w=window,b='BidBarrel',q='queue';w[b]=w[b]?w[b]:{};w[b][q]=w[b][q]?w[b][q]:[];
                a.forEach(function(z){w[b][z]=w[b][z]||function(){var c=arguments;w[b][q].push(function(r){w[b][z].apply(w[b],c);r()})}});
            })(immediateUseBidBarrelFunctions);
        </script><script id="bb-lib" async src="https://at.cbsi.com/lib/dist/prod/bidbarrel-lastfm.min.js"></script>
        
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--adfree
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Browse ad-free</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageAdfree"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageAdfree"
            ></a>
        </section>
    </div></div>

            </script>
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--support
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Show your support</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageSupport"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageSupport"
            ></a>
        </section>
    </div></div>

            </script>
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--benefits
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Get exclusive benefits</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/pro"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageBenefits"
            >Find out more</a>
            <a
                href="/pro"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageBenefits"
            ></a>
        </section>
    </div></div>

            </script>
        

        <script>
            window.lfmDomReadyCallback && window.lfmDomReadyCallback();
            window.lfmDomReady = true;
        </script>
        
            <link
                href="/static/styles/build/app-6e442e70d7.a0a517233173.css"
                rel="preload"
                as="style"
                charset="utf-8"
                data-require="shim/rel-preload"
                media="(min-width: 768px)" 
            >
        
    </body>
</html>
  recorded_at: Wed, 22 Dec 2021 12:27:22 GMT
recorded_with: VCR 6.0.0
