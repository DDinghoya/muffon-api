---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/tag/dream+pop/artists?page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.0.1p64
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.last.fm
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/tag/dream+pop/artists?page=1
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - csrftoken=aUSaUSkBdJ07TZfVCjGaUUgwtbLuIrUhnPXoYhNl0MPxE546XN5qzYkrS8qYtrVp;
        expires=Thu, 09-Jun-2022 18:08:28 GMT; Max-Age=31449600; Path=/; Secure
      - lfmanon=1; Path=/
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjU5NGE5NDA1LTAzNjAtNGJjMS04NjI5LTk4ZTMyNzRkZjdlMSJ9:1lrP6S:0u82sAv7u55dzECKDpJbm_bQGsQ;
        Domain=.last.fm; expires=Fri, 10-Jun-2022 18:08:28 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 10 Jun 2021 18:08:28 GMT
      X-Served-By:
      - prod-lfm-web-6f6cb4b64-nm5b5, cache-hhn4057-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1623348508.560202,VS0,VE792
      Vary:
      - Accept-Encoding, Cookie
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 10 Jun 2021 18:08:26 GMT
recorded_with: VCR 6.0.0
