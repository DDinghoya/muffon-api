---
http_interactions:
- request:
    method: post
    uri: http://server9.kproxy.com/doproxy.jsp
    body:
      encoding: UTF-8
      string: page=https%3A%2F%2Fwww.last.fm%2Fmusic%2FWild%2BNothing%2F%2Bimages
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.2.2p53
      Content-Length:
      - '67'
      Content-Type:
      - application/x-www-form-urlencoded
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - server9.kproxy.com
  response:
    status:
      code: 200
      message: ''
    headers:
      Set-Cookie:
      - JSESSIONID=2C3F57506446DF338E3A2075075B542B; Path=/; HttpOnly
      Expires:
      - '0'
      Content-Type:
      - text/html;charset=ISO-8859-1
      Content-Length:
      - '1097'
      Date:
      - Sat, 06 May 2023 15:43:53 GMT
    body:
      encoding: UTF-8
      string: "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<html>\r\n\r\n<head>\r\n<meta
        name=\"KEYWORDS\" content=\"KProxy;KProxy.com;Anonimizer;Software;Advertise;Save
        money;increase traffic;Hosting;Anonymous navigation;Proxy;Web Proxy;Free;SSL;HTTPS;\">\r\n\r\n<meta
        http-equiv=\"refresh\" content=\"2;url=http://server9.kproxy.com/servlet/redirect.srv/srl/sbbkw/sjkl/p2/music/Wild+Nothing/+images\">\r\n\r\n<title>Loading.........</title>\r\n<link
        rel='stylesheet' href='estilos/ie4.css'>\r\n\r\n<meta http-equiv=\"X-UA-Compatible\"
        content=\"IE=edge,chrome=1\"> \r\n<meta name=\"viewport\" content=\"width=device-width,
        initial-scale=1.0\"> \r\n\r\n\r\n\r\n</head>\r\n\r\n\r\n\r\n<body>\r\n\r\n\r\n<div
        id=\"container\">\r\n\r\n\r\n  <div>\r\n  \t\r\n  \t<div id=\"logo\">\r\n
        \ \t\t<img src=\"images/kproxy_logo.png\"> \r\n  \t</div>\r\n  \t\r\n  \t<div
        id=\"surfbar\">\r\n  \t\r\n<center>\r\n\r\n\t<p class=titulo>Loading.........</p><br>\r\n\t<font
        class=text><br>Your request is loading now. Wait a moment, please.<br></font>\r\n\r\n\r\n</center>\r\n\r\n\t</div>\r\n
        \ </div>\r\n</div>\r\n\r\n\r\n</body>\r\n\r\n\r\n</html>\r\n\r\n\r\n\r\n\r\n\r\n"
  recorded_at: Sat, 06 May 2023 15:43:54 GMT
- request:
    method: get
    uri: http://server9.kproxy.com/servlet/redirect.srv/srl/sbbkw/sjkl/p2/music/Wild+Nothing/+images?page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.2.2p53
      Cookie:
      - KP_DAT2__=NkI1KDVtPSMjI3A1eHw5a1ZMXyw4bEpEOEtzLjdMeGQ3VSMjI1sqSTd4O240VFJbUiEgQ3w1KC9vcjgzKg==;
        lfmanon=0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - server9.kproxy.com
  response:
    status:
      code: 200
      message: ''
    headers:
      Server:
      - nginx
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/music/Wild+Nothing/+images?page=1
      Etag:
      - '"85b855d490fcc3b9fc6eda5957eeddb7"'
      X-Frame-Options:
      - SAMEORIGIN
      Content-Language:
      - en
      Set-Cookie:
      - X-UA-Country-Code=FR;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;max-age=60;same-site=strict;
      - X-UA-Device-Type=desktop;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;max-age=60;same-site=strict;
      - lfmanon=1;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;
      - not_first_visit=1;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6ImRhZDZkMWNhLTYyYTgtNGI1ZS1hNDA4LTIwMWRjZjNjNjEzOSJ9:1pvK4h:UJzhE0N14yI9uQ7Zd5Z4OqVrwJk;path=/servlet/redirect.srv/srl/sbbkw/;expires=Sun,
        05 May 2024 15:43:55 GMT;HttpOnly;Max-Age=31536000;SameSite=Lax;
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Sat, 06 May 2023 15:43:55 GMT
      X-Served-By:
      - prod-lfm-web-7bdf476c99-fbcm9, cache-lcy-eglc8600054-LCY
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1683387835.829764,VS0,VE267
      Vary:
      - Accept-Encoding, Accept-Language, Cookie
      X-Lfm-Upstream:
      - "/music/Wild+Nothing/+images?page=1"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Content-Type:
      - text/html;charset=utf-8
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 06 May 2023 15:43:55 GMT
recorded_with: VCR 6.1.0
