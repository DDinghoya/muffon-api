---
http_interactions:
- request:
    method: post
    uri: http://hidedoor.com/doproxy.jsp
    body:
      encoding: UTF-8
      string: page=https%3A%2F%2Fwww.last.fm%2Fmusic%2FWild%2BNothing%2F%2Bimages
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.2.0p0
      Content-Length:
      - '67'
      Content-Type:
      - application/x-www-form-urlencoded
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - hidedoor.com
  response:
    status:
      code: 200
      message: ''
    headers:
      Set-Cookie:
      - JSESSIONID=5D9C49ED776218D2BFA1A0990E0A4E2F; Path=/; HttpOnly
      Expires:
      - '0'
      Content-Type:
      - text/html;charset=ISO-8859-1
      Content-Length:
      - '1091'
      Date:
      - Fri, 10 Mar 2023 20:05:10 GMT
    body:
      encoding: UTF-8
      string: "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<html>\r\n\r\n<head>\r\n<meta
        name=\"KEYWORDS\" content=\"KProxy;KProxy.com;Anonimizer;Software;Advertise;Save
        money;increase traffic;Hosting;Anonymous navigation;Proxy;Web Proxy;Free;SSL;HTTPS;\">\r\n\r\n<meta
        http-equiv=\"refresh\" content=\"2;url=http://hidedoor.com/servlet/redirect.srv/srl/sbbkw/sjkl/p2/music/Wild+Nothing/+images\">\r\n\r\n<title>Loading.........</title>\r\n<link
        rel='stylesheet' href='estilos/ie4.css'>\r\n\r\n<meta http-equiv=\"X-UA-Compatible\"
        content=\"IE=edge,chrome=1\"> \r\n<meta name=\"viewport\" content=\"width=device-width,
        initial-scale=1.0\"> \r\n\r\n\r\n\r\n</head>\r\n\r\n\r\n\r\n<body>\r\n\r\n\r\n<div
        id=\"container\">\r\n\r\n\r\n  <div>\r\n  \t\r\n  \t<div id=\"logo\">\r\n
        \ \t\t<img src=\"images/kproxy_logo.png\"> \r\n  \t</div>\r\n  \t\r\n  \t<div
        id=\"surfbar\">\r\n  \t\r\n<center>\r\n\r\n\t<p class=titulo>Loading.........</p><br>\r\n\t<font
        class=text><br>Your request is loading now. Wait a moment, please.<br></font>\r\n\r\n\r\n</center>\r\n\r\n\t</div>\r\n
        \ </div>\r\n</div>\r\n\r\n\r\n</body>\r\n\r\n\r\n</html>\r\n\r\n\r\n\r\n\r\n\r\n"
  recorded_at: Fri, 10 Mar 2023 20:05:10 GMT
- request:
    method: get
    uri: http://hidedoor.com/servlet/redirect.srv/srl/sbbkw/sjkl/p2/music/Wild+Nothing/+images?page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.2.0p0
      Cookie:
      - KP_DAT2__=NkI1KDVtPSMjI3A1eHw5a1ZMXyw4bEpEOEtzLjdMeGQ3VSMjI1sqSTd4O240VFJbUiEgQ3w1KC9vcjgzKg==
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - hidedoor.com
  response:
    status:
      code: 200
      message: ''
    headers:
      Server:
      - nginx
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/music/Wild+Nothing/+images?page=1
      Etag:
      - '"6fa9d8477952603f31cc272defa58d88"'
      X-Frame-Options:
      - SAMEORIGIN
      Content-Language:
      - en
      Via:
      - 1.1 google, 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Fri, 10 Mar 2023 20:05:11 GMT
      Age:
      - '0'
      X-Served-By:
      - prod-lfm-web-657f66fc7-nvx8t, cache-yul12826-YUL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1678478711.736264,VS0,VE662
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '1'
      Set-Cookie:
      - X-UA-Country-Code=CA;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;max-age=60;same-site=strict;
      - X-UA-Device-Type=desktop;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;max-age=60;same-site=strict;
      - lfmanon=1;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;
      - not_first_visit=1;path=/servlet/redirect.srv/srl/sbbkw/sjkl/p2/;
      Vary:
      - Accept-Language, Accept-Encoding
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Content-Type:
      - text/html;charset=utf-8
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 10 Mar 2023 20:05:12 GMT
recorded_with: VCR 6.1.0
