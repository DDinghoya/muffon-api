---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/channels?id=UCGJdzJQ3R1BpahSvcFq23HA&key=<GOOGLE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.1.2p20
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.googleapis.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 17 Oct 2022 11:23:08 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjY2hhbm5lbExpc3RSZXNwb25zZSIsCiAgImV0YWciOiAiRTR1cUlhWEtLS21PbDg0cHp3aWNhODN1R1NrIiwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMSwKICAgICJyZXN1bHRzUGVyUGFnZSI6IDUKICB9LAogICJpdGVtcyI6IFsKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNjaGFubmVsIiwKICAgICAgImV0YWciOiAieFdCc0R3b3NCNjZGeTRlbWVHVktJV1dfSnhRIiwKICAgICAgImlkIjogIlVDR0pkekpRM1IxQnBhaFN2Y0ZxMjNIQSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJ0aXRsZSI6ICJUT1BTSUZZIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiTXVzaWMuIEFydGlzdHMuIFBsYXlsaXN0cy4g8J+OpyAg8J+nkVx1MjAwZPCfjqQgIPCfjqQgIPCflKVcbvCfkYkgVGFwIFNVQlNDUklCRSB0byBhY2Nlc3MgdGhlIHdvcmxkJ3MgYmVzdCBwbGF5bGlzdHMgbm93LlxuXG7wn5SlICBTZXJ2aW5nIHVwIHRoZSBiZXN0IHBsYXlsaXN0cyBpbiB0aGUgd29ybGQg8J+UpVxu8J+OpCAgRWQgU2hlZXJhbiwgRGF2aWQgR3VldHRhLCBCcnVubyBNYXJzLCBTaWxrIFNvbmljLCBDYXJkaSBCLCBEcmFrZSwgS2FueWUgV2VzdCwgSnVzdGluIEJpZWJlciwgVHJhdmlzIFNjb3R0LCBCYXp6aSwgUGFuaWMhIEF0IFRoZSBEaXNjbywgQW5uZS1NYXJpZSwgQ2hhcmxpIFhDWCwgQUI2SVgsIEJUUywgVGhlIFdlZWtuZCwgRHVhIExpcGEsIFNvZmlhIFJleWVzLCBKdXN0aW4gUXVpbGVzLCBCZWxsYSBQb2FyY2gsIFRheWxvciBTd2lmdCwgSmFjayBIYXJsb3csIExpbCBOYXMgWCwgTGl6em8sIFNhd2VldGllLCBEb2phIENhdCwgRGFuICsgU2hheSwgQmxha2UgU2hlbHRvbiwgT2xpdmlhIFJvZHJpZ28sIEJpbGxpZSBFaWxpc2gsIGFuZCBtYW55IG1vcmUhXG5cbvCflKUgUGxheWxpc3RzIGZvciBldmVyeXRoaW5nIHlvdSBsb3ZlICYgbG92ZSBkb2luZyAg8J+UpVxu8J+OpyBXb3Jrb3V0LCBwb3AsIGxhdGluLCBoaXAgaG9wLCByJmIsIHJhcCwgZGFuY2UsIGVsZWN0cm9uaWMsIGxvLWZpLCBob3VzZSBtdXNpYywgc2FkIHNvbmdzLCBhbHRlcm5hdGl2ZSwgcm9jaywgbWV0YWwsIGNsYXNzaWMgcm9jaywgYmx1ZXMsIGphenosIHN0dWR5LCByZWxheGF0aW9uLCB1cGxpZnRpbmcsIHNsZWVwIHNvdW5kcywgbW9vZCwgY2hpbGwsIGFtYmllbnQsIGstcG9wLCBjb3VudHJ5LCBmb2xrLCBpbmRpZSwgVGlrdG9rLCBJbnN0YWdyYW0sIFJvYm9sb3gsIENocmlzdG1hcywga2lkcywgZmFtaWx5LCBhY291c3RpYywgZGlubmVyLCBwb29sIHBhcnR5LCBicm9hZHdheSwgaG9tZXdvcmssIGJpcnRoZGF5LCBoYXBweSBob3VyLCBob2xpZGF5LCBVUyBUb3AgNDAsIFVLIFRvcCA1MCwgYW5kIG11Y2ggbXVjaCBtb3JlIVxuIiwKICAgICAgICAiY3VzdG9tVXJsIjogIkB0b3BzaWZ5IiwKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxNC0wMi0wNFQxNzozNjoyMloiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly95dDMuZ2dwaHQuY29tL3l0Yy9BTUxuWnU5Rm5Fd0s3aGFROGFEa1owZU9HclFkSFZBYm03cEdTNjh1dE1NUVNRPXM4OC1jLWstYzB4MDBmZmZmZmYtbm8tcmoiLAogICAgICAgICAgICAid2lkdGgiOiA4OCwKICAgICAgICAgICAgImhlaWdodCI6IDg4CiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL3l0My5nZ3BodC5jb20veXRjL0FNTG5adTlGbkV3SzdoYVE4YURrWjBlT0dyUWRIVkFibTdwR1M2OHV0TU1RU1E9czI0MC1jLWstYzB4MDBmZmZmZmYtbm8tcmoiLAogICAgICAgICAgICAid2lkdGgiOiAyNDAsCiAgICAgICAgICAgICJoZWlnaHQiOiAyNDAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL3l0My5nZ3BodC5jb20veXRjL0FNTG5adTlGbkV3SzdoYVE4YURrWjBlT0dyUWRIVkFibTdwR1M2OHV0TU1RU1E9czgwMC1jLWstYzB4MDBmZmZmZmYtbm8tcmoiLAogICAgICAgICAgICAid2lkdGgiOiA4MDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA4MDAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiVE9QU0lGWSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTXVzaWMuIEFydGlzdHMuIFBsYXlsaXN0cy4g8J+OpyAg8J+nkVx1MjAwZPCfjqQgIPCfjqQgIPCflKVcbvCfkYkgVGFwIFNVQlNDUklCRSB0byBhY2Nlc3MgdGhlIHdvcmxkJ3MgYmVzdCBwbGF5bGlzdHMgbm93LlxuXG7wn5SlICBTZXJ2aW5nIHVwIHRoZSBiZXN0IHBsYXlsaXN0cyBpbiB0aGUgd29ybGQg8J+UpVxu8J+OpCAgRWQgU2hlZXJhbiwgRGF2aWQgR3VldHRhLCBCcnVubyBNYXJzLCBTaWxrIFNvbmljLCBDYXJkaSBCLCBEcmFrZSwgS2FueWUgV2VzdCwgSnVzdGluIEJpZWJlciwgVHJhdmlzIFNjb3R0LCBCYXp6aSwgUGFuaWMhIEF0IFRoZSBEaXNjbywgQW5uZS1NYXJpZSwgQ2hhcmxpIFhDWCwgQUI2SVgsIEJUUywgVGhlIFdlZWtuZCwgRHVhIExpcGEsIFNvZmlhIFJleWVzLCBKdXN0aW4gUXVpbGVzLCBCZWxsYSBQb2FyY2gsIFRheWxvciBTd2lmdCwgSmFjayBIYXJsb3csIExpbCBOYXMgWCwgTGl6em8sIFNhd2VldGllLCBEb2phIENhdCwgRGFuICsgU2hheSwgQmxha2UgU2hlbHRvbiwgT2xpdmlhIFJvZHJpZ28sIEJpbGxpZSBFaWxpc2gsIGFuZCBtYW55IG1vcmUhXG5cbvCflKUgUGxheWxpc3RzIGZvciBldmVyeXRoaW5nIHlvdSBsb3ZlICYgbG92ZSBkb2luZyAg8J+UpVxu8J+OpyBXb3Jrb3V0LCBwb3AsIGxhdGluLCBoaXAgaG9wLCByJmIsIHJhcCwgZGFuY2UsIGVsZWN0cm9uaWMsIGxvLWZpLCBob3VzZSBtdXNpYywgc2FkIHNvbmdzLCBhbHRlcm5hdGl2ZSwgcm9jaywgbWV0YWwsIGNsYXNzaWMgcm9jaywgYmx1ZXMsIGphenosIHN0dWR5LCByZWxheGF0aW9uLCB1cGxpZnRpbmcsIHNsZWVwIHNvdW5kcywgbW9vZCwgY2hpbGwsIGFtYmllbnQsIGstcG9wLCBjb3VudHJ5LCBmb2xrLCBpbmRpZSwgVGlrdG9rLCBJbnN0YWdyYW0sIFJvYm9sb3gsIENocmlzdG1hcywga2lkcywgZmFtaWx5LCBhY291c3RpYywgZGlubmVyLCBwb29sIHBhcnR5LCBicm9hZHdheSwgaG9tZXdvcmssIGJpcnRoZGF5LCBoYXBweSBob3VyLCBob2xpZGF5LCBVUyBUb3AgNDAsIFVLIFRvcCA1MCwgYW5kIG11Y2ggbXVjaCBtb3JlIVxuIgogICAgICAgIH0sCiAgICAgICAgImNvdW50cnkiOiAiVVMiCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAicmVsYXRlZFBsYXlsaXN0cyI6IHsKICAgICAgICAgICJsaWtlcyI6ICIiLAogICAgICAgICAgInVwbG9hZHMiOiAiVVVHSmR6SlEzUjFCcGFoU3ZjRnEyM0hBIgogICAgICAgIH0KICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICI5NjYyNDQiLAogICAgICAgICJzdWJzY3JpYmVyQ291bnQiOiAiODQzMDAiLAogICAgICAgICJoaWRkZW5TdWJzY3JpYmVyQ291bnQiOiBmYWxzZSwKICAgICAgICAidmlkZW9Db3VudCI6ICIxNDUiCiAgICAgIH0KICAgIH0KICBdCn0K
  recorded_at: Mon, 17 Oct 2022 11:23:08 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlists?channelId=UCGJdzJQ3R1BpahSvcFq23HA&key=<GOOGLE_API_KEY>&maxResults=20&pageToken&part=id,snippet,contentDetails
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (linux x86_64) ruby/3.1.2p20
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.googleapis.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 17 Oct 2022 11:23:09 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 17 Oct 2022 11:23:09 GMT
recorded_with: VCR 6.1.0
